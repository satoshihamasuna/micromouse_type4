
mouse_type4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e208  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002590  0801e3d8  0801e3d8  0002e3d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020968  08020968  000401f0  2**0
                  CONTENTS
  4 .ARM          00000008  08020968  08020968  00030968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020970  08020970  000401f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020970  08020970  00030970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020974  08020974  00030974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08020978  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ba38  200001f0  08020b68  000401f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001bc28  08020b68  0004bc28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045a6c  00000000  00000000  00040220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005c7f  00000000  00000000  00085c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  0008b910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  0008d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029525  00000000  00000000  0008ea70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001de88  00000000  00000000  000b7f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dbdac  00000000  00000000  000d5e1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001b1bc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075f8  00000000  00000000  001b1c44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e3c0 	.word	0x0801e3c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	0801e3c0 	.word	0x0801e3c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <Battery_GetVoltage>:

#define BATTRY_REFERENCE	(3.25f)
#define BATTERY_LIMIT		(7.2f)


float Battery_GetVoltage(){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	return (BATTRY_REFERENCE * (47.0f+10.0f)/(10.0f) * (float)Sensor_GetBatteryValue())/4096.f;
 8000fcc:	f00c fd28 	bl	800da20 <Sensor_GetBatteryValue>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	ee07 3a90 	vmov	s15, r3
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000ff4 <Battery_GetVoltage+0x2c>
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000ff8 <Battery_GetVoltage+0x30>
 8000fe6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fea:	eef0 7a66 	vmov.f32	s15, s13
}
 8000fee:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	41943333 	.word	0x41943333
 8000ff8:	45800000 	.word	0x45800000

08000ffc <Battery_LimiterVoltage>:

void Battery_LimiterVoltage()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	volatile int	i;
	volatile float	battery_voltage_average;

	for( i = 0; i < 10; i++) {
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	e00f      	b.n	8001028 <Battery_LimiterVoltage+0x2c>
		HAL_Delay(5);
 8001008:	2005      	movs	r0, #5
 800100a:	f016 f8f7 	bl	80171fc <HAL_Delay>
		battery_voltage_average += Battery_GetVoltage();
 800100e:	f7ff ffdb 	bl	8000fc8 <Battery_GetVoltage>
 8001012:	eeb0 7a40 	vmov.f32	s14, s0
 8001016:	edd7 7a00 	vldr	s15, [r7]
 800101a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101e:	edc7 7a00 	vstr	s15, [r7]
	for( i = 0; i < 10; i++) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b09      	cmp	r3, #9
 800102c:	ddec      	ble.n	8001008 <Battery_LimiterVoltage+0xc>
	}
	battery_voltage_average /= 10;
 800102e:	ed97 7a00 	vldr	s14, [r7]
 8001032:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103a:	edc7 7a00 	vstr	s15, [r7]

	if( battery_voltage_average < BATTERY_LIMIT ) {
 800103e:	edd7 7a00 	vldr	s15, [r7]
 8001042:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001070 <Battery_LimiterVoltage+0x74>
 8001046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800104a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104e:	d400      	bmi.n	8001052 <Battery_LimiterVoltage+0x56>
			HAL_Delay(200);
			All_Off_LED();
			HAL_Delay(200);
		}
	} else;
}
 8001050:	e00a      	b.n	8001068 <Battery_LimiterVoltage+0x6c>
			All_On_LED();
 8001052:	f009 fc13 	bl	800a87c <All_On_LED>
			HAL_Delay(200);
 8001056:	20c8      	movs	r0, #200	; 0xc8
 8001058:	f016 f8d0 	bl	80171fc <HAL_Delay>
			All_Off_LED();
 800105c:	f009 fc3e 	bl	800a8dc <All_Off_LED>
			HAL_Delay(200);
 8001060:	20c8      	movs	r0, #200	; 0xc8
 8001062:	f016 f8cb 	bl	80171fc <HAL_Delay>
			All_On_LED();
 8001066:	e7f4      	b.n	8001052 <Battery_LimiterVoltage+0x56>
}
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40e66666 	.word	0x40e66666

08001074 <make_position>:
#include "dijkstra.h"
#include "queue.h"
#include "kalman_filter.h"

t_position make_position(uint8_t x,uint8_t y,t_direction dir)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	460b      	mov	r3, r1
 8001080:	71bb      	strb	r3, [r7, #6]
 8001082:	4613      	mov	r3, r2
 8001084:	717b      	strb	r3, [r7, #5]
	t_position pos;
	pos.x	= x;
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	723b      	strb	r3, [r7, #8]
	pos.y   = y;
 800108a:	79bb      	ldrb	r3, [r7, #6]
 800108c:	727b      	strb	r3, [r7, #9]
	pos.dir = dir;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	72bb      	strb	r3, [r7, #10]
	return pos;
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	f107 0208 	add.w	r2, r7, #8
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	4611      	mov	r1, r2
 800109e:	8019      	strh	r1, [r3, #0]
 80010a0:	3302      	adds	r3, #2
 80010a2:	0c12      	lsrs	r2, r2, #16
 80010a4:	701a      	strb	r2, [r3, #0]
 80010a6:	2300      	movs	r3, #0
 80010a8:	7b3a      	ldrb	r2, [r7, #12]
 80010aa:	f362 0307 	bfi	r3, r2, #0, #8
 80010ae:	7b7a      	ldrb	r2, [r7, #13]
 80010b0:	f362 230f 	bfi	r3, r2, #8, #8
 80010b4:	7bba      	ldrb	r2, [r7, #14]
 80010b6:	f362 4317 	bfi	r3, r2, #16, #8
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3714      	adds	r7, #20
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <set_node>:

t_node_el set_node(t_position pos,t_position parent,t_eight_dir mouse_dir,uint16_t time,t_run_pattern run_pattern,uint16_t acc_cnt,t_bool determine)
{
 80010c6:	b490      	push	{r4, r7}
 80010c8:	b088      	sub	sp, #32
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	70fb      	strb	r3, [r7, #3]
	t_node_el node;
	node.pos = pos;
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	f107 0208 	add.w	r2, r7, #8
 80010dc:	6812      	ldr	r2, [r2, #0]
 80010de:	4611      	mov	r1, r2
 80010e0:	8019      	strh	r1, [r3, #0]
 80010e2:	3302      	adds	r3, #2
 80010e4:	0c12      	lsrs	r2, r2, #16
 80010e6:	701a      	strb	r2, [r3, #0]
	node.parent = parent;
 80010e8:	f107 0313 	add.w	r3, r7, #19
 80010ec:	1d3a      	adds	r2, r7, #4
 80010ee:	8811      	ldrh	r1, [r2, #0]
 80010f0:	7892      	ldrb	r2, [r2, #2]
 80010f2:	8019      	strh	r1, [r3, #0]
 80010f4:	709a      	strb	r2, [r3, #2]
	node.mouse_dir = mouse_dir;
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	75bb      	strb	r3, [r7, #22]
	node.time = time;
 80010fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80010fc:	833b      	strh	r3, [r7, #24]
	node.run_pt = run_pattern;
 80010fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001102:	773b      	strb	r3, [r7, #28]
	node.acc_cnt = acc_cnt;
 8001104:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001106:	b2db      	uxtb	r3, r3
 8001108:	76bb      	strb	r3, [r7, #26]
	node.determine = determine;
 800110a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800110e:	76fb      	strb	r3, [r7, #27]
	return node;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	461c      	mov	r4, r3
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	cb07      	ldmia	r3!, {r0, r1, r2}
 800111a:	6020      	str	r0, [r4, #0]
 800111c:	6061      	str	r1, [r4, #4]
 800111e:	60a2      	str	r2, [r4, #8]
 8001120:	881b      	ldrh	r3, [r3, #0]
 8001122:	81a3      	strh	r3, [r4, #12]
}
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bc90      	pop	{r4, r7}
 800112c:	4770      	bx	lr
	...

08001130 <wall_check>:

t_bool wall_check(t_position pos,int mask)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
	t_bool is_wall = true;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
	switch(pos.dir){
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d860      	bhi.n	8001206 <wall_check+0xd6>
 8001144:	a201      	add	r2, pc, #4	; (adr r2, 800114c <wall_check+0x1c>)
 8001146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114a:	bf00      	nop
 800114c:	08001161 	.word	0x08001161
 8001150:	08001187 	.word	0x08001187
 8001154:	080011ad 	.word	0x080011ad
 8001158:	080011d3 	.word	0x080011d3
 800115c:	08001207 	.word	0x08001207
		case north:
			if((wall[pos.x][pos.y].north & mask) == NOWALL)
 8001160:	793b      	ldrb	r3, [r7, #4]
 8001162:	797a      	ldrb	r2, [r7, #5]
 8001164:	4611      	mov	r1, r2
 8001166:	4a2b      	ldr	r2, [pc, #172]	; (8001214 <wall_check+0xe4>)
 8001168:	015b      	lsls	r3, r3, #5
 800116a:	4413      	add	r3, r2
 800116c:	440b      	add	r3, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d13b      	bne.n	80011f8 <wall_check+0xc8>
			{
				is_wall = false;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8001184:	e038      	b.n	80011f8 <wall_check+0xc8>
		case east:
			if((wall[pos.x][pos.y].east & mask) == NOWALL)
 8001186:	793b      	ldrb	r3, [r7, #4]
 8001188:	797a      	ldrb	r2, [r7, #5]
 800118a:	4611      	mov	r1, r2
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <wall_check+0xe4>)
 800118e:	015b      	lsls	r3, r3, #5
 8001190:	4413      	add	r3, r2
 8001192:	440b      	add	r3, r1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800119a:	b2db      	uxtb	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	4013      	ands	r3, r2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12a      	bne.n	80011fc <wall_check+0xcc>
			{
				is_wall = false;
 80011a6:	2300      	movs	r3, #0
 80011a8:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80011aa:	e027      	b.n	80011fc <wall_check+0xcc>
		case south:
			if((wall[pos.x][pos.y].south & mask) == NOWALL)
 80011ac:	793b      	ldrb	r3, [r7, #4]
 80011ae:	797a      	ldrb	r2, [r7, #5]
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a18      	ldr	r2, [pc, #96]	; (8001214 <wall_check+0xe4>)
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	4413      	add	r3, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d119      	bne.n	8001200 <wall_check+0xd0>
			{
				is_wall = false;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80011d0:	e016      	b.n	8001200 <wall_check+0xd0>
		case west:
			if((wall[pos.x][pos.y].west & mask) == NOWALL)
 80011d2:	793b      	ldrb	r3, [r7, #4]
 80011d4:	797a      	ldrb	r2, [r7, #5]
 80011d6:	4611      	mov	r1, r2
 80011d8:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <wall_check+0xe4>)
 80011da:	015b      	lsls	r3, r3, #5
 80011dc:	4413      	add	r3, r2
 80011de:	440b      	add	r3, r1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d108      	bne.n	8001204 <wall_check+0xd4>
			{
				is_wall = false;
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
			}
			break;
 80011f6:	e005      	b.n	8001204 <wall_check+0xd4>
			break;
 80011f8:	bf00      	nop
 80011fa:	e004      	b.n	8001206 <wall_check+0xd6>
			break;
 80011fc:	bf00      	nop
 80011fe:	e002      	b.n	8001206 <wall_check+0xd6>
			break;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <wall_check+0xd6>
			break;
 8001204:	bf00      	nop
		case center:
			break;
	}
	return is_wall;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	2001b1e4 	.word	0x2001b1e4

08001218 <init_dijkstra_map>:

void init_dijkstra_map(){
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b097      	sub	sp, #92	; 0x5c
 800121c:	af04      	add	r7, sp, #16
	for(int i = 0;i < MAZE_SIZE_X;i++){
 800121e:	2300      	movs	r3, #0
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
 8001222:	e1ad      	b.n	8001580 <init_dijkstra_map+0x368>
		for(int j = 0;j < MAZE_SIZE_Y;j++){
 8001224:	2300      	movs	r3, #0
 8001226:	643b      	str	r3, [r7, #64]	; 0x40
 8001228:	e1a3      	b.n	8001572 <init_dijkstra_map+0x35a>
			for(int d = 0; d < 5;d++){
 800122a:	2300      	movs	r3, #0
 800122c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800122e:	e199      	b.n	8001564 <init_dijkstra_map+0x34c>
				switch(d){
 8001230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001232:	2b04      	cmp	r3, #4
 8001234:	f200 8193 	bhi.w	800155e <init_dijkstra_map+0x346>
 8001238:	a201      	add	r2, pc, #4	; (adr r2, 8001240 <init_dijkstra_map+0x28>)
 800123a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123e:	bf00      	nop
 8001240:	08001255 	.word	0x08001255
 8001244:	080012e5 	.word	0x080012e5
 8001248:	0800137f 	.word	0x0800137f
 800124c:	0800141f 	.word	0x0800141f
 8001250:	080014bf 	.word	0x080014bf
					case north:
						closed_list[i][j].north = set_node(make_position(i, j, north), make_position(i, j, north), Dir_None, UINT16_MAX-1, run_pt_none, 0, false);
 8001254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001256:	b2db      	uxtb	r3, r3
 8001258:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	2200      	movs	r2, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff08 	bl	8001074 <make_position>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	753a      	strb	r2, [r7, #20]
 800126a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800126e:	757a      	strb	r2, [r7, #21]
 8001270:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001274:	75bb      	strb	r3, [r7, #22]
 8001276:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001278:	b2db      	uxtb	r3, r3
 800127a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800127c:	b2d1      	uxtb	r1, r2
 800127e:	2200      	movs	r2, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fef7 	bl	8001074 <make_position>
 8001286:	4603      	mov	r3, r0
 8001288:	461a      	mov	r2, r3
 800128a:	763a      	strb	r2, [r7, #24]
 800128c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001290:	767a      	strb	r2, [r7, #25]
 8001292:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001296:	76bb      	strb	r3, [r7, #26]
 8001298:	49bd      	ldr	r1, [pc, #756]	; (8001590 <init_dijkstra_map+0x378>)
 800129a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800129c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129e:	2046      	movs	r0, #70	; 0x46
 80012a0:	fb00 f202 	mul.w	r2, r0, r2
 80012a4:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80012a8:	fb00 f303 	mul.w	r3, r0, r3
 80012ac:	4413      	add	r3, r2
 80012ae:	18cc      	adds	r4, r1, r3
 80012b0:	4638      	mov	r0, r7
 80012b2:	2300      	movs	r3, #0
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2313      	movs	r3, #19
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2308      	movs	r3, #8
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	6979      	ldr	r1, [r7, #20]
 80012ca:	f7ff fefc 	bl	80010c6 <set_node>
 80012ce:	4622      	mov	r2, r4
 80012d0:	463b      	mov	r3, r7
 80012d2:	681c      	ldr	r4, [r3, #0]
 80012d4:	6858      	ldr	r0, [r3, #4]
 80012d6:	6899      	ldr	r1, [r3, #8]
 80012d8:	6014      	str	r4, [r2, #0]
 80012da:	6050      	str	r0, [r2, #4]
 80012dc:	6091      	str	r1, [r2, #8]
 80012de:	899b      	ldrh	r3, [r3, #12]
 80012e0:	8193      	strh	r3, [r2, #12]
						break;
 80012e2:	e13c      	b.n	800155e <init_dijkstra_map+0x346>
					case east:
						closed_list[i][j].east = set_node(make_position(i, j, east), make_position(i, j, east), Dir_None, UINT16_MAX-1, run_pt_none, 0, false);
 80012e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80012ea:	b2d1      	uxtb	r1, r2
 80012ec:	2201      	movs	r2, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fec0 	bl	8001074 <make_position>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	773a      	strb	r2, [r7, #28]
 80012fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80012fe:	777a      	strb	r2, [r7, #29]
 8001300:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001304:	77bb      	strb	r3, [r7, #30]
 8001306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001308:	b2db      	uxtb	r3, r3
 800130a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800130c:	b2d1      	uxtb	r1, r2
 800130e:	2201      	movs	r2, #1
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff feaf 	bl	8001074 <make_position>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	f887 2020 	strb.w	r2, [r7, #32]
 800131e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001322:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001326:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800132a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800132e:	4998      	ldr	r1, [pc, #608]	; (8001590 <init_dijkstra_map+0x378>)
 8001330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001334:	2046      	movs	r0, #70	; 0x46
 8001336:	fb00 f202 	mul.w	r2, r0, r2
 800133a:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800133e:	fb00 f303 	mul.w	r3, r0, r3
 8001342:	4413      	add	r3, r2
 8001344:	440b      	add	r3, r1
 8001346:	f103 0408 	add.w	r4, r3, #8
 800134a:	4638      	mov	r0, r7
 800134c:	2300      	movs	r3, #0
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	2300      	movs	r3, #0
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2313      	movs	r3, #19
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2308      	movs	r3, #8
 8001360:	6a3a      	ldr	r2, [r7, #32]
 8001362:	69f9      	ldr	r1, [r7, #28]
 8001364:	f7ff feaf 	bl	80010c6 <set_node>
 8001368:	1da3      	adds	r3, r4, #6
 800136a:	463a      	mov	r2, r7
 800136c:	6814      	ldr	r4, [r2, #0]
 800136e:	6850      	ldr	r0, [r2, #4]
 8001370:	6891      	ldr	r1, [r2, #8]
 8001372:	601c      	str	r4, [r3, #0]
 8001374:	6058      	str	r0, [r3, #4]
 8001376:	6099      	str	r1, [r3, #8]
 8001378:	8992      	ldrh	r2, [r2, #12]
 800137a:	819a      	strh	r2, [r3, #12]
						break;
 800137c:	e0ef      	b.n	800155e <init_dijkstra_map+0x346>
					case south:
						closed_list[i][j].south = set_node(make_position(i, j, south), make_position(i, j, south), Dir_None, UINT16_MAX-1, run_pt_none, 0, false);
 800137e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001380:	b2db      	uxtb	r3, r3
 8001382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001384:	b2d1      	uxtb	r1, r2
 8001386:	2202      	movs	r2, #2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe73 	bl	8001074 <make_position>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001396:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800139a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800139e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80013a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80013a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013ac:	b2d1      	uxtb	r1, r2
 80013ae:	2202      	movs	r2, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe5f 	bl	8001074 <make_position>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 80013be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80013c2:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 80013c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80013ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80013ce:	4970      	ldr	r1, [pc, #448]	; (8001590 <init_dijkstra_map+0x378>)
 80013d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d4:	2046      	movs	r0, #70	; 0x46
 80013d6:	fb00 f202 	mul.w	r2, r0, r2
 80013da:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80013de:	fb00 f303 	mul.w	r3, r0, r3
 80013e2:	4413      	add	r3, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	f103 0418 	add.w	r4, r3, #24
 80013ea:	4638      	mov	r0, r7
 80013ec:	2300      	movs	r3, #0
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	2300      	movs	r3, #0
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2313      	movs	r3, #19
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2308      	movs	r3, #8
 8001400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001404:	f7ff fe5f 	bl	80010c6 <set_node>
 8001408:	1d23      	adds	r3, r4, #4
 800140a:	463a      	mov	r2, r7
 800140c:	6814      	ldr	r4, [r2, #0]
 800140e:	6850      	ldr	r0, [r2, #4]
 8001410:	6891      	ldr	r1, [r2, #8]
 8001412:	601c      	str	r4, [r3, #0]
 8001414:	6058      	str	r0, [r3, #4]
 8001416:	6099      	str	r1, [r3, #8]
 8001418:	8992      	ldrh	r2, [r2, #12]
 800141a:	819a      	strh	r2, [r3, #12]
						break;
 800141c:	e09f      	b.n	800155e <init_dijkstra_map+0x346>
					case west:
						closed_list[i][j].west = set_node(make_position(i, j, west), make_position(i, j, west), Dir_None, UINT16_MAX-1, run_pt_none, 0, false);
 800141e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001420:	b2db      	uxtb	r3, r3
 8001422:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001424:	b2d1      	uxtb	r1, r2
 8001426:	2203      	movs	r2, #3
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe23 	bl	8001074 <make_position>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8001436:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800143a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800143e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001442:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001448:	b2db      	uxtb	r3, r3
 800144a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800144c:	b2d1      	uxtb	r1, r2
 800144e:	2203      	movs	r2, #3
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe0f 	bl	8001074 <make_position>
 8001456:	4603      	mov	r3, r0
 8001458:	461a      	mov	r2, r3
 800145a:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 800145e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001462:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8001466:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800146a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800146e:	4948      	ldr	r1, [pc, #288]	; (8001590 <init_dijkstra_map+0x378>)
 8001470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001474:	2046      	movs	r0, #70	; 0x46
 8001476:	fb00 f202 	mul.w	r2, r0, r2
 800147a:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800147e:	fb00 f303 	mul.w	r3, r0, r3
 8001482:	4413      	add	r3, r2
 8001484:	440b      	add	r3, r1
 8001486:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800148a:	4638      	mov	r0, r7
 800148c:	2300      	movs	r3, #0
 800148e:	9303      	str	r3, [sp, #12]
 8001490:	2300      	movs	r3, #0
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2313      	movs	r3, #19
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	2308      	movs	r3, #8
 80014a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014a4:	f7ff fe0f 	bl	80010c6 <set_node>
 80014a8:	1ca3      	adds	r3, r4, #2
 80014aa:	463a      	mov	r2, r7
 80014ac:	6814      	ldr	r4, [r2, #0]
 80014ae:	6850      	ldr	r0, [r2, #4]
 80014b0:	6891      	ldr	r1, [r2, #8]
 80014b2:	601c      	str	r4, [r3, #0]
 80014b4:	6058      	str	r0, [r3, #4]
 80014b6:	6099      	str	r1, [r3, #8]
 80014b8:	8992      	ldrh	r2, [r2, #12]
 80014ba:	819a      	strh	r2, [r3, #12]
						break;
 80014bc:	e04f      	b.n	800155e <init_dijkstra_map+0x346>
					case center:
						closed_list[i][j].center = set_node(make_position(i, j, center), make_position(i, j, center), Dir_None, UINT16_MAX-1, run_pt_none, 0, false);
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014c4:	b2d1      	uxtb	r1, r2
 80014c6:	2204      	movs	r2, #4
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fdd3 	bl	8001074 <make_position>
 80014ce:	4603      	mov	r3, r0
 80014d0:	461a      	mov	r2, r3
 80014d2:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 80014d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80014da:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 80014de:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80014e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80014e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014ec:	b2d1      	uxtb	r1, r2
 80014ee:	2204      	movs	r2, #4
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fdbf 	bl	8001074 <make_position>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 80014fe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001502:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8001506:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800150a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800150e:	4920      	ldr	r1, [pc, #128]	; (8001590 <init_dijkstra_map+0x378>)
 8001510:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001514:	2046      	movs	r0, #70	; 0x46
 8001516:	fb00 f202 	mul.w	r2, r0, r2
 800151a:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800151e:	fb00 f303 	mul.w	r3, r0, r3
 8001522:	4413      	add	r3, r2
 8001524:	440b      	add	r3, r1
 8001526:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800152a:	4638      	mov	r0, r7
 800152c:	2300      	movs	r3, #0
 800152e:	9303      	str	r3, [sp, #12]
 8001530:	2300      	movs	r3, #0
 8001532:	9302      	str	r3, [sp, #8]
 8001534:	2313      	movs	r3, #19
 8001536:	9301      	str	r3, [sp, #4]
 8001538:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2308      	movs	r3, #8
 8001540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001542:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001544:	f7ff fdbf 	bl	80010c6 <set_node>
 8001548:	4622      	mov	r2, r4
 800154a:	463b      	mov	r3, r7
 800154c:	681c      	ldr	r4, [r3, #0]
 800154e:	6858      	ldr	r0, [r3, #4]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	6014      	str	r4, [r2, #0]
 8001554:	6050      	str	r0, [r2, #4]
 8001556:	6091      	str	r1, [r2, #8]
 8001558:	899b      	ldrh	r3, [r3, #12]
 800155a:	8193      	strh	r3, [r2, #12]
						break;
 800155c:	bf00      	nop
			for(int d = 0; d < 5;d++){
 800155e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001560:	3301      	adds	r3, #1
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001566:	2b04      	cmp	r3, #4
 8001568:	f77f ae62 	ble.w	8001230 <init_dijkstra_map+0x18>
		for(int j = 0;j < MAZE_SIZE_Y;j++){
 800156c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800156e:	3301      	adds	r3, #1
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
 8001572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001574:	2b1f      	cmp	r3, #31
 8001576:	f77f ae58 	ble.w	800122a <init_dijkstra_map+0x12>
	for(int i = 0;i < MAZE_SIZE_X;i++){
 800157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800157c:	3301      	adds	r3, #1
 800157e:	647b      	str	r3, [r7, #68]	; 0x44
 8001580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001582:	2b1f      	cmp	r3, #31
 8001584:	f77f ae4e 	ble.w	8001224 <init_dijkstra_map+0xc>
				}
			}
		}
	}
}
 8001588:	bf00      	nop
 800158a:	374c      	adds	r7, #76	; 0x4c
 800158c:	46bd      	mov	sp, r7
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	200099a4 	.word	0x200099a4

08001594 <start_node_setup>:

void start_node_setup(t_position pos,t_eight_dir mouse_dir){
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b093      	sub	sp, #76	; 0x4c
 8001598:	af04      	add	r7, sp, #16
 800159a:	6178      	str	r0, [r7, #20]
 800159c:	460b      	mov	r3, r1
 800159e:	74fb      	strb	r3, [r7, #19]
	switch(pos.dir){
 80015a0:	7dbb      	ldrb	r3, [r7, #22]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	f200 8237 	bhi.w	8001a16 <start_node_setup+0x482>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <start_node_setup+0x1c>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	080016b5 	.word	0x080016b5
 80015b8:	080017b5 	.word	0x080017b5
 80015bc:	080018b5 	.word	0x080018b5
 80015c0:	080019b5 	.word	0x080019b5
		case north:
			closed_list[pos.x][pos.y].north 	= set_node(pos,pos,mouse_dir,0,run_pt_none,0,false);
 80015c4:	7d3b      	ldrb	r3, [r7, #20]
 80015c6:	4618      	mov	r0, r3
 80015c8:	7d7b      	ldrb	r3, [r7, #21]
 80015ca:	461a      	mov	r2, r3
 80015cc:	49b8      	ldr	r1, [pc, #736]	; (80018b0 <start_node_setup+0x31c>)
 80015ce:	2346      	movs	r3, #70	; 0x46
 80015d0:	fb03 f202 	mul.w	r2, r3, r2
 80015d4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80015d8:	fb03 f300 	mul.w	r3, r3, r0
 80015dc:	4413      	add	r3, r2
 80015de:	18cc      	adds	r4, r1, r3
 80015e0:	4638      	mov	r0, r7
 80015e2:	7cfa      	ldrb	r2, [r7, #19]
 80015e4:	2300      	movs	r3, #0
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	2300      	movs	r3, #0
 80015ea:	9302      	str	r3, [sp, #8]
 80015ec:	2313      	movs	r3, #19
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	6979      	ldr	r1, [r7, #20]
 80015fa:	f7ff fd64 	bl	80010c6 <set_node>
 80015fe:	4622      	mov	r2, r4
 8001600:	463b      	mov	r3, r7
 8001602:	681c      	ldr	r4, [r3, #0]
 8001604:	6858      	ldr	r0, [r3, #4]
 8001606:	6899      	ldr	r1, [r3, #8]
 8001608:	6014      	str	r4, [r2, #0]
 800160a:	6050      	str	r0, [r2, #4]
 800160c:	6091      	str	r1, [r2, #8]
 800160e:	899b      	ldrh	r3, [r3, #12]
 8001610:	8193      	strh	r3, [r2, #12]
			if(pos.y + 1 < MAZE_SIZE_Y){
 8001612:	7d7b      	ldrb	r3, [r7, #21]
 8001614:	3301      	adds	r3, #1
 8001616:	2b1f      	cmp	r3, #31
 8001618:	f300 81f6 	bgt.w	8001a08 <start_node_setup+0x474>
				closed_list[pos.x][pos.y + 1].south = set_node(make_position(pos.x,pos.y+1,south),make_position(pos.x,pos.y+1,south),mouse_dir,0,run_pt_none,0,false);
 800161c:	7d38      	ldrb	r0, [r7, #20]
 800161e:	7d7b      	ldrb	r3, [r7, #21]
 8001620:	3301      	adds	r3, #1
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2202      	movs	r2, #2
 8001626:	4619      	mov	r1, r3
 8001628:	f7ff fd24 	bl	8001074 <make_position>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	763a      	strb	r2, [r7, #24]
 8001632:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001636:	767a      	strb	r2, [r7, #25]
 8001638:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800163c:	76bb      	strb	r3, [r7, #26]
 800163e:	7d38      	ldrb	r0, [r7, #20]
 8001640:	7d7b      	ldrb	r3, [r7, #21]
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2202      	movs	r2, #2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fd13 	bl	8001074 <make_position>
 800164e:	4603      	mov	r3, r0
 8001650:	461a      	mov	r2, r3
 8001652:	773a      	strb	r2, [r7, #28]
 8001654:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001658:	777a      	strb	r2, [r7, #29]
 800165a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800165e:	77bb      	strb	r3, [r7, #30]
 8001660:	7d3b      	ldrb	r3, [r7, #20]
 8001662:	4618      	mov	r0, r3
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	3301      	adds	r3, #1
 8001668:	4991      	ldr	r1, [pc, #580]	; (80018b0 <start_node_setup+0x31c>)
 800166a:	2246      	movs	r2, #70	; 0x46
 800166c:	fb02 f203 	mul.w	r2, r2, r3
 8001670:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001674:	fb03 f300 	mul.w	r3, r3, r0
 8001678:	4413      	add	r3, r2
 800167a:	440b      	add	r3, r1
 800167c:	f103 0418 	add.w	r4, r3, #24
 8001680:	4638      	mov	r0, r7
 8001682:	7cfa      	ldrb	r2, [r7, #19]
 8001684:	2300      	movs	r3, #0
 8001686:	9303      	str	r3, [sp, #12]
 8001688:	2300      	movs	r3, #0
 800168a:	9302      	str	r3, [sp, #8]
 800168c:	2313      	movs	r3, #19
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2300      	movs	r3, #0
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4613      	mov	r3, r2
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	69b9      	ldr	r1, [r7, #24]
 800169a:	f7ff fd14 	bl	80010c6 <set_node>
 800169e:	1d23      	adds	r3, r4, #4
 80016a0:	463a      	mov	r2, r7
 80016a2:	6814      	ldr	r4, [r2, #0]
 80016a4:	6850      	ldr	r0, [r2, #4]
 80016a6:	6891      	ldr	r1, [r2, #8]
 80016a8:	601c      	str	r4, [r3, #0]
 80016aa:	6058      	str	r0, [r3, #4]
 80016ac:	6099      	str	r1, [r3, #8]
 80016ae:	8992      	ldrh	r2, [r2, #12]
 80016b0:	819a      	strh	r2, [r3, #12]
			}
			break;
 80016b2:	e1a9      	b.n	8001a08 <start_node_setup+0x474>
		case east:
			closed_list[pos.x][pos.y].east  	= set_node(pos,pos,mouse_dir,0,run_pt_none,0,false);
 80016b4:	7d3b      	ldrb	r3, [r7, #20]
 80016b6:	4618      	mov	r0, r3
 80016b8:	7d7b      	ldrb	r3, [r7, #21]
 80016ba:	461a      	mov	r2, r3
 80016bc:	497c      	ldr	r1, [pc, #496]	; (80018b0 <start_node_setup+0x31c>)
 80016be:	2346      	movs	r3, #70	; 0x46
 80016c0:	fb03 f202 	mul.w	r2, r3, r2
 80016c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80016c8:	fb03 f300 	mul.w	r3, r3, r0
 80016cc:	4413      	add	r3, r2
 80016ce:	440b      	add	r3, r1
 80016d0:	f103 0408 	add.w	r4, r3, #8
 80016d4:	4638      	mov	r0, r7
 80016d6:	7cfa      	ldrb	r2, [r7, #19]
 80016d8:	2300      	movs	r3, #0
 80016da:	9303      	str	r3, [sp, #12]
 80016dc:	2300      	movs	r3, #0
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2313      	movs	r3, #19
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2300      	movs	r3, #0
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	6979      	ldr	r1, [r7, #20]
 80016ee:	f7ff fcea 	bl	80010c6 <set_node>
 80016f2:	1da3      	adds	r3, r4, #6
 80016f4:	463a      	mov	r2, r7
 80016f6:	6814      	ldr	r4, [r2, #0]
 80016f8:	6850      	ldr	r0, [r2, #4]
 80016fa:	6891      	ldr	r1, [r2, #8]
 80016fc:	601c      	str	r4, [r3, #0]
 80016fe:	6058      	str	r0, [r3, #4]
 8001700:	6099      	str	r1, [r3, #8]
 8001702:	8992      	ldrh	r2, [r2, #12]
 8001704:	819a      	strh	r2, [r3, #12]
			if(pos.x + 1 < MAZE_SIZE_X){
 8001706:	7d3b      	ldrb	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	2b1f      	cmp	r3, #31
 800170c:	f300 817e 	bgt.w	8001a0c <start_node_setup+0x478>
				closed_list[pos.x + 1][pos.y].west = set_node(make_position(pos.x+1,pos.y,west),make_position(pos.x+1,pos.y,west),mouse_dir,0,run_pt_none,0,false);
 8001710:	7d3b      	ldrb	r3, [r7, #20]
 8001712:	3301      	adds	r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	7d79      	ldrb	r1, [r7, #21]
 8001718:	2203      	movs	r2, #3
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fcaa 	bl	8001074 <make_position>
 8001720:	4603      	mov	r3, r0
 8001722:	461a      	mov	r2, r3
 8001724:	f887 2020 	strb.w	r2, [r7, #32]
 8001728:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800172c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001730:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001738:	7d3b      	ldrb	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	b2db      	uxtb	r3, r3
 800173e:	7d79      	ldrb	r1, [r7, #21]
 8001740:	2203      	movs	r2, #3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fc96 	bl	8001074 <make_position>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001750:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001754:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8001758:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800175c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001760:	7d3b      	ldrb	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	7d7a      	ldrb	r2, [r7, #21]
 8001766:	4610      	mov	r0, r2
 8001768:	4951      	ldr	r1, [pc, #324]	; (80018b0 <start_node_setup+0x31c>)
 800176a:	2246      	movs	r2, #70	; 0x46
 800176c:	fb02 f200 	mul.w	r2, r2, r0
 8001770:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001774:	fb00 f303 	mul.w	r3, r0, r3
 8001778:	4413      	add	r3, r2
 800177a:	440b      	add	r3, r1
 800177c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001780:	4638      	mov	r0, r7
 8001782:	7cfa      	ldrb	r2, [r7, #19]
 8001784:	2300      	movs	r3, #0
 8001786:	9303      	str	r3, [sp, #12]
 8001788:	2300      	movs	r3, #0
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	2313      	movs	r3, #19
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2300      	movs	r3, #0
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001798:	6a39      	ldr	r1, [r7, #32]
 800179a:	f7ff fc94 	bl	80010c6 <set_node>
 800179e:	1ca3      	adds	r3, r4, #2
 80017a0:	463a      	mov	r2, r7
 80017a2:	6814      	ldr	r4, [r2, #0]
 80017a4:	6850      	ldr	r0, [r2, #4]
 80017a6:	6891      	ldr	r1, [r2, #8]
 80017a8:	601c      	str	r4, [r3, #0]
 80017aa:	6058      	str	r0, [r3, #4]
 80017ac:	6099      	str	r1, [r3, #8]
 80017ae:	8992      	ldrh	r2, [r2, #12]
 80017b0:	819a      	strh	r2, [r3, #12]
			}
			break;
 80017b2:	e12b      	b.n	8001a0c <start_node_setup+0x478>
		case south:
			closed_list[pos.x][pos.y].south 	= set_node(pos,pos,mouse_dir,0,run_pt_none,0,false);
 80017b4:	7d3b      	ldrb	r3, [r7, #20]
 80017b6:	4618      	mov	r0, r3
 80017b8:	7d7b      	ldrb	r3, [r7, #21]
 80017ba:	461a      	mov	r2, r3
 80017bc:	493c      	ldr	r1, [pc, #240]	; (80018b0 <start_node_setup+0x31c>)
 80017be:	2346      	movs	r3, #70	; 0x46
 80017c0:	fb03 f202 	mul.w	r2, r3, r2
 80017c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80017c8:	fb03 f300 	mul.w	r3, r3, r0
 80017cc:	4413      	add	r3, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f103 0418 	add.w	r4, r3, #24
 80017d4:	4638      	mov	r0, r7
 80017d6:	7cfa      	ldrb	r2, [r7, #19]
 80017d8:	2300      	movs	r3, #0
 80017da:	9303      	str	r3, [sp, #12]
 80017dc:	2300      	movs	r3, #0
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	2313      	movs	r3, #19
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	2300      	movs	r3, #0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	6979      	ldr	r1, [r7, #20]
 80017ee:	f7ff fc6a 	bl	80010c6 <set_node>
 80017f2:	1d23      	adds	r3, r4, #4
 80017f4:	463a      	mov	r2, r7
 80017f6:	6814      	ldr	r4, [r2, #0]
 80017f8:	6850      	ldr	r0, [r2, #4]
 80017fa:	6891      	ldr	r1, [r2, #8]
 80017fc:	601c      	str	r4, [r3, #0]
 80017fe:	6058      	str	r0, [r3, #4]
 8001800:	6099      	str	r1, [r3, #8]
 8001802:	8992      	ldrh	r2, [r2, #12]
 8001804:	819a      	strh	r2, [r3, #12]
			if(pos.y - 1 >= 0){
 8001806:	7d7b      	ldrb	r3, [r7, #21]
 8001808:	3b01      	subs	r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f2c0 8100 	blt.w	8001a10 <start_node_setup+0x47c>
				closed_list[pos.x][pos.y - 1].north = set_node(make_position(pos.x,pos.y-1,north),make_position(pos.x,pos.y-1,north),mouse_dir,0,run_pt_none,0,false);
 8001810:	7d38      	ldrb	r0, [r7, #20]
 8001812:	7d7b      	ldrb	r3, [r7, #21]
 8001814:	3b01      	subs	r3, #1
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2200      	movs	r2, #0
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff fc2a 	bl	8001074 <make_position>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8001828:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800182c:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8001830:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001834:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001838:	7d38      	ldrb	r0, [r7, #20]
 800183a:	7d7b      	ldrb	r3, [r7, #21]
 800183c:	3b01      	subs	r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	f7ff fc16 	bl	8001074 <make_position>
 8001848:	4603      	mov	r3, r0
 800184a:	461a      	mov	r2, r3
 800184c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8001850:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001854:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8001858:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800185c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001860:	7d3b      	ldrb	r3, [r7, #20]
 8001862:	4618      	mov	r0, r3
 8001864:	7d7b      	ldrb	r3, [r7, #21]
 8001866:	3b01      	subs	r3, #1
 8001868:	4911      	ldr	r1, [pc, #68]	; (80018b0 <start_node_setup+0x31c>)
 800186a:	2246      	movs	r2, #70	; 0x46
 800186c:	fb02 f203 	mul.w	r2, r2, r3
 8001870:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001874:	fb03 f300 	mul.w	r3, r3, r0
 8001878:	4413      	add	r3, r2
 800187a:	18cc      	adds	r4, r1, r3
 800187c:	4638      	mov	r0, r7
 800187e:	7cfa      	ldrb	r2, [r7, #19]
 8001880:	2300      	movs	r3, #0
 8001882:	9303      	str	r3, [sp, #12]
 8001884:	2300      	movs	r3, #0
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2313      	movs	r3, #19
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4613      	mov	r3, r2
 8001892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001896:	f7ff fc16 	bl	80010c6 <set_node>
 800189a:	4622      	mov	r2, r4
 800189c:	463b      	mov	r3, r7
 800189e:	681c      	ldr	r4, [r3, #0]
 80018a0:	6858      	ldr	r0, [r3, #4]
 80018a2:	6899      	ldr	r1, [r3, #8]
 80018a4:	6014      	str	r4, [r2, #0]
 80018a6:	6050      	str	r0, [r2, #4]
 80018a8:	6091      	str	r1, [r2, #8]
 80018aa:	899b      	ldrh	r3, [r3, #12]
 80018ac:	8193      	strh	r3, [r2, #12]
			}
			break;
 80018ae:	e0af      	b.n	8001a10 <start_node_setup+0x47c>
 80018b0:	200099a4 	.word	0x200099a4
		case west:
			closed_list[pos.x][pos.y].west  	= set_node(pos,pos,mouse_dir,0,run_pt_none,0,false);
 80018b4:	7d3b      	ldrb	r3, [r7, #20]
 80018b6:	4618      	mov	r0, r3
 80018b8:	7d7b      	ldrb	r3, [r7, #21]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4958      	ldr	r1, [pc, #352]	; (8001a20 <start_node_setup+0x48c>)
 80018be:	2346      	movs	r3, #70	; 0x46
 80018c0:	fb03 f202 	mul.w	r2, r3, r2
 80018c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80018c8:	fb03 f300 	mul.w	r3, r3, r0
 80018cc:	4413      	add	r3, r2
 80018ce:	440b      	add	r3, r1
 80018d0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80018d4:	4638      	mov	r0, r7
 80018d6:	7cfa      	ldrb	r2, [r7, #19]
 80018d8:	2300      	movs	r3, #0
 80018da:	9303      	str	r3, [sp, #12]
 80018dc:	2300      	movs	r3, #0
 80018de:	9302      	str	r3, [sp, #8]
 80018e0:	2313      	movs	r3, #19
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2300      	movs	r3, #0
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4613      	mov	r3, r2
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	6979      	ldr	r1, [r7, #20]
 80018ee:	f7ff fbea 	bl	80010c6 <set_node>
 80018f2:	1ca3      	adds	r3, r4, #2
 80018f4:	463a      	mov	r2, r7
 80018f6:	6814      	ldr	r4, [r2, #0]
 80018f8:	6850      	ldr	r0, [r2, #4]
 80018fa:	6891      	ldr	r1, [r2, #8]
 80018fc:	601c      	str	r4, [r3, #0]
 80018fe:	6058      	str	r0, [r3, #4]
 8001900:	6099      	str	r1, [r3, #8]
 8001902:	8992      	ldrh	r2, [r2, #12]
 8001904:	819a      	strh	r2, [r3, #12]
			if(pos.x - 1 >= 0){
 8001906:	7d3b      	ldrb	r3, [r7, #20]
 8001908:	3b01      	subs	r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	f2c0 8082 	blt.w	8001a14 <start_node_setup+0x480>
				closed_list[pos.x - 1][pos.y].east = set_node(make_position(pos.x-1,pos.y,east),make_position(pos.x-1,pos.y,east),mouse_dir,0,run_pt_none,0,false);
 8001910:	7d3b      	ldrb	r3, [r7, #20]
 8001912:	3b01      	subs	r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	7d79      	ldrb	r1, [r7, #21]
 8001918:	2201      	movs	r2, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fbaa 	bl	8001074 <make_position>
 8001920:	4603      	mov	r3, r0
 8001922:	461a      	mov	r2, r3
 8001924:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8001928:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800192c:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8001930:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001934:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8001938:	7d3b      	ldrb	r3, [r7, #20]
 800193a:	3b01      	subs	r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	7d79      	ldrb	r1, [r7, #21]
 8001940:	2201      	movs	r2, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fb96 	bl	8001074 <make_position>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8001950:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001954:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8001958:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800195c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001960:	7d3b      	ldrb	r3, [r7, #20]
 8001962:	3b01      	subs	r3, #1
 8001964:	7d7a      	ldrb	r2, [r7, #21]
 8001966:	4610      	mov	r0, r2
 8001968:	492d      	ldr	r1, [pc, #180]	; (8001a20 <start_node_setup+0x48c>)
 800196a:	2246      	movs	r2, #70	; 0x46
 800196c:	fb02 f200 	mul.w	r2, r2, r0
 8001970:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001974:	fb00 f303 	mul.w	r3, r0, r3
 8001978:	4413      	add	r3, r2
 800197a:	440b      	add	r3, r1
 800197c:	f103 0408 	add.w	r4, r3, #8
 8001980:	4638      	mov	r0, r7
 8001982:	7cfa      	ldrb	r2, [r7, #19]
 8001984:	2300      	movs	r3, #0
 8001986:	9303      	str	r3, [sp, #12]
 8001988:	2300      	movs	r3, #0
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	2313      	movs	r3, #19
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	2300      	movs	r3, #0
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4613      	mov	r3, r2
 8001996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800199a:	f7ff fb94 	bl	80010c6 <set_node>
 800199e:	1da3      	adds	r3, r4, #6
 80019a0:	463a      	mov	r2, r7
 80019a2:	6814      	ldr	r4, [r2, #0]
 80019a4:	6850      	ldr	r0, [r2, #4]
 80019a6:	6891      	ldr	r1, [r2, #8]
 80019a8:	601c      	str	r4, [r3, #0]
 80019aa:	6058      	str	r0, [r3, #4]
 80019ac:	6099      	str	r1, [r3, #8]
 80019ae:	8992      	ldrh	r2, [r2, #12]
 80019b0:	819a      	strh	r2, [r3, #12]
			}
			break;
 80019b2:	e02f      	b.n	8001a14 <start_node_setup+0x480>
		case center:
			closed_list[pos.x][pos.y].center	= set_node(pos,pos,mouse_dir,0,run_pt_none,0,false);
 80019b4:	7d3b      	ldrb	r3, [r7, #20]
 80019b6:	4618      	mov	r0, r3
 80019b8:	7d7b      	ldrb	r3, [r7, #21]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4918      	ldr	r1, [pc, #96]	; (8001a20 <start_node_setup+0x48c>)
 80019be:	2346      	movs	r3, #70	; 0x46
 80019c0:	fb03 f202 	mul.w	r2, r3, r2
 80019c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80019c8:	fb03 f300 	mul.w	r3, r3, r0
 80019cc:	4413      	add	r3, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f103 0438 	add.w	r4, r3, #56	; 0x38
 80019d4:	4638      	mov	r0, r7
 80019d6:	7cfa      	ldrb	r2, [r7, #19]
 80019d8:	2300      	movs	r3, #0
 80019da:	9303      	str	r3, [sp, #12]
 80019dc:	2300      	movs	r3, #0
 80019de:	9302      	str	r3, [sp, #8]
 80019e0:	2313      	movs	r3, #19
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	6979      	ldr	r1, [r7, #20]
 80019ee:	f7ff fb6a 	bl	80010c6 <set_node>
 80019f2:	4622      	mov	r2, r4
 80019f4:	463b      	mov	r3, r7
 80019f6:	681c      	ldr	r4, [r3, #0]
 80019f8:	6858      	ldr	r0, [r3, #4]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	6014      	str	r4, [r2, #0]
 80019fe:	6050      	str	r0, [r2, #4]
 8001a00:	6091      	str	r1, [r2, #8]
 8001a02:	899b      	ldrh	r3, [r3, #12]
 8001a04:	8193      	strh	r3, [r2, #12]
			break;
 8001a06:	e006      	b.n	8001a16 <start_node_setup+0x482>
			break;
 8001a08:	bf00      	nop
 8001a0a:	e004      	b.n	8001a16 <start_node_setup+0x482>
			break;
 8001a0c:	bf00      	nop
 8001a0e:	e002      	b.n	8001a16 <start_node_setup+0x482>
			break;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <start_node_setup+0x482>
			break;
 8001a14:	bf00      	nop
	}
}
 8001a16:	bf00      	nop
 8001a18:	373c      	adds	r7, #60	; 0x3c
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd90      	pop	{r4, r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200099a4 	.word	0x200099a4

08001a24 <close_list_set>:

void close_list_set(t_position pos,t_position parent,t_eight_dir mouse_dir,uint16_t time,t_run_pattern run_pt,uint16_t acc_cnt,t_bool determine)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b091      	sub	sp, #68	; 0x44
 8001a28:	af04      	add	r7, sp, #16
 8001a2a:	61f8      	str	r0, [r7, #28]
 8001a2c:	61b9      	str	r1, [r7, #24]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	461a      	mov	r2, r3
 8001a32:	460b      	mov	r3, r1
 8001a34:	75fb      	strb	r3, [r7, #23]
 8001a36:	4613      	mov	r3, r2
 8001a38:	82bb      	strh	r3, [r7, #20]
	switch(pos.dir){
 8001a3a:	7fbb      	ldrb	r3, [r7, #30]
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	f200 8206 	bhi.w	8001e4e <close_list_set+0x42a>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <close_list_set+0x24>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001b3d 	.word	0x08001b3d
 8001a50:	08001c21 	.word	0x08001c21
 8001a54:	08001d05 	.word	0x08001d05
 8001a58:	08001de7 	.word	0x08001de7
		case north:
			closed_list[pos.x][pos.y].north 	= set_node(pos,parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001a5c:	7f3b      	ldrb	r3, [r7, #28]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	7f7b      	ldrb	r3, [r7, #29]
 8001a62:	461a      	mov	r2, r3
 8001a64:	49a6      	ldr	r1, [pc, #664]	; (8001d00 <close_list_set+0x2dc>)
 8001a66:	2346      	movs	r3, #70	; 0x46
 8001a68:	fb03 f202 	mul.w	r2, r3, r2
 8001a6c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001a70:	fb03 f300 	mul.w	r3, r3, r0
 8001a74:	4413      	add	r3, r2
 8001a76:	18cc      	adds	r4, r1, r3
 8001a78:	4638      	mov	r0, r7
 8001a7a:	7dfa      	ldrb	r2, [r7, #23]
 8001a7c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a80:	9303      	str	r3, [sp, #12]
 8001a82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	8abb      	ldrh	r3, [r7, #20]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	4613      	mov	r3, r2
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	69f9      	ldr	r1, [r7, #28]
 8001a98:	f7ff fb15 	bl	80010c6 <set_node>
 8001a9c:	4622      	mov	r2, r4
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	681c      	ldr	r4, [r3, #0]
 8001aa2:	6858      	ldr	r0, [r3, #4]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	6014      	str	r4, [r2, #0]
 8001aa8:	6050      	str	r0, [r2, #4]
 8001aaa:	6091      	str	r1, [r2, #8]
 8001aac:	899b      	ldrh	r3, [r3, #12]
 8001aae:	8193      	strh	r3, [r2, #12]
			if(pos.y + 1 < MAZE_SIZE_Y){
 8001ab0:	7f7b      	ldrb	r3, [r7, #29]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	2b1f      	cmp	r3, #31
 8001ab6:	f300 81c3 	bgt.w	8001e40 <close_list_set+0x41c>
				closed_list[pos.x][pos.y + 1].south = set_node(make_position(pos.x,pos.y+1,south),parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001aba:	7f38      	ldrb	r0, [r7, #28]
 8001abc:	7f7b      	ldrb	r3, [r7, #29]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff fad5 	bl	8001074 <make_position>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461a      	mov	r2, r3
 8001ace:	f887 2020 	strb.w	r2, [r7, #32]
 8001ad2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001ad6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8001ada:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001ade:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001ae2:	7f3b      	ldrb	r3, [r7, #28]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	7f7b      	ldrb	r3, [r7, #29]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4985      	ldr	r1, [pc, #532]	; (8001d00 <close_list_set+0x2dc>)
 8001aec:	2246      	movs	r2, #70	; 0x46
 8001aee:	fb02 f203 	mul.w	r2, r2, r3
 8001af2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001af6:	fb03 f300 	mul.w	r3, r3, r0
 8001afa:	4413      	add	r3, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	f103 0418 	add.w	r4, r3, #24
 8001b02:	4638      	mov	r0, r7
 8001b04:	7dfa      	ldrb	r2, [r7, #23]
 8001b06:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b0a:	9303      	str	r3, [sp, #12]
 8001b0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b10:	9302      	str	r3, [sp, #8]
 8001b12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	6a39      	ldr	r1, [r7, #32]
 8001b22:	f7ff fad0 	bl	80010c6 <set_node>
 8001b26:	1d23      	adds	r3, r4, #4
 8001b28:	463a      	mov	r2, r7
 8001b2a:	6814      	ldr	r4, [r2, #0]
 8001b2c:	6850      	ldr	r0, [r2, #4]
 8001b2e:	6891      	ldr	r1, [r2, #8]
 8001b30:	601c      	str	r4, [r3, #0]
 8001b32:	6058      	str	r0, [r3, #4]
 8001b34:	6099      	str	r1, [r3, #8]
 8001b36:	8992      	ldrh	r2, [r2, #12]
 8001b38:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001b3a:	e181      	b.n	8001e40 <close_list_set+0x41c>
		case east:
			closed_list[pos.x][pos.y].east  	= set_node(pos,parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001b3c:	7f3b      	ldrb	r3, [r7, #28]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	7f7b      	ldrb	r3, [r7, #29]
 8001b42:	461a      	mov	r2, r3
 8001b44:	496e      	ldr	r1, [pc, #440]	; (8001d00 <close_list_set+0x2dc>)
 8001b46:	2346      	movs	r3, #70	; 0x46
 8001b48:	fb03 f202 	mul.w	r2, r3, r2
 8001b4c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001b50:	fb03 f300 	mul.w	r3, r3, r0
 8001b54:	4413      	add	r3, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f103 0408 	add.w	r4, r3, #8
 8001b5c:	4638      	mov	r0, r7
 8001b5e:	7dfa      	ldrb	r2, [r7, #23]
 8001b60:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b64:	9303      	str	r3, [sp, #12]
 8001b66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	8abb      	ldrh	r3, [r7, #20]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	69f9      	ldr	r1, [r7, #28]
 8001b7c:	f7ff faa3 	bl	80010c6 <set_node>
 8001b80:	1da3      	adds	r3, r4, #6
 8001b82:	463a      	mov	r2, r7
 8001b84:	6814      	ldr	r4, [r2, #0]
 8001b86:	6850      	ldr	r0, [r2, #4]
 8001b88:	6891      	ldr	r1, [r2, #8]
 8001b8a:	601c      	str	r4, [r3, #0]
 8001b8c:	6058      	str	r0, [r3, #4]
 8001b8e:	6099      	str	r1, [r3, #8]
 8001b90:	8992      	ldrh	r2, [r2, #12]
 8001b92:	819a      	strh	r2, [r3, #12]
			if(pos.x + 1 < MAZE_SIZE_X){
 8001b94:	7f3b      	ldrb	r3, [r7, #28]
 8001b96:	3301      	adds	r3, #1
 8001b98:	2b1f      	cmp	r3, #31
 8001b9a:	f300 8153 	bgt.w	8001e44 <close_list_set+0x420>
				closed_list[pos.x+1][pos.y].west = set_node(make_position(pos.x+1,pos.y,west),parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001b9e:	7f3b      	ldrb	r3, [r7, #28]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	7f79      	ldrb	r1, [r7, #29]
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fa63 	bl	8001074 <make_position>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8001bb6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001bba:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8001bbe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001bc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bc6:	7f3b      	ldrb	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	7f7a      	ldrb	r2, [r7, #29]
 8001bcc:	4610      	mov	r0, r2
 8001bce:	494c      	ldr	r1, [pc, #304]	; (8001d00 <close_list_set+0x2dc>)
 8001bd0:	2246      	movs	r2, #70	; 0x46
 8001bd2:	fb02 f200 	mul.w	r2, r2, r0
 8001bd6:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001bda:	fb00 f303 	mul.w	r3, r0, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001be6:	4638      	mov	r0, r7
 8001be8:	7dfa      	ldrb	r2, [r7, #23]
 8001bea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	8abb      	ldrh	r3, [r7, #20]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4613      	mov	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c06:	f7ff fa5e 	bl	80010c6 <set_node>
 8001c0a:	1ca3      	adds	r3, r4, #2
 8001c0c:	463a      	mov	r2, r7
 8001c0e:	6814      	ldr	r4, [r2, #0]
 8001c10:	6850      	ldr	r0, [r2, #4]
 8001c12:	6891      	ldr	r1, [r2, #8]
 8001c14:	601c      	str	r4, [r3, #0]
 8001c16:	6058      	str	r0, [r3, #4]
 8001c18:	6099      	str	r1, [r3, #8]
 8001c1a:	8992      	ldrh	r2, [r2, #12]
 8001c1c:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001c1e:	e111      	b.n	8001e44 <close_list_set+0x420>
		case south:
			closed_list[pos.x][pos.y].south 	= set_node(pos,parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001c20:	7f3b      	ldrb	r3, [r7, #28]
 8001c22:	4618      	mov	r0, r3
 8001c24:	7f7b      	ldrb	r3, [r7, #29]
 8001c26:	461a      	mov	r2, r3
 8001c28:	4935      	ldr	r1, [pc, #212]	; (8001d00 <close_list_set+0x2dc>)
 8001c2a:	2346      	movs	r3, #70	; 0x46
 8001c2c:	fb03 f202 	mul.w	r2, r3, r2
 8001c30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001c34:	fb03 f300 	mul.w	r3, r3, r0
 8001c38:	4413      	add	r3, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f103 0418 	add.w	r4, r3, #24
 8001c40:	4638      	mov	r0, r7
 8001c42:	7dfa      	ldrb	r2, [r7, #23]
 8001c44:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001c48:	9303      	str	r3, [sp, #12]
 8001c4a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001c4e:	9302      	str	r3, [sp, #8]
 8001c50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	8abb      	ldrh	r3, [r7, #20]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	69f9      	ldr	r1, [r7, #28]
 8001c60:	f7ff fa31 	bl	80010c6 <set_node>
 8001c64:	1d23      	adds	r3, r4, #4
 8001c66:	463a      	mov	r2, r7
 8001c68:	6814      	ldr	r4, [r2, #0]
 8001c6a:	6850      	ldr	r0, [r2, #4]
 8001c6c:	6891      	ldr	r1, [r2, #8]
 8001c6e:	601c      	str	r4, [r3, #0]
 8001c70:	6058      	str	r0, [r3, #4]
 8001c72:	6099      	str	r1, [r3, #8]
 8001c74:	8992      	ldrh	r2, [r2, #12]
 8001c76:	819a      	strh	r2, [r3, #12]
			if(pos.y - 1 >= 0)
 8001c78:	7f7b      	ldrb	r3, [r7, #29]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f2c0 80e3 	blt.w	8001e48 <close_list_set+0x424>
			{
				closed_list[pos.x][pos.y-1].north = set_node(make_position(pos.x,pos.y-1,north),parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001c82:	7f38      	ldrb	r0, [r7, #28]
 8001c84:	7f7b      	ldrb	r3, [r7, #29]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7ff f9f1 	bl	8001074 <make_position>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8001c9a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001c9e:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8001ca2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001ca6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8001caa:	7f3b      	ldrb	r3, [r7, #28]
 8001cac:	4618      	mov	r0, r3
 8001cae:	7f7b      	ldrb	r3, [r7, #29]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	4913      	ldr	r1, [pc, #76]	; (8001d00 <close_list_set+0x2dc>)
 8001cb4:	2246      	movs	r2, #70	; 0x46
 8001cb6:	fb02 f203 	mul.w	r2, r2, r3
 8001cba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001cbe:	fb03 f300 	mul.w	r3, r3, r0
 8001cc2:	4413      	add	r3, r2
 8001cc4:	18cc      	adds	r4, r1, r3
 8001cc6:	4638      	mov	r0, r7
 8001cc8:	7dfa      	ldrb	r2, [r7, #23]
 8001cca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001cce:	9303      	str	r3, [sp, #12]
 8001cd0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	8abb      	ldrh	r3, [r7, #20]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ce6:	f7ff f9ee 	bl	80010c6 <set_node>
 8001cea:	4622      	mov	r2, r4
 8001cec:	463b      	mov	r3, r7
 8001cee:	681c      	ldr	r4, [r3, #0]
 8001cf0:	6858      	ldr	r0, [r3, #4]
 8001cf2:	6899      	ldr	r1, [r3, #8]
 8001cf4:	6014      	str	r4, [r2, #0]
 8001cf6:	6050      	str	r0, [r2, #4]
 8001cf8:	6091      	str	r1, [r2, #8]
 8001cfa:	899b      	ldrh	r3, [r3, #12]
 8001cfc:	8193      	strh	r3, [r2, #12]
			}
			break;
 8001cfe:	e0a3      	b.n	8001e48 <close_list_set+0x424>
 8001d00:	200099a4 	.word	0x200099a4
		case west:
			closed_list[pos.x][pos.y].west  	= set_node(pos,parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001d04:	7f3b      	ldrb	r3, [r7, #28]
 8001d06:	4618      	mov	r0, r3
 8001d08:	7f7b      	ldrb	r3, [r7, #29]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4952      	ldr	r1, [pc, #328]	; (8001e58 <close_list_set+0x434>)
 8001d0e:	2346      	movs	r3, #70	; 0x46
 8001d10:	fb03 f202 	mul.w	r2, r3, r2
 8001d14:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001d18:	fb03 f300 	mul.w	r3, r3, r0
 8001d1c:	4413      	add	r3, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001d24:	4638      	mov	r0, r7
 8001d26:	7dfa      	ldrb	r2, [r7, #23]
 8001d28:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001d2c:	9303      	str	r3, [sp, #12]
 8001d2e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001d32:	9302      	str	r3, [sp, #8]
 8001d34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	8abb      	ldrh	r3, [r7, #20]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69f9      	ldr	r1, [r7, #28]
 8001d44:	f7ff f9bf 	bl	80010c6 <set_node>
 8001d48:	1ca3      	adds	r3, r4, #2
 8001d4a:	463a      	mov	r2, r7
 8001d4c:	6814      	ldr	r4, [r2, #0]
 8001d4e:	6850      	ldr	r0, [r2, #4]
 8001d50:	6891      	ldr	r1, [r2, #8]
 8001d52:	601c      	str	r4, [r3, #0]
 8001d54:	6058      	str	r0, [r3, #4]
 8001d56:	6099      	str	r1, [r3, #8]
 8001d58:	8992      	ldrh	r2, [r2, #12]
 8001d5a:	819a      	strh	r2, [r3, #12]
			if(pos.y - 1 >= 0)
 8001d5c:	7f7b      	ldrb	r3, [r7, #29]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	db73      	blt.n	8001e4c <close_list_set+0x428>
			{
				closed_list[pos.x-1][pos.y].east = set_node(make_position(pos.x-1,pos.y,east),parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001d64:	7f3b      	ldrb	r3, [r7, #28]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	7f79      	ldrb	r1, [r7, #29]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f980 	bl	8001074 <make_position>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8001d7c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001d80:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8001d84:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8001d88:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001d8c:	7f3b      	ldrb	r3, [r7, #28]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	7f7a      	ldrb	r2, [r7, #29]
 8001d92:	4610      	mov	r0, r2
 8001d94:	4930      	ldr	r1, [pc, #192]	; (8001e58 <close_list_set+0x434>)
 8001d96:	2246      	movs	r2, #70	; 0x46
 8001d98:	fb02 f200 	mul.w	r2, r2, r0
 8001d9c:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001da0:	fb00 f303 	mul.w	r3, r0, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	440b      	add	r3, r1
 8001da8:	f103 0408 	add.w	r4, r3, #8
 8001dac:	4638      	mov	r0, r7
 8001dae:	7dfa      	ldrb	r2, [r7, #23]
 8001db0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001db4:	9303      	str	r3, [sp, #12]
 8001db6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001dba:	9302      	str	r3, [sp, #8]
 8001dbc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	8abb      	ldrh	r3, [r7, #20]
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001dcc:	f7ff f97b 	bl	80010c6 <set_node>
 8001dd0:	1da3      	adds	r3, r4, #6
 8001dd2:	463a      	mov	r2, r7
 8001dd4:	6814      	ldr	r4, [r2, #0]
 8001dd6:	6850      	ldr	r0, [r2, #4]
 8001dd8:	6891      	ldr	r1, [r2, #8]
 8001dda:	601c      	str	r4, [r3, #0]
 8001ddc:	6058      	str	r0, [r3, #4]
 8001dde:	6099      	str	r1, [r3, #8]
 8001de0:	8992      	ldrh	r2, [r2, #12]
 8001de2:	819a      	strh	r2, [r3, #12]
			}
			break;
 8001de4:	e032      	b.n	8001e4c <close_list_set+0x428>
		case center:
			closed_list[pos.x][pos.y].center 	= set_node(pos,parent,mouse_dir,time,run_pt,acc_cnt,determine);
 8001de6:	7f3b      	ldrb	r3, [r7, #28]
 8001de8:	4618      	mov	r0, r3
 8001dea:	7f7b      	ldrb	r3, [r7, #29]
 8001dec:	461a      	mov	r2, r3
 8001dee:	491a      	ldr	r1, [pc, #104]	; (8001e58 <close_list_set+0x434>)
 8001df0:	2346      	movs	r3, #70	; 0x46
 8001df2:	fb03 f202 	mul.w	r2, r3, r2
 8001df6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001dfa:	fb03 f300 	mul.w	r3, r3, r0
 8001dfe:	4413      	add	r3, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001e06:	4638      	mov	r0, r7
 8001e08:	7dfa      	ldrb	r2, [r7, #23]
 8001e0a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e0e:	9303      	str	r3, [sp, #12]
 8001e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001e14:	9302      	str	r3, [sp, #8]
 8001e16:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	8abb      	ldrh	r3, [r7, #20]
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	69f9      	ldr	r1, [r7, #28]
 8001e26:	f7ff f94e 	bl	80010c6 <set_node>
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	681c      	ldr	r4, [r3, #0]
 8001e30:	6858      	ldr	r0, [r3, #4]
 8001e32:	6899      	ldr	r1, [r3, #8]
 8001e34:	6014      	str	r4, [r2, #0]
 8001e36:	6050      	str	r0, [r2, #4]
 8001e38:	6091      	str	r1, [r2, #8]
 8001e3a:	899b      	ldrh	r3, [r3, #12]
 8001e3c:	8193      	strh	r3, [r2, #12]
			break;
 8001e3e:	e006      	b.n	8001e4e <close_list_set+0x42a>
			break;
 8001e40:	bf00      	nop
 8001e42:	e004      	b.n	8001e4e <close_list_set+0x42a>
			break;
 8001e44:	bf00      	nop
 8001e46:	e002      	b.n	8001e4e <close_list_set+0x42a>
			break;
 8001e48:	bf00      	nop
 8001e4a:	e000      	b.n	8001e4e <close_list_set+0x42a>
			break;
 8001e4c:	bf00      	nop
	}
}
 8001e4e:	bf00      	nop
 8001e50:	3734      	adds	r7, #52	; 0x34
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200099a4 	.word	0x200099a4

08001e5c <set_determine>:

void set_determine(t_position pos){
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
	switch(pos.dir){
 8001e64:	79bb      	ldrb	r3, [r7, #6]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	f200 80c4 	bhi.w	8001ff4 <set_determine+0x198>
 8001e6c:	a201      	add	r2, pc, #4	; (adr r2, 8001e74 <set_determine+0x18>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e89 	.word	0x08001e89
 8001e78:	08001ed9 	.word	0x08001ed9
 8001e7c:	08001f27 	.word	0x08001f27
 8001e80:	08001f75 	.word	0x08001f75
 8001e84:	08001fc3 	.word	0x08001fc3
		case north:
			closed_list[pos.x][pos.y].north.determine 			= true;
 8001e88:	793b      	ldrb	r3, [r7, #4]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	797b      	ldrb	r3, [r7, #5]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	495b      	ldr	r1, [pc, #364]	; (8002000 <set_determine+0x1a4>)
 8001e92:	2346      	movs	r3, #70	; 0x46
 8001e94:	fb03 f202 	mul.w	r2, r3, r2
 8001e98:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001e9c:	fb03 f300 	mul.w	r3, r3, r0
 8001ea0:	4413      	add	r3, r2
 8001ea2:	440b      	add	r3, r1
 8001ea4:	330b      	adds	r3, #11
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
			if(pos.y + 1 < MAZE_SIZE_Y)
 8001eaa:	797b      	ldrb	r3, [r7, #5]
 8001eac:	3301      	adds	r3, #1
 8001eae:	2b1f      	cmp	r3, #31
 8001eb0:	f300 8099 	bgt.w	8001fe6 <set_determine+0x18a>
			{
				closed_list[pos.x][pos.y + 1].south.determine 	= true;
 8001eb4:	793b      	ldrb	r3, [r7, #4]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	797b      	ldrb	r3, [r7, #5]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	4950      	ldr	r1, [pc, #320]	; (8002000 <set_determine+0x1a4>)
 8001ebe:	2246      	movs	r2, #70	; 0x46
 8001ec0:	fb02 f203 	mul.w	r2, r2, r3
 8001ec4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001ec8:	fb03 f300 	mul.w	r3, r3, r0
 8001ecc:	4413      	add	r3, r2
 8001ece:	440b      	add	r3, r1
 8001ed0:	3327      	adds	r3, #39	; 0x27
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001ed6:	e086      	b.n	8001fe6 <set_determine+0x18a>
		case east:
			closed_list[pos.x][pos.y].east.determine 			= true;
 8001ed8:	793b      	ldrb	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	797b      	ldrb	r3, [r7, #5]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4947      	ldr	r1, [pc, #284]	; (8002000 <set_determine+0x1a4>)
 8001ee2:	2346      	movs	r3, #70	; 0x46
 8001ee4:	fb03 f202 	mul.w	r2, r3, r2
 8001ee8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001eec:	fb03 f300 	mul.w	r3, r3, r0
 8001ef0:	4413      	add	r3, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3319      	adds	r3, #25
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	701a      	strb	r2, [r3, #0]
			if(pos.x + 1 < MAZE_SIZE_X)
 8001efa:	793b      	ldrb	r3, [r7, #4]
 8001efc:	3301      	adds	r3, #1
 8001efe:	2b1f      	cmp	r3, #31
 8001f00:	dc73      	bgt.n	8001fea <set_determine+0x18e>
			{
				closed_list[pos.x + 1][pos.y].west.determine 	= true;
 8001f02:	793b      	ldrb	r3, [r7, #4]
 8001f04:	3301      	adds	r3, #1
 8001f06:	797a      	ldrb	r2, [r7, #5]
 8001f08:	4610      	mov	r0, r2
 8001f0a:	493d      	ldr	r1, [pc, #244]	; (8002000 <set_determine+0x1a4>)
 8001f0c:	2246      	movs	r2, #70	; 0x46
 8001f0e:	fb02 f200 	mul.w	r2, r2, r0
 8001f12:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001f16:	fb00 f303 	mul.w	r3, r0, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	3335      	adds	r3, #53	; 0x35
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f24:	e061      	b.n	8001fea <set_determine+0x18e>
		case south:
			closed_list[pos.x][pos.y].south.determine 			= true;
 8001f26:	793b      	ldrb	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	797b      	ldrb	r3, [r7, #5]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4934      	ldr	r1, [pc, #208]	; (8002000 <set_determine+0x1a4>)
 8001f30:	2346      	movs	r3, #70	; 0x46
 8001f32:	fb03 f202 	mul.w	r2, r3, r2
 8001f36:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f3a:	fb03 f300 	mul.w	r3, r3, r0
 8001f3e:	4413      	add	r3, r2
 8001f40:	440b      	add	r3, r1
 8001f42:	3327      	adds	r3, #39	; 0x27
 8001f44:	2201      	movs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
			if(pos.y - 1 >= 0)
 8001f48:	797b      	ldrb	r3, [r7, #5]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db4e      	blt.n	8001fee <set_determine+0x192>
			{
				closed_list[pos.x][pos.y-1].north.determine 	= true;
 8001f50:	793b      	ldrb	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	797b      	ldrb	r3, [r7, #5]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4929      	ldr	r1, [pc, #164]	; (8002000 <set_determine+0x1a4>)
 8001f5a:	2246      	movs	r2, #70	; 0x46
 8001f5c:	fb02 f203 	mul.w	r2, r2, r3
 8001f60:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f64:	fb03 f300 	mul.w	r3, r3, r0
 8001f68:	4413      	add	r3, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	330b      	adds	r3, #11
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001f72:	e03c      	b.n	8001fee <set_determine+0x192>
		case west:
			closed_list[pos.x][pos.y].west.determine 			= true;
 8001f74:	793b      	ldrb	r3, [r7, #4]
 8001f76:	4618      	mov	r0, r3
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4920      	ldr	r1, [pc, #128]	; (8002000 <set_determine+0x1a4>)
 8001f7e:	2346      	movs	r3, #70	; 0x46
 8001f80:	fb03 f202 	mul.w	r2, r3, r2
 8001f84:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f88:	fb03 f300 	mul.w	r3, r3, r0
 8001f8c:	4413      	add	r3, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3335      	adds	r3, #53	; 0x35
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
			if(pos.x - 1 >= 0)
 8001f96:	793b      	ldrb	r3, [r7, #4]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db29      	blt.n	8001ff2 <set_determine+0x196>
			{
				closed_list[pos.x-1][pos.y].east.determine 		= true;
 8001f9e:	793b      	ldrb	r3, [r7, #4]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	797a      	ldrb	r2, [r7, #5]
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4916      	ldr	r1, [pc, #88]	; (8002000 <set_determine+0x1a4>)
 8001fa8:	2246      	movs	r2, #70	; 0x46
 8001faa:	fb02 f200 	mul.w	r2, r2, r0
 8001fae:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8001fb2:	fb00 f303 	mul.w	r3, r0, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	440b      	add	r3, r1
 8001fba:	3319      	adds	r3, #25
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001fc0:	e017      	b.n	8001ff2 <set_determine+0x196>
		case center:
			closed_list[pos.x][pos.y].center.determine			= true;
 8001fc2:	793b      	ldrb	r3, [r7, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	797b      	ldrb	r3, [r7, #5]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	490d      	ldr	r1, [pc, #52]	; (8002000 <set_determine+0x1a4>)
 8001fcc:	2346      	movs	r3, #70	; 0x46
 8001fce:	fb03 f202 	mul.w	r2, r3, r2
 8001fd2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001fd6:	fb03 f300 	mul.w	r3, r3, r0
 8001fda:	4413      	add	r3, r2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3343      	adds	r3, #67	; 0x43
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
			break;
 8001fe4:	e006      	b.n	8001ff4 <set_determine+0x198>
			break;
 8001fe6:	bf00      	nop
 8001fe8:	e004      	b.n	8001ff4 <set_determine+0x198>
			break;
 8001fea:	bf00      	nop
 8001fec:	e002      	b.n	8001ff4 <set_determine+0x198>
			break;
 8001fee:	bf00      	nop
 8001ff0:	e000      	b.n	8001ff4 <set_determine+0x198>
			break;
 8001ff2:	bf00      	nop
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	200099a4 	.word	0x200099a4

08002004 <min_search>:

t_position min_search(){
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
	t_position min_pos;
	uint16_t   time = 60000;
 800200a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800200e:	82fb      	strh	r3, [r7, #22]
	min_pos.x 	= 0;
 8002010:	2300      	movs	r3, #0
 8002012:	703b      	strb	r3, [r7, #0]
	min_pos.y 	= 0;
 8002014:	2300      	movs	r3, #0
 8002016:	707b      	strb	r3, [r7, #1]
	min_pos.dir	= center;
 8002018:	2304      	movs	r3, #4
 800201a:	70bb      	strb	r3, [r7, #2]
	for(int i = 0;i < MAZE_SIZE_X;i++){
 800201c:	2300      	movs	r3, #0
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	e18c      	b.n	800233c <min_search+0x338>
		for(int j = 0;j < MAZE_SIZE_Y;j++){
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	e182      	b.n	800232e <min_search+0x32a>
			for(int d = 0; d < 5;d++){
 8002028:	2300      	movs	r3, #0
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	e178      	b.n	8002320 <min_search+0x31c>
				switch(d){
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b04      	cmp	r3, #4
 8002032:	f200 8172 	bhi.w	800231a <min_search+0x316>
 8002036:	a201      	add	r2, pc, #4	; (adr r2, 800203c <min_search+0x38>)
 8002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203c:	08002051 	.word	0x08002051
 8002040:	080020d9 	.word	0x080020d9
 8002044:	08002165 	.word	0x08002165
 8002048:	080021f3 	.word	0x080021f3
 800204c:	0800227d 	.word	0x0800227d
					case north:
						if(closed_list[i][j].north.time < time && closed_list[i][j].north.determine == false){
 8002050:	49b0      	ldr	r1, [pc, #704]	; (8002314 <min_search+0x310>)
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2046      	movs	r0, #70	; 0x46
 8002058:	fb00 f202 	mul.w	r2, r0, r2
 800205c:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002060:	fb00 f303 	mul.w	r3, r0, r3
 8002064:	4413      	add	r3, r2
 8002066:	440b      	add	r3, r1
 8002068:	3308      	adds	r3, #8
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	8afa      	ldrh	r2, [r7, #22]
 800206e:	429a      	cmp	r2, r3
 8002070:	f240 8148 	bls.w	8002304 <min_search+0x300>
 8002074:	49a7      	ldr	r1, [pc, #668]	; (8002314 <min_search+0x310>)
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2046      	movs	r0, #70	; 0x46
 800207c:	fb00 f202 	mul.w	r2, r0, r2
 8002080:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002084:	fb00 f303 	mul.w	r3, r0, r3
 8002088:	4413      	add	r3, r2
 800208a:	440b      	add	r3, r1
 800208c:	330b      	adds	r3, #11
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f040 8137 	bne.w	8002304 <min_search+0x300>
							min_pos = closed_list[i][j].north.pos;
 8002096:	499f      	ldr	r1, [pc, #636]	; (8002314 <min_search+0x310>)
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2046      	movs	r0, #70	; 0x46
 800209e:	fb00 f202 	mul.w	r2, r0, r2
 80020a2:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80020a6:	fb00 f303 	mul.w	r3, r0, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	18ca      	adds	r2, r1, r3
 80020ae:	463b      	mov	r3, r7
 80020b0:	8811      	ldrh	r1, [r2, #0]
 80020b2:	7892      	ldrb	r2, [r2, #2]
 80020b4:	8019      	strh	r1, [r3, #0]
 80020b6:	709a      	strb	r2, [r3, #2]
							time 	= closed_list[i][j].north.time;
 80020b8:	4996      	ldr	r1, [pc, #600]	; (8002314 <min_search+0x310>)
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2046      	movs	r0, #70	; 0x46
 80020c0:	fb00 f202 	mul.w	r2, r0, r2
 80020c4:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80020c8:	fb00 f303 	mul.w	r3, r0, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	440b      	add	r3, r1
 80020d0:	3308      	adds	r3, #8
 80020d2:	881b      	ldrh	r3, [r3, #0]
 80020d4:	82fb      	strh	r3, [r7, #22]
						}
						break;
 80020d6:	e115      	b.n	8002304 <min_search+0x300>
					case east:
						if(closed_list[i][j].east.time < time && closed_list[i][j].east.determine == false){
 80020d8:	498e      	ldr	r1, [pc, #568]	; (8002314 <min_search+0x310>)
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2046      	movs	r0, #70	; 0x46
 80020e0:	fb00 f202 	mul.w	r2, r0, r2
 80020e4:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80020e8:	fb00 f303 	mul.w	r3, r0, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	3316      	adds	r3, #22
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	8afa      	ldrh	r2, [r7, #22]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	f240 8106 	bls.w	8002308 <min_search+0x304>
 80020fc:	4985      	ldr	r1, [pc, #532]	; (8002314 <min_search+0x310>)
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	2046      	movs	r0, #70	; 0x46
 8002104:	fb00 f202 	mul.w	r2, r0, r2
 8002108:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800210c:	fb00 f303 	mul.w	r3, r0, r3
 8002110:	4413      	add	r3, r2
 8002112:	440b      	add	r3, r1
 8002114:	3319      	adds	r3, #25
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	f040 80f5 	bne.w	8002308 <min_search+0x304>
							min_pos = closed_list[i][j].east.pos;
 800211e:	497d      	ldr	r1, [pc, #500]	; (8002314 <min_search+0x310>)
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2046      	movs	r0, #70	; 0x46
 8002126:	fb00 f202 	mul.w	r2, r0, r2
 800212a:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800212e:	fb00 f303 	mul.w	r3, r0, r3
 8002132:	4413      	add	r3, r2
 8002134:	440b      	add	r3, r1
 8002136:	f103 020e 	add.w	r2, r3, #14
 800213a:	463b      	mov	r3, r7
 800213c:	8811      	ldrh	r1, [r2, #0]
 800213e:	7892      	ldrb	r2, [r2, #2]
 8002140:	8019      	strh	r1, [r3, #0]
 8002142:	709a      	strb	r2, [r3, #2]
							time 	= closed_list[i][j].east.time;
 8002144:	4973      	ldr	r1, [pc, #460]	; (8002314 <min_search+0x310>)
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2046      	movs	r0, #70	; 0x46
 800214c:	fb00 f202 	mul.w	r2, r0, r2
 8002150:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002154:	fb00 f303 	mul.w	r3, r0, r3
 8002158:	4413      	add	r3, r2
 800215a:	440b      	add	r3, r1
 800215c:	3316      	adds	r3, #22
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	82fb      	strh	r3, [r7, #22]
						}
						break;
 8002162:	e0d1      	b.n	8002308 <min_search+0x304>
					case south:
						if(closed_list[i][j].south.time < time && closed_list[i][j].south.determine == false){
 8002164:	496b      	ldr	r1, [pc, #428]	; (8002314 <min_search+0x310>)
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2046      	movs	r0, #70	; 0x46
 800216c:	fb00 f202 	mul.w	r2, r0, r2
 8002170:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002174:	fb00 f303 	mul.w	r3, r0, r3
 8002178:	4413      	add	r3, r2
 800217a:	440b      	add	r3, r1
 800217c:	3324      	adds	r3, #36	; 0x24
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	8afa      	ldrh	r2, [r7, #22]
 8002182:	429a      	cmp	r2, r3
 8002184:	f240 80c2 	bls.w	800230c <min_search+0x308>
 8002188:	4962      	ldr	r1, [pc, #392]	; (8002314 <min_search+0x310>)
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	2046      	movs	r0, #70	; 0x46
 8002190:	fb00 f202 	mul.w	r2, r0, r2
 8002194:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	4413      	add	r3, r2
 800219e:	440b      	add	r3, r1
 80021a0:	3327      	adds	r3, #39	; 0x27
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 80b1 	bne.w	800230c <min_search+0x308>
							min_pos = closed_list[i][j].south.pos;
 80021aa:	495a      	ldr	r1, [pc, #360]	; (8002314 <min_search+0x310>)
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	2046      	movs	r0, #70	; 0x46
 80021b2:	fb00 f202 	mul.w	r2, r0, r2
 80021b6:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80021ba:	fb00 f303 	mul.w	r3, r0, r3
 80021be:	4413      	add	r3, r2
 80021c0:	440b      	add	r3, r1
 80021c2:	f103 0218 	add.w	r2, r3, #24
 80021c6:	463b      	mov	r3, r7
 80021c8:	3204      	adds	r2, #4
 80021ca:	8811      	ldrh	r1, [r2, #0]
 80021cc:	7892      	ldrb	r2, [r2, #2]
 80021ce:	8019      	strh	r1, [r3, #0]
 80021d0:	709a      	strb	r2, [r3, #2]
							time 	= closed_list[i][j].south.time;
 80021d2:	4950      	ldr	r1, [pc, #320]	; (8002314 <min_search+0x310>)
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	2046      	movs	r0, #70	; 0x46
 80021da:	fb00 f202 	mul.w	r2, r0, r2
 80021de:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80021e2:	fb00 f303 	mul.w	r3, r0, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	440b      	add	r3, r1
 80021ea:	3324      	adds	r3, #36	; 0x24
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	82fb      	strh	r3, [r7, #22]
						}
						break;
 80021f0:	e08c      	b.n	800230c <min_search+0x308>
					case west:
						if(closed_list[i][j].west.time < time && closed_list[i][j].west.determine == false){
 80021f2:	4948      	ldr	r1, [pc, #288]	; (8002314 <min_search+0x310>)
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2046      	movs	r0, #70	; 0x46
 80021fa:	fb00 f202 	mul.w	r2, r0, r2
 80021fe:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002202:	fb00 f303 	mul.w	r3, r0, r3
 8002206:	4413      	add	r3, r2
 8002208:	440b      	add	r3, r1
 800220a:	3332      	adds	r3, #50	; 0x32
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	8afa      	ldrh	r2, [r7, #22]
 8002210:	429a      	cmp	r2, r3
 8002212:	d97d      	bls.n	8002310 <min_search+0x30c>
 8002214:	493f      	ldr	r1, [pc, #252]	; (8002314 <min_search+0x310>)
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2046      	movs	r0, #70	; 0x46
 800221c:	fb00 f202 	mul.w	r2, r0, r2
 8002220:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002224:	fb00 f303 	mul.w	r3, r0, r3
 8002228:	4413      	add	r3, r2
 800222a:	440b      	add	r3, r1
 800222c:	3335      	adds	r3, #53	; 0x35
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d16d      	bne.n	8002310 <min_search+0x30c>
							min_pos = closed_list[i][j].west.pos;
 8002234:	4937      	ldr	r1, [pc, #220]	; (8002314 <min_search+0x310>)
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	2046      	movs	r0, #70	; 0x46
 800223c:	fb00 f202 	mul.w	r2, r0, r2
 8002240:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 8002244:	fb00 f303 	mul.w	r3, r0, r3
 8002248:	4413      	add	r3, r2
 800224a:	440b      	add	r3, r1
 800224c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002250:	463b      	mov	r3, r7
 8002252:	3202      	adds	r2, #2
 8002254:	8811      	ldrh	r1, [r2, #0]
 8002256:	7892      	ldrb	r2, [r2, #2]
 8002258:	8019      	strh	r1, [r3, #0]
 800225a:	709a      	strb	r2, [r3, #2]
							time 	= closed_list[i][j].west.time;
 800225c:	492d      	ldr	r1, [pc, #180]	; (8002314 <min_search+0x310>)
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	2046      	movs	r0, #70	; 0x46
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800226c:	fb00 f303 	mul.w	r3, r0, r3
 8002270:	4413      	add	r3, r2
 8002272:	440b      	add	r3, r1
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	82fb      	strh	r3, [r7, #22]
						}
						break;
 800227a:	e049      	b.n	8002310 <min_search+0x30c>
					case center:
						if(closed_list[i][j].center.time < time &&  closed_list[i][j].center.determine == false){
 800227c:	4925      	ldr	r1, [pc, #148]	; (8002314 <min_search+0x310>)
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2046      	movs	r0, #70	; 0x46
 8002284:	fb00 f202 	mul.w	r2, r0, r2
 8002288:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 800228c:	fb00 f303 	mul.w	r3, r0, r3
 8002290:	4413      	add	r3, r2
 8002292:	440b      	add	r3, r1
 8002294:	3340      	adds	r3, #64	; 0x40
 8002296:	881b      	ldrh	r3, [r3, #0]
 8002298:	8afa      	ldrh	r2, [r7, #22]
 800229a:	429a      	cmp	r2, r3
 800229c:	d93c      	bls.n	8002318 <min_search+0x314>
 800229e:	491d      	ldr	r1, [pc, #116]	; (8002314 <min_search+0x310>)
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2046      	movs	r0, #70	; 0x46
 80022a6:	fb00 f202 	mul.w	r2, r0, r2
 80022aa:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80022ae:	fb00 f303 	mul.w	r3, r0, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	3343      	adds	r3, #67	; 0x43
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d12c      	bne.n	8002318 <min_search+0x314>
							min_pos = closed_list[i][j].center.pos;
 80022be:	4915      	ldr	r1, [pc, #84]	; (8002314 <min_search+0x310>)
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	2046      	movs	r0, #70	; 0x46
 80022c6:	fb00 f202 	mul.w	r2, r0, r2
 80022ca:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80022ce:	fb00 f303 	mul.w	r3, r0, r3
 80022d2:	4413      	add	r3, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80022da:	463b      	mov	r3, r7
 80022dc:	8811      	ldrh	r1, [r2, #0]
 80022de:	7892      	ldrb	r2, [r2, #2]
 80022e0:	8019      	strh	r1, [r3, #0]
 80022e2:	709a      	strb	r2, [r3, #2]
							time 	= closed_list[i][j].center.time;
 80022e4:	490b      	ldr	r1, [pc, #44]	; (8002314 <min_search+0x310>)
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2046      	movs	r0, #70	; 0x46
 80022ec:	fb00 f202 	mul.w	r2, r0, r2
 80022f0:	f44f 600c 	mov.w	r0, #2240	; 0x8c0
 80022f4:	fb00 f303 	mul.w	r3, r0, r3
 80022f8:	4413      	add	r3, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	3340      	adds	r3, #64	; 0x40
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	82fb      	strh	r3, [r7, #22]
						}
						break;
 8002302:	e009      	b.n	8002318 <min_search+0x314>
						break;
 8002304:	bf00      	nop
 8002306:	e008      	b.n	800231a <min_search+0x316>
						break;
 8002308:	bf00      	nop
 800230a:	e006      	b.n	800231a <min_search+0x316>
						break;
 800230c:	bf00      	nop
 800230e:	e004      	b.n	800231a <min_search+0x316>
						break;
 8002310:	bf00      	nop
 8002312:	e002      	b.n	800231a <min_search+0x316>
 8002314:	200099a4 	.word	0x200099a4
						break;
 8002318:	bf00      	nop
			for(int d = 0; d < 5;d++){
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	3301      	adds	r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2b04      	cmp	r3, #4
 8002324:	f77f ae83 	ble.w	800202e <min_search+0x2a>
		for(int j = 0;j < MAZE_SIZE_Y;j++){
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b1f      	cmp	r3, #31
 8002332:	f77f ae79 	ble.w	8002028 <min_search+0x24>
	for(int i = 0;i < MAZE_SIZE_X;i++){
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	3301      	adds	r3, #1
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b1f      	cmp	r3, #31
 8002340:	f77f ae6f 	ble.w	8002022 <min_search+0x1e>
				}
			}
		}
	}
	return min_pos;
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	463a      	mov	r2, r7
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	4611      	mov	r1, r2
 800234c:	8019      	strh	r1, [r3, #0]
 800234e:	3302      	adds	r3, #2
 8002350:	0c12      	lsrs	r2, r2, #16
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	793a      	ldrb	r2, [r7, #4]
 8002358:	f362 0307 	bfi	r3, r2, #0, #8
 800235c:	797a      	ldrb	r2, [r7, #5]
 800235e:	f362 230f 	bfi	r3, r2, #8, #8
 8002362:	79ba      	ldrb	r2, [r7, #6]
 8002364:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <is_goal_dijkstra>:

t_bool is_goal_dijkstra(t_position pos,int *gx,int *gy,int goal_size){
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
	t_bool flag = false;
 8002382:	2300      	movs	r3, #0
 8002384:	77fb      	strb	r3, [r7, #31]
	uint8_t x = pos.x;
 8002386:	7b3b      	ldrb	r3, [r7, #12]
 8002388:	74fb      	strb	r3, [r7, #19]
	uint8_t y = pos.y;
 800238a:	7b7b      	ldrb	r3, [r7, #13]
 800238c:	74bb      	strb	r3, [r7, #18]
	t_direction d = pos.dir;
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	747b      	strb	r3, [r7, #17]
	for(int i = 0;i < goal_size;i++){
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e092      	b.n	80024be <is_goal_dijkstra+0x14a>
		for(int j = 0;j < goal_size;j++){
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	e087      	b.n	80024ae <is_goal_dijkstra+0x13a>
			if(flag == true) continue;
 800239e:	7ffb      	ldrb	r3, [r7, #31]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d07a      	beq.n	800249a <is_goal_dijkstra+0x126>

			if((int)x == gx[i] && (int)y == gy[j]){
 80023a4:	7cfa      	ldrb	r2, [r7, #19]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	68b9      	ldr	r1, [r7, #8]
 80023ac:	440b      	add	r3, r1
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d10a      	bne.n	80023ca <is_goal_dijkstra+0x56>
 80023b4:	7cba      	ldrb	r2, [r7, #18]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	440b      	add	r3, r1
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d102      	bne.n	80023ca <is_goal_dijkstra+0x56>
				flag = true;
 80023c4:	2301      	movs	r3, #1
 80023c6:	77fb      	strb	r3, [r7, #31]
 80023c8:	e06e      	b.n	80024a8 <is_goal_dijkstra+0x134>
			}
			else if(d == north && (int)y < (MAZE_SIZE_Y - 1)){
 80023ca:	7c7b      	ldrb	r3, [r7, #17]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d116      	bne.n	80023fe <is_goal_dijkstra+0x8a>
 80023d0:	7cbb      	ldrb	r3, [r7, #18]
 80023d2:	2b1e      	cmp	r3, #30
 80023d4:	d813      	bhi.n	80023fe <is_goal_dijkstra+0x8a>
				if((int)x == gx[i] && (int)(y + 1) == gy[j])	flag = true;
 80023d6:	7cfa      	ldrb	r2, [r7, #19]
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	440b      	add	r3, r1
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d15b      	bne.n	800249e <is_goal_dijkstra+0x12a>
 80023e6:	7cbb      	ldrb	r3, [r7, #18]
 80023e8:	1c5a      	adds	r2, r3, #1
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	440b      	add	r3, r1
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d152      	bne.n	800249e <is_goal_dijkstra+0x12a>
 80023f8:	2301      	movs	r3, #1
 80023fa:	77fb      	strb	r3, [r7, #31]
 80023fc:	e04f      	b.n	800249e <is_goal_dijkstra+0x12a>
			}
			else if(d == east && (int)x < (MAZE_SIZE_X - 1)){
 80023fe:	7c7b      	ldrb	r3, [r7, #17]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d116      	bne.n	8002432 <is_goal_dijkstra+0xbe>
 8002404:	7cfb      	ldrb	r3, [r7, #19]
 8002406:	2b1e      	cmp	r3, #30
 8002408:	d813      	bhi.n	8002432 <is_goal_dijkstra+0xbe>
				if((int)(x + 1) == gx[i] && (int)y == gy[j])	flag = true;
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	440b      	add	r3, r1
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	429a      	cmp	r2, r3
 800241a:	d142      	bne.n	80024a2 <is_goal_dijkstra+0x12e>
 800241c:	7cba      	ldrb	r2, [r7, #18]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	440b      	add	r3, r1
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	429a      	cmp	r2, r3
 800242a:	d13a      	bne.n	80024a2 <is_goal_dijkstra+0x12e>
 800242c:	2301      	movs	r3, #1
 800242e:	77fb      	strb	r3, [r7, #31]
 8002430:	e037      	b.n	80024a2 <is_goal_dijkstra+0x12e>
			}
			else if(d == south && (int)y > 0){
 8002432:	7c7b      	ldrb	r3, [r7, #17]
 8002434:	2b02      	cmp	r3, #2
 8002436:	d116      	bne.n	8002466 <is_goal_dijkstra+0xf2>
 8002438:	7cbb      	ldrb	r3, [r7, #18]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d013      	beq.n	8002466 <is_goal_dijkstra+0xf2>
				if((int)x == gx[i] && (int)(y - 1) == gy[j])	flag = true;
 800243e:	7cfa      	ldrb	r2, [r7, #19]
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	440b      	add	r3, r1
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d12b      	bne.n	80024a6 <is_goal_dijkstra+0x132>
 800244e:	7cbb      	ldrb	r3, [r7, #18]
 8002450:	1e5a      	subs	r2, r3, #1
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	440b      	add	r3, r1
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d122      	bne.n	80024a6 <is_goal_dijkstra+0x132>
 8002460:	2301      	movs	r3, #1
 8002462:	77fb      	strb	r3, [r7, #31]
 8002464:	e01f      	b.n	80024a6 <is_goal_dijkstra+0x132>
			}
			else if(d == west && x > 0){
 8002466:	7c7b      	ldrb	r3, [r7, #17]
 8002468:	2b03      	cmp	r3, #3
 800246a:	d11d      	bne.n	80024a8 <is_goal_dijkstra+0x134>
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01a      	beq.n	80024a8 <is_goal_dijkstra+0x134>
				if((int)(x - 1) == gx[i] && (int)y == gy[j])	flag = true;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	440b      	add	r3, r1
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d111      	bne.n	80024a8 <is_goal_dijkstra+0x134>
 8002484:	7cba      	ldrb	r2, [r7, #18]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	440b      	add	r3, r1
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d109      	bne.n	80024a8 <is_goal_dijkstra+0x134>
 8002494:	2301      	movs	r3, #1
 8002496:	77fb      	strb	r3, [r7, #31]
 8002498:	e006      	b.n	80024a8 <is_goal_dijkstra+0x134>
			if(flag == true) continue;
 800249a:	bf00      	nop
 800249c:	e004      	b.n	80024a8 <is_goal_dijkstra+0x134>
				if((int)x == gx[i] && (int)(y + 1) == gy[j])	flag = true;
 800249e:	bf00      	nop
 80024a0:	e002      	b.n	80024a8 <is_goal_dijkstra+0x134>
				if((int)(x + 1) == gx[i] && (int)y == gy[j])	flag = true;
 80024a2:	bf00      	nop
 80024a4:	e000      	b.n	80024a8 <is_goal_dijkstra+0x134>
				if((int)x == gx[i] && (int)(y - 1) == gy[j])	flag = true;
 80024a6:	bf00      	nop
		for(int j = 0;j < goal_size;j++){
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	3301      	adds	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	f6ff af73 	blt.w	800239e <is_goal_dijkstra+0x2a>
	for(int i = 0;i < goal_size;i++){
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	3301      	adds	r3, #1
 80024bc:	61bb      	str	r3, [r7, #24]
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	f6ff af68 	blt.w	8002398 <is_goal_dijkstra+0x24>
			}
		}
	}
	return flag;
 80024c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3724      	adds	r7, #36	; 0x24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr

080024d6 <make_map_dijkstra>:
			printf("c:time:%d\n",closed_list[pos.x][pos.y].center.time);
			break;
	}
}

t_position make_map_dijkstra(t_position start_pos,t_eight_dir start_mouse_dir,int *gx,int *gy,int goal_size){
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b088      	sub	sp, #32
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
 80024e2:	460b      	mov	r3, r1
 80024e4:	72fb      	strb	r3, [r7, #11]
	t_position min_pos;
	init_dijkstra_map();
 80024e6:	f7fe fe97 	bl	8001218 <init_dijkstra_map>
		printf("start:x:%d,y:%d,dir:%d\n",start_pos.x,start_pos.y,start_pos.dir);
		HAL_Delay(1);
		print_closed_list_info(start_pos);
		HAL_Delay(1);
#endif
	start_node_setup(start_pos, start_mouse_dir);
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	4619      	mov	r1, r3
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f7ff f850 	bl	8001594 <start_node_setup>
#if DEBUG_MODE == 1
		printf("start:x:%d,y:%d,dir:%d\n",start_pos.x,start_pos.y,start_pos.dir);
		print_closed_list_info(start_pos);
		HAL_Delay(1);
#endif
	for(int i = 0;i < 1000;i++){
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
 80024f8:	e02c      	b.n	8002554 <make_map_dijkstra+0x7e>
		min_pos = min_search();
 80024fa:	f7ff fd83 	bl	8002004 <min_search>
 80024fe:	4603      	mov	r3, r0
 8002500:	461a      	mov	r2, r3
 8002502:	753a      	strb	r2, [r7, #20]
 8002504:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002508:	757a      	strb	r2, [r7, #21]
 800250a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800250e:	75bb      	strb	r3, [r7, #22]
		set_determine(min_pos);
 8002510:	6978      	ldr	r0, [r7, #20]
 8002512:	f7ff fca3 	bl	8001e5c <set_determine>
		if(is_goal_dijkstra(min_pos, gx, gy, goal_size) == true)
 8002516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7ff ff29 	bl	8002374 <is_goal_dijkstra>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d10f      	bne.n	8002548 <make_map_dijkstra+0x72>
		{
			min_pos = last_expand(min_pos, gx,gy,goal_size);
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f007 fdb9 	bl	800a0a6 <last_expand>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	753a      	strb	r2, [r7, #20]
 800253a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800253e:	757a      	strb	r2, [r7, #21]
 8002540:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002544:	75bb      	strb	r3, [r7, #22]
			break;
 8002546:	e009      	b.n	800255c <make_map_dijkstra+0x86>
		t_node_el node_el = return_close_list_el(min_pos);
		printf("x:%d,y:%d,dir:%d,run_pt:%d,Dir:%d,Acc_Cnt:%d\n",min_pos.x,min_pos.y,min_pos.dir,pos_run_pt(min_pos),return_mouse_dir(min_pos),node_el.acc_cnt);
		HAL_Delay(1);
		print_closed_list_info(min_pos);
#endif
		expand_dijkstra(min_pos);
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f007 f9f9 	bl	8009940 <expand_dijkstra>
	for(int i = 0;i < 1000;i++){
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3301      	adds	r3, #1
 8002552:	61fb      	str	r3, [r7, #28]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800255a:	dbce      	blt.n	80024fa <make_map_dijkstra+0x24>
	}
	return min_pos;
 800255c:	f107 0318 	add.w	r3, r7, #24
 8002560:	f107 0214 	add.w	r2, r7, #20
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	4611      	mov	r1, r2
 8002568:	8019      	strh	r1, [r3, #0]
 800256a:	3302      	adds	r3, #2
 800256c:	0c12      	lsrs	r2, r2, #16
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	2300      	movs	r3, #0
 8002572:	7e3a      	ldrb	r2, [r7, #24]
 8002574:	f362 0307 	bfi	r3, r2, #0, #8
 8002578:	7e7a      	ldrb	r2, [r7, #25]
 800257a:	f362 230f 	bfi	r3, r2, #8, #8
 800257e:	7eba      	ldrb	r2, [r7, #26]
 8002580:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002584:	4618      	mov	r0, r3
 8002586:	3720      	adds	r7, #32
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	0000      	movs	r0, r0
	...

08002590 <run_dijkstra>:

void run_dijkstra(const t_straight_param *const *st_mode,uint16_t size_st_mode,
			   const t_straight_param *const *di_mode,uint16_t size_di_mode,
			   const t_param *const *turn_mode,
			   t_position start_pos,t_eight_dir start_mouse_dir,int *gx,int *gy,int goal_size)
{
 8002590:	b590      	push	{r4, r7, lr}
 8002592:	b097      	sub	sp, #92	; 0x5c
 8002594:	af02      	add	r7, sp, #8
 8002596:	61f8      	str	r0, [r7, #28]
 8002598:	617a      	str	r2, [r7, #20]
 800259a:	461a      	mov	r2, r3
 800259c:	460b      	mov	r3, r1
 800259e:	837b      	strh	r3, [r7, #26]
 80025a0:	4613      	mov	r3, r2
 80025a2:	833b      	strh	r3, [r7, #24]

	Initialize_st_param_for_time(st_mode, size_st_mode);
 80025a4:	8b7b      	ldrh	r3, [r7, #26]
 80025a6:	4619      	mov	r1, r3
 80025a8:	69f8      	ldr	r0, [r7, #28]
 80025aa:	f000 fea3 	bl	80032f4 <Initialize_st_param_for_time>
	Initialize_di_param_for_time(di_mode, size_di_mode);
 80025ae:	8b3b      	ldrh	r3, [r7, #24]
 80025b0:	4619      	mov	r1, r3
 80025b2:	6978      	ldr	r0, [r7, #20]
 80025b4:	f000 feb4 	bl	8003320 <Initialize_di_param_for_time>
	Initialize_turn_time(turn_mode);
 80025b8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025ba:	f000 faef 	bl	8002b9c <Initialize_turn_time>

	t_position p_pos = make_map_dijkstra(start_pos,start_mouse_dir,gx,gy,goal_size);
 80025be:	f897 1068 	ldrb.w	r1, [r7, #104]	; 0x68
 80025c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025ca:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80025cc:	f7ff ff83 	bl	80024d6 <make_map_dijkstra>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80025d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80025dc:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80025e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80025e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	int16_t log_run_tail = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	//t_position log_run_pos[MAZE_SIZE];

	for(int i = 0;i < MAZE_SIZE;i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80025f2:	e00f      	b.n	8002614 <run_dijkstra+0x84>
	{
		log_run_pos[i] = start_pos;
 80025f4:	49c0      	ldr	r1, [pc, #768]	; (80028f8 <run_dijkstra+0x368>)
 80025f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	440b      	add	r3, r1
 8002600:	461a      	mov	r2, r3
 8002602:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002606:	8819      	ldrh	r1, [r3, #0]
 8002608:	789b      	ldrb	r3, [r3, #2]
 800260a:	8011      	strh	r1, [r2, #0]
 800260c:	7093      	strb	r3, [r2, #2]
	for(int i = 0;i < MAZE_SIZE;i++)
 800260e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002610:	3301      	adds	r3, #1
 8002612:	64bb      	str	r3, [r7, #72]	; 0x48
 8002614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800261a:	dbeb      	blt.n	80025f4 <run_dijkstra+0x64>
	}

	for(int i = 0;i<MAZE_SIZE;i++){
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
 8002620:	e02b      	b.n	800267a <run_dijkstra+0xea>
		log_run_pos[i] = p_pos;
 8002622:	49b5      	ldr	r1, [pc, #724]	; (80028f8 <run_dijkstra+0x368>)
 8002624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	440b      	add	r3, r1
 800262e:	461a      	mov	r2, r3
 8002630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002634:	8819      	ldrh	r1, [r3, #0]
 8002636:	789b      	ldrb	r3, [r3, #2]
 8002638:	8011      	strh	r1, [r2, #0]
 800263a:	7093      	strb	r3, [r2, #2]
		log_run_tail++;
 800263c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002640:	b29b      	uxth	r3, r3
 8002642:	3301      	adds	r3, #1
 8002644:	b29b      	uxth	r3, r3
 8002646:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		if(pos_run_pt(p_pos) == run_pt_none) break;
 800264a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800264c:	f001 fce0 	bl	8004010 <pos_run_pt>
 8002650:	4603      	mov	r3, r0
 8002652:	2b13      	cmp	r3, #19
 8002654:	d016      	beq.n	8002684 <run_dijkstra+0xf4>
		p_pos = pos_parent(p_pos);
 8002656:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002658:	f001 fd52 	bl	8004100 <pos_parent>
 800265c:	4603      	mov	r3, r0
 800265e:	461a      	mov	r2, r3
 8002660:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8002664:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002668:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 800266c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002670:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(int i = 0;i<MAZE_SIZE;i++){
 8002674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002676:	3301      	adds	r3, #1
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
 800267a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002680:	dbcf      	blt.n	8002622 <run_dijkstra+0x92>
 8002682:	e000      	b.n	8002686 <run_dijkstra+0xf6>
		if(pos_run_pt(p_pos) == run_pt_none) break;
 8002684:	bf00      	nop
	}

	Sp_Param_Initialize(&machine);
 8002686:	489d      	ldr	r0, [pc, #628]	; (80028fc <run_dijkstra+0x36c>)
 8002688:	f00c f874 	bl	800e774 <Sp_Param_Initialize>
	Sp_Param_Initialize(&target);
 800268c:	489c      	ldr	r0, [pc, #624]	; (8002900 <run_dijkstra+0x370>)
 800268e:	f00c f871 	bl	800e774 <Sp_Param_Initialize>
	Sp_Param_Initialize(&max_set);
 8002692:	489c      	ldr	r0, [pc, #624]	; (8002904 <run_dijkstra+0x374>)
 8002694:	f00c f86e 	bl	800e774 <Sp_Param_Initialize>

	Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8002698:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8002908 <run_dijkstra+0x378>
 800269c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800290c <run_dijkstra+0x37c>
 80026a0:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8002910 <run_dijkstra+0x380>
 80026a4:	eeb0 1a66 	vmov.f32	s2, s13
 80026a8:	eef0 0a47 	vmov.f32	s1, s14
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	f00c f922 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 80026b4:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80026b8:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002914 <run_dijkstra+0x384>
 80026bc:	eddf 6a94 	vldr	s13, [pc, #592]	; 8002910 <run_dijkstra+0x380>
 80026c0:	eeb0 1a66 	vmov.f32	s2, s13
 80026c4:	eef0 0a47 	vmov.f32	s1, s14
 80026c8:	eeb0 0a67 	vmov.f32	s0, s15
 80026cc:	f00c f8fa 	bl	800e8c4 <Set_Velo_PID_Gain>
	wall_controll.is_controll = true;
 80026d0:	4b91      	ldr	r3, [pc, #580]	; (8002918 <run_dijkstra+0x388>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	//float st_acc = st_mode[0]->param->max_velo*st_mode[0]->param->max_velo/(2*0.020);
	straight(20.0, 10.0, 0.3,0.3);
 80026d8:	eddf 1a8e 	vldr	s3, [pc, #568]	; 8002914 <run_dijkstra+0x384>
 80026dc:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8002914 <run_dijkstra+0x384>
 80026e0:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 80026e4:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80026e8:	f00c f93a 	bl	800e960 <straight>
	log_flag = true;time = 0;
 80026ec:	4b8b      	ldr	r3, [pc, #556]	; (800291c <run_dijkstra+0x38c>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	4b8b      	ldr	r3, [pc, #556]	; (8002920 <run_dijkstra+0x390>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
	run_mode = NON_CON_MODE;
 80026f8:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <run_dijkstra+0x394>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
	for(int i = log_run_tail ;i >= 0;i--)
 80026fe:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
 8002704:	e231      	b.n	8002b6a <run_dijkstra+0x5da>
	{ 	filter_init();
 8002706:	f00b f99f 	bl	800da48 <filter_init>
		t_node_el node_el = return_close_list_el(log_run_pos[i]);
 800270a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800270e:	497a      	ldr	r1, [pc, #488]	; (80028f8 <run_dijkstra+0x368>)
 8002710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002712:	4613      	mov	r3, r2
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4413      	add	r3, r2
 8002718:	440b      	add	r3, r1
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	7859      	ldrb	r1, [r3, #1]
 800271e:	0209      	lsls	r1, r1, #8
 8002720:	430a      	orrs	r2, r1
 8002722:	789b      	ldrb	r3, [r3, #2]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	2300      	movs	r3, #0
 800272a:	f362 0317 	bfi	r3, r2, #0, #24
 800272e:	4619      	mov	r1, r3
 8002730:	f001 fe04 	bl	800433c <return_close_list_el>
		t_straight_param velo_param;
		switch(node_el.run_pt)
 8002734:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002738:	3b01      	subs	r3, #1
 800273a:	2b12      	cmp	r3, #18
 800273c:	f200 8212 	bhi.w	8002b64 <run_dijkstra+0x5d4>
 8002740:	a201      	add	r2, pc, #4	; (adr r2, 8002748 <run_dijkstra+0x1b8>)
 8002742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002746:	bf00      	nop
 8002748:	08002795 	.word	0x08002795
 800274c:	0800292d 	.word	0x0800292d
 8002750:	08002af9 	.word	0x08002af9
 8002754:	08002af9 	.word	0x08002af9
 8002758:	08002af9 	.word	0x08002af9
 800275c:	08002af9 	.word	0x08002af9
 8002760:	08002b13 	.word	0x08002b13
 8002764:	08002b13 	.word	0x08002b13
 8002768:	08002b2f 	.word	0x08002b2f
 800276c:	08002b2f 	.word	0x08002b2f
 8002770:	08002b13 	.word	0x08002b13
 8002774:	08002b13 	.word	0x08002b13
 8002778:	08002b2f 	.word	0x08002b2f
 800277c:	08002b2f 	.word	0x08002b2f
 8002780:	08002b4b 	.word	0x08002b4b
 8002784:	08002b4b 	.word	0x08002b4b
 8002788:	08002b65 	.word	0x08002b65
 800278c:	08002b65 	.word	0x08002b65
 8002790:	08002b65 	.word	0x08002b65
		{
			case Straight:
				wall_controll.is_controll = true;
 8002794:	4b60      	ldr	r3, [pc, #384]	; (8002918 <run_dijkstra+0x388>)
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				//velo_param = calc_straight_max_velo(st_mode, size_st_mode,SECTION*(float)node_el.acc_cnt);
				//Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
				//Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
				if(i == 0)
 800279c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d14f      	bne.n	8002842 <run_dijkstra+0x2b2>
				{
					velo_param = calc_end_straight_max_velo(st_mode, size_st_mode,SECTION*(float)node_el.acc_cnt);
 80027a2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ae:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8002928 <run_dijkstra+0x398>
 80027b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027b6:	f107 0320 	add.w	r3, r7, #32
 80027ba:	8b7a      	ldrh	r2, [r7, #26]
 80027bc:	eeb0 0a67 	vmov.f32	s0, s15
 80027c0:	69f9      	ldr	r1, [r7, #28]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 f92c 	bl	8003a20 <calc_end_straight_max_velo>
					Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
 80027c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80027da:	eeb0 1a66 	vmov.f32	s2, s13
 80027de:	eef0 0a47 	vmov.f32	s1, s14
 80027e2:	eeb0 0a67 	vmov.f32	s0, s15
 80027e6:	f00c f887 	bl	800e8f8 <Set_Omega_PID_Gain>
					Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	ed93 7a01 	vldr	s14, [r3, #4]
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80027fc:	eeb0 1a66 	vmov.f32	s2, s13
 8002800:	eef0 0a47 	vmov.f32	s1, s14
 8002804:	eeb0 0a67 	vmov.f32	s0, s15
 8002808:	f00c f85c 	bl	800e8c4 <Set_Velo_PID_Gain>
					straight(SECTION*(float)node_el.acc_cnt, velo_param.param->acc, velo_param.param->max_velo, 0.0);
 800280c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8002928 <run_dijkstra+0x398>
 800281c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	ed93 7a01 	vldr	s14, [r3, #4]
 8002826:	6a3b      	ldr	r3, [r7, #32]
 8002828:	edd3 6a00 	vldr	s13, [r3]
 800282c:	eddf 1a38 	vldr	s3, [pc, #224]	; 8002910 <run_dijkstra+0x380>
 8002830:	eeb0 1a66 	vmov.f32	s2, s13
 8002834:	eef0 0a47 	vmov.f32	s1, s14
 8002838:	eeb0 0a67 	vmov.f32	s0, s15
 800283c:	f00c f890 	bl	800e960 <straight>
					break;
 8002840:	e190      	b.n	8002b64 <run_dijkstra+0x5d4>
				}
				else
				{
					velo_param = calc_straight_max_velo(st_mode, size_st_mode,SECTION*(float)node_el.acc_cnt);
 8002842:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002928 <run_dijkstra+0x398>
 8002852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002856:	463b      	mov	r3, r7
 8002858:	8b7a      	ldrh	r2, [r7, #26]
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	69f9      	ldr	r1, [r7, #28]
 8002860:	4618      	mov	r0, r3
 8002862:	f000 ff01 	bl	8003668 <calc_straight_max_velo>
 8002866:	f107 0320 	add.w	r3, r7, #32
 800286a:	463a      	mov	r2, r7
 800286c:	ca07      	ldmia	r2, {r0, r1, r2}
 800286e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	ed93 7a01 	vldr	s14, [r3, #4]
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	edd3 6a02 	vldr	s13, [r3, #8]
 8002884:	eeb0 1a66 	vmov.f32	s2, s13
 8002888:	eef0 0a47 	vmov.f32	s1, s14
 800288c:	eeb0 0a67 	vmov.f32	s0, s15
 8002890:	f00c f832 	bl	800e8f8 <Set_Omega_PID_Gain>
					Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	ed93 7a01 	vldr	s14, [r3, #4]
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80028a6:	eeb0 1a66 	vmov.f32	s2, s13
 80028aa:	eef0 0a47 	vmov.f32	s1, s14
 80028ae:	eeb0 0a67 	vmov.f32	s0, s15
 80028b2:	f00c f807 	bl	800e8c4 <Set_Velo_PID_Gain>
					straight(SECTION*(float)node_el.acc_cnt, velo_param.param->acc, velo_param.param->max_velo, st_mode[0]->param->max_velo);
 80028b6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80028ba:	ee07 3a90 	vmov	s15, r3
 80028be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028c2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002928 <run_dijkstra+0x398>
 80028c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ca:	6a3b      	ldr	r3, [r7, #32]
 80028cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	edd3 6a00 	vldr	s13, [r3]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	ed93 6a00 	vldr	s12, [r3]
 80028e0:	eef0 1a46 	vmov.f32	s3, s12
 80028e4:	eeb0 1a66 	vmov.f32	s2, s13
 80028e8:	eef0 0a47 	vmov.f32	s1, s14
 80028ec:	eeb0 0a67 	vmov.f32	s0, s15
 80028f0:	f00c f836 	bl	800e960 <straight>
				}
				break;
 80028f4:	e136      	b.n	8002b64 <run_dijkstra+0x5d4>
 80028f6:	bf00      	nop
 80028f8:	20000b00 	.word	0x20000b00
 80028fc:	2001b664 	.word	0x2001b664
 8002900:	2001b6a0 	.word	0x2001b6a0
 8002904:	2001b1b4 	.word	0x2001b1b4
 8002908:	3f19999a 	.word	0x3f19999a
 800290c:	3c23d70a 	.word	0x3c23d70a
 8002910:	00000000 	.word	0x00000000
 8002914:	3e99999a 	.word	0x3e99999a
 8002918:	20000aac 	.word	0x20000aac
 800291c:	2001b658 	.word	0x2001b658
 8002920:	20009998 	.word	0x20009998
 8002924:	20001708 	.word	0x20001708
 8002928:	42b40000 	.word	0x42b40000
			case Diagonal:
				wall_controll.is_controll = true;
 800292c:	4b98      	ldr	r3, [pc, #608]	; (8002b90 <run_dijkstra+0x600>)
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				//velo_param = calc_straight_max_velo(di_mode, size_di_mode,DIAG_SECTION*(float)node_el.acc_cnt);
				//Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
				//Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
				if(i == 0)
 8002934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d16c      	bne.n	8002a14 <run_dijkstra+0x484>
				{
					velo_param = calc_end_straight_max_velo(di_mode, size_di_mode,DIAG_SECTION*(float)node_el.acc_cnt);
 800293a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002946:	ee17 0a90 	vmov	r0, s15
 800294a:	f7fd fe1d 	bl	8000588 <__aeabi_f2d>
 800294e:	a38e      	add	r3, pc, #568	; (adr r3, 8002b88 <run_dijkstra+0x5f8>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd fe70 	bl	8000638 <__aeabi_dmul>
 8002958:	4603      	mov	r3, r0
 800295a:	460c      	mov	r4, r1
 800295c:	4618      	mov	r0, r3
 800295e:	4621      	mov	r1, r4
 8002960:	f7fe f962 	bl	8000c28 <__aeabi_d2f>
 8002964:	4601      	mov	r1, r0
 8002966:	463b      	mov	r3, r7
 8002968:	8b3a      	ldrh	r2, [r7, #24]
 800296a:	ee00 1a10 	vmov	s0, r1
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	4618      	mov	r0, r3
 8002972:	f001 f855 	bl	8003a20 <calc_end_straight_max_velo>
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	463a      	mov	r2, r7
 800297c:	ca07      	ldmia	r2, {r0, r1, r2}
 800297e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
 8002982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298a:	ed93 7a01 	vldr	s14, [r3, #4]
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	edd3 6a02 	vldr	s13, [r3, #8]
 8002994:	eeb0 1a66 	vmov.f32	s2, s13
 8002998:	eef0 0a47 	vmov.f32	s1, s14
 800299c:	eeb0 0a67 	vmov.f32	s0, s15
 80029a0:	f00b ffaa 	bl	800e8f8 <Set_Omega_PID_Gain>
					Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	edd3 6a02 	vldr	s13, [r3, #8]
 80029b6:	eeb0 1a66 	vmov.f32	s2, s13
 80029ba:	eef0 0a47 	vmov.f32	s1, s14
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	f00b ff7f 	bl	800e8c4 <Set_Velo_PID_Gain>
					diagonal(DIAG_SECTION*(float)node_el.acc_cnt, velo_param.param->acc, velo_param.param->max_velo, 0.0);
 80029c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d2:	ee17 0a90 	vmov	r0, s15
 80029d6:	f7fd fdd7 	bl	8000588 <__aeabi_f2d>
 80029da:	a36b      	add	r3, pc, #428	; (adr r3, 8002b88 <run_dijkstra+0x5f8>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fe2a 	bl	8000638 <__aeabi_dmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	460c      	mov	r4, r1
 80029e8:	4618      	mov	r0, r3
 80029ea:	4621      	mov	r1, r4
 80029ec:	f7fe f91c 	bl	8000c28 <__aeabi_d2f>
 80029f0:	4602      	mov	r2, r0
 80029f2:	6a3b      	ldr	r3, [r7, #32]
 80029f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	ed93 7a00 	vldr	s14, [r3]
 80029fe:	eddf 1a65 	vldr	s3, [pc, #404]	; 8002b94 <run_dijkstra+0x604>
 8002a02:	eeb0 1a47 	vmov.f32	s2, s14
 8002a06:	eef0 0a67 	vmov.f32	s1, s15
 8002a0a:	ee00 2a10 	vmov	s0, r2
 8002a0e:	f00c f917 	bl	800ec40 <diagonal>
					velo_param = calc_straight_max_velo(di_mode, size_di_mode,DIAG_SECTION*(float)node_el.acc_cnt);
					Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
					Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
					diagonal(DIAG_SECTION*(float)node_el.acc_cnt, velo_param.param->acc, velo_param.param->max_velo, di_mode[0]->param->max_velo);
				}
				break;
 8002a12:	e0a7      	b.n	8002b64 <run_dijkstra+0x5d4>
					velo_param = calc_straight_max_velo(di_mode, size_di_mode,DIAG_SECTION*(float)node_el.acc_cnt);
 8002a14:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002a18:	ee07 3a90 	vmov	s15, r3
 8002a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a20:	ee17 0a90 	vmov	r0, s15
 8002a24:	f7fd fdb0 	bl	8000588 <__aeabi_f2d>
 8002a28:	a357      	add	r3, pc, #348	; (adr r3, 8002b88 <run_dijkstra+0x5f8>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fe03 	bl	8000638 <__aeabi_dmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	4618      	mov	r0, r3
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f7fe f8f5 	bl	8000c28 <__aeabi_d2f>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	463b      	mov	r3, r7
 8002a42:	8b3a      	ldrh	r2, [r7, #24]
 8002a44:	ee00 1a10 	vmov	s0, r1
 8002a48:	6979      	ldr	r1, [r7, #20]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fe0c 	bl	8003668 <calc_straight_max_velo>
 8002a50:	f107 0320 	add.w	r3, r7, #32
 8002a54:	463a      	mov	r2, r7
 8002a56:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					Set_Omega_PID_Gain(velo_param.om_gain->Kp, velo_param.om_gain->Ki, velo_param.om_gain->Kd);
 8002a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5e:	edd3 7a00 	vldr	s15, [r3]
 8002a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a64:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a6e:	eeb0 1a66 	vmov.f32	s2, s13
 8002a72:	eef0 0a47 	vmov.f32	s1, s14
 8002a76:	eeb0 0a67 	vmov.f32	s0, s15
 8002a7a:	f00b ff3d 	bl	800e8f8 <Set_Omega_PID_Gain>
					Set_Velo_PID_Gain(velo_param.sp_gain->Kp, velo_param.sp_gain->Ki, velo_param.sp_gain->Kd);
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a90:	eeb0 1a66 	vmov.f32	s2, s13
 8002a94:	eef0 0a47 	vmov.f32	s1, s14
 8002a98:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9c:	f00b ff12 	bl	800e8c4 <Set_Velo_PID_Gain>
					diagonal(DIAG_SECTION*(float)node_el.acc_cnt, velo_param.param->acc, velo_param.param->max_velo, di_mode[0]->param->max_velo);
 8002aa0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002aa4:	ee07 3a90 	vmov	s15, r3
 8002aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aac:	ee17 0a90 	vmov	r0, s15
 8002ab0:	f7fd fd6a 	bl	8000588 <__aeabi_f2d>
 8002ab4:	a334      	add	r3, pc, #208	; (adr r3, 8002b88 <run_dijkstra+0x5f8>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fdbd 	bl	8000638 <__aeabi_dmul>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	460c      	mov	r4, r1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	f7fe f8af 	bl	8000c28 <__aeabi_d2f>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	edd3 6a00 	vldr	s13, [r3]
 8002ae2:	eef0 1a66 	vmov.f32	s3, s13
 8002ae6:	eeb0 1a47 	vmov.f32	s2, s14
 8002aea:	eef0 0a67 	vmov.f32	s1, s15
 8002aee:	ee00 2a10 	vmov	s0, r2
 8002af2:	f00c f8a5 	bl	800ec40 <diagonal>
				break;
 8002af6:	e035      	b.n	8002b64 <run_dijkstra+0x5d4>
			case Long_turnL90:
			case Long_turnR90:
			case Long_turnL180:
			case Long_turnR180:
				//wall_controll.is_controll = false;
				long_turn(turn_mode[node_el.run_pt],st_mode[0]);
 8002af8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b00:	4413      	add	r3, r2
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f00c fb9c 	bl	800f248 <long_turn>
				break;
 8002b10:	e028      	b.n	8002b64 <run_dijkstra+0x5d4>
			case Turn_in_L45:
			case Turn_in_R45:
			case Turn_in_L135:
			case Turn_in_R135:
				//wall_controll.is_controll = false;
				turn_in(turn_mode[node_el.run_pt],st_mode[0],di_mode[0]);
 8002b12:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b1a:	4413      	add	r3, r2
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	6819      	ldr	r1, [r3, #0]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f00c fede 	bl	800f8e8 <turn_in>
				break;
 8002b2c:	e01a      	b.n	8002b64 <run_dijkstra+0x5d4>
			case Turn_out_L45:
			case Turn_out_R45:
			case Turn_out_L135:
			case Turn_out_R135:
				//wall_controll.is_controll = false;
				turn_out(turn_mode[node_el.run_pt],st_mode[0],di_mode[0]);
 8002b2e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b36:	4413      	add	r3, r2
 8002b38:	6818      	ldr	r0, [r3, #0]
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f00d f918 	bl	800fd78 <turn_out>
				break;
 8002b48:	e00c      	b.n	8002b64 <run_dijkstra+0x5d4>
			case Turn_RV90:
			case Turn_LV90:
				//wall_controll.is_controll = false;
				turn_v90(turn_mode[node_el.run_pt],di_mode[0]);
 8002b4a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b52:	4413      	add	r3, r2
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f00c fd0d 	bl	800f57c <turn_v90>
				break;
 8002b62:	bf00      	nop
	for(int i = log_run_tail ;i >= 0;i--)
 8002b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b66:	3b01      	subs	r3, #1
 8002b68:	643b      	str	r3, [r7, #64]	; 0x40
 8002b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f6bf adca 	bge.w	8002706 <run_dijkstra+0x176>
			case run_pt_none:
				break;
		}
	}
	//straight(5.0, 6.0, 0.3, 0.0);
	run_mode = NON_CON_MODE;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <run_dijkstra+0x608>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	701a      	strb	r2, [r3, #0]
	wall_controll.is_controll = false;
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <run_dijkstra+0x600>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8002b80:	bf00      	nop
 8002b82:	3754      	adds	r7, #84	; 0x54
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd90      	pop	{r4, r7, pc}
 8002b88:	69ad42c4 	.word	0x69ad42c4
 8002b8c:	404fd1de 	.word	0x404fd1de
 8002b90:	20000aac 	.word	0x20000aac
 8002b94:	00000000 	.word	0x00000000
 8002b98:	20001708 	.word	0x20001708

08002b9c <Initialize_turn_time>:
static uint16_t glob_st_param_size;
static const t_straight_param *const *glob_di_param;
static uint16_t glob_di_param_size;

void Initialize_turn_time(const t_param *const *mode)
{
 8002b9c:	b5b0      	push	{r4, r5, r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	float omega_mx = 0.0f;
 8002ba4:	f04f 0300 	mov.w	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]

	omega_mx = mode[Long_turnL180]->param->velo/(mode[Long_turnL180]->param->r_min/1000.0);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3318      	adds	r3, #24
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fce7 	bl	8000588 <__aeabi_f2d>
 8002bba:	4604      	mov	r4, r0
 8002bbc:	460d      	mov	r5, r1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3318      	adds	r3, #24
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fd fcdd 	bl	8000588 <__aeabi_f2d>
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	4bbd      	ldr	r3, [pc, #756]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002bd4:	f7fd fe5a 	bl	800088c <__aeabi_ddiv>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4620      	mov	r0, r4
 8002bde:	4629      	mov	r1, r5
 8002be0:	f7fd fe54 	bl	800088c <__aeabi_ddiv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	4618      	mov	r0, r3
 8002bea:	4621      	mov	r1, r4
 8002bec:	f7fe f81c 	bl	8000c28 <__aeabi_d2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	60fb      	str	r3, [r7, #12]
	create_turn_time.long_turn_180_time  = (uint16_t)(mode[Long_turnL180]->param->Lstart/mode[Long_turnL180]->param->velo);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3318      	adds	r3, #24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c14:	ee17 3a90 	vmov	r3, s15
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	4bac      	ldr	r3, [pc, #688]	; (8002ecc <Initialize_turn_time+0x330>)
 8002c1c:	805a      	strh	r2, [r3, #2]
	create_turn_time.long_turn_180_time += (uint16_t)(DEG2RAD(mode[Long_turnL180]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8002c1e:	4bab      	ldr	r3, [pc, #684]	; (8002ecc <Initialize_turn_time+0x330>)
 8002c20:	885c      	ldrh	r4, [r3, #2]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3318      	adds	r3, #24
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c2e:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8002ed0 <Initialize_turn_time+0x334>
 8002c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c36:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8002ed4 <Initialize_turn_time+0x338>
 8002c3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c3e:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8002ed8 <Initialize_turn_time+0x33c>
 8002c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c4e:	ee16 0a90 	vmov	r0, s13
 8002c52:	f7fd fc99 	bl	8000588 <__aeabi_f2d>
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	4b9b      	ldr	r3, [pc, #620]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002c5c:	f7fd fcec 	bl	8000638 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	f7fd ffbe 	bl	8000be8 <__aeabi_d2uiz>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	4423      	add	r3, r4
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	4b95      	ldr	r3, [pc, #596]	; (8002ecc <Initialize_turn_time+0x330>)
 8002c76:	805a      	strh	r2, [r3, #2]
	create_turn_time.long_turn_180_time += (uint16_t)(mode[Long_turnL180]->param->Lend/mode[Long_turnL180]->param->velo);
 8002c78:	4b94      	ldr	r3, [pc, #592]	; (8002ecc <Initialize_turn_time+0x330>)
 8002c7a:	885a      	ldrh	r2, [r3, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3318      	adds	r3, #24
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	ed93 7a00 	vldr	s14, [r3]
 8002c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c9c:	ee17 3a90 	vmov	r3, s15
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <Initialize_turn_time+0x330>)
 8002ca8:	805a      	strh	r2, [r3, #2]

	omega_mx = mode[Long_turnL90]->param->velo/(mode[Long_turnL90]->param->r_min/1000.0);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3310      	adds	r3, #16
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc67 	bl	8000588 <__aeabi_f2d>
 8002cba:	4604      	mov	r4, r0
 8002cbc:	460d      	mov	r5, r1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fd fc5d 	bl	8000588 <__aeabi_f2d>
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b7d      	ldr	r3, [pc, #500]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002cd4:	f7fd fdda 	bl	800088c <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4629      	mov	r1, r5
 8002ce0:	f7fd fdd4 	bl	800088c <__aeabi_ddiv>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4621      	mov	r1, r4
 8002cec:	f7fd ff9c 	bl	8000c28 <__aeabi_d2f>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	60fb      	str	r3, [r7, #12]
	create_turn_time.long_turn_90_time  = (uint16_t)(mode[Long_turnL90]->param->Lstart/mode[Long_turnL90]->param->velo);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3310      	adds	r3, #16
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	3310      	adds	r3, #16
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	ed93 7a00 	vldr	s14, [r3]
 8002d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d14:	ee17 3a90 	vmov	r3, s15
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	4b6c      	ldr	r3, [pc, #432]	; (8002ecc <Initialize_turn_time+0x330>)
 8002d1c:	801a      	strh	r2, [r3, #0]
	create_turn_time.long_turn_90_time += (uint16_t)(DEG2RAD(mode[Long_turnL90]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8002d1e:	4b6b      	ldr	r3, [pc, #428]	; (8002ecc <Initialize_turn_time+0x330>)
 8002d20:	881c      	ldrh	r4, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3310      	adds	r3, #16
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002d2e:	eddf 6a68 	vldr	s13, [pc, #416]	; 8002ed0 <Initialize_turn_time+0x334>
 8002d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d36:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002ed4 <Initialize_turn_time+0x338>
 8002d3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d3e:	eddf 6a66 	vldr	s13, [pc, #408]	; 8002ed8 <Initialize_turn_time+0x33c>
 8002d42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d4e:	ee16 0a90 	vmov	r0, s13
 8002d52:	f7fd fc19 	bl	8000588 <__aeabi_f2d>
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002d5c:	f7fd fc6c 	bl	8000638 <__aeabi_dmul>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f7fd ff3e 	bl	8000be8 <__aeabi_d2uiz>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4423      	add	r3, r4
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	4b55      	ldr	r3, [pc, #340]	; (8002ecc <Initialize_turn_time+0x330>)
 8002d76:	801a      	strh	r2, [r3, #0]
	create_turn_time.long_turn_90_time += (uint16_t)(mode[Long_turnL90]->param->Lend/mode[Long_turnL90]->param->velo);
 8002d78:	4b54      	ldr	r3, [pc, #336]	; (8002ecc <Initialize_turn_time+0x330>)
 8002d7a:	881a      	ldrh	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3310      	adds	r3, #16
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	edd3 6a03 	vldr	s13, [r3, #12]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3310      	adds	r3, #16
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	ed93 7a00 	vldr	s14, [r3]
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d9c:	ee17 3a90 	vmov	r3, s15
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	4b49      	ldr	r3, [pc, #292]	; (8002ecc <Initialize_turn_time+0x330>)
 8002da8:	801a      	strh	r2, [r3, #0]

	omega_mx = mode[Turn_LV90]->param->velo/(mode[Turn_LV90]->param->r_min/1000.0);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3340      	adds	r3, #64	; 0x40
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fbe7 	bl	8000588 <__aeabi_f2d>
 8002dba:	4604      	mov	r4, r0
 8002dbc:	460d      	mov	r5, r1
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3340      	adds	r3, #64	; 0x40
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fd fbdd 	bl	8000588 <__aeabi_f2d>
 8002dce:	f04f 0200 	mov.w	r2, #0
 8002dd2:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002dd4:	f7fd fd5a 	bl	800088c <__aeabi_ddiv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	4620      	mov	r0, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	f7fd fd54 	bl	800088c <__aeabi_ddiv>
 8002de4:	4603      	mov	r3, r0
 8002de6:	460c      	mov	r4, r1
 8002de8:	4618      	mov	r0, r3
 8002dea:	4621      	mov	r1, r4
 8002dec:	f7fd ff1c 	bl	8000c28 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	60fb      	str	r3, [r7, #12]
	create_turn_time.turn_V90_time  = (uint16_t)(mode[Turn_LV90]->param->Lstart/mode[Turn_LV90]->param->velo);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3340      	adds	r3, #64	; 0x40
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3340      	adds	r3, #64	; 0x40
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	ed93 7a00 	vldr	s14, [r3]
 8002e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e14:	ee17 3a90 	vmov	r3, s15
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <Initialize_turn_time+0x330>)
 8002e1c:	809a      	strh	r2, [r3, #4]
	create_turn_time.turn_V90_time += (uint16_t)(DEG2RAD(mode[Turn_LV90]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8002e1e:	4b2b      	ldr	r3, [pc, #172]	; (8002ecc <Initialize_turn_time+0x330>)
 8002e20:	889c      	ldrh	r4, [r3, #4]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3340      	adds	r3, #64	; 0x40
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	ed93 7a04 	vldr	s14, [r3, #16]
 8002e2e:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002ed0 <Initialize_turn_time+0x334>
 8002e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ed4 <Initialize_turn_time+0x338>
 8002e3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ed8 <Initialize_turn_time+0x33c>
 8002e42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e4a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e4e:	ee16 0a90 	vmov	r0, s13
 8002e52:	f7fd fb99 	bl	8000588 <__aeabi_f2d>
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <Initialize_turn_time+0x32c>)
 8002e5c:	f7fd fbec 	bl	8000638 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	f7fd febe 	bl	8000be8 <__aeabi_d2uiz>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4423      	add	r3, r4
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	4b15      	ldr	r3, [pc, #84]	; (8002ecc <Initialize_turn_time+0x330>)
 8002e76:	809a      	strh	r2, [r3, #4]
	create_turn_time.turn_V90_time += (uint16_t)(mode[Turn_LV90]->param->Lend/mode[Turn_LV90]->param->velo);
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <Initialize_turn_time+0x330>)
 8002e7a:	889a      	ldrh	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3340      	adds	r3, #64	; 0x40
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	edd3 6a03 	vldr	s13, [r3, #12]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3340      	adds	r3, #64	; 0x40
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	ed93 7a00 	vldr	s14, [r3]
 8002e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e9c:	ee17 3a90 	vmov	r3, s15
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b09      	ldr	r3, [pc, #36]	; (8002ecc <Initialize_turn_time+0x330>)
 8002ea8:	809a      	strh	r2, [r3, #4]

	omega_mx = mode[Turn_in_L45]->param->velo/(mode[Turn_in_L45]->param->r_min/1000.0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3320      	adds	r3, #32
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7fd fb67 	bl	8000588 <__aeabi_f2d>
 8002eba:	4604      	mov	r4, r0
 8002ebc:	460d      	mov	r5, r1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3320      	adds	r3, #32
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	e009      	b.n	8002edc <Initialize_turn_time+0x340>
 8002ec8:	408f4000 	.word	0x408f4000
 8002ecc:	2001b6d0 	.word	0x2001b6d0
 8002ed0:	43340000 	.word	0x43340000
 8002ed4:	40490fda 	.word	0x40490fda
 8002ed8:	3f344d01 	.word	0x3f344d01
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb52 	bl	8000588 <__aeabi_f2d>
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	4bbd      	ldr	r3, [pc, #756]	; (80031e0 <Initialize_turn_time+0x644>)
 8002eea:	f7fd fccf 	bl	800088c <__aeabi_ddiv>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	4629      	mov	r1, r5
 8002ef6:	f7fd fcc9 	bl	800088c <__aeabi_ddiv>
 8002efa:	4603      	mov	r3, r0
 8002efc:	460c      	mov	r4, r1
 8002efe:	4618      	mov	r0, r3
 8002f00:	4621      	mov	r1, r4
 8002f02:	f7fd fe91 	bl	8000c28 <__aeabi_d2f>
 8002f06:	4603      	mov	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]
	create_turn_time.turn_in45_time  = (uint16_t)(mode[Turn_in_L45]->param->Lstart/mode[Turn_in_L45]->param->velo);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3320      	adds	r3, #32
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3320      	adds	r3, #32
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	ed93 7a00 	vldr	s14, [r3]
 8002f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2a:	ee17 3a90 	vmov	r3, s15
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4bac      	ldr	r3, [pc, #688]	; (80031e4 <Initialize_turn_time+0x648>)
 8002f32:	80da      	strh	r2, [r3, #6]
	create_turn_time.turn_in45_time += (uint16_t)(DEG2RAD(mode[Turn_in_L45]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8002f34:	4bab      	ldr	r3, [pc, #684]	; (80031e4 <Initialize_turn_time+0x648>)
 8002f36:	88dc      	ldrh	r4, [r3, #6]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3320      	adds	r3, #32
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	ed93 7a04 	vldr	s14, [r3, #16]
 8002f44:	eddf 6aa8 	vldr	s13, [pc, #672]	; 80031e8 <Initialize_turn_time+0x64c>
 8002f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002f4c:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 80031ec <Initialize_turn_time+0x650>
 8002f50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f54:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80031f0 <Initialize_turn_time+0x654>
 8002f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f64:	ee16 0a90 	vmov	r0, s13
 8002f68:	f7fd fb0e 	bl	8000588 <__aeabi_f2d>
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <Initialize_turn_time+0x644>)
 8002f72:	f7fd fb61 	bl	8000638 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fd fe33 	bl	8000be8 <__aeabi_d2uiz>
 8002f82:	4603      	mov	r3, r0
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	4423      	add	r3, r4
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	4b96      	ldr	r3, [pc, #600]	; (80031e4 <Initialize_turn_time+0x648>)
 8002f8c:	80da      	strh	r2, [r3, #6]
	create_turn_time.turn_in45_time += (uint16_t)(mode[Turn_in_L45]->param->Lend/mode[Turn_in_L45]->param->velo);
 8002f8e:	4b95      	ldr	r3, [pc, #596]	; (80031e4 <Initialize_turn_time+0x648>)
 8002f90:	88da      	ldrh	r2, [r3, #6]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3320      	adds	r3, #32
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3320      	adds	r3, #32
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	ed93 7a00 	vldr	s14, [r3]
 8002faa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fb2:	ee17 3a90 	vmov	r3, s15
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4413      	add	r3, r2
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	4b89      	ldr	r3, [pc, #548]	; (80031e4 <Initialize_turn_time+0x648>)
 8002fbe:	80da      	strh	r2, [r3, #6]

	omega_mx = mode[Turn_out_L45]->param->velo/(mode[Turn_out_L45]->param->r_min/1000.0);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3328      	adds	r3, #40	; 0x28
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fadc 	bl	8000588 <__aeabi_f2d>
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	460d      	mov	r5, r1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3328      	adds	r3, #40	; 0x28
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fad2 	bl	8000588 <__aeabi_f2d>
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	4b7d      	ldr	r3, [pc, #500]	; (80031e0 <Initialize_turn_time+0x644>)
 8002fea:	f7fd fc4f 	bl	800088c <__aeabi_ddiv>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	4629      	mov	r1, r5
 8002ff6:	f7fd fc49 	bl	800088c <__aeabi_ddiv>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	4618      	mov	r0, r3
 8003000:	4621      	mov	r1, r4
 8003002:	f7fd fe11 	bl	8000c28 <__aeabi_d2f>
 8003006:	4603      	mov	r3, r0
 8003008:	60fb      	str	r3, [r7, #12]
	create_turn_time.turn_out45_time  = (uint16_t)(mode[Turn_out_L45]->param->Lstart/mode[Turn_out_L45]->param->velo);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3328      	adds	r3, #40	; 0x28
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	edd3 6a02 	vldr	s13, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3328      	adds	r3, #40	; 0x28
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	ed93 7a00 	vldr	s14, [r3]
 8003022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302a:	ee17 3a90 	vmov	r3, s15
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b6c      	ldr	r3, [pc, #432]	; (80031e4 <Initialize_turn_time+0x648>)
 8003032:	811a      	strh	r2, [r3, #8]
	create_turn_time.turn_out45_time += (uint16_t)(DEG2RAD(mode[Turn_out_L45]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8003034:	4b6b      	ldr	r3, [pc, #428]	; (80031e4 <Initialize_turn_time+0x648>)
 8003036:	891c      	ldrh	r4, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3328      	adds	r3, #40	; 0x28
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	ed93 7a04 	vldr	s14, [r3, #16]
 8003044:	eddf 6a68 	vldr	s13, [pc, #416]	; 80031e8 <Initialize_turn_time+0x64c>
 8003048:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800304c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80031ec <Initialize_turn_time+0x650>
 8003050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003054:	eddf 6a66 	vldr	s13, [pc, #408]	; 80031f0 <Initialize_turn_time+0x654>
 8003058:	edd7 7a03 	vldr	s15, [r7, #12]
 800305c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003060:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003064:	ee16 0a90 	vmov	r0, s13
 8003068:	f7fd fa8e 	bl	8000588 <__aeabi_f2d>
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	4b5b      	ldr	r3, [pc, #364]	; (80031e0 <Initialize_turn_time+0x644>)
 8003072:	f7fd fae1 	bl	8000638 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fdb3 	bl	8000be8 <__aeabi_d2uiz>
 8003082:	4603      	mov	r3, r0
 8003084:	b29b      	uxth	r3, r3
 8003086:	4423      	add	r3, r4
 8003088:	b29a      	uxth	r2, r3
 800308a:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <Initialize_turn_time+0x648>)
 800308c:	811a      	strh	r2, [r3, #8]
	create_turn_time.turn_out45_time += (uint16_t)(mode[Turn_out_L45]->param->Lend/mode[Turn_out_L45]->param->velo);
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <Initialize_turn_time+0x648>)
 8003090:	891a      	ldrh	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3328      	adds	r3, #40	; 0x28
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	edd3 6a03 	vldr	s13, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	3328      	adds	r3, #40	; 0x28
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	ed93 7a00 	vldr	s14, [r3]
 80030aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030b2:	ee17 3a90 	vmov	r3, s15
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	4b49      	ldr	r3, [pc, #292]	; (80031e4 <Initialize_turn_time+0x648>)
 80030be:	811a      	strh	r2, [r3, #8]

	omega_mx = mode[Turn_in_L135]->param->velo/(mode[Turn_in_L135]->param->r_min/1000.0);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3330      	adds	r3, #48	; 0x30
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa5c 	bl	8000588 <__aeabi_f2d>
 80030d0:	4604      	mov	r4, r0
 80030d2:	460d      	mov	r5, r1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3330      	adds	r3, #48	; 0x30
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd fa52 	bl	8000588 <__aeabi_f2d>
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	4b3d      	ldr	r3, [pc, #244]	; (80031e0 <Initialize_turn_time+0x644>)
 80030ea:	f7fd fbcf 	bl	800088c <__aeabi_ddiv>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4620      	mov	r0, r4
 80030f4:	4629      	mov	r1, r5
 80030f6:	f7fd fbc9 	bl	800088c <__aeabi_ddiv>
 80030fa:	4603      	mov	r3, r0
 80030fc:	460c      	mov	r4, r1
 80030fe:	4618      	mov	r0, r3
 8003100:	4621      	mov	r1, r4
 8003102:	f7fd fd91 	bl	8000c28 <__aeabi_d2f>
 8003106:	4603      	mov	r3, r0
 8003108:	60fb      	str	r3, [r7, #12]
	create_turn_time.turn_in135_time  = (uint16_t)(mode[Turn_in_L135]->param->Lstart/mode[Turn_in_L135]->param->velo);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3330      	adds	r3, #48	; 0x30
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	edd3 6a02 	vldr	s13, [r3, #8]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3330      	adds	r3, #48	; 0x30
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800312a:	ee17 3a90 	vmov	r3, s15
 800312e:	b29a      	uxth	r2, r3
 8003130:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <Initialize_turn_time+0x648>)
 8003132:	815a      	strh	r2, [r3, #10]
	create_turn_time.turn_in135_time += (uint16_t)(DEG2RAD(mode[Turn_in_L135]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 8003134:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <Initialize_turn_time+0x648>)
 8003136:	895c      	ldrh	r4, [r3, #10]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3330      	adds	r3, #48	; 0x30
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	ed93 7a04 	vldr	s14, [r3, #16]
 8003144:	eddf 6a28 	vldr	s13, [pc, #160]	; 80031e8 <Initialize_turn_time+0x64c>
 8003148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800314c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031ec <Initialize_turn_time+0x650>
 8003150:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003154:	eddf 6a26 	vldr	s13, [pc, #152]	; 80031f0 <Initialize_turn_time+0x654>
 8003158:	edd7 7a03 	vldr	s15, [r7, #12]
 800315c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003160:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003164:	ee16 0a90 	vmov	r0, s13
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	4b1b      	ldr	r3, [pc, #108]	; (80031e0 <Initialize_turn_time+0x644>)
 8003172:	f7fd fa61 	bl	8000638 <__aeabi_dmul>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4610      	mov	r0, r2
 800317c:	4619      	mov	r1, r3
 800317e:	f7fd fd33 	bl	8000be8 <__aeabi_d2uiz>
 8003182:	4603      	mov	r3, r0
 8003184:	b29b      	uxth	r3, r3
 8003186:	4423      	add	r3, r4
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <Initialize_turn_time+0x648>)
 800318c:	815a      	strh	r2, [r3, #10]
	create_turn_time.turn_in135_time += (uint16_t)(mode[Turn_in_L135]->param->Lend/mode[Turn_in_L135]->param->velo);
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <Initialize_turn_time+0x648>)
 8003190:	895a      	ldrh	r2, [r3, #10]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3330      	adds	r3, #48	; 0x30
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	edd3 6a03 	vldr	s13, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3330      	adds	r3, #48	; 0x30
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	ed93 7a00 	vldr	s14, [r3]
 80031aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031b2:	ee17 3a90 	vmov	r3, s15
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <Initialize_turn_time+0x648>)
 80031be:	815a      	strh	r2, [r3, #10]

	omega_mx = mode[Turn_out_L135]->param->velo/(mode[Turn_out_L135]->param->r_min/1000.0);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3338      	adds	r3, #56	; 0x38
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9dc 	bl	8000588 <__aeabi_f2d>
 80031d0:	4604      	mov	r4, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3338      	adds	r3, #56	; 0x38
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	e00a      	b.n	80031f4 <Initialize_turn_time+0x658>
 80031de:	bf00      	nop
 80031e0:	408f4000 	.word	0x408f4000
 80031e4:	2001b6d0 	.word	0x2001b6d0
 80031e8:	43340000 	.word	0x43340000
 80031ec:	40490fda 	.word	0x40490fda
 80031f0:	3f344d01 	.word	0x3f344d01
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f9c6 	bl	8000588 <__aeabi_f2d>
 80031fc:	f04f 0200 	mov.w	r2, #0
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <Initialize_turn_time+0x744>)
 8003202:	f7fd fb43 	bl	800088c <__aeabi_ddiv>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4620      	mov	r0, r4
 800320c:	4629      	mov	r1, r5
 800320e:	f7fd fb3d 	bl	800088c <__aeabi_ddiv>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	4618      	mov	r0, r3
 8003218:	4621      	mov	r1, r4
 800321a:	f7fd fd05 	bl	8000c28 <__aeabi_d2f>
 800321e:	4603      	mov	r3, r0
 8003220:	60fb      	str	r3, [r7, #12]
	create_turn_time.turn_out135_time  = (uint16_t)(mode[Turn_out_L135]->param->Lstart/mode[Turn_out_L135]->param->velo);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3338      	adds	r3, #56	; 0x38
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	edd3 6a02 	vldr	s13, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3338      	adds	r3, #56	; 0x38
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	ed93 7a00 	vldr	s14, [r3]
 800323a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800323e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003242:	ee17 3a90 	vmov	r3, s15
 8003246:	b29a      	uxth	r2, r3
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <Initialize_turn_time+0x748>)
 800324a:	819a      	strh	r2, [r3, #12]
	create_turn_time.turn_out135_time += (uint16_t)(DEG2RAD(mode[Turn_out_L135]->param->degree)/(accel_Integral*omega_mx)*1000.0);
 800324c:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <Initialize_turn_time+0x748>)
 800324e:	899c      	ldrh	r4, [r3, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3338      	adds	r3, #56	; 0x38
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	ed93 7a04 	vldr	s14, [r3, #16]
 800325c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80032e8 <Initialize_turn_time+0x74c>
 8003260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003264:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80032ec <Initialize_turn_time+0x750>
 8003268:	ee27 7a87 	vmul.f32	s14, s15, s14
 800326c:	eddf 6a20 	vldr	s13, [pc, #128]	; 80032f0 <Initialize_turn_time+0x754>
 8003270:	edd7 7a03 	vldr	s15, [r7, #12]
 8003274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003278:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800327c:	ee16 0a90 	vmov	r0, s13
 8003280:	f7fd f982 	bl	8000588 <__aeabi_f2d>
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <Initialize_turn_time+0x744>)
 800328a:	f7fd f9d5 	bl	8000638 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4610      	mov	r0, r2
 8003294:	4619      	mov	r1, r3
 8003296:	f7fd fca7 	bl	8000be8 <__aeabi_d2uiz>
 800329a:	4603      	mov	r3, r0
 800329c:	b29b      	uxth	r3, r3
 800329e:	4423      	add	r3, r4
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <Initialize_turn_time+0x748>)
 80032a4:	819a      	strh	r2, [r3, #12]
	create_turn_time.turn_out135_time += (uint16_t)(mode[Turn_out_L135]->param->Lend/mode[Turn_out_L135]->param->velo);
 80032a6:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <Initialize_turn_time+0x748>)
 80032a8:	899a      	ldrh	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3338      	adds	r3, #56	; 0x38
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	edd3 6a03 	vldr	s13, [r3, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3338      	adds	r3, #56	; 0x38
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	ed93 7a00 	vldr	s14, [r3]
 80032c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ca:	ee17 3a90 	vmov	r3, s15
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <Initialize_turn_time+0x748>)
 80032d6:	819a      	strh	r2, [r3, #12]

}
 80032d8:	bf00      	nop
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}
 80032e0:	408f4000 	.word	0x408f4000
 80032e4:	2001b6d0 	.word	0x2001b6d0
 80032e8:	43340000 	.word	0x43340000
 80032ec:	40490fda 	.word	0x40490fda
 80032f0:	3f344d01 	.word	0x3f344d01

080032f4 <Initialize_st_param_for_time>:

void Initialize_st_param_for_time(const t_straight_param *const *st_mode,uint16_t size_st_mode)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
	glob_st_param = st_mode;
 8003300:	4a05      	ldr	r2, [pc, #20]	; (8003318 <Initialize_st_param_for_time+0x24>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6013      	str	r3, [r2, #0]
	glob_st_param_size = size_st_mode;
 8003306:	4a05      	ldr	r2, [pc, #20]	; (800331c <Initialize_st_param_for_time+0x28>)
 8003308:	887b      	ldrh	r3, [r7, #2]
 800330a:	8013      	strh	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	2000020c 	.word	0x2000020c
 800331c:	20000210 	.word	0x20000210

08003320 <Initialize_di_param_for_time>:

void Initialize_di_param_for_time(const t_straight_param *const *di_mode,uint16_t size_di_mode)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
	glob_di_param = di_mode;
 800332c:	4a05      	ldr	r2, [pc, #20]	; (8003344 <Initialize_di_param_for_time+0x24>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6013      	str	r3, [r2, #0]
	glob_di_param_size = size_di_mode;
 8003332:	4a05      	ldr	r2, [pc, #20]	; (8003348 <Initialize_di_param_for_time+0x28>)
 8003334:	887b      	ldrh	r3, [r7, #2]
 8003336:	8013      	strh	r3, [r2, #0]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	20000214 	.word	0x20000214
 8003348:	20000218 	.word	0x20000218

0800334c <calc_straight_time>:

uint16_t calc_straight_time(const t_straight_param *const *mode,uint16_t mode_size,float length)
{
 800334c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003350:	b08e      	sub	sp, #56	; 0x38
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	460b      	mov	r3, r1
 8003358:	ed87 0a01 	vstr	s0, [r7, #4]
 800335c:	817b      	strh	r3, [r7, #10]
	uint16_t time = UINT16_MAX;
 800335e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003362:	86fb      	strh	r3, [r7, #54]	; 0x36
	float start_velo 	= mode[0]->param->max_velo;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	62fb      	str	r3, [r7, #44]	; 0x2c
	float end_velo 		= mode[0]->param->max_velo;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
	float acc_time = 0.0;	float deacc_time = 0.0;
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	623b      	str	r3, [r7, #32]
	float acc_length = 0.0; float deacc_length = 0.0;
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	61bb      	str	r3, [r7, #24]
	for(int i = mode_size-1; i >= 0;i--){
 8003390:	897b      	ldrh	r3, [r7, #10]
 8003392:	3b01      	subs	r3, #1
 8003394:	633b      	str	r3, [r7, #48]	; 0x30
 8003396:	e157      	b.n	8003648 <calc_straight_time+0x2fc>
		float max_velo	= mode[i]->param->max_velo;
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	4413      	add	r3, r2
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	617b      	str	r3, [r7, #20]
		float accel		= mode[i]->param->acc;
 80033a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4413      	add	r3, r2
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	613b      	str	r3, [r7, #16]
        acc_length		= ((max_velo*1000.0)*(max_velo*1000.0)-(start_velo*1000.0)*(start_velo*1000.0))/(2*accel*1000.0);
 80033b8:	6978      	ldr	r0, [r7, #20]
 80033ba:	f7fd f8e5 	bl	8000588 <__aeabi_f2d>
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	4ba6      	ldr	r3, [pc, #664]	; (800365c <calc_straight_time+0x310>)
 80033c4:	f7fd f938 	bl	8000638 <__aeabi_dmul>
 80033c8:	4603      	mov	r3, r0
 80033ca:	460c      	mov	r4, r1
 80033cc:	4625      	mov	r5, r4
 80033ce:	461c      	mov	r4, r3
 80033d0:	6978      	ldr	r0, [r7, #20]
 80033d2:	f7fd f8d9 	bl	8000588 <__aeabi_f2d>
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	4ba0      	ldr	r3, [pc, #640]	; (800365c <calc_straight_time+0x310>)
 80033dc:	f7fd f92c 	bl	8000638 <__aeabi_dmul>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f7fd f926 	bl	8000638 <__aeabi_dmul>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	4625      	mov	r5, r4
 80033f2:	461c      	mov	r4, r3
 80033f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80033f6:	f7fd f8c7 	bl	8000588 <__aeabi_f2d>
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	4b97      	ldr	r3, [pc, #604]	; (800365c <calc_straight_time+0x310>)
 8003400:	f7fd f91a 	bl	8000638 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	4690      	mov	r8, r2
 800340a:	4699      	mov	r9, r3
 800340c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800340e:	f7fd f8bb 	bl	8000588 <__aeabi_f2d>
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	4b91      	ldr	r3, [pc, #580]	; (800365c <calc_straight_time+0x310>)
 8003418:	f7fd f90e 	bl	8000638 <__aeabi_dmul>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4640      	mov	r0, r8
 8003422:	4649      	mov	r1, r9
 8003424:	f7fd f908 	bl	8000638 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fc ff4a 	bl	80002c8 <__aeabi_dsub>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	4625      	mov	r5, r4
 800343a:	461c      	mov	r4, r3
 800343c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003440:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003444:	ee17 0a90 	vmov	r0, s15
 8003448:	f7fd f89e 	bl	8000588 <__aeabi_f2d>
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	4b82      	ldr	r3, [pc, #520]	; (800365c <calc_straight_time+0x310>)
 8003452:	f7fd f8f1 	bl	8000638 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fd fa15 	bl	800088c <__aeabi_ddiv>
 8003462:	4603      	mov	r3, r0
 8003464:	460c      	mov	r4, r1
 8003466:	4618      	mov	r0, r3
 8003468:	4621      	mov	r1, r4
 800346a:	f7fd fbdd 	bl	8000c28 <__aeabi_d2f>
 800346e:	4603      	mov	r3, r0
 8003470:	61fb      	str	r3, [r7, #28]
        deacc_length    = ((max_velo*1000.0)*(max_velo*1000.0)-(end_velo*1000.0)*(end_velo*1000.0))/(2*accel*1000.0);
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7fd f888 	bl	8000588 <__aeabi_f2d>
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b77      	ldr	r3, [pc, #476]	; (800365c <calc_straight_time+0x310>)
 800347e:	f7fd f8db 	bl	8000638 <__aeabi_dmul>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	4625      	mov	r5, r4
 8003488:	461c      	mov	r4, r3
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7fd f87c 	bl	8000588 <__aeabi_f2d>
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	4b71      	ldr	r3, [pc, #452]	; (800365c <calc_straight_time+0x310>)
 8003496:	f7fd f8cf 	bl	8000638 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4620      	mov	r0, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	f7fd f8c9 	bl	8000638 <__aeabi_dmul>
 80034a6:	4603      	mov	r3, r0
 80034a8:	460c      	mov	r4, r1
 80034aa:	4625      	mov	r5, r4
 80034ac:	461c      	mov	r4, r3
 80034ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b0:	f7fd f86a 	bl	8000588 <__aeabi_f2d>
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <calc_straight_time+0x310>)
 80034ba:	f7fd f8bd 	bl	8000638 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034c8:	f7fd f85e 	bl	8000588 <__aeabi_f2d>
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	4b62      	ldr	r3, [pc, #392]	; (800365c <calc_straight_time+0x310>)
 80034d2:	f7fd f8b1 	bl	8000638 <__aeabi_dmul>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4640      	mov	r0, r8
 80034dc:	4649      	mov	r1, r9
 80034de:	f7fd f8ab 	bl	8000638 <__aeabi_dmul>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f7fc feed 	bl	80002c8 <__aeabi_dsub>
 80034ee:	4603      	mov	r3, r0
 80034f0:	460c      	mov	r4, r1
 80034f2:	4625      	mov	r5, r4
 80034f4:	461c      	mov	r4, r3
 80034f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80034fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034fe:	ee17 0a90 	vmov	r0, s15
 8003502:	f7fd f841 	bl	8000588 <__aeabi_f2d>
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	4b54      	ldr	r3, [pc, #336]	; (800365c <calc_straight_time+0x310>)
 800350c:	f7fd f894 	bl	8000638 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4620      	mov	r0, r4
 8003516:	4629      	mov	r1, r5
 8003518:	f7fd f9b8 	bl	800088c <__aeabi_ddiv>
 800351c:	4603      	mov	r3, r0
 800351e:	460c      	mov	r4, r1
 8003520:	4618      	mov	r0, r3
 8003522:	4621      	mov	r1, r4
 8003524:	f7fd fb80 	bl	8000c28 <__aeabi_d2f>
 8003528:	4603      	mov	r3, r0
 800352a:	61bb      	str	r3, [r7, #24]
        if(length-OFF_SET_LENGTH-(acc_length+deacc_length) >= 0.0)
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fd f82b 	bl	8000588 <__aeabi_f2d>
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <calc_straight_time+0x314>)
 8003538:	f7fc fec6 	bl	80002c8 <__aeabi_dsub>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	4625      	mov	r5, r4
 8003542:	461c      	mov	r4, r3
 8003544:	ed97 7a07 	vldr	s14, [r7, #28]
 8003548:	edd7 7a06 	vldr	s15, [r7, #24]
 800354c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003550:	ee17 0a90 	vmov	r0, s15
 8003554:	f7fd f818 	bl	8000588 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc feb2 	bl	80002c8 <__aeabi_dsub>
 8003564:	4603      	mov	r3, r0
 8003566:	460c      	mov	r4, r1
 8003568:	4618      	mov	r0, r3
 800356a:	4621      	mov	r1, r4
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f7fd fae6 	bl	8000b44 <__aeabi_dcmpge>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d061      	beq.n	8003642 <calc_straight_time+0x2f6>
        {
        	acc_time = (max_velo - start_velo)/accel * 1000.0;
 800357e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003582:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003586:	ee77 6a67 	vsub.f32	s13, s14, s15
 800358a:	ed97 7a04 	vldr	s14, [r7, #16]
 800358e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003592:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003664 <calc_straight_time+0x318>
 8003596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800359a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        	deacc_time = (max_velo - end_velo)/accel * 1000.0;
 800359e:	ed97 7a05 	vldr	s14, [r7, #20]
 80035a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80035a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80035aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80035ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035b2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003664 <calc_straight_time+0x318>
 80035b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ba:	edc7 7a08 	vstr	s15, [r7, #32]
        	time = (uint16_t)OFF_SET_LENGTH/mode[0]->param->max_velo+(uint16_t)((length-(acc_length+deacc_length))/max_velo) + (uint16_t)acc_time + (uint16_t)deacc_time;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80035cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80035d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80035d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035dc:	edd7 6a01 	vldr	s13, [r7, #4]
 80035e0:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80035e4:	edd7 6a05 	vldr	s13, [r7, #20]
 80035e8:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80035ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035f0:	ee17 3a90 	vmov	r3, s15
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003602:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800360a:	ee17 3a90 	vmov	r3, s15
 800360e:	b29b      	uxth	r3, r3
 8003610:	ee07 3a90 	vmov	s15, r3
 8003614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003620:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003624:	ee17 3a90 	vmov	r3, s15
 8003628:	b29b      	uxth	r3, r3
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800363a:	ee17 3a90 	vmov	r3, s15
 800363e:	86fb      	strh	r3, [r7, #54]	; 0x36
        	break;
 8003640:	e006      	b.n	8003650 <calc_straight_time+0x304>
	for(int i = mode_size-1; i >= 0;i--){
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	3b01      	subs	r3, #1
 8003646:	633b      	str	r3, [r7, #48]	; 0x30
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	2b00      	cmp	r3, #0
 800364c:	f6bf aea4 	bge.w	8003398 <calc_straight_time+0x4c>
        }
	}
	return time;
 8003650:	8efb      	ldrh	r3, [r7, #54]	; 0x36
}
 8003652:	4618      	mov	r0, r3
 8003654:	3738      	adds	r7, #56	; 0x38
 8003656:	46bd      	mov	sp, r7
 8003658:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800365c:	408f4000 	.word	0x408f4000
 8003660:	40240000 	.word	0x40240000
 8003664:	447a0000 	.word	0x447a0000

08003668 <calc_straight_max_velo>:

t_straight_param calc_straight_max_velo(const t_straight_param *const *mode,uint16_t mode_size,float length)
{
 8003668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800366c:	ed2d 8b02 	vpush	{d8}
 8003670:	b092      	sub	sp, #72	; 0x48
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	4613      	mov	r3, r2
 800367a:	ed87 0a00 	vstr	s0, [r7]
 800367e:	80fb      	strh	r3, [r7, #6]
	t_straight_param return_param;

	uint16_t time = UINT16_MAX;;
 8003680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003684:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	float start_velo 	= mode[0]->param->max_velo;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
	float end_velo 		= mode[0]->param->max_velo;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
	return_param.param = mode[0]->param;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	617b      	str	r3, [r7, #20]
	return_param.sp_gain		  = mode[0]->sp_gain;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	61bb      	str	r3, [r7, #24]
	return_param.om_gain		  = mode[0]->om_gain;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	61fb      	str	r3, [r7, #28]
	float acc_time = 0.0;	float deacc_time = 0.0;
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	; 0x30
	float acc_length = 0.0; float deacc_length = 0.0;
 80036c0:	f04f 0300 	mov.w	r3, #0
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = mode_size-1; i >= 0;i--){
 80036cc:	88fb      	ldrh	r3, [r7, #6]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	e18c      	b.n	80039ee <calc_straight_max_velo+0x386>
		float max_velo	= mode[i]->param->max_velo;
 80036d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4413      	add	r3, r2
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
		float accel		= mode[i]->param->acc;
 80036e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	4413      	add	r3, r2
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	623b      	str	r3, [r7, #32]
        acc_length		= ((max_velo*1000.0)*(max_velo*1000.0)-(start_velo*1000.0)*(start_velo*1000.0))/(2*accel*1000.0);
 80036f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80036f6:	f7fc ff47 	bl	8000588 <__aeabi_f2d>
 80036fa:	f04f 0200 	mov.w	r2, #0
 80036fe:	4bc5      	ldr	r3, [pc, #788]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 8003700:	f7fc ff9a 	bl	8000638 <__aeabi_dmul>
 8003704:	4603      	mov	r3, r0
 8003706:	460c      	mov	r4, r1
 8003708:	4625      	mov	r5, r4
 800370a:	461c      	mov	r4, r3
 800370c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800370e:	f7fc ff3b 	bl	8000588 <__aeabi_f2d>
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	4bbf      	ldr	r3, [pc, #764]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 8003718:	f7fc ff8e 	bl	8000638 <__aeabi_dmul>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fc ff88 	bl	8000638 <__aeabi_dmul>
 8003728:	4603      	mov	r3, r0
 800372a:	460c      	mov	r4, r1
 800372c:	4625      	mov	r5, r4
 800372e:	461c      	mov	r4, r3
 8003730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003732:	f7fc ff29 	bl	8000588 <__aeabi_f2d>
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	4bb6      	ldr	r3, [pc, #728]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 800373c:	f7fc ff7c 	bl	8000638 <__aeabi_dmul>
 8003740:	4602      	mov	r2, r0
 8003742:	460b      	mov	r3, r1
 8003744:	4690      	mov	r8, r2
 8003746:	4699      	mov	r9, r3
 8003748:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800374a:	f7fc ff1d 	bl	8000588 <__aeabi_f2d>
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	4bb0      	ldr	r3, [pc, #704]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 8003754:	f7fc ff70 	bl	8000638 <__aeabi_dmul>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4640      	mov	r0, r8
 800375e:	4649      	mov	r1, r9
 8003760:	f7fc ff6a 	bl	8000638 <__aeabi_dmul>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4620      	mov	r0, r4
 800376a:	4629      	mov	r1, r5
 800376c:	f7fc fdac 	bl	80002c8 <__aeabi_dsub>
 8003770:	4603      	mov	r3, r0
 8003772:	460c      	mov	r4, r1
 8003774:	4625      	mov	r5, r4
 8003776:	461c      	mov	r4, r3
 8003778:	edd7 7a08 	vldr	s15, [r7, #32]
 800377c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003780:	ee17 0a90 	vmov	r0, s15
 8003784:	f7fc ff00 	bl	8000588 <__aeabi_f2d>
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	4ba1      	ldr	r3, [pc, #644]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 800378e:	f7fc ff53 	bl	8000638 <__aeabi_dmul>
 8003792:	4602      	mov	r2, r0
 8003794:	460b      	mov	r3, r1
 8003796:	4620      	mov	r0, r4
 8003798:	4629      	mov	r1, r5
 800379a:	f7fd f877 	bl	800088c <__aeabi_ddiv>
 800379e:	4603      	mov	r3, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	4618      	mov	r0, r3
 80037a4:	4621      	mov	r1, r4
 80037a6:	f7fd fa3f 	bl	8000c28 <__aeabi_d2f>
 80037aa:	4603      	mov	r3, r0
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        deacc_length    = ((max_velo*1000.0)*(max_velo*1000.0)-(end_velo*1000.0)*(end_velo*1000.0))/(2*accel*1000.0);
 80037ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037b0:	f7fc feea 	bl	8000588 <__aeabi_f2d>
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4b96      	ldr	r3, [pc, #600]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 80037ba:	f7fc ff3d 	bl	8000638 <__aeabi_dmul>
 80037be:	4603      	mov	r3, r0
 80037c0:	460c      	mov	r4, r1
 80037c2:	4625      	mov	r5, r4
 80037c4:	461c      	mov	r4, r3
 80037c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c8:	f7fc fede 	bl	8000588 <__aeabi_f2d>
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	4b90      	ldr	r3, [pc, #576]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 80037d2:	f7fc ff31 	bl	8000638 <__aeabi_dmul>
 80037d6:	4602      	mov	r2, r0
 80037d8:	460b      	mov	r3, r1
 80037da:	4620      	mov	r0, r4
 80037dc:	4629      	mov	r1, r5
 80037de:	f7fc ff2b 	bl	8000638 <__aeabi_dmul>
 80037e2:	4603      	mov	r3, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	4625      	mov	r5, r4
 80037e8:	461c      	mov	r4, r3
 80037ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037ec:	f7fc fecc 	bl	8000588 <__aeabi_f2d>
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	4b87      	ldr	r3, [pc, #540]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 80037f6:	f7fc ff1f 	bl	8000638 <__aeabi_dmul>
 80037fa:	4602      	mov	r2, r0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4690      	mov	r8, r2
 8003800:	4699      	mov	r9, r3
 8003802:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003804:	f7fc fec0 	bl	8000588 <__aeabi_f2d>
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	4b81      	ldr	r3, [pc, #516]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 800380e:	f7fc ff13 	bl	8000638 <__aeabi_dmul>
 8003812:	4602      	mov	r2, r0
 8003814:	460b      	mov	r3, r1
 8003816:	4640      	mov	r0, r8
 8003818:	4649      	mov	r1, r9
 800381a:	f7fc ff0d 	bl	8000638 <__aeabi_dmul>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	4620      	mov	r0, r4
 8003824:	4629      	mov	r1, r5
 8003826:	f7fc fd4f 	bl	80002c8 <__aeabi_dsub>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	4625      	mov	r5, r4
 8003830:	461c      	mov	r4, r3
 8003832:	edd7 7a08 	vldr	s15, [r7, #32]
 8003836:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800383a:	ee17 0a90 	vmov	r0, s15
 800383e:	f7fc fea3 	bl	8000588 <__aeabi_f2d>
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	4b73      	ldr	r3, [pc, #460]	; (8003a14 <calc_straight_max_velo+0x3ac>)
 8003848:	f7fc fef6 	bl	8000638 <__aeabi_dmul>
 800384c:	4602      	mov	r2, r0
 800384e:	460b      	mov	r3, r1
 8003850:	4620      	mov	r0, r4
 8003852:	4629      	mov	r1, r5
 8003854:	f7fd f81a 	bl	800088c <__aeabi_ddiv>
 8003858:	4603      	mov	r3, r0
 800385a:	460c      	mov	r4, r1
 800385c:	4618      	mov	r0, r3
 800385e:	4621      	mov	r1, r4
 8003860:	f7fd f9e2 	bl	8000c28 <__aeabi_d2f>
 8003864:	4603      	mov	r3, r0
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
        if(length-OFF_SET_LENGTH-(acc_length+deacc_length) >= 0.0)
 8003868:	6838      	ldr	r0, [r7, #0]
 800386a:	f7fc fe8d 	bl	8000588 <__aeabi_f2d>
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	4b69      	ldr	r3, [pc, #420]	; (8003a18 <calc_straight_max_velo+0x3b0>)
 8003874:	f7fc fd28 	bl	80002c8 <__aeabi_dsub>
 8003878:	4603      	mov	r3, r0
 800387a:	460c      	mov	r4, r1
 800387c:	4625      	mov	r5, r4
 800387e:	461c      	mov	r4, r3
 8003880:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003888:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388c:	ee17 0a90 	vmov	r0, s15
 8003890:	f7fc fe7a 	bl	8000588 <__aeabi_f2d>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4620      	mov	r0, r4
 800389a:	4629      	mov	r1, r5
 800389c:	f7fc fd14 	bl	80002c8 <__aeabi_dsub>
 80038a0:	4603      	mov	r3, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	4618      	mov	r0, r3
 80038a6:	4621      	mov	r1, r4
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	f7fd f948 	bl	8000b44 <__aeabi_dcmpge>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8096 	beq.w	80039e8 <calc_straight_max_velo+0x380>
        {
        	return_param.param 			  =	mode[i]->param;
 80038bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	4413      	add	r3, r2
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	617b      	str	r3, [r7, #20]
        	return_param.sp_gain		  = mode[i]->sp_gain;
 80038ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        	return_param.om_gain		  = mode[i]->om_gain;
 80038d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4413      	add	r3, r2
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	61fb      	str	r3, [r7, #28]
        	acc_time = (max_velo - start_velo)/accel * 1000.0;
 80038e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80038ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80038f2:	ed97 7a08 	vldr	s14, [r7, #32]
 80038f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038fa:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003a1c <calc_straight_max_velo+0x3b4>
 80038fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003902:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        	deacc_time = (max_velo - end_velo)/accel * 1000.0;
 8003906:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800390a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800390e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003912:	ed97 7a08 	vldr	s14, [r7, #32]
 8003916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800391a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003a1c <calc_straight_max_velo+0x3b4>
 800391e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003922:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        	time = (uint16_t)OFF_SET_LENGTH/mode[0]->param->max_velo+(uint16_t)((length-OFF_SET_LENGTH-(acc_length+deacc_length))/max_velo) + (uint16_t)acc_time + (uint16_t)deacc_time;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003934:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003938:	6838      	ldr	r0, [r7, #0]
 800393a:	f7fc fe25 	bl	8000588 <__aeabi_f2d>
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	4b35      	ldr	r3, [pc, #212]	; (8003a18 <calc_straight_max_velo+0x3b0>)
 8003944:	f7fc fcc0 	bl	80002c8 <__aeabi_dsub>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4625      	mov	r5, r4
 800394e:	461c      	mov	r4, r3
 8003950:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003954:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395c:	ee17 0a90 	vmov	r0, s15
 8003960:	f7fc fe12 	bl	8000588 <__aeabi_f2d>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f7fc fcac 	bl	80002c8 <__aeabi_dsub>
 8003970:	4603      	mov	r3, r0
 8003972:	460c      	mov	r4, r1
 8003974:	4625      	mov	r5, r4
 8003976:	461c      	mov	r4, r3
 8003978:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800397a:	f7fc fe05 	bl	8000588 <__aeabi_f2d>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4620      	mov	r0, r4
 8003984:	4629      	mov	r1, r5
 8003986:	f7fc ff81 	bl	800088c <__aeabi_ddiv>
 800398a:	4603      	mov	r3, r0
 800398c:	460c      	mov	r4, r1
 800398e:	4618      	mov	r0, r3
 8003990:	4621      	mov	r1, r4
 8003992:	f7fd f929 	bl	8000be8 <__aeabi_d2uiz>
 8003996:	4603      	mov	r3, r0
 8003998:	b29b      	uxth	r3, r3
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a2:	ee38 7a27 	vadd.f32	s14, s16, s15
 80039a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ae:	ee17 3a90 	vmov	r3, s15
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80039c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039c8:	ee17 3a90 	vmov	r3, s15
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039de:	ee17 3a90 	vmov	r3, s15
 80039e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        	break;
 80039e6:	e006      	b.n	80039f6 <calc_straight_max_velo+0x38e>
	for(int i = mode_size-1; i >= 0;i--){
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	3b01      	subs	r3, #1
 80039ec:	647b      	str	r3, [r7, #68]	; 0x44
 80039ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f6bf ae6f 	bge.w	80036d4 <calc_straight_max_velo+0x6c>
        }
	}
	return return_param;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	461c      	mov	r4, r3
 80039fa:	f107 0314 	add.w	r3, r7, #20
 80039fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	3748      	adds	r7, #72	; 0x48
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	ecbd 8b02 	vpop	{d8}
 8003a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a14:	408f4000 	.word	0x408f4000
 8003a18:	40240000 	.word	0x40240000
 8003a1c:	447a0000 	.word	0x447a0000

08003a20 <calc_end_straight_max_velo>:


t_straight_param calc_end_straight_max_velo(const t_straight_param *const *mode,uint16_t mode_size,float length)
{
 8003a20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a24:	ed2d 8b02 	vpush	{d8}
 8003a28:	b092      	sub	sp, #72	; 0x48
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	4613      	mov	r3, r2
 8003a32:	ed87 0a00 	vstr	s0, [r7]
 8003a36:	80fb      	strh	r3, [r7, #6]
	t_straight_param return_param;

	uint16_t time = UINT16_MAX;;
 8003a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	float start_velo 	= mode[0]->param->max_velo;
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	63fb      	str	r3, [r7, #60]	; 0x3c
	float end_velo 		= 0.0;
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
	return_param.param = mode[0]->param;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	617b      	str	r3, [r7, #20]
	return_param.sp_gain		  = mode[0]->sp_gain;
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	61bb      	str	r3, [r7, #24]
	return_param.om_gain		  = mode[0]->om_gain;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	61fb      	str	r3, [r7, #28]
	float acc_time = 0.0;	float deacc_time = 0.0;
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	633b      	str	r3, [r7, #48]	; 0x30
	float acc_length = 0.0; float deacc_length = 0.0;
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = mode_size-1; i >= 0;i--){
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	647b      	str	r3, [r7, #68]	; 0x44
 8003a86:	e18c      	b.n	8003da2 <calc_end_straight_max_velo+0x382>
		float max_velo	= mode[i]->param->max_velo;
 8003a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	4413      	add	r3, r2
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
		float accel		= mode[i]->param->acc;
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	623b      	str	r3, [r7, #32]
        acc_length		= ((max_velo*1000.0)*(max_velo*1000.0)-(start_velo*1000.0)*(start_velo*1000.0))/(2*accel*1000.0);
 8003aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003aaa:	f7fc fd6d 	bl	8000588 <__aeabi_f2d>
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	4bc5      	ldr	r3, [pc, #788]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003ab4:	f7fc fdc0 	bl	8000638 <__aeabi_dmul>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	4625      	mov	r5, r4
 8003abe:	461c      	mov	r4, r3
 8003ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac2:	f7fc fd61 	bl	8000588 <__aeabi_f2d>
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	4bbf      	ldr	r3, [pc, #764]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003acc:	f7fc fdb4 	bl	8000638 <__aeabi_dmul>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	f7fc fdae 	bl	8000638 <__aeabi_dmul>
 8003adc:	4603      	mov	r3, r0
 8003ade:	460c      	mov	r4, r1
 8003ae0:	4625      	mov	r5, r4
 8003ae2:	461c      	mov	r4, r3
 8003ae4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ae6:	f7fc fd4f 	bl	8000588 <__aeabi_f2d>
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	4bb6      	ldr	r3, [pc, #728]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003af0:	f7fc fda2 	bl	8000638 <__aeabi_dmul>
 8003af4:	4602      	mov	r2, r0
 8003af6:	460b      	mov	r3, r1
 8003af8:	4690      	mov	r8, r2
 8003afa:	4699      	mov	r9, r3
 8003afc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003afe:	f7fc fd43 	bl	8000588 <__aeabi_f2d>
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	4bb0      	ldr	r3, [pc, #704]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003b08:	f7fc fd96 	bl	8000638 <__aeabi_dmul>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4640      	mov	r0, r8
 8003b12:	4649      	mov	r1, r9
 8003b14:	f7fc fd90 	bl	8000638 <__aeabi_dmul>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4620      	mov	r0, r4
 8003b1e:	4629      	mov	r1, r5
 8003b20:	f7fc fbd2 	bl	80002c8 <__aeabi_dsub>
 8003b24:	4603      	mov	r3, r0
 8003b26:	460c      	mov	r4, r1
 8003b28:	4625      	mov	r5, r4
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd26 	bl	8000588 <__aeabi_f2d>
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	4ba1      	ldr	r3, [pc, #644]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003b42:	f7fc fd79 	bl	8000638 <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	f7fc fe9d 	bl	800088c <__aeabi_ddiv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	4618      	mov	r0, r3
 8003b58:	4621      	mov	r1, r4
 8003b5a:	f7fd f865 	bl	8000c28 <__aeabi_d2f>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
        deacc_length    = ((max_velo*1000.0)*(max_velo*1000.0)-(end_velo*1000.0)*(end_velo*1000.0))/(2*accel*1000.0);
 8003b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b64:	f7fc fd10 	bl	8000588 <__aeabi_f2d>
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	4b96      	ldr	r3, [pc, #600]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003b6e:	f7fc fd63 	bl	8000638 <__aeabi_dmul>
 8003b72:	4603      	mov	r3, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	4625      	mov	r5, r4
 8003b78:	461c      	mov	r4, r3
 8003b7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b7c:	f7fc fd04 	bl	8000588 <__aeabi_f2d>
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	4b90      	ldr	r3, [pc, #576]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003b86:	f7fc fd57 	bl	8000638 <__aeabi_dmul>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fc fd51 	bl	8000638 <__aeabi_dmul>
 8003b96:	4603      	mov	r3, r0
 8003b98:	460c      	mov	r4, r1
 8003b9a:	4625      	mov	r5, r4
 8003b9c:	461c      	mov	r4, r3
 8003b9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba0:	f7fc fcf2 	bl	8000588 <__aeabi_f2d>
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	4b87      	ldr	r3, [pc, #540]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003baa:	f7fc fd45 	bl	8000638 <__aeabi_dmul>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4690      	mov	r8, r2
 8003bb4:	4699      	mov	r9, r3
 8003bb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bb8:	f7fc fce6 	bl	8000588 <__aeabi_f2d>
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003bc2:	f7fc fd39 	bl	8000638 <__aeabi_dmul>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	460b      	mov	r3, r1
 8003bca:	4640      	mov	r0, r8
 8003bcc:	4649      	mov	r1, r9
 8003bce:	f7fc fd33 	bl	8000638 <__aeabi_dmul>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc fb75 	bl	80002c8 <__aeabi_dsub>
 8003bde:	4603      	mov	r3, r0
 8003be0:	460c      	mov	r4, r1
 8003be2:	4625      	mov	r5, r4
 8003be4:	461c      	mov	r4, r3
 8003be6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003bea:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003bee:	ee17 0a90 	vmov	r0, s15
 8003bf2:	f7fc fcc9 	bl	8000588 <__aeabi_f2d>
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	4b73      	ldr	r3, [pc, #460]	; (8003dc8 <calc_end_straight_max_velo+0x3a8>)
 8003bfc:	f7fc fd1c 	bl	8000638 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4620      	mov	r0, r4
 8003c06:	4629      	mov	r1, r5
 8003c08:	f7fc fe40 	bl	800088c <__aeabi_ddiv>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	4618      	mov	r0, r3
 8003c12:	4621      	mov	r1, r4
 8003c14:	f7fd f808 	bl	8000c28 <__aeabi_d2f>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	62bb      	str	r3, [r7, #40]	; 0x28
        if(length-OFF_SET_LENGTH-(acc_length+deacc_length) >= 0.0)
 8003c1c:	6838      	ldr	r0, [r7, #0]
 8003c1e:	f7fc fcb3 	bl	8000588 <__aeabi_f2d>
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <calc_end_straight_max_velo+0x3ac>)
 8003c28:	f7fc fb4e 	bl	80002c8 <__aeabi_dsub>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	460c      	mov	r4, r1
 8003c30:	4625      	mov	r5, r4
 8003c32:	461c      	mov	r4, r3
 8003c34:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003c38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c40:	ee17 0a90 	vmov	r0, s15
 8003c44:	f7fc fca0 	bl	8000588 <__aeabi_f2d>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	4629      	mov	r1, r5
 8003c50:	f7fc fb3a 	bl	80002c8 <__aeabi_dsub>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	f7fc ff6e 	bl	8000b44 <__aeabi_dcmpge>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8096 	beq.w	8003d9c <calc_end_straight_max_velo+0x37c>
        {
        	return_param.param 			  =	mode[i]->param;
 8003c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	4413      	add	r3, r2
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	617b      	str	r3, [r7, #20]
        	return_param.sp_gain		  = mode[i]->sp_gain;
 8003c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	4413      	add	r3, r2
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
        	return_param.om_gain		  = mode[i]->om_gain;
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	4413      	add	r3, r2
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	61fb      	str	r3, [r7, #28]
        	acc_time = (max_velo - start_velo)/accel * 1000.0;
 8003c9a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c9e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003ca2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003ca6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003caa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cae:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003dd0 <calc_end_straight_max_velo+0x3b0>
 8003cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cb6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        	deacc_time = (max_velo - end_velo)/accel * 1000.0;
 8003cba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003cbe:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003cc2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003cc6:	ed97 7a08 	vldr	s14, [r7, #32]
 8003cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8003dd0 <calc_end_straight_max_velo+0x3b0>
 8003cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cd6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        	time = (uint16_t)OFF_SET_LENGTH/mode[0]->param->max_velo+(uint16_t)((length-OFF_SET_LENGTH-(acc_length+deacc_length))/max_velo) + (uint16_t)acc_time + (uint16_t)deacc_time;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ce8:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8003cec:	6838      	ldr	r0, [r7, #0]
 8003cee:	f7fc fc4b 	bl	8000588 <__aeabi_f2d>
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <calc_end_straight_max_velo+0x3ac>)
 8003cf8:	f7fc fae6 	bl	80002c8 <__aeabi_dsub>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4625      	mov	r5, r4
 8003d02:	461c      	mov	r4, r3
 8003d04:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003d08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d10:	ee17 0a90 	vmov	r0, s15
 8003d14:	f7fc fc38 	bl	8000588 <__aeabi_f2d>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	4629      	mov	r1, r5
 8003d20:	f7fc fad2 	bl	80002c8 <__aeabi_dsub>
 8003d24:	4603      	mov	r3, r0
 8003d26:	460c      	mov	r4, r1
 8003d28:	4625      	mov	r5, r4
 8003d2a:	461c      	mov	r4, r3
 8003d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d2e:	f7fc fc2b 	bl	8000588 <__aeabi_f2d>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fc fda7 	bl	800088c <__aeabi_ddiv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	460c      	mov	r4, r1
 8003d42:	4618      	mov	r0, r3
 8003d44:	4621      	mov	r1, r4
 8003d46:	f7fc ff4f 	bl	8000be8 <__aeabi_d2uiz>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d56:	ee38 7a27 	vadd.f32	s14, s16, s15
 8003d5a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d62:	ee17 3a90 	vmov	r3, s15
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	ee07 3a90 	vmov	s15, r3
 8003d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d74:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003d78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7c:	ee17 3a90 	vmov	r3, s15
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d92:	ee17 3a90 	vmov	r3, s15
 8003d96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        	break;
 8003d9a:	e006      	b.n	8003daa <calc_end_straight_max_velo+0x38a>
	for(int i = mode_size-1; i >= 0;i--){
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	647b      	str	r3, [r7, #68]	; 0x44
 8003da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f6bf ae6f 	bge.w	8003a88 <calc_end_straight_max_velo+0x68>
        }
	}
	return return_param;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	461c      	mov	r4, r3
 8003dae:	f107 0314 	add.w	r3, r7, #20
 8003db2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003db6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	3748      	adds	r7, #72	; 0x48
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	ecbd 8b02 	vpop	{d8}
 8003dc4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003dc8:	408f4000 	.word	0x408f4000
 8003dcc:	40240000 	.word	0x40240000
 8003dd0:	447a0000 	.word	0x447a0000
 8003dd4:	00000000 	.word	0x00000000

08003dd8 <calc_time>:


uint16_t calc_time(t_run_pattern run_pt,int acc_cnt){
 8003dd8:	b5b0      	push	{r4, r5, r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	6039      	str	r1, [r7, #0]
 8003de2:	71fb      	strb	r3, [r7, #7]
	uint16_t time = 0;
 8003de4:	2300      	movs	r3, #0
 8003de6:	81fb      	strh	r3, [r7, #14]
	switch(run_pt)
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	2b12      	cmp	r3, #18
 8003dee:	f200 8080 	bhi.w	8003ef2 <calc_time+0x11a>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <calc_time+0x20>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e45 	.word	0x08003e45
 8003dfc:	08003e71 	.word	0x08003e71
 8003e00:	08003eb5 	.word	0x08003eb5
 8003e04:	08003eb5 	.word	0x08003eb5
 8003e08:	08003ebd 	.word	0x08003ebd
 8003e0c:	08003ebd 	.word	0x08003ebd
 8003e10:	08003ecd 	.word	0x08003ecd
 8003e14:	08003ecd 	.word	0x08003ecd
 8003e18:	08003ed5 	.word	0x08003ed5
 8003e1c:	08003ed5 	.word	0x08003ed5
 8003e20:	08003edd 	.word	0x08003edd
 8003e24:	08003edd 	.word	0x08003edd
 8003e28:	08003ee5 	.word	0x08003ee5
 8003e2c:	08003ee5 	.word	0x08003ee5
 8003e30:	08003ec5 	.word	0x08003ec5
 8003e34:	08003ec5 	.word	0x08003ec5
 8003e38:	08003eed 	.word	0x08003eed
 8003e3c:	08003eed 	.word	0x08003eed
 8003e40:	08003eed 	.word	0x08003eed
	{
		case Straight:
			time = calc_straight_time(glob_st_param, glob_st_param_size,SECTION*(float)acc_cnt);
 8003e44:	4b30      	ldr	r3, [pc, #192]	; (8003f08 <calc_time+0x130>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <calc_time+0x134>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	6839      	ldr	r1, [r7, #0]
 8003e4e:	ee07 1a90 	vmov	s15, r1
 8003e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e56:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f10 <calc_time+0x138>
 8003e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003e62:	4619      	mov	r1, r3
 8003e64:	4610      	mov	r0, r2
 8003e66:	f7ff fa71 	bl	800334c <calc_straight_time>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("Straight:time:%d\n",time);
#endif
			break;
 8003e6e:	e040      	b.n	8003ef2 <calc_time+0x11a>
		case Diagonal:
			time = calc_straight_time(glob_di_param, glob_di_param_size,DIAG_SECTION*(float)acc_cnt);
 8003e70:	4b28      	ldr	r3, [pc, #160]	; (8003f14 <calc_time+0x13c>)
 8003e72:	681c      	ldr	r4, [r3, #0]
 8003e74:	4b28      	ldr	r3, [pc, #160]	; (8003f18 <calc_time+0x140>)
 8003e76:	881d      	ldrh	r5, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	ee07 3a90 	vmov	s15, r3
 8003e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e82:	ee17 0a90 	vmov	r0, s15
 8003e86:	f7fc fb7f 	bl	8000588 <__aeabi_f2d>
 8003e8a:	a31d      	add	r3, pc, #116	; (adr r3, 8003f00 <calc_time+0x128>)
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f7fc fbd2 	bl	8000638 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	f7fc fec4 	bl	8000c28 <__aeabi_d2f>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	ee00 3a10 	vmov	s0, r3
 8003ea6:	4629      	mov	r1, r5
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f7ff fa4f 	bl	800334c <calc_straight_time>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("Diagonal:time:%d\n",time);
#endif
			break;
 8003eb2:	e01e      	b.n	8003ef2 <calc_time+0x11a>
		case Long_turnL90:
		case Long_turnR90:
			time = create_turn_time.long_turn_90_time;
 8003eb4:	4b19      	ldr	r3, [pc, #100]	; (8003f1c <calc_time+0x144>)
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("Long_turn90:time:%d\n",time);
#endif
			break;
 8003eba:	e01a      	b.n	8003ef2 <calc_time+0x11a>
		case Long_turnL180:
		case Long_turnR180:
			time = create_turn_time.long_turn_180_time;
 8003ebc:	4b17      	ldr	r3, [pc, #92]	; (8003f1c <calc_time+0x144>)
 8003ebe:	885b      	ldrh	r3, [r3, #2]
 8003ec0:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("Long_turn180:time:%d\n",time);
#endif
			break;
 8003ec2:	e016      	b.n	8003ef2 <calc_time+0x11a>
		case Turn_LV90:
		case Turn_RV90:
			time = create_turn_time.turn_V90_time;
 8003ec4:	4b15      	ldr	r3, [pc, #84]	; (8003f1c <calc_time+0x144>)
 8003ec6:	889b      	ldrh	r3, [r3, #4]
 8003ec8:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("turn_V90:time:%d\n",time);
#endif
			break;
 8003eca:	e012      	b.n	8003ef2 <calc_time+0x11a>
		case Turn_in_L45:
		case Turn_in_R45:
			time = create_turn_time.turn_in45_time;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <calc_time+0x144>)
 8003ece:	88db      	ldrh	r3, [r3, #6]
 8003ed0:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("turn_in45:time:%d\n",time);
#endif
			break;
 8003ed2:	e00e      	b.n	8003ef2 <calc_time+0x11a>
		case Turn_out_L45:
		case Turn_out_R45:
			time = create_turn_time.turn_out45_time;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <calc_time+0x144>)
 8003ed6:	891b      	ldrh	r3, [r3, #8]
 8003ed8:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("turn_out45:time:%d\n",time);
#endif
			break;
 8003eda:	e00a      	b.n	8003ef2 <calc_time+0x11a>
		case Turn_in_L135:
		case Turn_in_R135:
			time = create_turn_time.turn_in135_time;
 8003edc:	4b0f      	ldr	r3, [pc, #60]	; (8003f1c <calc_time+0x144>)
 8003ede:	895b      	ldrh	r3, [r3, #10]
 8003ee0:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("turn_in135:time:%d\n",time);
#endif
			break;
 8003ee2:	e006      	b.n	8003ef2 <calc_time+0x11a>
		case Turn_out_L135:
		case Turn_out_R135:
			time = create_turn_time.turn_out135_time;
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <calc_time+0x144>)
 8003ee6:	899b      	ldrh	r3, [r3, #12]
 8003ee8:	81fb      	strh	r3, [r7, #14]
#if DEBUG_MODE == 1
	printf("turn_out135:time:%d\n",time);
#endif
			break;
 8003eea:	e002      	b.n	8003ef2 <calc_time+0x11a>
		case Diagonal_L:
		case Diagonal_R:
		case run_pt_none:
			time = 0;
 8003eec:	2300      	movs	r3, #0
 8003eee:	81fb      	strh	r3, [r7, #14]
			break;
 8003ef0:	bf00      	nop
	}
	return time;
 8003ef2:	89fb      	ldrh	r3, [r7, #14]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bdb0      	pop	{r4, r5, r7, pc}
 8003efc:	f3af 8000 	nop.w
 8003f00:	69ad42c4 	.word	0x69ad42c4
 8003f04:	404fd1de 	.word	0x404fd1de
 8003f08:	2000020c 	.word	0x2000020c
 8003f0c:	20000210 	.word	0x20000210
 8003f10:	42b40000 	.word	0x42b40000
 8003f14:	20000214 	.word	0x20000214
 8003f18:	20000218 	.word	0x20000218
 8003f1c:	2001b6d0 	.word	0x2001b6d0

08003f20 <pos_run_time>:

uint16_t pos_run_time(t_position pos){
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
	uint16_t time;
	switch(pos.dir)
 8003f28:	79bb      	ldrb	r3, [r7, #6]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d866      	bhi.n	8003ffc <pos_run_time+0xdc>
 8003f2e:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <pos_run_time+0x14>)
 8003f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f34:	08003f49 	.word	0x08003f49
 8003f38:	08003f6d 	.word	0x08003f6d
 8003f3c:	08003f91 	.word	0x08003f91
 8003f40:	08003fb5 	.word	0x08003fb5
 8003f44:	08003fd9 	.word	0x08003fd9
	{
		case north:
			time = closed_list[pos.x][pos.y].north.time;
 8003f48:	793b      	ldrb	r3, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	797b      	ldrb	r3, [r7, #5]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	492e      	ldr	r1, [pc, #184]	; (800400c <pos_run_time+0xec>)
 8003f52:	2346      	movs	r3, #70	; 0x46
 8003f54:	fb03 f202 	mul.w	r2, r3, r2
 8003f58:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003f5c:	fb03 f300 	mul.w	r3, r3, r0
 8003f60:	4413      	add	r3, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	3308      	adds	r3, #8
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	81fb      	strh	r3, [r7, #14]
			break;
 8003f6a:	e047      	b.n	8003ffc <pos_run_time+0xdc>
		case east:
			time = closed_list[pos.x][pos.y].east.time;
 8003f6c:	793b      	ldrb	r3, [r7, #4]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	797b      	ldrb	r3, [r7, #5]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4925      	ldr	r1, [pc, #148]	; (800400c <pos_run_time+0xec>)
 8003f76:	2346      	movs	r3, #70	; 0x46
 8003f78:	fb03 f202 	mul.w	r2, r3, r2
 8003f7c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003f80:	fb03 f300 	mul.w	r3, r3, r0
 8003f84:	4413      	add	r3, r2
 8003f86:	440b      	add	r3, r1
 8003f88:	3316      	adds	r3, #22
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	81fb      	strh	r3, [r7, #14]
			break;
 8003f8e:	e035      	b.n	8003ffc <pos_run_time+0xdc>
		case south:
			time = closed_list[pos.x][pos.y].south.time;
 8003f90:	793b      	ldrb	r3, [r7, #4]
 8003f92:	4618      	mov	r0, r3
 8003f94:	797b      	ldrb	r3, [r7, #5]
 8003f96:	461a      	mov	r2, r3
 8003f98:	491c      	ldr	r1, [pc, #112]	; (800400c <pos_run_time+0xec>)
 8003f9a:	2346      	movs	r3, #70	; 0x46
 8003f9c:	fb03 f202 	mul.w	r2, r3, r2
 8003fa0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003fa4:	fb03 f300 	mul.w	r3, r3, r0
 8003fa8:	4413      	add	r3, r2
 8003faa:	440b      	add	r3, r1
 8003fac:	3324      	adds	r3, #36	; 0x24
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	81fb      	strh	r3, [r7, #14]
			break;
 8003fb2:	e023      	b.n	8003ffc <pos_run_time+0xdc>
		case west:
			time = closed_list[pos.x][pos.y].west.time;
 8003fb4:	793b      	ldrb	r3, [r7, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	797b      	ldrb	r3, [r7, #5]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4913      	ldr	r1, [pc, #76]	; (800400c <pos_run_time+0xec>)
 8003fbe:	2346      	movs	r3, #70	; 0x46
 8003fc0:	fb03 f202 	mul.w	r2, r3, r2
 8003fc4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003fc8:	fb03 f300 	mul.w	r3, r3, r0
 8003fcc:	4413      	add	r3, r2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3332      	adds	r3, #50	; 0x32
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	81fb      	strh	r3, [r7, #14]
			break;
 8003fd6:	e011      	b.n	8003ffc <pos_run_time+0xdc>
		case center:
			time = closed_list[pos.x][pos.y].center.time;
 8003fd8:	793b      	ldrb	r3, [r7, #4]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	797b      	ldrb	r3, [r7, #5]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	490a      	ldr	r1, [pc, #40]	; (800400c <pos_run_time+0xec>)
 8003fe2:	2346      	movs	r3, #70	; 0x46
 8003fe4:	fb03 f202 	mul.w	r2, r3, r2
 8003fe8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003fec:	fb03 f300 	mul.w	r3, r3, r0
 8003ff0:	4413      	add	r3, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	3340      	adds	r3, #64	; 0x40
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	81fb      	strh	r3, [r7, #14]
			break;
 8003ffa:	bf00      	nop
	}
	return time;
 8003ffc:	89fb      	ldrh	r3, [r7, #14]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	200099a4 	.word	0x200099a4

08004010 <pos_run_pt>:

t_run_pattern pos_run_pt(t_position pos)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	t_run_pattern run_pt;
	switch(pos.dir)
 8004018:	79bb      	ldrb	r3, [r7, #6]
 800401a:	2b04      	cmp	r3, #4
 800401c:	d866      	bhi.n	80040ec <pos_run_pt+0xdc>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <pos_run_pt+0x14>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004039 	.word	0x08004039
 8004028:	0800405d 	.word	0x0800405d
 800402c:	08004081 	.word	0x08004081
 8004030:	080040a5 	.word	0x080040a5
 8004034:	080040c9 	.word	0x080040c9
	{
		case north:
			run_pt = closed_list[pos.x][pos.y].north.run_pt;
 8004038:	793b      	ldrb	r3, [r7, #4]
 800403a:	4618      	mov	r0, r3
 800403c:	797b      	ldrb	r3, [r7, #5]
 800403e:	461a      	mov	r2, r3
 8004040:	492e      	ldr	r1, [pc, #184]	; (80040fc <pos_run_pt+0xec>)
 8004042:	2346      	movs	r3, #70	; 0x46
 8004044:	fb03 f202 	mul.w	r2, r3, r2
 8004048:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800404c:	fb03 f300 	mul.w	r3, r3, r0
 8004050:	4413      	add	r3, r2
 8004052:	440b      	add	r3, r1
 8004054:	330c      	adds	r3, #12
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	73fb      	strb	r3, [r7, #15]
			break;
 800405a:	e047      	b.n	80040ec <pos_run_pt+0xdc>
		case east:
			run_pt = closed_list[pos.x][pos.y].east.run_pt;
 800405c:	793b      	ldrb	r3, [r7, #4]
 800405e:	4618      	mov	r0, r3
 8004060:	797b      	ldrb	r3, [r7, #5]
 8004062:	461a      	mov	r2, r3
 8004064:	4925      	ldr	r1, [pc, #148]	; (80040fc <pos_run_pt+0xec>)
 8004066:	2346      	movs	r3, #70	; 0x46
 8004068:	fb03 f202 	mul.w	r2, r3, r2
 800406c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004070:	fb03 f300 	mul.w	r3, r3, r0
 8004074:	4413      	add	r3, r2
 8004076:	440b      	add	r3, r1
 8004078:	331a      	adds	r3, #26
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	73fb      	strb	r3, [r7, #15]
			break;
 800407e:	e035      	b.n	80040ec <pos_run_pt+0xdc>
		case south:
			run_pt = closed_list[pos.x][pos.y].south.run_pt;
 8004080:	793b      	ldrb	r3, [r7, #4]
 8004082:	4618      	mov	r0, r3
 8004084:	797b      	ldrb	r3, [r7, #5]
 8004086:	461a      	mov	r2, r3
 8004088:	491c      	ldr	r1, [pc, #112]	; (80040fc <pos_run_pt+0xec>)
 800408a:	2346      	movs	r3, #70	; 0x46
 800408c:	fb03 f202 	mul.w	r2, r3, r2
 8004090:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004094:	fb03 f300 	mul.w	r3, r3, r0
 8004098:	4413      	add	r3, r2
 800409a:	440b      	add	r3, r1
 800409c:	3328      	adds	r3, #40	; 0x28
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	73fb      	strb	r3, [r7, #15]
			break;
 80040a2:	e023      	b.n	80040ec <pos_run_pt+0xdc>
		case west:
			run_pt = closed_list[pos.x][pos.y].west.run_pt;
 80040a4:	793b      	ldrb	r3, [r7, #4]
 80040a6:	4618      	mov	r0, r3
 80040a8:	797b      	ldrb	r3, [r7, #5]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4913      	ldr	r1, [pc, #76]	; (80040fc <pos_run_pt+0xec>)
 80040ae:	2346      	movs	r3, #70	; 0x46
 80040b0:	fb03 f202 	mul.w	r2, r3, r2
 80040b4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80040b8:	fb03 f300 	mul.w	r3, r3, r0
 80040bc:	4413      	add	r3, r2
 80040be:	440b      	add	r3, r1
 80040c0:	3336      	adds	r3, #54	; 0x36
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	73fb      	strb	r3, [r7, #15]
			break;
 80040c6:	e011      	b.n	80040ec <pos_run_pt+0xdc>
		case center:
			run_pt = closed_list[pos.x][pos.y].center.run_pt;
 80040c8:	793b      	ldrb	r3, [r7, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	797b      	ldrb	r3, [r7, #5]
 80040ce:	461a      	mov	r2, r3
 80040d0:	490a      	ldr	r1, [pc, #40]	; (80040fc <pos_run_pt+0xec>)
 80040d2:	2346      	movs	r3, #70	; 0x46
 80040d4:	fb03 f202 	mul.w	r2, r3, r2
 80040d8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80040dc:	fb03 f300 	mul.w	r3, r3, r0
 80040e0:	4413      	add	r3, r2
 80040e2:	440b      	add	r3, r1
 80040e4:	3344      	adds	r3, #68	; 0x44
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	73fb      	strb	r3, [r7, #15]
			break;
 80040ea:	bf00      	nop
	}
	return run_pt;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	200099a4 	.word	0x200099a4

08004100 <pos_parent>:

t_position pos_parent(t_position pos)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
	t_position parent;

	switch(pos.dir)
 8004108:	79bb      	ldrb	r3, [r7, #6]
 800410a:	2b04      	cmp	r3, #4
 800410c:	f200 8082 	bhi.w	8004214 <pos_parent+0x114>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <pos_parent+0x18>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800412d 	.word	0x0800412d
 800411c:	08004159 	.word	0x08004159
 8004120:	08004187 	.word	0x08004187
 8004124:	080041b7 	.word	0x080041b7
 8004128:	080041e7 	.word	0x080041e7
	{
		case north:
			parent = closed_list[pos.x][pos.y].north.parent;
 800412c:	793b      	ldrb	r3, [r7, #4]
 800412e:	4618      	mov	r0, r3
 8004130:	797b      	ldrb	r3, [r7, #5]
 8004132:	461a      	mov	r2, r3
 8004134:	4944      	ldr	r1, [pc, #272]	; (8004248 <pos_parent+0x148>)
 8004136:	2346      	movs	r3, #70	; 0x46
 8004138:	fb03 f202 	mul.w	r2, r3, r2
 800413c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004140:	fb03 f300 	mul.w	r3, r3, r0
 8004144:	4413      	add	r3, r2
 8004146:	440b      	add	r3, r1
 8004148:	1cda      	adds	r2, r3, #3
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	8811      	ldrh	r1, [r2, #0]
 8004150:	7892      	ldrb	r2, [r2, #2]
 8004152:	8019      	strh	r1, [r3, #0]
 8004154:	709a      	strb	r2, [r3, #2]
			break;
 8004156:	e05d      	b.n	8004214 <pos_parent+0x114>
		case east:
			parent = closed_list[pos.x][pos.y].east.parent;
 8004158:	793b      	ldrb	r3, [r7, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	797b      	ldrb	r3, [r7, #5]
 800415e:	461a      	mov	r2, r3
 8004160:	4939      	ldr	r1, [pc, #228]	; (8004248 <pos_parent+0x148>)
 8004162:	2346      	movs	r3, #70	; 0x46
 8004164:	fb03 f202 	mul.w	r2, r3, r2
 8004168:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800416c:	fb03 f300 	mul.w	r3, r3, r0
 8004170:	4413      	add	r3, r2
 8004172:	440b      	add	r3, r1
 8004174:	f103 0211 	add.w	r2, r3, #17
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	8811      	ldrh	r1, [r2, #0]
 800417e:	7892      	ldrb	r2, [r2, #2]
 8004180:	8019      	strh	r1, [r3, #0]
 8004182:	709a      	strb	r2, [r3, #2]
			break;
 8004184:	e046      	b.n	8004214 <pos_parent+0x114>
		case south:
			parent = closed_list[pos.x][pos.y].south.parent;
 8004186:	793b      	ldrb	r3, [r7, #4]
 8004188:	4618      	mov	r0, r3
 800418a:	797b      	ldrb	r3, [r7, #5]
 800418c:	461a      	mov	r2, r3
 800418e:	492e      	ldr	r1, [pc, #184]	; (8004248 <pos_parent+0x148>)
 8004190:	2346      	movs	r3, #70	; 0x46
 8004192:	fb03 f202 	mul.w	r2, r3, r2
 8004196:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800419a:	fb03 f300 	mul.w	r3, r3, r0
 800419e:	4413      	add	r3, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	f103 0218 	add.w	r2, r3, #24
 80041a6:	f107 0308 	add.w	r3, r7, #8
 80041aa:	3207      	adds	r2, #7
 80041ac:	8811      	ldrh	r1, [r2, #0]
 80041ae:	7892      	ldrb	r2, [r2, #2]
 80041b0:	8019      	strh	r1, [r3, #0]
 80041b2:	709a      	strb	r2, [r3, #2]
			break;
 80041b4:	e02e      	b.n	8004214 <pos_parent+0x114>
		case west:
			parent = closed_list[pos.x][pos.y].west.parent;
 80041b6:	793b      	ldrb	r3, [r7, #4]
 80041b8:	4618      	mov	r0, r3
 80041ba:	797b      	ldrb	r3, [r7, #5]
 80041bc:	461a      	mov	r2, r3
 80041be:	4922      	ldr	r1, [pc, #136]	; (8004248 <pos_parent+0x148>)
 80041c0:	2346      	movs	r3, #70	; 0x46
 80041c2:	fb03 f202 	mul.w	r2, r3, r2
 80041c6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80041ca:	fb03 f300 	mul.w	r3, r3, r0
 80041ce:	4413      	add	r3, r2
 80041d0:	440b      	add	r3, r1
 80041d2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80041d6:	f107 0308 	add.w	r3, r7, #8
 80041da:	3205      	adds	r2, #5
 80041dc:	8811      	ldrh	r1, [r2, #0]
 80041de:	7892      	ldrb	r2, [r2, #2]
 80041e0:	8019      	strh	r1, [r3, #0]
 80041e2:	709a      	strb	r2, [r3, #2]
			break;
 80041e4:	e016      	b.n	8004214 <pos_parent+0x114>
		case center:
			parent = closed_list[pos.x][pos.y].center.parent;
 80041e6:	793b      	ldrb	r3, [r7, #4]
 80041e8:	4618      	mov	r0, r3
 80041ea:	797b      	ldrb	r3, [r7, #5]
 80041ec:	461a      	mov	r2, r3
 80041ee:	4916      	ldr	r1, [pc, #88]	; (8004248 <pos_parent+0x148>)
 80041f0:	2346      	movs	r3, #70	; 0x46
 80041f2:	fb03 f202 	mul.w	r2, r3, r2
 80041f6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80041fa:	fb03 f300 	mul.w	r3, r3, r0
 80041fe:	4413      	add	r3, r2
 8004200:	440b      	add	r3, r1
 8004202:	f103 023b 	add.w	r2, r3, #59	; 0x3b
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	8811      	ldrh	r1, [r2, #0]
 800420c:	7892      	ldrb	r2, [r2, #2]
 800420e:	8019      	strh	r1, [r3, #0]
 8004210:	709a      	strb	r2, [r3, #2]
			break;
 8004212:	bf00      	nop
	}
	return parent;
 8004214:	f107 030c 	add.w	r3, r7, #12
 8004218:	f107 0208 	add.w	r2, r7, #8
 800421c:	6812      	ldr	r2, [r2, #0]
 800421e:	4611      	mov	r1, r2
 8004220:	8019      	strh	r1, [r3, #0]
 8004222:	3302      	adds	r3, #2
 8004224:	0c12      	lsrs	r2, r2, #16
 8004226:	701a      	strb	r2, [r3, #0]
 8004228:	2300      	movs	r3, #0
 800422a:	7b3a      	ldrb	r2, [r7, #12]
 800422c:	f362 0307 	bfi	r3, r2, #0, #8
 8004230:	7b7a      	ldrb	r2, [r7, #13]
 8004232:	f362 230f 	bfi	r3, r2, #8, #8
 8004236:	7bba      	ldrb	r2, [r7, #14]
 8004238:	f362 4317 	bfi	r3, r2, #16, #8
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	200099a4 	.word	0x200099a4

0800424c <return_mouse_dir>:

t_eight_dir return_mouse_dir(t_position pos)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
	t_eight_dir mouse_dir;
	switch(pos.dir)
 8004254:	79bb      	ldrb	r3, [r7, #6]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d866      	bhi.n	8004328 <return_mouse_dir+0xdc>
 800425a:	a201      	add	r2, pc, #4	; (adr r2, 8004260 <return_mouse_dir+0x14>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	08004275 	.word	0x08004275
 8004264:	08004299 	.word	0x08004299
 8004268:	080042bd 	.word	0x080042bd
 800426c:	080042e1 	.word	0x080042e1
 8004270:	08004305 	.word	0x08004305
	{
		case north:
			mouse_dir = closed_list[pos.x][pos.y].north.mouse_dir;
 8004274:	793b      	ldrb	r3, [r7, #4]
 8004276:	4618      	mov	r0, r3
 8004278:	797b      	ldrb	r3, [r7, #5]
 800427a:	461a      	mov	r2, r3
 800427c:	492e      	ldr	r1, [pc, #184]	; (8004338 <return_mouse_dir+0xec>)
 800427e:	2346      	movs	r3, #70	; 0x46
 8004280:	fb03 f202 	mul.w	r2, r3, r2
 8004284:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004288:	fb03 f300 	mul.w	r3, r3, r0
 800428c:	4413      	add	r3, r2
 800428e:	440b      	add	r3, r1
 8004290:	3306      	adds	r3, #6
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	73fb      	strb	r3, [r7, #15]
			break;
 8004296:	e047      	b.n	8004328 <return_mouse_dir+0xdc>
		case east:
			mouse_dir = closed_list[pos.x][pos.y].east.mouse_dir;
 8004298:	793b      	ldrb	r3, [r7, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	797b      	ldrb	r3, [r7, #5]
 800429e:	461a      	mov	r2, r3
 80042a0:	4925      	ldr	r1, [pc, #148]	; (8004338 <return_mouse_dir+0xec>)
 80042a2:	2346      	movs	r3, #70	; 0x46
 80042a4:	fb03 f202 	mul.w	r2, r3, r2
 80042a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80042ac:	fb03 f300 	mul.w	r3, r3, r0
 80042b0:	4413      	add	r3, r2
 80042b2:	440b      	add	r3, r1
 80042b4:	3314      	adds	r3, #20
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	73fb      	strb	r3, [r7, #15]
			break;
 80042ba:	e035      	b.n	8004328 <return_mouse_dir+0xdc>
		case south:
			mouse_dir = closed_list[pos.x][pos.y].south.mouse_dir;
 80042bc:	793b      	ldrb	r3, [r7, #4]
 80042be:	4618      	mov	r0, r3
 80042c0:	797b      	ldrb	r3, [r7, #5]
 80042c2:	461a      	mov	r2, r3
 80042c4:	491c      	ldr	r1, [pc, #112]	; (8004338 <return_mouse_dir+0xec>)
 80042c6:	2346      	movs	r3, #70	; 0x46
 80042c8:	fb03 f202 	mul.w	r2, r3, r2
 80042cc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80042d0:	fb03 f300 	mul.w	r3, r3, r0
 80042d4:	4413      	add	r3, r2
 80042d6:	440b      	add	r3, r1
 80042d8:	3322      	adds	r3, #34	; 0x22
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	73fb      	strb	r3, [r7, #15]
			break;
 80042de:	e023      	b.n	8004328 <return_mouse_dir+0xdc>
		case west:
			mouse_dir = closed_list[pos.x][pos.y].west.mouse_dir;
 80042e0:	793b      	ldrb	r3, [r7, #4]
 80042e2:	4618      	mov	r0, r3
 80042e4:	797b      	ldrb	r3, [r7, #5]
 80042e6:	461a      	mov	r2, r3
 80042e8:	4913      	ldr	r1, [pc, #76]	; (8004338 <return_mouse_dir+0xec>)
 80042ea:	2346      	movs	r3, #70	; 0x46
 80042ec:	fb03 f202 	mul.w	r2, r3, r2
 80042f0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80042f4:	fb03 f300 	mul.w	r3, r3, r0
 80042f8:	4413      	add	r3, r2
 80042fa:	440b      	add	r3, r1
 80042fc:	3330      	adds	r3, #48	; 0x30
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	73fb      	strb	r3, [r7, #15]
			break;
 8004302:	e011      	b.n	8004328 <return_mouse_dir+0xdc>
		case center:
			mouse_dir = closed_list[pos.x][pos.y].center.mouse_dir;
 8004304:	793b      	ldrb	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	797b      	ldrb	r3, [r7, #5]
 800430a:	461a      	mov	r2, r3
 800430c:	490a      	ldr	r1, [pc, #40]	; (8004338 <return_mouse_dir+0xec>)
 800430e:	2346      	movs	r3, #70	; 0x46
 8004310:	fb03 f202 	mul.w	r2, r3, r2
 8004314:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004318:	fb03 f300 	mul.w	r3, r3, r0
 800431c:	4413      	add	r3, r2
 800431e:	440b      	add	r3, r1
 8004320:	333e      	adds	r3, #62	; 0x3e
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	73fb      	strb	r3, [r7, #15]
			break;
 8004326:	bf00      	nop
	}
	return mouse_dir;
 8004328:	7bfb      	ldrb	r3, [r7, #15]
}
 800432a:	4618      	mov	r0, r3
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	200099a4 	.word	0x200099a4

0800433c <return_close_list_el>:

t_node_el return_close_list_el(t_position pos){
 800433c:	b490      	push	{r4, r7}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	t_node_el  node_el;
	switch(pos.dir)
 8004346:	78bb      	ldrb	r3, [r7, #2]
 8004348:	2b04      	cmp	r3, #4
 800434a:	f200 808d 	bhi.w	8004468 <return_close_list_el+0x12c>
 800434e:	a201      	add	r2, pc, #4	; (adr r2, 8004354 <return_close_list_el+0x18>)
 8004350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004354:	08004369 	.word	0x08004369
 8004358:	08004399 	.word	0x08004399
 800435c:	080043cd 	.word	0x080043cd
 8004360:	08004401 	.word	0x08004401
 8004364:	08004435 	.word	0x08004435
	{
		case north:
			node_el = closed_list[pos.x][pos.y].north;
 8004368:	783b      	ldrb	r3, [r7, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	787b      	ldrb	r3, [r7, #1]
 800436e:	461a      	mov	r2, r3
 8004370:	4945      	ldr	r1, [pc, #276]	; (8004488 <return_close_list_el+0x14c>)
 8004372:	2346      	movs	r3, #70	; 0x46
 8004374:	fb03 f202 	mul.w	r2, r3, r2
 8004378:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800437c:	fb03 f300 	mul.w	r3, r3, r0
 8004380:	4413      	add	r3, r2
 8004382:	18ca      	adds	r2, r1, r3
 8004384:	f107 0308 	add.w	r3, r7, #8
 8004388:	4614      	mov	r4, r2
 800438a:	6820      	ldr	r0, [r4, #0]
 800438c:	6861      	ldr	r1, [r4, #4]
 800438e:	68a2      	ldr	r2, [r4, #8]
 8004390:	c307      	stmia	r3!, {r0, r1, r2}
 8004392:	89a2      	ldrh	r2, [r4, #12]
 8004394:	801a      	strh	r2, [r3, #0]
			break;
 8004396:	e067      	b.n	8004468 <return_close_list_el+0x12c>
		case east:
			node_el = closed_list[pos.x][pos.y].east;
 8004398:	783b      	ldrb	r3, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	787b      	ldrb	r3, [r7, #1]
 800439e:	461a      	mov	r2, r3
 80043a0:	4939      	ldr	r1, [pc, #228]	; (8004488 <return_close_list_el+0x14c>)
 80043a2:	2346      	movs	r3, #70	; 0x46
 80043a4:	fb03 f202 	mul.w	r2, r3, r2
 80043a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80043ac:	fb03 f300 	mul.w	r3, r3, r0
 80043b0:	4413      	add	r3, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f103 0208 	add.w	r2, r3, #8
 80043b8:	f107 0308 	add.w	r3, r7, #8
 80043bc:	1d94      	adds	r4, r2, #6
 80043be:	6820      	ldr	r0, [r4, #0]
 80043c0:	6861      	ldr	r1, [r4, #4]
 80043c2:	68a2      	ldr	r2, [r4, #8]
 80043c4:	c307      	stmia	r3!, {r0, r1, r2}
 80043c6:	89a2      	ldrh	r2, [r4, #12]
 80043c8:	801a      	strh	r2, [r3, #0]
			break;
 80043ca:	e04d      	b.n	8004468 <return_close_list_el+0x12c>
		case south:
			node_el = closed_list[pos.x][pos.y].south;
 80043cc:	783b      	ldrb	r3, [r7, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	787b      	ldrb	r3, [r7, #1]
 80043d2:	461a      	mov	r2, r3
 80043d4:	492c      	ldr	r1, [pc, #176]	; (8004488 <return_close_list_el+0x14c>)
 80043d6:	2346      	movs	r3, #70	; 0x46
 80043d8:	fb03 f202 	mul.w	r2, r3, r2
 80043dc:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80043e0:	fb03 f300 	mul.w	r3, r3, r0
 80043e4:	4413      	add	r3, r2
 80043e6:	440b      	add	r3, r1
 80043e8:	f103 0218 	add.w	r2, r3, #24
 80043ec:	f107 0308 	add.w	r3, r7, #8
 80043f0:	1d14      	adds	r4, r2, #4
 80043f2:	6820      	ldr	r0, [r4, #0]
 80043f4:	6861      	ldr	r1, [r4, #4]
 80043f6:	68a2      	ldr	r2, [r4, #8]
 80043f8:	c307      	stmia	r3!, {r0, r1, r2}
 80043fa:	89a2      	ldrh	r2, [r4, #12]
 80043fc:	801a      	strh	r2, [r3, #0]
			break;
 80043fe:	e033      	b.n	8004468 <return_close_list_el+0x12c>
		case west:
			node_el = closed_list[pos.x][pos.y].west;
 8004400:	783b      	ldrb	r3, [r7, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	787b      	ldrb	r3, [r7, #1]
 8004406:	461a      	mov	r2, r3
 8004408:	491f      	ldr	r1, [pc, #124]	; (8004488 <return_close_list_el+0x14c>)
 800440a:	2346      	movs	r3, #70	; 0x46
 800440c:	fb03 f202 	mul.w	r2, r3, r2
 8004410:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004414:	fb03 f300 	mul.w	r3, r3, r0
 8004418:	4413      	add	r3, r2
 800441a:	440b      	add	r3, r1
 800441c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8004420:	f107 0308 	add.w	r3, r7, #8
 8004424:	1c94      	adds	r4, r2, #2
 8004426:	6820      	ldr	r0, [r4, #0]
 8004428:	6861      	ldr	r1, [r4, #4]
 800442a:	68a2      	ldr	r2, [r4, #8]
 800442c:	c307      	stmia	r3!, {r0, r1, r2}
 800442e:	89a2      	ldrh	r2, [r4, #12]
 8004430:	801a      	strh	r2, [r3, #0]
			break;
 8004432:	e019      	b.n	8004468 <return_close_list_el+0x12c>
		case center:
			node_el = closed_list[pos.x][pos.y].center;
 8004434:	783b      	ldrb	r3, [r7, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	787b      	ldrb	r3, [r7, #1]
 800443a:	461a      	mov	r2, r3
 800443c:	4912      	ldr	r1, [pc, #72]	; (8004488 <return_close_list_el+0x14c>)
 800443e:	2346      	movs	r3, #70	; 0x46
 8004440:	fb03 f202 	mul.w	r2, r3, r2
 8004444:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004448:	fb03 f300 	mul.w	r3, r3, r0
 800444c:	4413      	add	r3, r2
 800444e:	440b      	add	r3, r1
 8004450:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004454:	f107 0308 	add.w	r3, r7, #8
 8004458:	4614      	mov	r4, r2
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	6861      	ldr	r1, [r4, #4]
 800445e:	68a2      	ldr	r2, [r4, #8]
 8004460:	c307      	stmia	r3!, {r0, r1, r2}
 8004462:	89a2      	ldrh	r2, [r4, #12]
 8004464:	801a      	strh	r2, [r3, #0]
			break;
 8004466:	bf00      	nop
	}
	return node_el;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	461c      	mov	r4, r3
 800446c:	f107 0308 	add.w	r3, r7, #8
 8004470:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004472:	6020      	str	r0, [r4, #0]
 8004474:	6061      	str	r1, [r4, #4]
 8004476:	60a2      	str	r2, [r4, #8]
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	81a3      	strh	r3, [r4, #12]
}
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	3718      	adds	r7, #24
 8004480:	46bd      	mov	sp, r7
 8004482:	bc90      	pop	{r4, r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200099a4 	.word	0x200099a4

0800448c <is_determine>:

t_bool is_determine(t_position pos)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	t_bool determine;
	switch(pos.dir)
 8004494:	79bb      	ldrb	r3, [r7, #6]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d866      	bhi.n	8004568 <is_determine+0xdc>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <is_determine+0x14>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044b5 	.word	0x080044b5
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004521 	.word	0x08004521
 80044b0:	08004545 	.word	0x08004545
	{
		case north:
			determine = closed_list[pos.x][pos.y].north.determine;
 80044b4:	793b      	ldrb	r3, [r7, #4]
 80044b6:	4618      	mov	r0, r3
 80044b8:	797b      	ldrb	r3, [r7, #5]
 80044ba:	461a      	mov	r2, r3
 80044bc:	492e      	ldr	r1, [pc, #184]	; (8004578 <is_determine+0xec>)
 80044be:	2346      	movs	r3, #70	; 0x46
 80044c0:	fb03 f202 	mul.w	r2, r3, r2
 80044c4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80044c8:	fb03 f300 	mul.w	r3, r3, r0
 80044cc:	4413      	add	r3, r2
 80044ce:	440b      	add	r3, r1
 80044d0:	330b      	adds	r3, #11
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	73fb      	strb	r3, [r7, #15]
			break;
 80044d6:	e047      	b.n	8004568 <is_determine+0xdc>
		case east:
			determine = closed_list[pos.x][pos.y].east.determine;
 80044d8:	793b      	ldrb	r3, [r7, #4]
 80044da:	4618      	mov	r0, r3
 80044dc:	797b      	ldrb	r3, [r7, #5]
 80044de:	461a      	mov	r2, r3
 80044e0:	4925      	ldr	r1, [pc, #148]	; (8004578 <is_determine+0xec>)
 80044e2:	2346      	movs	r3, #70	; 0x46
 80044e4:	fb03 f202 	mul.w	r2, r3, r2
 80044e8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80044ec:	fb03 f300 	mul.w	r3, r3, r0
 80044f0:	4413      	add	r3, r2
 80044f2:	440b      	add	r3, r1
 80044f4:	3319      	adds	r3, #25
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	73fb      	strb	r3, [r7, #15]
			break;
 80044fa:	e035      	b.n	8004568 <is_determine+0xdc>
		case south:
			determine = closed_list[pos.x][pos.y].south.determine;
 80044fc:	793b      	ldrb	r3, [r7, #4]
 80044fe:	4618      	mov	r0, r3
 8004500:	797b      	ldrb	r3, [r7, #5]
 8004502:	461a      	mov	r2, r3
 8004504:	491c      	ldr	r1, [pc, #112]	; (8004578 <is_determine+0xec>)
 8004506:	2346      	movs	r3, #70	; 0x46
 8004508:	fb03 f202 	mul.w	r2, r3, r2
 800450c:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004510:	fb03 f300 	mul.w	r3, r3, r0
 8004514:	4413      	add	r3, r2
 8004516:	440b      	add	r3, r1
 8004518:	3327      	adds	r3, #39	; 0x27
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	73fb      	strb	r3, [r7, #15]
			break;
 800451e:	e023      	b.n	8004568 <is_determine+0xdc>
		case west:
			determine = closed_list[pos.x][pos.y].west.determine;
 8004520:	793b      	ldrb	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	797b      	ldrb	r3, [r7, #5]
 8004526:	461a      	mov	r2, r3
 8004528:	4913      	ldr	r1, [pc, #76]	; (8004578 <is_determine+0xec>)
 800452a:	2346      	movs	r3, #70	; 0x46
 800452c:	fb03 f202 	mul.w	r2, r3, r2
 8004530:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004534:	fb03 f300 	mul.w	r3, r3, r0
 8004538:	4413      	add	r3, r2
 800453a:	440b      	add	r3, r1
 800453c:	3335      	adds	r3, #53	; 0x35
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	73fb      	strb	r3, [r7, #15]
			break;
 8004542:	e011      	b.n	8004568 <is_determine+0xdc>
		case center:
			determine = closed_list[pos.x][pos.y].center.determine;
 8004544:	793b      	ldrb	r3, [r7, #4]
 8004546:	4618      	mov	r0, r3
 8004548:	797b      	ldrb	r3, [r7, #5]
 800454a:	461a      	mov	r2, r3
 800454c:	490a      	ldr	r1, [pc, #40]	; (8004578 <is_determine+0xec>)
 800454e:	2346      	movs	r3, #70	; 0x46
 8004550:	fb03 f202 	mul.w	r2, r3, r2
 8004554:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8004558:	fb03 f300 	mul.w	r3, r3, r0
 800455c:	4413      	add	r3, r2
 800455e:	440b      	add	r3, r1
 8004560:	3343      	adds	r3, #67	; 0x43
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	73fb      	strb	r3, [r7, #15]
			break;
 8004566:	bf00      	nop
	}
	return determine;
 8004568:	7bfb      	ldrb	r3, [r7, #15]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	200099a4 	.word	0x200099a4

0800457c <straight_expand>:



void straight_expand(t_position pos,t_eight_dir mouse_dir)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b091      	sub	sp, #68	; 0x44
 8004580:	af04      	add	r7, sp, #16
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	70fb      	strb	r3, [r7, #3]
	t_position next_pos 	= make_position(pos.x, pos.y, pos.dir);
 8004588:	793b      	ldrb	r3, [r7, #4]
 800458a:	7979      	ldrb	r1, [r7, #5]
 800458c:	79ba      	ldrb	r2, [r7, #6]
 800458e:	4618      	mov	r0, r3
 8004590:	f7fc fd70 	bl	8001074 <make_position>
 8004594:	4603      	mov	r3, r0
 8004596:	461a      	mov	r2, r3
 8004598:	753a      	strb	r2, [r7, #20]
 800459a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800459e:	757a      	strb	r2, [r7, #21]
 80045a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80045a4:	75bb      	strb	r3, [r7, #22]
	t_position parent_pos	= make_position(pos.x, pos.y, pos.dir);
 80045a6:	793b      	ldrb	r3, [r7, #4]
 80045a8:	7979      	ldrb	r1, [r7, #5]
 80045aa:	79ba      	ldrb	r2, [r7, #6]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fc fd61 	bl	8001074 <make_position>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	743a      	strb	r2, [r7, #16]
 80045b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80045bc:	747a      	strb	r2, [r7, #17]
 80045be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80045c2:	74bb      	strb	r3, [r7, #18]
	t_run_pattern run_pt	= Straight;
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if DEBUG_MODE == 1
	printf("STRAIGHT_EXPAND\n");
	HAL_Delay(1);
#endif

	if(pos.dir == center)
 80045ca:	79bb      	ldrb	r3, [r7, #6]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	f040 80f9 	bne.w	80047c4 <straight_expand+0x248>
	{
		if(mouse_dir == North || mouse_dir == South)
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <straight_expand+0x62>
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	2b04      	cmp	r3, #4
 80045dc:	d176      	bne.n	80046cc <straight_expand+0x150>
		{
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 80045de:	2300      	movs	r3, #0
 80045e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e2:	e06b      	b.n	80046bc <straight_expand+0x140>
			{
				if(wall_check(make_position(next_pos.x, next_pos.y, (mouse_dir/2)), 0x03) == false)
 80045e4:	7d38      	ldrb	r0, [r7, #20]
 80045e6:	7d79      	ldrb	r1, [r7, #21]
 80045e8:	78fb      	ldrb	r3, [r7, #3]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	461a      	mov	r2, r3
 80045f0:	f7fc fd40 	bl	8001074 <make_position>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	763a      	strb	r2, [r7, #24]
 80045fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80045fe:	767a      	strb	r2, [r7, #25]
 8004600:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004604:	76bb      	strb	r3, [r7, #26]
 8004606:	2103      	movs	r1, #3
 8004608:	69b8      	ldr	r0, [r7, #24]
 800460a:	f7fc fd91 	bl	8001130 <wall_check>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d157      	bne.n	80046c4 <straight_expand+0x148>
				{
					if(mouse_dir == North)
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <straight_expand+0xa8>
					{
						next_pos.y = next_pos.y + 1;
 800461a:	7d7b      	ldrb	r3, [r7, #21]
 800461c:	3301      	adds	r3, #1
 800461e:	b2db      	uxtb	r3, r3
 8004620:	757b      	strb	r3, [r7, #21]
 8004622:	e006      	b.n	8004632 <straight_expand+0xb6>
					}
					else if(mouse_dir == South)
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	2b04      	cmp	r3, #4
 8004628:	d103      	bne.n	8004632 <straight_expand+0xb6>
					{
						next_pos.y = next_pos.y - 1;
 800462a:	7d7b      	ldrb	r3, [r7, #21]
 800462c:	3b01      	subs	r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	757b      	strb	r3, [r7, #21]
					}

					if(next_pos.y < MAZE_SIZE_Y && next_pos.y >= 0)
 8004632:	7d7b      	ldrb	r3, [r7, #21]
 8004634:	2b1f      	cmp	r3, #31
 8004636:	d847      	bhi.n	80046c8 <straight_expand+0x14c>
					{
						t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8004638:	7d3b      	ldrb	r3, [r7, #20]
 800463a:	7d79      	ldrb	r1, [r7, #21]
 800463c:	7dba      	ldrb	r2, [r7, #22]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fd18 	bl	8001074 <make_position>
 8004644:	4603      	mov	r3, r0
 8004646:	461a      	mov	r2, r3
 8004648:	733a      	strb	r2, [r7, #12]
 800464a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800464e:	737a      	strb	r2, [r7, #13]
 8004650:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004654:	73bb      	strb	r3, [r7, #14]
						uint16_t set_run_t = pos_run_time(parent_pos) + calc_time(run_pt,i+1);
 8004656:	6938      	ldr	r0, [r7, #16]
 8004658:	f7ff fc62 	bl	8003f20 <pos_run_time>
 800465c:	4603      	mov	r3, r0
 800465e:	461c      	mov	r4, r3
 8004660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004668:	4611      	mov	r1, r2
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff fbb4 	bl	8003dd8 <calc_time>
 8004670:	4603      	mov	r3, r0
 8004672:	4423      	add	r3, r4
 8004674:	847b      	strh	r3, [r7, #34]	; 0x22

						if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f7ff fc52 	bl	8003f20 <pos_run_time>
 800467c:	4603      	mov	r3, r0
 800467e:	461a      	mov	r2, r3
 8004680:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004682:	4293      	cmp	r3, r2
 8004684:	d217      	bcs.n	80046b6 <straight_expand+0x13a>
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f7ff ff00 	bl	800448c <is_determine>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <straight_expand+0x13a>
							close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,(i+1),false);
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	b29b      	uxth	r3, r3
 8004696:	3301      	adds	r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	8c78      	ldrh	r0, [r7, #34]	; 0x22
 800469c:	78f9      	ldrb	r1, [r7, #3]
 800469e:	2200      	movs	r2, #0
 80046a0:	9202      	str	r2, [sp, #8]
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	4603      	mov	r3, r0
 80046ac:	460a      	mov	r2, r1
 80046ae:	6939      	ldr	r1, [r7, #16]
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7fd f9b7 	bl	8001a24 <close_list_set>
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 80046b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b8:	3301      	adds	r3, #1
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	dd90      	ble.n	80045e4 <straight_expand+0x68>
 80046c2:	e07f      	b.n	80047c4 <straight_expand+0x248>
						break;
					}
				}
				else
				{
					break;
 80046c4:	bf00      	nop
 80046c6:	e07d      	b.n	80047c4 <straight_expand+0x248>
						break;
 80046c8:	bf00      	nop
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 80046ca:	e07b      	b.n	80047c4 <straight_expand+0x248>
				}
			}
		}
		else if(mouse_dir == East || mouse_dir == West)
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d002      	beq.n	80046d8 <straight_expand+0x15c>
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	2b06      	cmp	r3, #6
 80046d6:	d175      	bne.n	80047c4 <straight_expand+0x248>
		{
			for(int i = 0;i < MAZE_SIZE_X;i++)
 80046d8:	2300      	movs	r3, #0
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
 80046dc:	e06b      	b.n	80047b6 <straight_expand+0x23a>
			{
				if(wall_check(make_position(next_pos.x, next_pos.y, (mouse_dir/2)), 0x03) == false)
 80046de:	7d38      	ldrb	r0, [r7, #20]
 80046e0:	7d79      	ldrb	r1, [r7, #21]
 80046e2:	78fb      	ldrb	r3, [r7, #3]
 80046e4:	085b      	lsrs	r3, r3, #1
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	f7fc fcc3 	bl	8001074 <make_position>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	773a      	strb	r2, [r7, #28]
 80046f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80046f8:	777a      	strb	r2, [r7, #29]
 80046fa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80046fe:	77bb      	strb	r3, [r7, #30]
 8004700:	2103      	movs	r1, #3
 8004702:	69f8      	ldr	r0, [r7, #28]
 8004704:	f7fc fd14 	bl	8001130 <wall_check>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d157      	bne.n	80047be <straight_expand+0x242>
				{
					if(mouse_dir == East)
 800470e:	78fb      	ldrb	r3, [r7, #3]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d104      	bne.n	800471e <straight_expand+0x1a2>
					{
						next_pos.x = next_pos.x + 1;
 8004714:	7d3b      	ldrb	r3, [r7, #20]
 8004716:	3301      	adds	r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	753b      	strb	r3, [r7, #20]
 800471c:	e006      	b.n	800472c <straight_expand+0x1b0>
					}
					else if(mouse_dir == West)
 800471e:	78fb      	ldrb	r3, [r7, #3]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d103      	bne.n	800472c <straight_expand+0x1b0>
					{
						next_pos.x = next_pos.x - 1;
 8004724:	7d3b      	ldrb	r3, [r7, #20]
 8004726:	3b01      	subs	r3, #1
 8004728:	b2db      	uxtb	r3, r3
 800472a:	753b      	strb	r3, [r7, #20]
					}

					if(next_pos.x < MAZE_SIZE_X &&next_pos.x >= 0)
 800472c:	7d3b      	ldrb	r3, [r7, #20]
 800472e:	2b1f      	cmp	r3, #31
 8004730:	d847      	bhi.n	80047c2 <straight_expand+0x246>
					{
						t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8004732:	7d3b      	ldrb	r3, [r7, #20]
 8004734:	7d79      	ldrb	r1, [r7, #21]
 8004736:	7dba      	ldrb	r2, [r7, #22]
 8004738:	4618      	mov	r0, r3
 800473a:	f7fc fc9b 	bl	8001074 <make_position>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	723a      	strb	r2, [r7, #8]
 8004744:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004748:	727a      	strb	r2, [r7, #9]
 800474a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800474e:	72bb      	strb	r3, [r7, #10]
						uint16_t set_run_t = pos_run_time(parent_pos) + calc_time(run_pt,i+1);
 8004750:	6938      	ldr	r0, [r7, #16]
 8004752:	f7ff fbe5 	bl	8003f20 <pos_run_time>
 8004756:	4603      	mov	r3, r0
 8004758:	461c      	mov	r4, r3
 800475a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004762:	4611      	mov	r1, r2
 8004764:	4618      	mov	r0, r3
 8004766:	f7ff fb37 	bl	8003dd8 <calc_time>
 800476a:	4603      	mov	r3, r0
 800476c:	4423      	add	r3, r4
 800476e:	84bb      	strh	r3, [r7, #36]	; 0x24
						if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8004770:	68b8      	ldr	r0, [r7, #8]
 8004772:	f7ff fbd5 	bl	8003f20 <pos_run_time>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800477c:	4293      	cmp	r3, r2
 800477e:	d217      	bcs.n	80047b0 <straight_expand+0x234>
 8004780:	68b8      	ldr	r0, [r7, #8]
 8004782:	f7ff fe83 	bl	800448c <is_determine>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d111      	bne.n	80047b0 <straight_expand+0x234>
							close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,(i+1),false);
 800478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800478e:	b29b      	uxth	r3, r3
 8004790:	3301      	adds	r3, #1
 8004792:	b29b      	uxth	r3, r3
 8004794:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004796:	78f9      	ldrb	r1, [r7, #3]
 8004798:	2200      	movs	r2, #0
 800479a:	9202      	str	r2, [sp, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4603      	mov	r3, r0
 80047a6:	460a      	mov	r2, r1
 80047a8:	6939      	ldr	r1, [r7, #16]
 80047aa:	68b8      	ldr	r0, [r7, #8]
 80047ac:	f7fd f93a 	bl	8001a24 <close_list_set>
			for(int i = 0;i < MAZE_SIZE_X;i++)
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	3301      	adds	r3, #1
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	2b1f      	cmp	r3, #31
 80047ba:	dd90      	ble.n	80046de <straight_expand+0x162>
					break;
				}
			}
		}
	}
}
 80047bc:	e002      	b.n	80047c4 <straight_expand+0x248>
					break;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <straight_expand+0x248>
						break;
 80047c2:	bf00      	nop
}
 80047c4:	bf00      	nop
 80047c6:	3734      	adds	r7, #52	; 0x34
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd90      	pop	{r4, r7, pc}

080047cc <diagonal_expand>:

void diagonal_expand(t_position pos,t_eight_dir mouse_dir)
{
 80047cc:	b590      	push	{r4, r7, lr}
 80047ce:	b08d      	sub	sp, #52	; 0x34
 80047d0:	af04      	add	r7, sp, #16
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
	t_position next_pos 	= make_position(pos.x, pos.y, pos.dir);
 80047d8:	793b      	ldrb	r3, [r7, #4]
 80047da:	7979      	ldrb	r1, [r7, #5]
 80047dc:	79ba      	ldrb	r2, [r7, #6]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fc fc48 	bl	8001074 <make_position>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	743a      	strb	r2, [r7, #16]
 80047ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80047ee:	747a      	strb	r2, [r7, #17]
 80047f0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80047f4:	74bb      	strb	r3, [r7, #18]
	t_position set_pos		= make_position(pos.x, pos.y, pos.dir);
 80047f6:	793b      	ldrb	r3, [r7, #4]
 80047f8:	7979      	ldrb	r1, [r7, #5]
 80047fa:	79ba      	ldrb	r2, [r7, #6]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fc fc39 	bl	8001074 <make_position>
 8004802:	4603      	mov	r3, r0
 8004804:	461a      	mov	r2, r3
 8004806:	733a      	strb	r2, [r7, #12]
 8004808:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800480c:	737a      	strb	r2, [r7, #13]
 800480e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004812:	73bb      	strb	r3, [r7, #14]
	t_position parent_pos	= make_position(pos.x, pos.y, pos.dir);
 8004814:	793b      	ldrb	r3, [r7, #4]
 8004816:	7979      	ldrb	r1, [r7, #5]
 8004818:	79ba      	ldrb	r2, [r7, #6]
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc fc2a 	bl	8001074 <make_position>
 8004820:	4603      	mov	r3, r0
 8004822:	461a      	mov	r2, r3
 8004824:	723a      	strb	r2, [r7, #8]
 8004826:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800482a:	727a      	strb	r2, [r7, #9]
 800482c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004830:	72bb      	strb	r3, [r7, #10]
	t_run_pattern run_pt	= Diagonal;
 8004832:	2302      	movs	r3, #2
 8004834:	76fb      	strb	r3, [r7, #27]
	for(int i = 0;i < MAZE_SIZE_X + MAZE_SIZE_Y;i++)
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	e114      	b.n	8004a66 <diagonal_expand+0x29a>
	{
		if(wall_check(next_pos, 0x03) != false) break;
 800483c:	2103      	movs	r1, #3
 800483e:	6938      	ldr	r0, [r7, #16]
 8004840:	f7fc fc76 	bl	8001130 <wall_check>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8112 	bne.w	8004a70 <diagonal_expand+0x2a4>
		set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 800484c:	7c3b      	ldrb	r3, [r7, #16]
 800484e:	7c79      	ldrb	r1, [r7, #17]
 8004850:	7cba      	ldrb	r2, [r7, #18]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fc0e 	bl	8001074 <make_position>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	733a      	strb	r2, [r7, #12]
 800485e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004862:	737a      	strb	r2, [r7, #13]
 8004864:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004868:	73bb      	strb	r3, [r7, #14]
        if(next_pos.dir == north)
 800486a:	7cbb      	ldrb	r3, [r7, #18]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d128      	bne.n	80048c2 <diagonal_expand+0xf6>
        {
            if(mouse_dir == NorthEast)
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d108      	bne.n	8004888 <diagonal_expand+0xbc>
            {
                next_pos.x = next_pos.x + 1;
 8004876:	7c3b      	ldrb	r3, [r7, #16]
 8004878:	3301      	adds	r3, #1
 800487a:	b2db      	uxtb	r3, r3
 800487c:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y + 1;
 800487e:	7c7b      	ldrb	r3, [r7, #17]
 8004880:	3301      	adds	r3, #1
 8004882:	b2db      	uxtb	r3, r3
 8004884:	747b      	strb	r3, [r7, #17]
 8004886:	e09c      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if(mouse_dir == SouthEast)
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	2b03      	cmp	r3, #3
 800488c:	d104      	bne.n	8004898 <diagonal_expand+0xcc>
            {
                next_pos.x = next_pos.x;
 800488e:	7c3b      	ldrb	r3, [r7, #16]
 8004890:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 8004892:	7c7b      	ldrb	r3, [r7, #17]
 8004894:	747b      	strb	r3, [r7, #17]
 8004896:	e094      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if(mouse_dir == SouthWest)
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	2b05      	cmp	r3, #5
 800489c:	d104      	bne.n	80048a8 <diagonal_expand+0xdc>
            {
                next_pos.x = next_pos.x;
 800489e:	7c3b      	ldrb	r3, [r7, #16]
 80048a0:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 80048a2:	7c7b      	ldrb	r3, [r7, #17]
 80048a4:	747b      	strb	r3, [r7, #17]
 80048a6:	e08c      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if(mouse_dir ==  NorthWest)
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	2b07      	cmp	r3, #7
 80048ac:	f040 8089 	bne.w	80049c2 <diagonal_expand+0x1f6>
            {
                next_pos.x = next_pos.x - 1;
 80048b0:	7c3b      	ldrb	r3, [r7, #16]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y + 1;
 80048b8:	7c7b      	ldrb	r3, [r7, #17]
 80048ba:	3301      	adds	r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	747b      	strb	r3, [r7, #17]
 80048c0:	e07f      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
        }

        else if(next_pos.dir == east)
 80048c2:	7cbb      	ldrb	r3, [r7, #18]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d127      	bne.n	8004918 <diagonal_expand+0x14c>
        {
            if(mouse_dir ==  NorthEast)
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d108      	bne.n	80048e0 <diagonal_expand+0x114>
            {
                next_pos.x = next_pos.x + 1;
 80048ce:	7c3b      	ldrb	r3, [r7, #16]
 80048d0:	3301      	adds	r3, #1
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y + 1;
 80048d6:	7c7b      	ldrb	r3, [r7, #17]
 80048d8:	3301      	adds	r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	747b      	strb	r3, [r7, #17]
 80048de:	e070      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
			else if( mouse_dir ==  SouthEast)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d108      	bne.n	80048f8 <diagonal_expand+0x12c>
            {
                next_pos.x = next_pos.x + 1;
 80048e6:	7c3b      	ldrb	r3, [r7, #16]
 80048e8:	3301      	adds	r3, #1
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y - 1;
 80048ee:	7c7b      	ldrb	r3, [r7, #17]
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	747b      	strb	r3, [r7, #17]
 80048f6:	e064      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if( mouse_dir ==  SouthWest)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b05      	cmp	r3, #5
 80048fc:	d104      	bne.n	8004908 <diagonal_expand+0x13c>
            {
                next_pos.x = next_pos.x;
 80048fe:	7c3b      	ldrb	r3, [r7, #16]
 8004900:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 8004902:	7c7b      	ldrb	r3, [r7, #17]
 8004904:	747b      	strb	r3, [r7, #17]
 8004906:	e05c      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if( mouse_dir ==  NorthWest)
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	2b07      	cmp	r3, #7
 800490c:	d159      	bne.n	80049c2 <diagonal_expand+0x1f6>
            {
                next_pos.x = next_pos.x;
 800490e:	7c3b      	ldrb	r3, [r7, #16]
 8004910:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 8004912:	7c7b      	ldrb	r3, [r7, #17]
 8004914:	747b      	strb	r3, [r7, #17]
 8004916:	e054      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
        }

        else if( next_pos.dir == south)
 8004918:	7cbb      	ldrb	r3, [r7, #18]
 800491a:	2b02      	cmp	r3, #2
 800491c:	d127      	bne.n	800496e <diagonal_expand+0x1a2>
        {
            if (mouse_dir ==  NorthEast)
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d104      	bne.n	800492e <diagonal_expand+0x162>
			{
                next_pos.x = next_pos.x;
 8004924:	7c3b      	ldrb	r3, [r7, #16]
 8004926:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 8004928:	7c7b      	ldrb	r3, [r7, #17]
 800492a:	747b      	strb	r3, [r7, #17]
 800492c:	e049      	b.n	80049c2 <diagonal_expand+0x1f6>
			}
			else if( mouse_dir ==  SouthEast)
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d108      	bne.n	8004946 <diagonal_expand+0x17a>
			{
                next_pos.x = next_pos.x + 1;
 8004934:	7c3b      	ldrb	r3, [r7, #16]
 8004936:	3301      	adds	r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y - 1;
 800493c:	7c7b      	ldrb	r3, [r7, #17]
 800493e:	3b01      	subs	r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	747b      	strb	r3, [r7, #17]
 8004944:	e03d      	b.n	80049c2 <diagonal_expand+0x1f6>
			}
			else if( mouse_dir ==  SouthWest)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	2b05      	cmp	r3, #5
 800494a:	d108      	bne.n	800495e <diagonal_expand+0x192>
			{
                next_pos.x = next_pos.x - 1;
 800494c:	7c3b      	ldrb	r3, [r7, #16]
 800494e:	3b01      	subs	r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y - 1;
 8004954:	7c7b      	ldrb	r3, [r7, #17]
 8004956:	3b01      	subs	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	747b      	strb	r3, [r7, #17]
 800495c:	e031      	b.n	80049c2 <diagonal_expand+0x1f6>
			}
            else if( mouse_dir ==  NorthWest)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b07      	cmp	r3, #7
 8004962:	d12e      	bne.n	80049c2 <diagonal_expand+0x1f6>
            {
                next_pos.x = next_pos.x;
 8004964:	7c3b      	ldrb	r3, [r7, #16]
 8004966:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 8004968:	7c7b      	ldrb	r3, [r7, #17]
 800496a:	747b      	strb	r3, [r7, #17]
 800496c:	e029      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
        }
        else if( next_pos.dir == west)
 800496e:	7cbb      	ldrb	r3, [r7, #18]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d126      	bne.n	80049c2 <diagonal_expand+0x1f6>
        {
            if(mouse_dir ==  NorthEast)
 8004974:	78fb      	ldrb	r3, [r7, #3]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d104      	bne.n	8004984 <diagonal_expand+0x1b8>
            {
                next_pos.x = next_pos.x;
 800497a:	7c3b      	ldrb	r3, [r7, #16]
 800497c:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 800497e:	7c7b      	ldrb	r3, [r7, #17]
 8004980:	747b      	strb	r3, [r7, #17]
 8004982:	e01e      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if( mouse_dir ==  SouthEast)
 8004984:	78fb      	ldrb	r3, [r7, #3]
 8004986:	2b03      	cmp	r3, #3
 8004988:	d104      	bne.n	8004994 <diagonal_expand+0x1c8>
            {
                next_pos.x = next_pos.x;
 800498a:	7c3b      	ldrb	r3, [r7, #16]
 800498c:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y;
 800498e:	7c7b      	ldrb	r3, [r7, #17]
 8004990:	747b      	strb	r3, [r7, #17]
 8004992:	e016      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
            else if( mouse_dir ==  SouthWest)
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	2b05      	cmp	r3, #5
 8004998:	d108      	bne.n	80049ac <diagonal_expand+0x1e0>
            {
                next_pos.x = next_pos.x - 1;
 800499a:	7c3b      	ldrb	r3, [r7, #16]
 800499c:	3b01      	subs	r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y - 1;
 80049a2:	7c7b      	ldrb	r3, [r7, #17]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	747b      	strb	r3, [r7, #17]
 80049aa:	e00a      	b.n	80049c2 <diagonal_expand+0x1f6>
            }
			else if( mouse_dir ==  NorthWest)
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	2b07      	cmp	r3, #7
 80049b0:	d107      	bne.n	80049c2 <diagonal_expand+0x1f6>
			{
                next_pos.x = next_pos.x - 1;
 80049b2:	7c3b      	ldrb	r3, [r7, #16]
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	743b      	strb	r3, [r7, #16]
                next_pos.y = next_pos.y + 1 ;
 80049ba:	7c7b      	ldrb	r3, [r7, #17]
 80049bc:	3301      	adds	r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	747b      	strb	r3, [r7, #17]
			}
        }
        next_pos.dir = (next_pos.dir + 2*(next_pos.dir%2) + (8 + 4) - mouse_dir)%4;
 80049c2:	7cbb      	ldrb	r3, [r7, #18]
 80049c4:	461a      	mov	r2, r3
 80049c6:	7cbb      	ldrb	r3, [r7, #18]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	005b      	lsls	r3, r3, #1
 80049ce:	4413      	add	r3, r2
 80049d0:	f103 020c 	add.w	r2, r3, #12
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	425a      	negs	r2, r3
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	f002 0203 	and.w	r2, r2, #3
 80049e2:	bf58      	it	pl
 80049e4:	4253      	negpl	r3, r2
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	74bb      	strb	r3, [r7, #18]

        if(next_pos.x < 0 || next_pos.x >= MAZE_SIZE_X) break;
 80049ea:	7c3b      	ldrb	r3, [r7, #16]
 80049ec:	2b1f      	cmp	r3, #31
 80049ee:	d841      	bhi.n	8004a74 <diagonal_expand+0x2a8>
        if(next_pos.y < 0 || next_pos.y >= MAZE_SIZE_Y) break;
 80049f0:	7c7b      	ldrb	r3, [r7, #17]
 80049f2:	2b1f      	cmp	r3, #31
 80049f4:	d840      	bhi.n	8004a78 <diagonal_expand+0x2ac>

        if(wall_check(next_pos, 0x03) == false && i != 0)
 80049f6:	2103      	movs	r1, #3
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f7fc fb99 	bl	8001130 <wall_check>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d12d      	bne.n	8004a60 <diagonal_expand+0x294>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02a      	beq.n	8004a60 <diagonal_expand+0x294>
        {
        	int set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, i);
 8004a0a:	68b8      	ldr	r0, [r7, #8]
 8004a0c:	f7ff fa88 	bl	8003f20 <pos_run_time>
 8004a10:	4603      	mov	r3, r0
 8004a12:	461c      	mov	r4, r3
 8004a14:	7efb      	ldrb	r3, [r7, #27]
 8004a16:	69f9      	ldr	r1, [r7, #28]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff f9dd 	bl	8003dd8 <calc_time>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	4423      	add	r3, r4
 8004a22:	617b      	str	r3, [r7, #20]
			if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fa7b 	bl	8003f20 <pos_run_time>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4293      	cmp	r3, r2
 8004a32:	da15      	bge.n	8004a60 <diagonal_expand+0x294>
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff fd29 	bl	800448c <is_determine>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10f      	bne.n	8004a60 <diagonal_expand+0x294>
				close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,i,false);
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	b298      	uxth	r0, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	78f9      	ldrb	r1, [r7, #3]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	9202      	str	r2, [sp, #8]
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	7efb      	ldrb	r3, [r7, #27]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	4603      	mov	r3, r0
 8004a56:	460a      	mov	r2, r1
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7fc ffe2 	bl	8001a24 <close_list_set>
	for(int i = 0;i < MAZE_SIZE_X + MAZE_SIZE_Y;i++)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	2b3f      	cmp	r3, #63	; 0x3f
 8004a6a:	f77f aee7 	ble.w	800483c <diagonal_expand+0x70>
			}
        }

	}
}
 8004a6e:	e004      	b.n	8004a7a <diagonal_expand+0x2ae>
		if(wall_check(next_pos, 0x03) != false) break;
 8004a70:	bf00      	nop
 8004a72:	e002      	b.n	8004a7a <diagonal_expand+0x2ae>
        if(next_pos.x < 0 || next_pos.x >= MAZE_SIZE_X) break;
 8004a74:	bf00      	nop
 8004a76:	e000      	b.n	8004a7a <diagonal_expand+0x2ae>
        if(next_pos.y < 0 || next_pos.y >= MAZE_SIZE_Y) break;
 8004a78:	bf00      	nop
}
 8004a7a:	bf00      	nop
 8004a7c:	3724      	adds	r7, #36	; 0x24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <turn_in_R45_expand>:

void turn_in_R45_expand(t_position pos,t_eight_dir mouse_dir)
{
 8004a82:	b590      	push	{r4, r7, lr}
 8004a84:	b099      	sub	sp, #100	; 0x64
 8004a86:	af04      	add	r7, sp, #16
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
     t_eight_dir next_mouse_dir = (mouse_dir +1 + 8)%8;
 8004a8e:	78fb      	ldrb	r3, [r7, #3]
 8004a90:	3309      	adds	r3, #9
 8004a92:	425a      	negs	r2, r3
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	f002 0207 	and.w	r2, r2, #7
 8004a9c:	bf58      	it	pl
 8004a9e:	4253      	negpl	r3, r2
 8004aa0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
     t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8004aa4:	793b      	ldrb	r3, [r7, #4]
 8004aa6:	7979      	ldrb	r1, [r7, #5]
 8004aa8:	79ba      	ldrb	r2, [r7, #6]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fc fae2 	bl	8001074 <make_position>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	753a      	strb	r2, [r7, #20]
 8004ab6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004aba:	757a      	strb	r2, [r7, #21]
 8004abc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004ac0:	75bb      	strb	r3, [r7, #22]
     t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8004ac2:	793b      	ldrb	r3, [r7, #4]
 8004ac4:	7979      	ldrb	r1, [r7, #5]
 8004ac6:	79ba      	ldrb	r2, [r7, #6]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fc fad3 	bl	8001074 <make_position>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	743a      	strb	r2, [r7, #16]
 8004ad4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ad8:	747a      	strb	r2, [r7, #17]
 8004ada:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004ade:	74bb      	strb	r3, [r7, #18]
     t_bool update_flag = false;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
     t_run_pattern run_pt = Turn_in_R45;
 8004ae6:	2307      	movs	r3, #7
 8004ae8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
     if(pos.dir == center)
 8004aec:	79bb      	ldrb	r3, [r7, #6]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	f040 81ec 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
     {
         if(mouse_dir == North)
 8004af4:	78fb      	ldrb	r3, [r7, #3]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d174      	bne.n	8004be4 <turn_in_R45_expand+0x162>
         {
             if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 <  MAZE_SIZE_Y)
 8004afa:	793b      	ldrb	r3, [r7, #4]
 8004afc:	3301      	adds	r3, #1
 8004afe:	2b1f      	cmp	r3, #31
 8004b00:	f300 81e4 	bgt.w	8004ecc <turn_in_R45_expand+0x44a>
 8004b04:	797b      	ldrb	r3, [r7, #5]
 8004b06:	3301      	adds	r3, #1
 8004b08:	2b1f      	cmp	r3, #31
 8004b0a:	f300 81df 	bgt.w	8004ecc <turn_in_R45_expand+0x44a>
             {
                 //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                 if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8004b0e:	7938      	ldrb	r0, [r7, #4]
 8004b10:	7979      	ldrb	r1, [r7, #5]
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	085b      	lsrs	r3, r3, #1
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f7fc faab 	bl	8001074 <make_position>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461a      	mov	r2, r3
 8004b22:	763a      	strb	r2, [r7, #24]
 8004b24:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b28:	767a      	strb	r2, [r7, #25]
 8004b2a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004b2e:	76bb      	strb	r3, [r7, #26]
 8004b30:	2103      	movs	r1, #3
 8004b32:	69b8      	ldr	r0, [r7, #24]
 8004b34:	f7fc fafc 	bl	8001130 <wall_check>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f040 81c6 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
 8004b40:	7938      	ldrb	r0, [r7, #4]
 8004b42:	797b      	ldrb	r3, [r7, #5]
 8004b44:	3301      	adds	r3, #1
 8004b46:	b2d9      	uxtb	r1, r3
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	3305      	adds	r3, #5
 8004b50:	425a      	negs	r2, r3
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	f002 0203 	and.w	r2, r2, #3
 8004b5a:	bf58      	it	pl
 8004b5c:	4253      	negpl	r3, r2
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	f7fc fa87 	bl	8001074 <make_position>
 8004b66:	4603      	mov	r3, r0
 8004b68:	461a      	mov	r2, r3
 8004b6a:	773a      	strb	r2, [r7, #28]
 8004b6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b70:	777a      	strb	r2, [r7, #29]
 8004b72:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004b76:	77bb      	strb	r3, [r7, #30]
 8004b78:	2103      	movs	r1, #3
 8004b7a:	69f8      	ldr	r0, [r7, #28]
 8004b7c:	f7fc fad8 	bl	8001130 <wall_check>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 81a2 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                 {
                	 //if self.wall_data[pos.x+1][pos.y+1][int(mouse_dir/2)] == False:
                	 if(wall_check(make_position(pos.x+1, pos.y+1, mouse_dir/2), 0x03) == false)
 8004b88:	793b      	ldrb	r3, [r7, #4]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	b2d8      	uxtb	r0, r3
 8004b8e:	797b      	ldrb	r3, [r7, #5]
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2d9      	uxtb	r1, r3
 8004b94:	78fb      	ldrb	r3, [r7, #3]
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f7fc fa6a 	bl	8001074 <make_position>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f887 2020 	strb.w	r2, [r7, #32]
 8004ba8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004bac:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8004bb0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004bb8:	2103      	movs	r1, #3
 8004bba:	6a38      	ldr	r0, [r7, #32]
 8004bbc:	f7fc fab8 	bl	8001130 <wall_check>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 8182 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                	 {
                		 next_pos.x = pos.x + 1;
 8004bc8:	793b      	ldrb	r3, [r7, #4]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	753b      	strb	r3, [r7, #20]
                		 next_pos.y = pos.y + 1;
 8004bd0:	797b      	ldrb	r3, [r7, #5]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	757b      	strb	r3, [r7, #21]
                		 next_pos.dir = west;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	75bb      	strb	r3, [r7, #22]
                		 update_flag = true;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004be2:	e173      	b.n	8004ecc <turn_in_R45_expand+0x44a>
                	 }
                 }
             }
         }
         else if(mouse_dir == East)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d17a      	bne.n	8004ce0 <turn_in_R45_expand+0x25e>
         {
             if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8004bea:	793b      	ldrb	r3, [r7, #4]
 8004bec:	3301      	adds	r3, #1
 8004bee:	2b1f      	cmp	r3, #31
 8004bf0:	f300 816c 	bgt.w	8004ecc <turn_in_R45_expand+0x44a>
 8004bf4:	797b      	ldrb	r3, [r7, #5]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f2c0 8167 	blt.w	8004ecc <turn_in_R45_expand+0x44a>
             {
                 //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                 if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8004bfe:	7938      	ldrb	r0, [r7, #4]
 8004c00:	7979      	ldrb	r1, [r7, #5]
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	085b      	lsrs	r3, r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	f7fc fa33 	bl	8001074 <make_position>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8004c16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004c1a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8004c1e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004c22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004c26:	2103      	movs	r1, #3
 8004c28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c2a:	f7fc fa81 	bl	8001130 <wall_check>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f040 814b 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
 8004c36:	793b      	ldrb	r3, [r7, #4]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	b2d8      	uxtb	r0, r3
 8004c3c:	7979      	ldrb	r1, [r7, #5]
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	085b      	lsrs	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	3305      	adds	r3, #5
 8004c46:	425a      	negs	r2, r3
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	f002 0203 	and.w	r2, r2, #3
 8004c50:	bf58      	it	pl
 8004c52:	4253      	negpl	r3, r2
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	f7fc fa0c 	bl	8001074 <make_position>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8004c64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004c68:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8004c6c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004c70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c74:	2103      	movs	r1, #3
 8004c76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c78:	f7fc fa5a 	bl	8001130 <wall_check>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f040 8124 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                 {
                	 //if self.wall_data[pos.x+1][pos.y-1][int(mouse_dir/2)] == False:
                	 if(wall_check(make_position(pos.x+1, pos.y-1, mouse_dir/2), 0x03) == false)
 8004c84:	793b      	ldrb	r3, [r7, #4]
 8004c86:	3301      	adds	r3, #1
 8004c88:	b2d8      	uxtb	r0, r3
 8004c8a:	797b      	ldrb	r3, [r7, #5]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b2d9      	uxtb	r1, r3
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	085b      	lsrs	r3, r3, #1
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	f7fc f9ec 	bl	8001074 <make_position>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8004ca4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ca8:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8004cac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004cb0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004cb4:	2103      	movs	r1, #3
 8004cb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cb8:	f7fc fa3a 	bl	8001130 <wall_check>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f040 8104 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                	 {
						 next_pos.x = pos.x + 1;
 8004cc4:	793b      	ldrb	r3, [r7, #4]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y - 1;
 8004ccc:	797b      	ldrb	r3, [r7, #5]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = north;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004cde:	e0f5      	b.n	8004ecc <turn_in_R45_expand+0x44a>
                	 }
                 }
             }
     	 }
         else if(mouse_dir == South)
 8004ce0:	78fb      	ldrb	r3, [r7, #3]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d17a      	bne.n	8004ddc <turn_in_R45_expand+0x35a>
         {
             if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8004ce6:	793b      	ldrb	r3, [r7, #4]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f2c0 80ee 	blt.w	8004ecc <turn_in_R45_expand+0x44a>
 8004cf0:	797b      	ldrb	r3, [r7, #5]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f2c0 80e9 	blt.w	8004ecc <turn_in_R45_expand+0x44a>
             {
                 //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                 if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8004cfa:	7938      	ldrb	r0, [r7, #4]
 8004cfc:	7979      	ldrb	r1, [r7, #5]
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	f7fc f9b5 	bl	8001074 <make_position>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8004d12:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004d16:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8004d1a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004d22:	2103      	movs	r1, #3
 8004d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d26:	f7fc fa03 	bl	8001130 <wall_check>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f040 80cd 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
 8004d32:	7938      	ldrb	r0, [r7, #4]
 8004d34:	797b      	ldrb	r3, [r7, #5]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b2d9      	uxtb	r1, r3
 8004d3a:	78fb      	ldrb	r3, [r7, #3]
 8004d3c:	085b      	lsrs	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	3305      	adds	r3, #5
 8004d42:	425a      	negs	r2, r3
 8004d44:	f003 0303 	and.w	r3, r3, #3
 8004d48:	f002 0203 	and.w	r2, r2, #3
 8004d4c:	bf58      	it	pl
 8004d4e:	4253      	negpl	r3, r2
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	f7fc f98e 	bl	8001074 <make_position>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8004d60:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004d64:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8004d68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004d6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8004d70:	2103      	movs	r1, #3
 8004d72:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d74:	f7fc f9dc 	bl	8001130 <wall_check>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f040 80a6 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                 {
                	 //if self.wall_data[pos.x-1][pos.y-1][int(mouse_dir/2)] == False:
                	 if(wall_check(make_position(pos.x-1, pos.y-1, mouse_dir/2), 0x03) == false)
 8004d80:	793b      	ldrb	r3, [r7, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b2d8      	uxtb	r0, r3
 8004d86:	797b      	ldrb	r3, [r7, #5]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	b2d9      	uxtb	r1, r3
 8004d8c:	78fb      	ldrb	r3, [r7, #3]
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fc f96e 	bl	8001074 <make_position>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8004da0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004da4:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8004da8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004dac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8004db0:	2103      	movs	r1, #3
 8004db2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004db4:	f7fc f9bc 	bl	8001130 <wall_check>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f040 8086 	bne.w	8004ecc <turn_in_R45_expand+0x44a>
                	 {
						 next_pos.x = pos.x - 1;
 8004dc0:	793b      	ldrb	r3, [r7, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y - 1;
 8004dc8:	797b      	ldrb	r3, [r7, #5]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = east;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004dda:	e077      	b.n	8004ecc <turn_in_R45_expand+0x44a>
                	 }
                 }
             }
         }
         else if(mouse_dir == West)
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	2b06      	cmp	r3, #6
 8004de0:	d174      	bne.n	8004ecc <turn_in_R45_expand+0x44a>
         {
             if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8004de2:	793b      	ldrb	r3, [r7, #4]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	db70      	blt.n	8004ecc <turn_in_R45_expand+0x44a>
 8004dea:	797b      	ldrb	r3, [r7, #5]
 8004dec:	3301      	adds	r3, #1
 8004dee:	2b1f      	cmp	r3, #31
 8004df0:	dc6c      	bgt.n	8004ecc <turn_in_R45_expand+0x44a>
             {
                 //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                 if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8004df2:	7938      	ldrb	r0, [r7, #4]
 8004df4:	7979      	ldrb	r1, [r7, #5]
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f7fc f939 	bl	8001074 <make_position>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8004e0a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e0e:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8004e12:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004e16:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004e1a:	2103      	movs	r1, #3
 8004e1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004e1e:	f7fc f987 	bl	8001130 <wall_check>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d151      	bne.n	8004ecc <turn_in_R45_expand+0x44a>
 8004e28:	793b      	ldrb	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b2d8      	uxtb	r0, r3
 8004e2e:	7979      	ldrb	r1, [r7, #5]
 8004e30:	78fb      	ldrb	r3, [r7, #3]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	3305      	adds	r3, #5
 8004e38:	425a      	negs	r2, r3
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	f002 0203 	and.w	r2, r2, #3
 8004e42:	bf58      	it	pl
 8004e44:	4253      	negpl	r3, r2
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f7fc f913 	bl	8001074 <make_position>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	461a      	mov	r2, r3
 8004e52:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8004e56:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e5a:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8004e5e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004e62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e66:	2103      	movs	r1, #3
 8004e68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004e6a:	f7fc f961 	bl	8001130 <wall_check>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d12b      	bne.n	8004ecc <turn_in_R45_expand+0x44a>
                 {
                	 //if self.wall_data[pos.x-1][pos.y+1][int(mouse_dir/2)] == False:
                	 if(wall_check(make_position(pos.x-1, pos.y+1, mouse_dir/2), 0x03) == false)
 8004e74:	793b      	ldrb	r3, [r7, #4]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	b2d8      	uxtb	r0, r3
 8004e7a:	797b      	ldrb	r3, [r7, #5]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	b2d9      	uxtb	r1, r3
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	461a      	mov	r2, r3
 8004e88:	f7fc f8f4 	bl	8001074 <make_position>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	461a      	mov	r2, r3
 8004e90:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8004e94:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004e98:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8004e9c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004ea0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004ea4:	2103      	movs	r1, #3
 8004ea6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8004ea8:	f7fc f942 	bl	8001130 <wall_check>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10c      	bne.n	8004ecc <turn_in_R45_expand+0x44a>
                	 {
                		 next_pos.x = pos.x - 1;
 8004eb2:	793b      	ldrb	r3, [r7, #4]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	753b      	strb	r3, [r7, #20]
                		 next_pos.y = pos.y + 1;
 8004eba:	797b      	ldrb	r3, [r7, #5]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	757b      	strb	r3, [r7, #21]
                		 next_pos.dir = south;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	75bb      	strb	r3, [r7, #22]
                		 update_flag = true;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                 }
             }
         }
     }

     if(update_flag == true)
 8004ecc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d13c      	bne.n	8004f4e <turn_in_R45_expand+0x4cc>
     {
    	 t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8004ed4:	7d3b      	ldrb	r3, [r7, #20]
 8004ed6:	7d79      	ldrb	r1, [r7, #21]
 8004ed8:	7dba      	ldrb	r2, [r7, #22]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fc f8ca 	bl	8001074 <make_position>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	733a      	strb	r2, [r7, #12]
 8004ee6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004eea:	737a      	strb	r2, [r7, #13]
 8004eec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004ef0:	73bb      	strb	r3, [r7, #14]
    	 uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8004ef2:	6938      	ldr	r0, [r7, #16]
 8004ef4:	f7ff f814 	bl	8003f20 <pos_run_time>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461c      	mov	r4, r3
 8004efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f00:	2100      	movs	r1, #0
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fe ff68 	bl	8003dd8 <calc_time>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4423      	add	r3, r4
 8004f0c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    	 if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff f805 	bl	8003f20 <pos_run_time>
 8004f16:	4603      	mov	r3, r0
 8004f18:	461a      	mov	r2, r3
 8004f1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d215      	bcs.n	8004f4e <turn_in_R45_expand+0x4cc>
 8004f22:	68f8      	ldr	r0, [r7, #12]
 8004f24:	f7ff fab2 	bl	800448c <is_determine>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10f      	bne.n	8004f4e <turn_in_R45_expand+0x4cc>
    		 close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8004f2e:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8004f32:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8004f36:	2300      	movs	r3, #0
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	460b      	mov	r3, r1
 8004f46:	6939      	ldr	r1, [r7, #16]
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f7fc fd6b 	bl	8001a24 <close_list_set>
    	 }

     }
}
 8004f4e:	bf00      	nop
 8004f50:	3754      	adds	r7, #84	; 0x54
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd90      	pop	{r4, r7, pc}

08004f56 <turn_in_L45_expand>:

void turn_in_L45_expand(t_position pos,t_eight_dir mouse_dir)
{
 8004f56:	b590      	push	{r4, r7, lr}
 8004f58:	b099      	sub	sp, #100	; 0x64
 8004f5a:	af04      	add	r7, sp, #16
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir -1 + 8)%8;
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	3307      	adds	r3, #7
 8004f66:	425a      	negs	r2, r3
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	f002 0207 	and.w	r2, r2, #7
 8004f70:	bf58      	it	pl
 8004f72:	4253      	negpl	r3, r2
 8004f74:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8004f78:	793b      	ldrb	r3, [r7, #4]
 8004f7a:	7979      	ldrb	r1, [r7, #5]
 8004f7c:	79ba      	ldrb	r2, [r7, #6]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc f878 	bl	8001074 <make_position>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	753a      	strb	r2, [r7, #20]
 8004f8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004f8e:	757a      	strb	r2, [r7, #21]
 8004f90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004f94:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8004f96:	793b      	ldrb	r3, [r7, #4]
 8004f98:	7979      	ldrb	r1, [r7, #5]
 8004f9a:	79ba      	ldrb	r2, [r7, #6]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fc f869 	bl	8001074 <make_position>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	743a      	strb	r2, [r7, #16]
 8004fa8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004fac:	747a      	strb	r2, [r7, #17]
 8004fae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8004fb2:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    t_run_pattern run_pt = Turn_in_L45;
 8004fba:	2308      	movs	r3, #8
 8004fbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if(pos.dir == center)
 8004fc0:	79bb      	ldrb	r3, [r7, #6]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	f040 81ec 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
    {
        if (mouse_dir == North)
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d174      	bne.n	80050b8 <turn_in_L45_expand+0x162>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8004fce:	793b      	ldrb	r3, [r7, #4]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f2c0 81e4 	blt.w	80053a0 <turn_in_L45_expand+0x44a>
 8004fd8:	797b      	ldrb	r3, [r7, #5]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	2b1f      	cmp	r3, #31
 8004fde:	f300 81df 	bgt.w	80053a0 <turn_in_L45_expand+0x44a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8004fe2:	7938      	ldrb	r0, [r7, #4]
 8004fe4:	7979      	ldrb	r1, [r7, #5]
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	085b      	lsrs	r3, r3, #1
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	f7fc f841 	bl	8001074 <make_position>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	763a      	strb	r2, [r7, #24]
 8004ff8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ffc:	767a      	strb	r2, [r7, #25]
 8004ffe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005002:	76bb      	strb	r3, [r7, #26]
 8005004:	2103      	movs	r1, #3
 8005006:	69b8      	ldr	r0, [r7, #24]
 8005008:	f7fc f892 	bl	8001130 <wall_check>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f040 81c6 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
 8005014:	7938      	ldrb	r0, [r7, #4]
 8005016:	797b      	ldrb	r3, [r7, #5]
 8005018:	3301      	adds	r3, #1
 800501a:	b2d9      	uxtb	r1, r3
 800501c:	78fb      	ldrb	r3, [r7, #3]
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	3303      	adds	r3, #3
 8005024:	425a      	negs	r2, r3
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	f002 0203 	and.w	r2, r2, #3
 800502e:	bf58      	it	pl
 8005030:	4253      	negpl	r3, r2
 8005032:	b2db      	uxtb	r3, r3
 8005034:	461a      	mov	r2, r3
 8005036:	f7fc f81d 	bl	8001074 <make_position>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	773a      	strb	r2, [r7, #28]
 8005040:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005044:	777a      	strb	r2, [r7, #29]
 8005046:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800504a:	77bb      	strb	r3, [r7, #30]
 800504c:	2103      	movs	r1, #3
 800504e:	69f8      	ldr	r0, [r7, #28]
 8005050:	f7fc f86e 	bl	8001130 <wall_check>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	f040 81a2 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                {
                	//if self.wall_data[pos.x-1][pos.y+1][int(mouse_dir/2)] == False:
                	if(wall_check(make_position(pos.x-1, pos.y+1, mouse_dir/2), 0x03) == false)
 800505c:	793b      	ldrb	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	b2d8      	uxtb	r0, r3
 8005062:	797b      	ldrb	r3, [r7, #5]
 8005064:	3301      	adds	r3, #1
 8005066:	b2d9      	uxtb	r1, r3
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f7fc f800 	bl	8001074 <make_position>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	f887 2020 	strb.w	r2, [r7, #32]
 800507c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005080:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8005084:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800508c:	2103      	movs	r1, #3
 800508e:	6a38      	ldr	r0, [r7, #32]
 8005090:	f7fc f84e 	bl	8001130 <wall_check>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8182 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                	{
                		next_pos.x = pos.x - 1;
 800509c:	793b      	ldrb	r3, [r7, #4]
 800509e:	3b01      	subs	r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y + 1;
 80050a4:	797b      	ldrb	r3, [r7, #5]
 80050a6:	3301      	adds	r3, #1
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = east;
 80050ac:	2301      	movs	r3, #1
 80050ae:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80050b6:	e173      	b.n	80053a0 <turn_in_L45_expand+0x44a>
                	}
                }
            }
        }
        else if(mouse_dir == East)
 80050b8:	78fb      	ldrb	r3, [r7, #3]
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d17a      	bne.n	80051b4 <turn_in_L45_expand+0x25e>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 80050be:	793b      	ldrb	r3, [r7, #4]
 80050c0:	3301      	adds	r3, #1
 80050c2:	2b1f      	cmp	r3, #31
 80050c4:	f300 816c 	bgt.w	80053a0 <turn_in_L45_expand+0x44a>
 80050c8:	797b      	ldrb	r3, [r7, #5]
 80050ca:	3301      	adds	r3, #1
 80050cc:	2b1f      	cmp	r3, #31
 80050ce:	f300 8167 	bgt.w	80053a0 <turn_in_L45_expand+0x44a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80050d2:	7938      	ldrb	r0, [r7, #4]
 80050d4:	7979      	ldrb	r1, [r7, #5]
 80050d6:	78fb      	ldrb	r3, [r7, #3]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	f7fb ffc9 	bl	8001074 <make_position>
 80050e2:	4603      	mov	r3, r0
 80050e4:	461a      	mov	r2, r3
 80050e6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80050ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80050ee:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80050f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80050f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80050fa:	2103      	movs	r1, #3
 80050fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050fe:	f7fc f817 	bl	8001130 <wall_check>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	f040 814b 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
 800510a:	793b      	ldrb	r3, [r7, #4]
 800510c:	3301      	adds	r3, #1
 800510e:	b2d8      	uxtb	r0, r3
 8005110:	7979      	ldrb	r1, [r7, #5]
 8005112:	78fb      	ldrb	r3, [r7, #3]
 8005114:	085b      	lsrs	r3, r3, #1
 8005116:	b2db      	uxtb	r3, r3
 8005118:	3303      	adds	r3, #3
 800511a:	425a      	negs	r2, r3
 800511c:	f003 0303 	and.w	r3, r3, #3
 8005120:	f002 0203 	and.w	r2, r2, #3
 8005124:	bf58      	it	pl
 8005126:	4253      	negpl	r3, r2
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	f7fb ffa2 	bl	8001074 <make_position>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8005138:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800513c:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8005140:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005144:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005148:	2103      	movs	r1, #3
 800514a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514c:	f7fb fff0 	bl	8001130 <wall_check>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	f040 8124 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                {
                	//if self.wall_data[pos.x+1][pos.y+1][int(mouse_dir/2)] == False:
                	if(wall_check(make_position(pos.x+1, pos.y+1, mouse_dir/2), 0x03) == false)
 8005158:	793b      	ldrb	r3, [r7, #4]
 800515a:	3301      	adds	r3, #1
 800515c:	b2d8      	uxtb	r0, r3
 800515e:	797b      	ldrb	r3, [r7, #5]
 8005160:	3301      	adds	r3, #1
 8005162:	b2d9      	uxtb	r1, r3
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	085b      	lsrs	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	461a      	mov	r2, r3
 800516c:	f7fb ff82 	bl	8001074 <make_position>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8005178:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800517c:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8005180:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005184:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005188:	2103      	movs	r1, #3
 800518a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800518c:	f7fb ffd0 	bl	8001130 <wall_check>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	f040 8104 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                	{
						next_pos.x = pos.x + 1;
 8005198:	793b      	ldrb	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	b2db      	uxtb	r3, r3
 800519e:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y + 1;
 80051a0:	797b      	ldrb	r3, [r7, #5]
 80051a2:	3301      	adds	r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	757b      	strb	r3, [r7, #21]
						next_pos.dir = south;
 80051a8:	2302      	movs	r3, #2
 80051aa:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80051b2:	e0f5      	b.n	80053a0 <turn_in_L45_expand+0x44a>
                	}
                }
            }
        }
        else if(mouse_dir == South)
 80051b4:	78fb      	ldrb	r3, [r7, #3]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d17a      	bne.n	80052b0 <turn_in_L45_expand+0x35a>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 80051ba:	793b      	ldrb	r3, [r7, #4]
 80051bc:	3301      	adds	r3, #1
 80051be:	2b1f      	cmp	r3, #31
 80051c0:	f300 80ee 	bgt.w	80053a0 <turn_in_L45_expand+0x44a>
 80051c4:	797b      	ldrb	r3, [r7, #5]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f2c0 80e9 	blt.w	80053a0 <turn_in_L45_expand+0x44a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80051ce:	7938      	ldrb	r0, [r7, #4]
 80051d0:	7979      	ldrb	r1, [r7, #5]
 80051d2:	78fb      	ldrb	r3, [r7, #3]
 80051d4:	085b      	lsrs	r3, r3, #1
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	461a      	mov	r2, r3
 80051da:	f7fb ff4b 	bl	8001074 <make_position>
 80051de:	4603      	mov	r3, r0
 80051e0:	461a      	mov	r2, r3
 80051e2:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 80051e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80051ea:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 80051ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80051f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051f6:	2103      	movs	r1, #3
 80051f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051fa:	f7fb ff99 	bl	8001130 <wall_check>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 80cd 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
 8005206:	7938      	ldrb	r0, [r7, #4]
 8005208:	797b      	ldrb	r3, [r7, #5]
 800520a:	3b01      	subs	r3, #1
 800520c:	b2d9      	uxtb	r1, r3
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	085b      	lsrs	r3, r3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	3303      	adds	r3, #3
 8005216:	425a      	negs	r2, r3
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	f002 0203 	and.w	r2, r2, #3
 8005220:	bf58      	it	pl
 8005222:	4253      	negpl	r3, r2
 8005224:	b2db      	uxtb	r3, r3
 8005226:	461a      	mov	r2, r3
 8005228:	f7fb ff24 	bl	8001074 <make_position>
 800522c:	4603      	mov	r3, r0
 800522e:	461a      	mov	r2, r3
 8005230:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8005234:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005238:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 800523c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005240:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005244:	2103      	movs	r1, #3
 8005246:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005248:	f7fb ff72 	bl	8001130 <wall_check>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 80a6 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                {
                	//if self.wall_data[pos.x+1][pos.y-1][int(mouse_dir/2)] == False:
                	if(wall_check(make_position(pos.x+1, pos.y-1, mouse_dir/2), 0x03) == false)
 8005254:	793b      	ldrb	r3, [r7, #4]
 8005256:	3301      	adds	r3, #1
 8005258:	b2d8      	uxtb	r0, r3
 800525a:	797b      	ldrb	r3, [r7, #5]
 800525c:	3b01      	subs	r3, #1
 800525e:	b2d9      	uxtb	r1, r3
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	f7fb ff04 	bl	8001074 <make_position>
 800526c:	4603      	mov	r3, r0
 800526e:	461a      	mov	r2, r3
 8005270:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8005274:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005278:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 800527c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005280:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005284:	2103      	movs	r1, #3
 8005286:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005288:	f7fb ff52 	bl	8001130 <wall_check>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 8086 	bne.w	80053a0 <turn_in_L45_expand+0x44a>
                	{
						next_pos.x = pos.x + 1;
 8005294:	793b      	ldrb	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y - 1;
 800529c:	797b      	ldrb	r3, [r7, #5]
 800529e:	3b01      	subs	r3, #1
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	757b      	strb	r3, [r7, #21]
						next_pos.dir = west;
 80052a4:	2303      	movs	r3, #3
 80052a6:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80052ae:	e077      	b.n	80053a0 <turn_in_L45_expand+0x44a>
                	}
                }
            }
        }
        else if(mouse_dir == West)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d174      	bne.n	80053a0 <turn_in_L45_expand+0x44a>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 80052b6:	793b      	ldrb	r3, [r7, #4]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db70      	blt.n	80053a0 <turn_in_L45_expand+0x44a>
 80052be:	797b      	ldrb	r3, [r7, #5]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	db6c      	blt.n	80053a0 <turn_in_L45_expand+0x44a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80052c6:	7938      	ldrb	r0, [r7, #4]
 80052c8:	7979      	ldrb	r1, [r7, #5]
 80052ca:	78fb      	ldrb	r3, [r7, #3]
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	f7fb fecf 	bl	8001074 <make_position>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80052de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80052e2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80052e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80052ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80052ee:	2103      	movs	r1, #3
 80052f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80052f2:	f7fb ff1d 	bl	8001130 <wall_check>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d151      	bne.n	80053a0 <turn_in_L45_expand+0x44a>
 80052fc:	793b      	ldrb	r3, [r7, #4]
 80052fe:	3b01      	subs	r3, #1
 8005300:	b2d8      	uxtb	r0, r3
 8005302:	7979      	ldrb	r1, [r7, #5]
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	085b      	lsrs	r3, r3, #1
 8005308:	b2db      	uxtb	r3, r3
 800530a:	3303      	adds	r3, #3
 800530c:	425a      	negs	r2, r3
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	f002 0203 	and.w	r2, r2, #3
 8005316:	bf58      	it	pl
 8005318:	4253      	negpl	r3, r2
 800531a:	b2db      	uxtb	r3, r3
 800531c:	461a      	mov	r2, r3
 800531e:	f7fb fea9 	bl	8001074 <make_position>
 8005322:	4603      	mov	r3, r0
 8005324:	461a      	mov	r2, r3
 8005326:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 800532a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800532e:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8005332:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800533a:	2103      	movs	r1, #3
 800533c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800533e:	f7fb fef7 	bl	8001130 <wall_check>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d12b      	bne.n	80053a0 <turn_in_L45_expand+0x44a>
                {
                	//if self.wall_data[pos.x-1][pos.y-1][int(mouse_dir/2)] == False:
                	if(wall_check(make_position(pos.x-1, pos.y-1, mouse_dir/2), 0x03) == false)
 8005348:	793b      	ldrb	r3, [r7, #4]
 800534a:	3b01      	subs	r3, #1
 800534c:	b2d8      	uxtb	r0, r3
 800534e:	797b      	ldrb	r3, [r7, #5]
 8005350:	3b01      	subs	r3, #1
 8005352:	b2d9      	uxtb	r1, r3
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	085b      	lsrs	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	f7fb fe8a 	bl	8001074 <make_position>
 8005360:	4603      	mov	r3, r0
 8005362:	461a      	mov	r2, r3
 8005364:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8005368:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800536c:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8005370:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005374:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005378:	2103      	movs	r1, #3
 800537a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800537c:	f7fb fed8 	bl	8001130 <wall_check>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10c      	bne.n	80053a0 <turn_in_L45_expand+0x44a>
                	{
                		next_pos.x = pos.x - 1;
 8005386:	793b      	ldrb	r3, [r7, #4]
 8005388:	3b01      	subs	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y - 1;
 800538e:	797b      	ldrb	r3, [r7, #5]
 8005390:	3b01      	subs	r3, #1
 8005392:	b2db      	uxtb	r3, r3
 8005394:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = north;
 8005396:	2300      	movs	r3, #0
 8005398:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 800539a:	2301      	movs	r3, #1
 800539c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }
        }
    }

    if(update_flag == true)
 80053a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d13c      	bne.n	8005422 <turn_in_L45_expand+0x4cc>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80053a8:	7d3b      	ldrb	r3, [r7, #20]
 80053aa:	7d79      	ldrb	r1, [r7, #21]
 80053ac:	7dba      	ldrb	r2, [r7, #22]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fb fe60 	bl	8001074 <make_position>
 80053b4:	4603      	mov	r3, r0
 80053b6:	461a      	mov	r2, r3
 80053b8:	733a      	strb	r2, [r7, #12]
 80053ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80053be:	737a      	strb	r2, [r7, #13]
 80053c0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80053c4:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 80053c6:	6938      	ldr	r0, [r7, #16]
 80053c8:	f7fe fdaa 	bl	8003f20 <pos_run_time>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461c      	mov	r4, r3
 80053d0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80053d4:	2100      	movs	r1, #0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fcfe 	bl	8003dd8 <calc_time>
 80053dc:	4603      	mov	r3, r0
 80053de:	4423      	add	r3, r4
 80053e0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f7fe fd9b 	bl	8003f20 <pos_run_time>
 80053ea:	4603      	mov	r3, r0
 80053ec:	461a      	mov	r2, r3
 80053ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d215      	bcs.n	8005422 <turn_in_L45_expand+0x4cc>
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f7ff f848 	bl	800448c <is_determine>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10f      	bne.n	8005422 <turn_in_L45_expand+0x4cc>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8005402:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8005406:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800540a:	2300      	movs	r3, #0
 800540c:	9302      	str	r3, [sp, #8]
 800540e:	2300      	movs	r3, #0
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	460b      	mov	r3, r1
 800541a:	6939      	ldr	r1, [r7, #16]
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7fc fb01 	bl	8001a24 <close_list_set>
		}
    }
}
 8005422:	bf00      	nop
 8005424:	3754      	adds	r7, #84	; 0x54
 8005426:	46bd      	mov	sp, r7
 8005428:	bd90      	pop	{r4, r7, pc}

0800542a <turn_out_R45_expand>:

void turn_out_R45_expand(t_position pos,t_eight_dir mouse_dir)
{
 800542a:	b590      	push	{r4, r7, lr}
 800542c:	b095      	sub	sp, #84	; 0x54
 800542e:	af04      	add	r7, sp, #16
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 1 + 8)%8;
 8005436:	78fb      	ldrb	r3, [r7, #3]
 8005438:	3309      	adds	r3, #9
 800543a:	425a      	negs	r2, r3
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	f002 0207 	and.w	r2, r2, #7
 8005444:	bf58      	it	pl
 8005446:	4253      	negpl	r3, r2
 8005448:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 800544c:	793b      	ldrb	r3, [r7, #4]
 800544e:	7979      	ldrb	r1, [r7, #5]
 8005450:	79ba      	ldrb	r2, [r7, #6]
 8005452:	4618      	mov	r0, r3
 8005454:	f7fb fe0e 	bl	8001074 <make_position>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	753a      	strb	r2, [r7, #20]
 800545e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005462:	757a      	strb	r2, [r7, #21]
 8005464:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005468:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 800546a:	793b      	ldrb	r3, [r7, #4]
 800546c:	7979      	ldrb	r1, [r7, #5]
 800546e:	79ba      	ldrb	r2, [r7, #6]
 8005470:	4618      	mov	r0, r3
 8005472:	f7fb fdff 	bl	8001074 <make_position>
 8005476:	4603      	mov	r3, r0
 8005478:	461a      	mov	r2, r3
 800547a:	743a      	strb	r2, [r7, #16]
 800547c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005480:	747a      	strb	r2, [r7, #17]
 8005482:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005486:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8005488:	2300      	movs	r3, #0
 800548a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    t_run_pattern run_pt = Turn_out_R45;
 800548e:	2309      	movs	r3, #9
 8005490:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if(pos.dir == north)
 8005494:	79bb      	ldrb	r3, [r7, #6]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d161      	bne.n	800555e <turn_out_R45_expand+0x134>
    {
        if(mouse_dir == NorthEast)
 800549a:	78fb      	ldrb	r3, [r7, #3]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d132      	bne.n	8005506 <turn_out_R45_expand+0xdc>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 80054a0:	793b      	ldrb	r3, [r7, #4]
 80054a2:	3301      	adds	r3, #1
 80054a4:	2b1f      	cmp	r3, #31
 80054a6:	f300 8193 	bgt.w	80057d0 <turn_out_R45_expand+0x3a6>
 80054aa:	797b      	ldrb	r3, [r7, #5]
 80054ac:	3301      	adds	r3, #1
 80054ae:	2b1f      	cmp	r3, #31
 80054b0:	f300 818e 	bgt.w	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.West] == False:
                if(wall_check(make_position(pos.x + 1, pos.y + 1, west), 0x03) == false)
 80054b4:	793b      	ldrb	r3, [r7, #4]
 80054b6:	3301      	adds	r3, #1
 80054b8:	b2d8      	uxtb	r0, r3
 80054ba:	797b      	ldrb	r3, [r7, #5]
 80054bc:	3301      	adds	r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2203      	movs	r2, #3
 80054c2:	4619      	mov	r1, r3
 80054c4:	f7fb fdd6 	bl	8001074 <make_position>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	763a      	strb	r2, [r7, #24]
 80054ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80054d2:	767a      	strb	r2, [r7, #25]
 80054d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80054d8:	76bb      	strb	r3, [r7, #26]
 80054da:	2103      	movs	r1, #3
 80054dc:	69b8      	ldr	r0, [r7, #24]
 80054de:	f7fb fe27 	bl	8001130 <wall_check>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f040 8173 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x + 1;
 80054ea:	793b      	ldrb	r3, [r7, #4]
 80054ec:	3301      	adds	r3, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 80054f2:	797b      	ldrb	r3, [r7, #5]
 80054f4:	3301      	adds	r3, #1
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80054fa:	2304      	movs	r3, #4
 80054fc:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005504:	e164      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
        else if(mouse_dir == SouthWest)
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	2b05      	cmp	r3, #5
 800550a:	f040 8161 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
        {
            if(pos.x - 1 >= 0)
 800550e:	793b      	ldrb	r3, [r7, #4]
 8005510:	3b01      	subs	r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	f2c0 815c 	blt.w	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False:
                if(wall_check(make_position(pos.x, pos.y, west), 0x03) == false)
 8005518:	793b      	ldrb	r3, [r7, #4]
 800551a:	7979      	ldrb	r1, [r7, #5]
 800551c:	2203      	movs	r2, #3
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb fda8 	bl	8001074 <make_position>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	773a      	strb	r2, [r7, #28]
 800552a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800552e:	777a      	strb	r2, [r7, #29]
 8005530:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005534:	77bb      	strb	r3, [r7, #30]
 8005536:	2103      	movs	r1, #3
 8005538:	69f8      	ldr	r0, [r7, #28]
 800553a:	f7fb fdf9 	bl	8001130 <wall_check>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 8145 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x - 1;
 8005546:	793b      	ldrb	r3, [r7, #4]
 8005548:	3b01      	subs	r3, #1
 800554a:	b2db      	uxtb	r3, r3
 800554c:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 800554e:	797b      	ldrb	r3, [r7, #5]
 8005550:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 8005552:	2304      	movs	r3, #4
 8005554:	75bb      	strb	r3, [r7, #22]
					update_flag  = true;
 8005556:	2301      	movs	r3, #1
 8005558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800555c:	e138      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
    }
    else if(pos.dir == east)
 800555e:	79bb      	ldrb	r3, [r7, #6]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d167      	bne.n	8005634 <turn_out_R45_expand+0x20a>
    {
        if(mouse_dir == SouthEast)
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d135      	bne.n	80055d6 <turn_out_R45_expand+0x1ac>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 800556a:	793b      	ldrb	r3, [r7, #4]
 800556c:	3301      	adds	r3, #1
 800556e:	2b1f      	cmp	r3, #31
 8005570:	f300 812e 	bgt.w	80057d0 <turn_out_R45_expand+0x3a6>
 8005574:	797b      	ldrb	r3, [r7, #5]
 8005576:	3b01      	subs	r3, #1
 8005578:	2b00      	cmp	r3, #0
 800557a:	f2c0 8129 	blt.w	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x+1][pos.y - 1][Node_pos_dir.North] == False:
                if(wall_check(make_position(pos.x + 1, pos.y - 1,north), 0x03) == false)
 800557e:	793b      	ldrb	r3, [r7, #4]
 8005580:	3301      	adds	r3, #1
 8005582:	b2d8      	uxtb	r0, r3
 8005584:	797b      	ldrb	r3, [r7, #5]
 8005586:	3b01      	subs	r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2200      	movs	r2, #0
 800558c:	4619      	mov	r1, r3
 800558e:	f7fb fd71 	bl	8001074 <make_position>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	f887 2020 	strb.w	r2, [r7, #32]
 800559a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800559e:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80055a2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80055a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055aa:	2103      	movs	r1, #3
 80055ac:	6a38      	ldr	r0, [r7, #32]
 80055ae:	f7fb fdbf 	bl	8001130 <wall_check>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 810b 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x + 1;
 80055ba:	793b      	ldrb	r3, [r7, #4]
 80055bc:	3301      	adds	r3, #1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 80055c2:	797b      	ldrb	r3, [r7, #5]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80055ca:	2304      	movs	r3, #4
 80055cc:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80055d4:	e0fc      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
        else if(mouse_dir == NorthWest)
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	2b07      	cmp	r3, #7
 80055da:	f040 80f9 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
        {
            if(pos.y + 1 < MAZE_SIZE_Y)
 80055de:	797b      	ldrb	r3, [r7, #5]
 80055e0:	3301      	adds	r3, #1
 80055e2:	2b1f      	cmp	r3, #31
 80055e4:	f300 80f4 	bgt.w	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False:
                if(wall_check(make_position(pos.x, pos.y, north), 0x03) == false)
 80055e8:	793b      	ldrb	r3, [r7, #4]
 80055ea:	7979      	ldrb	r1, [r7, #5]
 80055ec:	2200      	movs	r2, #0
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fb fd40 	bl	8001074 <make_position>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80055fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005600:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8005604:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005608:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800560c:	2103      	movs	r1, #3
 800560e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005610:	f7fb fd8e 	bl	8001130 <wall_check>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f040 80da 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x;
 800561c:	793b      	ldrb	r3, [r7, #4]
 800561e:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8005620:	797b      	ldrb	r3, [r7, #5]
 8005622:	3301      	adds	r3, #1
 8005624:	b2db      	uxtb	r3, r3
 8005626:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005628:	2304      	movs	r3, #4
 800562a:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 800562c:	2301      	movs	r3, #1
 800562e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005632:	e0cd      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
    }

    else if(pos.dir == south)
 8005634:	79bb      	ldrb	r3, [r7, #6]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d166      	bne.n	8005708 <turn_out_R45_expand+0x2de>
    {
        if(mouse_dir == NorthEast)
 800563a:	78fb      	ldrb	r3, [r7, #3]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d12a      	bne.n	8005696 <turn_out_R45_expand+0x26c>
        {
            if(pos.x + 1 < MAZE_SIZE_X)
 8005640:	793b      	ldrb	r3, [r7, #4]
 8005642:	3301      	adds	r3, #1
 8005644:	2b1f      	cmp	r3, #31
 8005646:	f300 80c3 	bgt.w	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False:
                if(wall_check(make_position(pos.x, pos.y, east), 0x03) == false)
 800564a:	793b      	ldrb	r3, [r7, #4]
 800564c:	7979      	ldrb	r1, [r7, #5]
 800564e:	2201      	movs	r2, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f7fb fd0f 	bl	8001074 <make_position>
 8005656:	4603      	mov	r3, r0
 8005658:	461a      	mov	r2, r3
 800565a:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 800565e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005662:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8005666:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800566a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800566e:	2103      	movs	r1, #3
 8005670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005672:	f7fb fd5d 	bl	8001130 <wall_check>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	f040 80a9 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x + 1;
 800567e:	793b      	ldrb	r3, [r7, #4]
 8005680:	3301      	adds	r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 8005686:	797b      	ldrb	r3, [r7, #5]
 8005688:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 800568a:	2304      	movs	r3, #4
 800568c:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 800568e:	2301      	movs	r3, #1
 8005690:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005694:	e09c      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
        else if(mouse_dir == SouthWest)
 8005696:	78fb      	ldrb	r3, [r7, #3]
 8005698:	2b05      	cmp	r3, #5
 800569a:	f040 8099 	bne.w	80057d0 <turn_out_R45_expand+0x3a6>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 800569e:	793b      	ldrb	r3, [r7, #4]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f2c0 8094 	blt.w	80057d0 <turn_out_R45_expand+0x3a6>
 80056a8:	797b      	ldrb	r3, [r7, #5]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f2c0 808f 	blt.w	80057d0 <turn_out_R45_expand+0x3a6>
			{
                //if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.East] == False:
                if(wall_check(make_position(pos.x-1, pos.y-1, east), 0x03) == false)
 80056b2:	793b      	ldrb	r3, [r7, #4]
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b2d8      	uxtb	r0, r3
 80056b8:	797b      	ldrb	r3, [r7, #5]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2201      	movs	r2, #1
 80056c0:	4619      	mov	r1, r3
 80056c2:	f7fb fcd7 	bl	8001074 <make_position>
 80056c6:	4603      	mov	r3, r0
 80056c8:	461a      	mov	r2, r3
 80056ca:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80056ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80056d2:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80056d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80056da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80056de:	2103      	movs	r1, #3
 80056e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056e2:	f7fb fd25 	bl	8001130 <wall_check>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d171      	bne.n	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x - 1;
 80056ec:	793b      	ldrb	r3, [r7, #4]
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 80056f4:	797b      	ldrb	r3, [r7, #5]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80056fc:	2304      	movs	r3, #4
 80056fe:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005706:	e063      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
			}
        }
    }
    else if(pos.dir == west)
 8005708:	79bb      	ldrb	r3, [r7, #6]
 800570a:	2b03      	cmp	r3, #3
 800570c:	d160      	bne.n	80057d0 <turn_out_R45_expand+0x3a6>
    {
        if(mouse_dir == NorthWest)
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	2b07      	cmp	r3, #7
 8005712:	d132      	bne.n	800577a <turn_out_R45_expand+0x350>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8005714:	793b      	ldrb	r3, [r7, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	2b00      	cmp	r3, #0
 800571a:	db59      	blt.n	80057d0 <turn_out_R45_expand+0x3a6>
 800571c:	797b      	ldrb	r3, [r7, #5]
 800571e:	3301      	adds	r3, #1
 8005720:	2b1f      	cmp	r3, #31
 8005722:	dc55      	bgt.n	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x-1][pos.y+1][Node_pos_dir.South] == False:
                if(wall_check(make_position(pos.x-1, pos.y+1, south), 0x03) == false)
 8005724:	793b      	ldrb	r3, [r7, #4]
 8005726:	3b01      	subs	r3, #1
 8005728:	b2d8      	uxtb	r0, r3
 800572a:	797b      	ldrb	r3, [r7, #5]
 800572c:	3301      	adds	r3, #1
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2202      	movs	r2, #2
 8005732:	4619      	mov	r1, r3
 8005734:	f7fb fc9e 	bl	8001074 <make_position>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8005740:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005744:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8005748:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800574c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005750:	2103      	movs	r1, #3
 8005752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005754:	f7fb fcec 	bl	8001130 <wall_check>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d138      	bne.n	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x - 1;
 800575e:	793b      	ldrb	r3, [r7, #4]
 8005760:	3b01      	subs	r3, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8005766:	797b      	ldrb	r3, [r7, #5]
 8005768:	3301      	adds	r3, #1
 800576a:	b2db      	uxtb	r3, r3
 800576c:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 800576e:	2304      	movs	r3, #4
 8005770:	75bb      	strb	r3, [r7, #22]
					update_flag  = true;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005778:	e02a      	b.n	80057d0 <turn_out_R45_expand+0x3a6>
                }
            }
        }
        else if(mouse_dir == SouthEast)
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	2b03      	cmp	r3, #3
 800577e:	d127      	bne.n	80057d0 <turn_out_R45_expand+0x3a6>
        {
            if(pos.y - 1 >= 0)
 8005780:	797b      	ldrb	r3, [r7, #5]
 8005782:	3b01      	subs	r3, #1
 8005784:	2b00      	cmp	r3, #0
 8005786:	db23      	blt.n	80057d0 <turn_out_R45_expand+0x3a6>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False:
                if(wall_check(make_position(pos.x, pos.y, south), 0x03) == false)
 8005788:	793b      	ldrb	r3, [r7, #4]
 800578a:	7979      	ldrb	r1, [r7, #5]
 800578c:	2202      	movs	r2, #2
 800578e:	4618      	mov	r0, r3
 8005790:	f7fb fc70 	bl	8001074 <make_position>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 800579c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80057a0:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 80057a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80057a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80057ac:	2103      	movs	r1, #3
 80057ae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80057b0:	f7fb fcbe 	bl	8001130 <wall_check>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <turn_out_R45_expand+0x3a6>
                {
                    next_pos.x = pos.x;
 80057ba:	793b      	ldrb	r3, [r7, #4]
 80057bc:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 80057be:	797b      	ldrb	r3, [r7, #5]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80057c6:	2304      	movs	r3, #4
 80057c8:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                }
            }
        }
    }

    if(update_flag == true)
 80057d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d139      	bne.n	800584c <turn_out_R45_expand+0x422>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80057d8:	7d3b      	ldrb	r3, [r7, #20]
 80057da:	7d79      	ldrb	r1, [r7, #21]
 80057dc:	7dba      	ldrb	r2, [r7, #22]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fb fc48 	bl	8001074 <make_position>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	733a      	strb	r2, [r7, #12]
 80057ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80057ee:	737a      	strb	r2, [r7, #13]
 80057f0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80057f4:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f7fe fb92 	bl	8003f20 <pos_run_time>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461c      	mov	r4, r3
 8005800:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fae6 	bl	8003dd8 <calc_time>
 800580c:	4603      	mov	r3, r0
 800580e:	4423      	add	r3, r4
 8005810:	877b      	strh	r3, [r7, #58]	; 0x3a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7fe fb84 	bl	8003f20 <pos_run_time>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800581e:	4293      	cmp	r3, r2
 8005820:	d214      	bcs.n	800584c <turn_out_R45_expand+0x422>
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f7fe fe32 	bl	800448c <is_determine>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10e      	bne.n	800584c <turn_out_R45_expand+0x422>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 800582e:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005830:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005834:	2300      	movs	r3, #0
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	2300      	movs	r3, #0
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	460b      	mov	r3, r1
 8005844:	6939      	ldr	r1, [r7, #16]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f7fc f8ec 	bl	8001a24 <close_list_set>
		}
    }
}
 800584c:	bf00      	nop
 800584e:	3744      	adds	r7, #68	; 0x44
 8005850:	46bd      	mov	sp, r7
 8005852:	bd90      	pop	{r4, r7, pc}

08005854 <turn_out_L45_expand>:

void turn_out_L45_expand(t_position pos,t_eight_dir mouse_dir)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b095      	sub	sp, #84	; 0x54
 8005858:	af04      	add	r7, sp, #16
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 1 + 8)%8;
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	3307      	adds	r3, #7
 8005864:	425a      	negs	r2, r3
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	f002 0207 	and.w	r2, r2, #7
 800586e:	bf58      	it	pl
 8005870:	4253      	negpl	r3, r2
 8005872:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8005876:	793b      	ldrb	r3, [r7, #4]
 8005878:	7979      	ldrb	r1, [r7, #5]
 800587a:	79ba      	ldrb	r2, [r7, #6]
 800587c:	4618      	mov	r0, r3
 800587e:	f7fb fbf9 	bl	8001074 <make_position>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	753a      	strb	r2, [r7, #20]
 8005888:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800588c:	757a      	strb	r2, [r7, #21]
 800588e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005892:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8005894:	793b      	ldrb	r3, [r7, #4]
 8005896:	7979      	ldrb	r1, [r7, #5]
 8005898:	79ba      	ldrb	r2, [r7, #6]
 800589a:	4618      	mov	r0, r3
 800589c:	f7fb fbea 	bl	8001074 <make_position>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	743a      	strb	r2, [r7, #16]
 80058a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80058aa:	747a      	strb	r2, [r7, #17]
 80058ac:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80058b0:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 80058b2:	2300      	movs	r3, #0
 80058b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    t_run_pattern run_pt = Turn_out_L45;
 80058b8:	230a      	movs	r3, #10
 80058ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if(pos.dir == north)
 80058be:	79bb      	ldrb	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d161      	bne.n	8005988 <turn_out_L45_expand+0x134>
    {
    	if(mouse_dir == NorthWest)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d132      	bne.n	8005930 <turn_out_L45_expand+0xdc>
    	{
            if(pos.x - 1 > 0 && pos.y + 1 < MAZE_SIZE_Y)
 80058ca:	793b      	ldrb	r3, [r7, #4]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f340 8193 	ble.w	8005bfa <turn_out_L45_expand+0x3a6>
 80058d4:	797b      	ldrb	r3, [r7, #5]
 80058d6:	3301      	adds	r3, #1
 80058d8:	2b1f      	cmp	r3, #31
 80058da:	f300 818e 	bgt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
                //if self.wall_data[pos.x-1][pos.y + 1][Node_pos_dir.East] == False:
            	if(wall_check(make_position(pos.x-1,pos.y + 1,east), 0x03) == false)
 80058de:	793b      	ldrb	r3, [r7, #4]
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b2d8      	uxtb	r0, r3
 80058e4:	797b      	ldrb	r3, [r7, #5]
 80058e6:	3301      	adds	r3, #1
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2201      	movs	r2, #1
 80058ec:	4619      	mov	r1, r3
 80058ee:	f7fb fbc1 	bl	8001074 <make_position>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	763a      	strb	r2, [r7, #24]
 80058f8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80058fc:	767a      	strb	r2, [r7, #25]
 80058fe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005902:	76bb      	strb	r3, [r7, #26]
 8005904:	2103      	movs	r1, #3
 8005906:	69b8      	ldr	r0, [r7, #24]
 8005908:	f7fb fc12 	bl	8001130 <wall_check>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f040 8173 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x - 1;
 8005914:	793b      	ldrb	r3, [r7, #4]
 8005916:	3b01      	subs	r3, #1
 8005918:	b2db      	uxtb	r3, r3
 800591a:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 800591c:	797b      	ldrb	r3, [r7, #5]
 800591e:	3301      	adds	r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005924:	2304      	movs	r3, #4
 8005926:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005928:	2301      	movs	r3, #1
 800592a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800592e:	e164      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    	else if(mouse_dir == SouthEast)
 8005930:	78fb      	ldrb	r3, [r7, #3]
 8005932:	2b03      	cmp	r3, #3
 8005934:	f040 8161 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
    	{
            if(pos.x + 1 < MAZE_SIZE_X)
 8005938:	793b      	ldrb	r3, [r7, #4]
 800593a:	3301      	adds	r3, #1
 800593c:	2b1f      	cmp	r3, #31
 800593e:	f300 815c 	bgt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False:
            	if(wall_check(make_position(pos.x,pos.y,east), 0x03) == false)
 8005942:	793b      	ldrb	r3, [r7, #4]
 8005944:	7979      	ldrb	r1, [r7, #5]
 8005946:	2201      	movs	r2, #1
 8005948:	4618      	mov	r0, r3
 800594a:	f7fb fb93 	bl	8001074 <make_position>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	773a      	strb	r2, [r7, #28]
 8005954:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005958:	777a      	strb	r2, [r7, #29]
 800595a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800595e:	77bb      	strb	r3, [r7, #30]
 8005960:	2103      	movs	r1, #3
 8005962:	69f8      	ldr	r0, [r7, #28]
 8005964:	f7fb fbe4 	bl	8001130 <wall_check>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	f040 8145 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x + 1;
 8005970:	793b      	ldrb	r3, [r7, #4]
 8005972:	3301      	adds	r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 8005978:	797b      	ldrb	r3, [r7, #5]
 800597a:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 800597c:	2304      	movs	r3, #4
 800597e:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005980:	2301      	movs	r3, #1
 8005982:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005986:	e138      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    }
    else if(pos.dir == east)
 8005988:	79bb      	ldrb	r3, [r7, #6]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d167      	bne.n	8005a5e <turn_out_L45_expand+0x20a>
    {
    	if(mouse_dir == NorthEast)
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d135      	bne.n	8005a00 <turn_out_L45_expand+0x1ac>
    	{
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8005994:	793b      	ldrb	r3, [r7, #4]
 8005996:	3301      	adds	r3, #1
 8005998:	2b1f      	cmp	r3, #31
 800599a:	f300 812e 	bgt.w	8005bfa <turn_out_L45_expand+0x3a6>
 800599e:	797b      	ldrb	r3, [r7, #5]
 80059a0:	3301      	adds	r3, #1
 80059a2:	2b1f      	cmp	r3, #31
 80059a4:	f300 8129 	bgt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.South] == False:
            	if(wall_check(make_position(pos.x + 1,pos.y + 1,south), 0x03) == false)
 80059a8:	793b      	ldrb	r3, [r7, #4]
 80059aa:	3301      	adds	r3, #1
 80059ac:	b2d8      	uxtb	r0, r3
 80059ae:	797b      	ldrb	r3, [r7, #5]
 80059b0:	3301      	adds	r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2202      	movs	r2, #2
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fb fb5c 	bl	8001074 <make_position>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	f887 2020 	strb.w	r2, [r7, #32]
 80059c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80059c8:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80059cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80059d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80059d4:	2103      	movs	r1, #3
 80059d6:	6a38      	ldr	r0, [r7, #32]
 80059d8:	f7fb fbaa 	bl	8001130 <wall_check>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 810b 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x + 1;
 80059e4:	793b      	ldrb	r3, [r7, #4]
 80059e6:	3301      	adds	r3, #1
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 80059ec:	797b      	ldrb	r3, [r7, #5]
 80059ee:	3301      	adds	r3, #1
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80059f4:	2304      	movs	r3, #4
 80059f6:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 80059f8:	2301      	movs	r3, #1
 80059fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80059fe:	e0fc      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    	else if(mouse_dir == SouthWest)
 8005a00:	78fb      	ldrb	r3, [r7, #3]
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	f040 80f9 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
    	{
            if(pos.y - 1 >= 0)
 8005a08:	797b      	ldrb	r3, [r7, #5]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f2c0 80f4 	blt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False:
            	if(wall_check(make_position(pos.x,pos.y,south), 0x03) == false)
 8005a12:	793b      	ldrb	r3, [r7, #4]
 8005a14:	7979      	ldrb	r1, [r7, #5]
 8005a16:	2202      	movs	r2, #2
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fb fb2b 	bl	8001074 <make_position>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	461a      	mov	r2, r3
 8005a22:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8005a26:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005a2a:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8005a2e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005a36:	2103      	movs	r1, #3
 8005a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a3a:	f7fb fb79 	bl	8001130 <wall_check>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f040 80da 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x;
 8005a46:	793b      	ldrb	r3, [r7, #4]
 8005a48:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8005a4a:	797b      	ldrb	r3, [r7, #5]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005a52:	2304      	movs	r3, #4
 8005a54:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005a56:	2301      	movs	r3, #1
 8005a58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005a5c:	e0cd      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    }
    else if(pos.dir == south)
 8005a5e:	79bb      	ldrb	r3, [r7, #6]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d166      	bne.n	8005b32 <turn_out_L45_expand+0x2de>
    {
    	if(mouse_dir == NorthWest)
 8005a64:	78fb      	ldrb	r3, [r7, #3]
 8005a66:	2b07      	cmp	r3, #7
 8005a68:	d12a      	bne.n	8005ac0 <turn_out_L45_expand+0x26c>
    	{
            if(pos.x - 1 >= 0)
 8005a6a:	793b      	ldrb	r3, [r7, #4]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f2c0 80c3 	blt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False:
            	if(wall_check(make_position(pos.x,pos.y,west), 0x03) == false)
 8005a74:	793b      	ldrb	r3, [r7, #4]
 8005a76:	7979      	ldrb	r1, [r7, #5]
 8005a78:	2203      	movs	r2, #3
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fb fafa 	bl	8001074 <make_position>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8005a88:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005a8c:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8005a90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005a98:	2103      	movs	r1, #3
 8005a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a9c:	f7fb fb48 	bl	8001130 <wall_check>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f040 80a9 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x - 1;
 8005aa8:	793b      	ldrb	r3, [r7, #4]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 8005ab0:	797b      	ldrb	r3, [r7, #5]
 8005ab2:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005abe:	e09c      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    	else if(mouse_dir == SouthEast)
 8005ac0:	78fb      	ldrb	r3, [r7, #3]
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	f040 8099 	bne.w	8005bfa <turn_out_L45_expand+0x3a6>
    	{
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8005ac8:	793b      	ldrb	r3, [r7, #4]
 8005aca:	3301      	adds	r3, #1
 8005acc:	2b1f      	cmp	r3, #31
 8005ace:	f300 8094 	bgt.w	8005bfa <turn_out_L45_expand+0x3a6>
 8005ad2:	797b      	ldrb	r3, [r7, #5]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f2c0 808f 	blt.w	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x+1][pos.y-1][Node_pos_dir.West] == False:
            	if(wall_check(make_position(pos.x+1,pos.y - 1,west), 0x03) == false)
 8005adc:	793b      	ldrb	r3, [r7, #4]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	b2d8      	uxtb	r0, r3
 8005ae2:	797b      	ldrb	r3, [r7, #5]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2203      	movs	r2, #3
 8005aea:	4619      	mov	r1, r3
 8005aec:	f7fb fac2 	bl	8001074 <make_position>
 8005af0:	4603      	mov	r3, r0
 8005af2:	461a      	mov	r2, r3
 8005af4:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8005af8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005afc:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8005b00:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005b04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005b08:	2103      	movs	r1, #3
 8005b0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005b0c:	f7fb fb10 	bl	8001130 <wall_check>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d171      	bne.n	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x + 1;
 8005b16:	793b      	ldrb	r3, [r7, #4]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8005b1e:	797b      	ldrb	r3, [r7, #5]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005b26:	2304      	movs	r3, #4
 8005b28:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005b30:	e063      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    }
    else if(pos.dir == west)
 8005b32:	79bb      	ldrb	r3, [r7, #6]
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	d160      	bne.n	8005bfa <turn_out_L45_expand+0x3a6>
    {
    	if(mouse_dir == NorthEast)
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d132      	bne.n	8005ba4 <turn_out_L45_expand+0x350>
    	{
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8005b3e:	793b      	ldrb	r3, [r7, #4]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	db59      	blt.n	8005bfa <turn_out_L45_expand+0x3a6>
 8005b46:	797b      	ldrb	r3, [r7, #5]
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	db55      	blt.n	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.North] == False:
            	if(wall_check(make_position(pos.x-1,pos.y - 1,north), 0x03) == false)
 8005b4e:	793b      	ldrb	r3, [r7, #4]
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b2d8      	uxtb	r0, r3
 8005b54:	797b      	ldrb	r3, [r7, #5]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fb fa89 	bl	8001074 <make_position>
 8005b62:	4603      	mov	r3, r0
 8005b64:	461a      	mov	r2, r3
 8005b66:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8005b6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005b6e:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8005b72:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005b76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005b7a:	2103      	movs	r1, #3
 8005b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b7e:	f7fb fad7 	bl	8001130 <wall_check>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d138      	bne.n	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x - 1;
 8005b88:	793b      	ldrb	r3, [r7, #4]
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8005b90:	797b      	ldrb	r3, [r7, #5]
 8005b92:	3b01      	subs	r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005b98:	2304      	movs	r3, #4
 8005b9a:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8005ba2:	e02a      	b.n	8005bfa <turn_out_L45_expand+0x3a6>
            	}
            }
    	}
    	else if(mouse_dir == SouthWest)
 8005ba4:	78fb      	ldrb	r3, [r7, #3]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	d127      	bne.n	8005bfa <turn_out_L45_expand+0x3a6>
    	{
            if(pos.y + 1 < MAZE_SIZE_Y)
 8005baa:	797b      	ldrb	r3, [r7, #5]
 8005bac:	3301      	adds	r3, #1
 8005bae:	2b1f      	cmp	r3, #31
 8005bb0:	dc23      	bgt.n	8005bfa <turn_out_L45_expand+0x3a6>
            {
            	//if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False:
            	if(wall_check(make_position(pos.x,pos.y ,north), 0x03) == false)
 8005bb2:	793b      	ldrb	r3, [r7, #4]
 8005bb4:	7979      	ldrb	r1, [r7, #5]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fb fa5b 	bl	8001074 <make_position>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8005bc6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005bca:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8005bce:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005bd2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005bd6:	2103      	movs	r1, #3
 8005bd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005bda:	f7fb faa9 	bl	8001130 <wall_check>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <turn_out_L45_expand+0x3a6>
            	{
                    next_pos.x = pos.x;
 8005be4:	793b      	ldrb	r3, [r7, #4]
 8005be6:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8005be8:	797b      	ldrb	r3, [r7, #5]
 8005bea:	3301      	adds	r3, #1
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	75bb      	strb	r3, [r7, #22]
                    update_flag  = true;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            	}
            }
    	}
    }

    if(update_flag == true)
 8005bfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d139      	bne.n	8005c76 <turn_out_L45_expand+0x422>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8005c02:	7d3b      	ldrb	r3, [r7, #20]
 8005c04:	7d79      	ldrb	r1, [r7, #21]
 8005c06:	7dba      	ldrb	r2, [r7, #22]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fb fa33 	bl	8001074 <make_position>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	461a      	mov	r2, r3
 8005c12:	733a      	strb	r2, [r7, #12]
 8005c14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005c18:	737a      	strb	r2, [r7, #13]
 8005c1a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005c1e:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8005c20:	6938      	ldr	r0, [r7, #16]
 8005c22:	f7fe f97d 	bl	8003f20 <pos_run_time>
 8005c26:	4603      	mov	r3, r0
 8005c28:	461c      	mov	r4, r3
 8005c2a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005c2e:	2100      	movs	r1, #0
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe f8d1 	bl	8003dd8 <calc_time>
 8005c36:	4603      	mov	r3, r0
 8005c38:	4423      	add	r3, r4
 8005c3a:	877b      	strh	r3, [r7, #58]	; 0x3a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f7fe f96f 	bl	8003f20 <pos_run_time>
 8005c42:	4603      	mov	r3, r0
 8005c44:	461a      	mov	r2, r3
 8005c46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d214      	bcs.n	8005c76 <turn_out_L45_expand+0x422>
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f7fe fc1d 	bl	800448c <is_determine>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10e      	bne.n	8005c76 <turn_out_L45_expand+0x422>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8005c58:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8005c5a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8005c5e:	2300      	movs	r3, #0
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	2300      	movs	r3, #0
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	6939      	ldr	r1, [r7, #16]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f7fb fed7 	bl	8001a24 <close_list_set>
		}
    }
}
 8005c76:	bf00      	nop
 8005c78:	3744      	adds	r7, #68	; 0x44
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd90      	pop	{r4, r7, pc}

08005c7e <turn_in_R135_expand>:

void turn_in_R135_expand(t_position pos,t_eight_dir mouse_dir)
{
 8005c7e:	b590      	push	{r4, r7, lr}
 8005c80:	b09d      	sub	sp, #116	; 0x74
 8005c82:	af04      	add	r7, sp, #16
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	460b      	mov	r3, r1
 8005c88:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 3 + 8)%8;
 8005c8a:	78fb      	ldrb	r3, [r7, #3]
 8005c8c:	330b      	adds	r3, #11
 8005c8e:	425a      	negs	r2, r3
 8005c90:	f003 0307 	and.w	r3, r3, #7
 8005c94:	f002 0207 	and.w	r2, r2, #7
 8005c98:	bf58      	it	pl
 8005c9a:	4253      	negpl	r3, r2
 8005c9c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8005ca0:	793b      	ldrb	r3, [r7, #4]
 8005ca2:	7979      	ldrb	r1, [r7, #5]
 8005ca4:	79ba      	ldrb	r2, [r7, #6]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fb f9e4 	bl	8001074 <make_position>
 8005cac:	4603      	mov	r3, r0
 8005cae:	461a      	mov	r2, r3
 8005cb0:	753a      	strb	r2, [r7, #20]
 8005cb2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005cb6:	757a      	strb	r2, [r7, #21]
 8005cb8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005cbc:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8005cbe:	793b      	ldrb	r3, [r7, #4]
 8005cc0:	7979      	ldrb	r1, [r7, #5]
 8005cc2:	79ba      	ldrb	r2, [r7, #6]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fb f9d5 	bl	8001074 <make_position>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	461a      	mov	r2, r3
 8005cce:	743a      	strb	r2, [r7, #16]
 8005cd0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005cd4:	747a      	strb	r2, [r7, #17]
 8005cd6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005cda:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    t_run_pattern run_pt = Turn_in_R135;
 8005ce2:	230b      	movs	r3, #11
 8005ce4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    if(pos.dir == center)
 8005ce8:	79bb      	ldrb	r3, [r7, #6]
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	f040 827d 	bne.w	80061ea <turn_in_R135_expand+0x56c>
    {
        if(mouse_dir == North)
 8005cf0:	78fb      	ldrb	r3, [r7, #3]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 8098 	bne.w	8005e28 <turn_in_R135_expand+0x1aa>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 <  MAZE_SIZE_Y)
 8005cf8:	793b      	ldrb	r3, [r7, #4]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	2b1f      	cmp	r3, #31
 8005cfe:	f300 8274 	bgt.w	80061ea <turn_in_R135_expand+0x56c>
 8005d02:	797b      	ldrb	r3, [r7, #5]
 8005d04:	3301      	adds	r3, #1
 8005d06:	2b1f      	cmp	r3, #31
 8005d08:	f300 826f 	bgt.w	80061ea <turn_in_R135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8005d0c:	7938      	ldrb	r0, [r7, #4]
 8005d0e:	7979      	ldrb	r1, [r7, #5]
 8005d10:	78fb      	ldrb	r3, [r7, #3]
 8005d12:	085b      	lsrs	r3, r3, #1
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	f7fb f9ac 	bl	8001074 <make_position>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	763a      	strb	r2, [r7, #24]
 8005d22:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005d26:	767a      	strb	r2, [r7, #25]
 8005d28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d2c:	76bb      	strb	r3, [r7, #26]
 8005d2e:	2103      	movs	r1, #3
 8005d30:	69b8      	ldr	r0, [r7, #24]
 8005d32:	f7fb f9fd 	bl	8001130 <wall_check>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 8256 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 8005d3e:	7938      	ldrb	r0, [r7, #4]
 8005d40:	797b      	ldrb	r3, [r7, #5]
 8005d42:	3301      	adds	r3, #1
 8005d44:	b2d9      	uxtb	r1, r3
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	085b      	lsrs	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	3305      	adds	r3, #5
 8005d4e:	425a      	negs	r2, r3
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	f002 0203 	and.w	r2, r2, #3
 8005d58:	bf58      	it	pl
 8005d5a:	4253      	negpl	r3, r2
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	f7fb f988 	bl	8001074 <make_position>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	773a      	strb	r2, [r7, #28]
 8005d6a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005d6e:	777a      	strb	r2, [r7, #29]
 8005d70:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005d74:	77bb      	strb	r3, [r7, #30]
 8005d76:	2103      	movs	r1, #3
 8005d78:	69f8      	ldr	r0, [r7, #28]
 8005d7a:	f7fb f9d9 	bl	8001130 <wall_check>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f040 8232 	bne.w	80061ea <turn_in_R135_expand+0x56c>
                {
               	 //if self.wall_data[pos.x+1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2)+1+4)%4] == False:
               	 if(wall_check(make_position(pos.x+1, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8005d86:	793b      	ldrb	r3, [r7, #4]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	b2d8      	uxtb	r0, r3
 8005d8c:	7979      	ldrb	r1, [r7, #5]
 8005d8e:	78fb      	ldrb	r3, [r7, #3]
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
 8005d96:	f7fb f96d 	bl	8001074 <make_position>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	f887 2020 	strb.w	r2, [r7, #32]
 8005da2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005da6:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8005daa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005dae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005db2:	2103      	movs	r1, #3
 8005db4:	6a38      	ldr	r0, [r7, #32]
 8005db6:	f7fb f9bb 	bl	8001130 <wall_check>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f040 8214 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 8005dc2:	793b      	ldrb	r3, [r7, #4]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	b2d8      	uxtb	r0, r3
 8005dc8:	7979      	ldrb	r1, [r7, #5]
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	085b      	lsrs	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	3305      	adds	r3, #5
 8005dd2:	425a      	negs	r2, r3
 8005dd4:	f003 0303 	and.w	r3, r3, #3
 8005dd8:	f002 0203 	and.w	r2, r2, #3
 8005ddc:	bf58      	it	pl
 8005dde:	4253      	negpl	r3, r2
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	461a      	mov	r2, r3
 8005de4:	f7fb f946 	bl	8001074 <make_position>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8005df0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005df4:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8005df8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005dfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e00:	2103      	movs	r1, #3
 8005e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e04:	f7fb f994 	bl	8001130 <wall_check>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f040 81ed 	bne.w	80061ea <turn_in_R135_expand+0x56c>
               	 {
               		 next_pos.x = pos.x + 1;
 8005e10:	793b      	ldrb	r3, [r7, #4]
 8005e12:	3301      	adds	r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	753b      	strb	r3, [r7, #20]
               		 next_pos.y = pos.y;
 8005e18:	797b      	ldrb	r3, [r7, #5]
 8005e1a:	757b      	strb	r3, [r7, #21]
               		 next_pos.dir = north;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	75bb      	strb	r3, [r7, #22]
               		 update_flag = true;
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e26:	e1e0      	b.n	80061ea <turn_in_R135_expand+0x56c>
               	 }
                }
            }
        }
        else if(mouse_dir == East)
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	f040 809e 	bne.w	8005f6c <turn_in_R135_expand+0x2ee>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 > 0)
 8005e30:	793b      	ldrb	r3, [r7, #4]
 8005e32:	3301      	adds	r3, #1
 8005e34:	2b1f      	cmp	r3, #31
 8005e36:	f300 81d8 	bgt.w	80061ea <turn_in_R135_expand+0x56c>
 8005e3a:	797b      	ldrb	r3, [r7, #5]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f340 81d3 	ble.w	80061ea <turn_in_R135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8005e44:	7938      	ldrb	r0, [r7, #4]
 8005e46:	7979      	ldrb	r1, [r7, #5]
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	085b      	lsrs	r3, r3, #1
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	461a      	mov	r2, r3
 8005e50:	f7fb f910 	bl	8001074 <make_position>
 8005e54:	4603      	mov	r3, r0
 8005e56:	461a      	mov	r2, r3
 8005e58:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8005e5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005e60:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8005e64:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005e68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005e6c:	2103      	movs	r1, #3
 8005e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e70:	f7fb f95e 	bl	8001130 <wall_check>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f040 81b7 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 8005e7c:	793b      	ldrb	r3, [r7, #4]
 8005e7e:	3301      	adds	r3, #1
 8005e80:	b2d8      	uxtb	r0, r3
 8005e82:	7979      	ldrb	r1, [r7, #5]
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	085b      	lsrs	r3, r3, #1
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	3305      	adds	r3, #5
 8005e8c:	425a      	negs	r2, r3
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	f002 0203 	and.w	r2, r2, #3
 8005e96:	bf58      	it	pl
 8005e98:	4253      	negpl	r3, r2
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	f7fb f8e9 	bl	8001074 <make_position>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8005eaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005eae:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8005eb2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005eb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005eba:	2103      	movs	r1, #3
 8005ebc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005ebe:	f7fb f937 	bl	8001130 <wall_check>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f040 8190 	bne.w	80061ea <turn_in_R135_expand+0x56c>
                {
               	 //if self.wall_data[pos.x][pos.y-1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2)+1+4)%4] == False:
               	 if(wall_check(make_position(pos.x, pos.y-1, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8005eca:	7938      	ldrb	r0, [r7, #4]
 8005ecc:	797b      	ldrb	r3, [r7, #5]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b2d9      	uxtb	r1, r3
 8005ed2:	78fb      	ldrb	r3, [r7, #3]
 8005ed4:	085b      	lsrs	r3, r3, #1
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f7fb f8cb 	bl	8001074 <make_position>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8005ee6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005eea:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8005eee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005ef2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005ef6:	2103      	movs	r1, #3
 8005ef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005efa:	f7fb f919 	bl	8001130 <wall_check>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8172 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 8005f06:	7938      	ldrb	r0, [r7, #4]
 8005f08:	797b      	ldrb	r3, [r7, #5]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b2d9      	uxtb	r1, r3
 8005f0e:	78fb      	ldrb	r3, [r7, #3]
 8005f10:	085b      	lsrs	r3, r3, #1
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	3305      	adds	r3, #5
 8005f16:	425a      	negs	r2, r3
 8005f18:	f003 0303 	and.w	r3, r3, #3
 8005f1c:	f002 0203 	and.w	r2, r2, #3
 8005f20:	bf58      	it	pl
 8005f22:	4253      	negpl	r3, r2
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7fb f8a4 	bl	8001074 <make_position>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8005f34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005f38:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8005f3c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005f40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8005f44:	2103      	movs	r1, #3
 8005f46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005f48:	f7fb f8f2 	bl	8001130 <wall_check>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f040 814b 	bne.w	80061ea <turn_in_R135_expand+0x56c>
               	 {
						 next_pos.x = pos.x;
 8005f54:	793b      	ldrb	r3, [r7, #4]
 8005f56:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y - 1;
 8005f58:	797b      	ldrb	r3, [r7, #5]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = east;
 8005f60:	2301      	movs	r3, #1
 8005f62:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 8005f64:	2301      	movs	r3, #1
 8005f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f6a:	e13e      	b.n	80061ea <turn_in_R135_expand+0x56c>
               	 }
                }
            }
    	 }
        else if(mouse_dir == South)
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	f040 809e 	bne.w	80060b0 <turn_in_R135_expand+0x432>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8005f74:	793b      	ldrb	r3, [r7, #4]
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f2c0 8136 	blt.w	80061ea <turn_in_R135_expand+0x56c>
 8005f7e:	797b      	ldrb	r3, [r7, #5]
 8005f80:	3b01      	subs	r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f2c0 8131 	blt.w	80061ea <turn_in_R135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8005f88:	7938      	ldrb	r0, [r7, #4]
 8005f8a:	7979      	ldrb	r1, [r7, #5]
 8005f8c:	78fb      	ldrb	r3, [r7, #3]
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	f7fb f86e 	bl	8001074 <make_position>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8005fa0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005fa4:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8005fa8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005fac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8005fb0:	2103      	movs	r1, #3
 8005fb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005fb4:	f7fb f8bc 	bl	8001130 <wall_check>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f040 8115 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 8005fc0:	7938      	ldrb	r0, [r7, #4]
 8005fc2:	797b      	ldrb	r3, [r7, #5]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b2d9      	uxtb	r1, r3
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	085b      	lsrs	r3, r3, #1
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	3305      	adds	r3, #5
 8005fd0:	425a      	negs	r2, r3
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	f002 0203 	and.w	r2, r2, #3
 8005fda:	bf58      	it	pl
 8005fdc:	4253      	negpl	r3, r2
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	f7fb f847 	bl	8001074 <make_position>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8005fee:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8005ff2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8005ff6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8005ffa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8005ffe:	2103      	movs	r1, #3
 8006000:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006002:	f7fb f895 	bl	8001130 <wall_check>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	f040 80ee 	bne.w	80061ea <turn_in_R135_expand+0x56c>
                {
               	 //if self.wall_data[pos.x-1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2)+1+4)%4] == False:
               	 if(wall_check(make_position(pos.x-1, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 800600e:	793b      	ldrb	r3, [r7, #4]
 8006010:	3b01      	subs	r3, #1
 8006012:	b2d8      	uxtb	r0, r3
 8006014:	7979      	ldrb	r1, [r7, #5]
 8006016:	78fb      	ldrb	r3, [r7, #3]
 8006018:	085b      	lsrs	r3, r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	461a      	mov	r2, r3
 800601e:	f7fb f829 	bl	8001074 <make_position>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 800602a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800602e:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8006032:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006036:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800603a:	2103      	movs	r1, #3
 800603c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800603e:	f7fb f877 	bl	8001130 <wall_check>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	f040 80d0 	bne.w	80061ea <turn_in_R135_expand+0x56c>
 800604a:	793b      	ldrb	r3, [r7, #4]
 800604c:	3b01      	subs	r3, #1
 800604e:	b2d8      	uxtb	r0, r3
 8006050:	7979      	ldrb	r1, [r7, #5]
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	085b      	lsrs	r3, r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	3305      	adds	r3, #5
 800605a:	425a      	negs	r2, r3
 800605c:	f003 0303 	and.w	r3, r3, #3
 8006060:	f002 0203 	and.w	r2, r2, #3
 8006064:	bf58      	it	pl
 8006066:	4253      	negpl	r3, r2
 8006068:	b2db      	uxtb	r3, r3
 800606a:	461a      	mov	r2, r3
 800606c:	f7fb f802 	bl	8001074 <make_position>
 8006070:	4603      	mov	r3, r0
 8006072:	461a      	mov	r2, r3
 8006074:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8006078:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800607c:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8006080:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006084:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006088:	2103      	movs	r1, #3
 800608a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800608c:	f7fb f850 	bl	8001130 <wall_check>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	f040 80a9 	bne.w	80061ea <turn_in_R135_expand+0x56c>
               	 {
						 next_pos.x = pos.x - 1;
 8006098:	793b      	ldrb	r3, [r7, #4]
 800609a:	3b01      	subs	r3, #1
 800609c:	b2db      	uxtb	r3, r3
 800609e:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y;
 80060a0:	797b      	ldrb	r3, [r7, #5]
 80060a2:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = south;
 80060a4:	2302      	movs	r3, #2
 80060a6:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80060ae:	e09c      	b.n	80061ea <turn_in_R135_expand+0x56c>
               	 }
                }
            }
        }
        else if(mouse_dir == West)
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	2b06      	cmp	r3, #6
 80060b4:	f040 8099 	bne.w	80061ea <turn_in_R135_expand+0x56c>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 80060b8:	793b      	ldrb	r3, [r7, #4]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f2c0 8094 	blt.w	80061ea <turn_in_R135_expand+0x56c>
 80060c2:	797b      	ldrb	r3, [r7, #5]
 80060c4:	3301      	adds	r3, #1
 80060c6:	2b1f      	cmp	r3, #31
 80060c8:	f300 808f 	bgt.w	80061ea <turn_in_R135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 80060cc:	7938      	ldrb	r0, [r7, #4]
 80060ce:	7979      	ldrb	r1, [r7, #5]
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	085b      	lsrs	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fa ffcc 	bl	8001074 <make_position>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80060e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80060e8:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 80060ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80060f0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80060f4:	2103      	movs	r1, #3
 80060f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80060f8:	f7fb f81a 	bl	8001130 <wall_check>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d173      	bne.n	80061ea <turn_in_R135_expand+0x56c>
 8006102:	793b      	ldrb	r3, [r7, #4]
 8006104:	3b01      	subs	r3, #1
 8006106:	b2d8      	uxtb	r0, r3
 8006108:	7979      	ldrb	r1, [r7, #5]
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	085b      	lsrs	r3, r3, #1
 800610e:	b2db      	uxtb	r3, r3
 8006110:	3305      	adds	r3, #5
 8006112:	425a      	negs	r2, r3
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	f002 0203 	and.w	r2, r2, #3
 800611c:	bf58      	it	pl
 800611e:	4253      	negpl	r3, r2
 8006120:	b2db      	uxtb	r3, r3
 8006122:	461a      	mov	r2, r3
 8006124:	f7fa ffa6 	bl	8001074 <make_position>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 8006130:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006134:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8006138:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800613c:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006140:	2103      	movs	r1, #3
 8006142:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006144:	f7fa fff4 	bl	8001130 <wall_check>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d14d      	bne.n	80061ea <turn_in_R135_expand+0x56c>
                {
               	 // if self.wall_data[pos.x][pos.y+1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2)+1+4)%4] == False:
               	 if(wall_check(make_position(pos.x, pos.y+1, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false )
 800614e:	7938      	ldrb	r0, [r7, #4]
 8006150:	797b      	ldrb	r3, [r7, #5]
 8006152:	3301      	adds	r3, #1
 8006154:	b2d9      	uxtb	r1, r3
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	b2db      	uxtb	r3, r3
 800615c:	461a      	mov	r2, r3
 800615e:	f7fa ff89 	bl	8001074 <make_position>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 800616a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800616e:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 8006172:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006176:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800617a:	2103      	movs	r1, #3
 800617c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800617e:	f7fa ffd7 	bl	8001130 <wall_check>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d130      	bne.n	80061ea <turn_in_R135_expand+0x56c>
 8006188:	7938      	ldrb	r0, [r7, #4]
 800618a:	797b      	ldrb	r3, [r7, #5]
 800618c:	3301      	adds	r3, #1
 800618e:	b2d9      	uxtb	r1, r3
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	085b      	lsrs	r3, r3, #1
 8006194:	b2db      	uxtb	r3, r3
 8006196:	3305      	adds	r3, #5
 8006198:	425a      	negs	r2, r3
 800619a:	f003 0303 	and.w	r3, r3, #3
 800619e:	f002 0203 	and.w	r2, r2, #3
 80061a2:	bf58      	it	pl
 80061a4:	4253      	negpl	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	f7fa ff63 	bl	8001074 <make_position>
 80061ae:	4603      	mov	r3, r0
 80061b0:	461a      	mov	r2, r3
 80061b2:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80061b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80061ba:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 80061be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80061c2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80061c6:	2103      	movs	r1, #3
 80061c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80061ca:	f7fa ffb1 	bl	8001130 <wall_check>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <turn_in_R135_expand+0x56c>
               	 {
               		 next_pos.x = pos.x;
 80061d4:	793b      	ldrb	r3, [r7, #4]
 80061d6:	753b      	strb	r3, [r7, #20]
               		 next_pos.y = pos.y + 1;
 80061d8:	797b      	ldrb	r3, [r7, #5]
 80061da:	3301      	adds	r3, #1
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	757b      	strb	r3, [r7, #21]
               		 next_pos.dir = west;
 80061e0:	2303      	movs	r3, #3
 80061e2:	75bb      	strb	r3, [r7, #22]
               		 update_flag = true;
 80061e4:	2301      	movs	r3, #1
 80061e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                }
            }
        }
    }

    if(update_flag == true)
 80061ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d13c      	bne.n	800626c <turn_in_R135_expand+0x5ee>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80061f2:	7d3b      	ldrb	r3, [r7, #20]
 80061f4:	7d79      	ldrb	r1, [r7, #21]
 80061f6:	7dba      	ldrb	r2, [r7, #22]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fa ff3b 	bl	8001074 <make_position>
 80061fe:	4603      	mov	r3, r0
 8006200:	461a      	mov	r2, r3
 8006202:	733a      	strb	r2, [r7, #12]
 8006204:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006208:	737a      	strb	r2, [r7, #13]
 800620a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800620e:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8006210:	6938      	ldr	r0, [r7, #16]
 8006212:	f7fd fe85 	bl	8003f20 <pos_run_time>
 8006216:	4603      	mov	r3, r0
 8006218:	461c      	mov	r4, r3
 800621a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd fdd9 	bl	8003dd8 <calc_time>
 8006226:	4603      	mov	r3, r0
 8006228:	4423      	add	r3, r4
 800622a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f7fd fe76 	bl	8003f20 <pos_run_time>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800623c:	4293      	cmp	r3, r2
 800623e:	d215      	bcs.n	800626c <turn_in_R135_expand+0x5ee>
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fe f923 	bl	800448c <is_determine>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10f      	bne.n	800626c <turn_in_R135_expand+0x5ee>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 800624c:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8006250:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006254:	2300      	movs	r3, #0
 8006256:	9302      	str	r3, [sp, #8]
 8006258:	2300      	movs	r3, #0
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	460b      	mov	r3, r1
 8006264:	6939      	ldr	r1, [r7, #16]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f7fb fbdc 	bl	8001a24 <close_list_set>
		}
    }
}
 800626c:	bf00      	nop
 800626e:	3764      	adds	r7, #100	; 0x64
 8006270:	46bd      	mov	sp, r7
 8006272:	bd90      	pop	{r4, r7, pc}

08006274 <turn_in_L135_expand>:

void turn_in_L135_expand(t_position pos,t_eight_dir mouse_dir)
{
 8006274:	b590      	push	{r4, r7, lr}
 8006276:	b09d      	sub	sp, #116	; 0x74
 8006278:	af04      	add	r7, sp, #16
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 3 + 8)%8;
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	3305      	adds	r3, #5
 8006284:	425a      	negs	r2, r3
 8006286:	f003 0307 	and.w	r3, r3, #7
 800628a:	f002 0207 	and.w	r2, r2, #7
 800628e:	bf58      	it	pl
 8006290:	4253      	negpl	r3, r2
 8006292:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8006296:	793b      	ldrb	r3, [r7, #4]
 8006298:	7979      	ldrb	r1, [r7, #5]
 800629a:	79ba      	ldrb	r2, [r7, #6]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa fee9 	bl	8001074 <make_position>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	753a      	strb	r2, [r7, #20]
 80062a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80062ac:	757a      	strb	r2, [r7, #21]
 80062ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80062b2:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 80062b4:	793b      	ldrb	r3, [r7, #4]
 80062b6:	7979      	ldrb	r1, [r7, #5]
 80062b8:	79ba      	ldrb	r2, [r7, #6]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fa feda 	bl	8001074 <make_position>
 80062c0:	4603      	mov	r3, r0
 80062c2:	461a      	mov	r2, r3
 80062c4:	743a      	strb	r2, [r7, #16]
 80062c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80062ca:	747a      	strb	r2, [r7, #17]
 80062cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80062d0:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 80062d2:	2300      	movs	r3, #0
 80062d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    t_run_pattern run_pt = Turn_in_L135;
 80062d8:	230c      	movs	r3, #12
 80062da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    if(pos.dir == center)
 80062de:	79bb      	ldrb	r3, [r7, #6]
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	f040 827d 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
    {
        if (mouse_dir == North)
 80062e6:	78fb      	ldrb	r3, [r7, #3]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f040 8098 	bne.w	800641e <turn_in_L135_expand+0x1aa>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 80062ee:	793b      	ldrb	r3, [r7, #4]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f2c0 8274 	blt.w	80067e0 <turn_in_L135_expand+0x56c>
 80062f8:	797b      	ldrb	r3, [r7, #5]
 80062fa:	3301      	adds	r3, #1
 80062fc:	2b1f      	cmp	r3, #31
 80062fe:	f300 826f 	bgt.w	80067e0 <turn_in_L135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8006302:	7938      	ldrb	r0, [r7, #4]
 8006304:	7979      	ldrb	r1, [r7, #5]
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	f7fa feb1 	bl	8001074 <make_position>
 8006312:	4603      	mov	r3, r0
 8006314:	461a      	mov	r2, r3
 8006316:	763a      	strb	r2, [r7, #24]
 8006318:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800631c:	767a      	strb	r2, [r7, #25]
 800631e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006322:	76bb      	strb	r3, [r7, #26]
 8006324:	2103      	movs	r1, #3
 8006326:	69b8      	ldr	r0, [r7, #24]
 8006328:	f7fa ff02 	bl	8001130 <wall_check>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 8256 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 8006334:	7938      	ldrb	r0, [r7, #4]
 8006336:	797b      	ldrb	r3, [r7, #5]
 8006338:	3301      	adds	r3, #1
 800633a:	b2d9      	uxtb	r1, r3
 800633c:	78fb      	ldrb	r3, [r7, #3]
 800633e:	085b      	lsrs	r3, r3, #1
 8006340:	b2db      	uxtb	r3, r3
 8006342:	3303      	adds	r3, #3
 8006344:	425a      	negs	r2, r3
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	f002 0203 	and.w	r2, r2, #3
 800634e:	bf58      	it	pl
 8006350:	4253      	negpl	r3, r2
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	f7fa fe8d 	bl	8001074 <make_position>
 800635a:	4603      	mov	r3, r0
 800635c:	461a      	mov	r2, r3
 800635e:	773a      	strb	r2, [r7, #28]
 8006360:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006364:	777a      	strb	r2, [r7, #29]
 8006366:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800636a:	77bb      	strb	r3, [r7, #30]
 800636c:	2103      	movs	r1, #3
 800636e:	69f8      	ldr	r0, [r7, #28]
 8006370:	f7fa fede 	bl	8001130 <wall_check>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	f040 8232 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                {
                	//if self.wall_data[pos.x-1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x-1, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 800637c:	793b      	ldrb	r3, [r7, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	b2d8      	uxtb	r0, r3
 8006382:	7979      	ldrb	r1, [r7, #5]
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	f7fa fe72 	bl	8001074 <make_position>
 8006390:	4603      	mov	r3, r0
 8006392:	461a      	mov	r2, r3
 8006394:	f887 2020 	strb.w	r2, [r7, #32]
 8006398:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800639c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80063a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80063a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063a8:	2103      	movs	r1, #3
 80063aa:	6a38      	ldr	r0, [r7, #32]
 80063ac:	f7fa fec0 	bl	8001130 <wall_check>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	f040 8214 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 80063b8:	793b      	ldrb	r3, [r7, #4]
 80063ba:	3b01      	subs	r3, #1
 80063bc:	b2d8      	uxtb	r0, r3
 80063be:	7979      	ldrb	r1, [r7, #5]
 80063c0:	78fb      	ldrb	r3, [r7, #3]
 80063c2:	085b      	lsrs	r3, r3, #1
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	3303      	adds	r3, #3
 80063c8:	425a      	negs	r2, r3
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	f002 0203 	and.w	r2, r2, #3
 80063d2:	bf58      	it	pl
 80063d4:	4253      	negpl	r3, r2
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	f7fa fe4b 	bl	8001074 <make_position>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80063e6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80063ea:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80063ee:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80063f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063f6:	2103      	movs	r1, #3
 80063f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063fa:	f7fa fe99 	bl	8001130 <wall_check>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	f040 81ed 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                	{
                		next_pos.x = pos.x - 1;
 8006406:	793b      	ldrb	r3, [r7, #4]
 8006408:	3b01      	subs	r3, #1
 800640a:	b2db      	uxtb	r3, r3
 800640c:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y;
 800640e:	797b      	ldrb	r3, [r7, #5]
 8006410:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = north;
 8006412:	2300      	movs	r3, #0
 8006414:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800641c:	e1e0      	b.n	80067e0 <turn_in_L135_expand+0x56c>
                	}
                }
            }
        }
        else if(mouse_dir == East)
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	2b02      	cmp	r3, #2
 8006422:	f040 809e 	bne.w	8006562 <turn_in_L135_expand+0x2ee>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8006426:	793b      	ldrb	r3, [r7, #4]
 8006428:	3301      	adds	r3, #1
 800642a:	2b1f      	cmp	r3, #31
 800642c:	f300 81d8 	bgt.w	80067e0 <turn_in_L135_expand+0x56c>
 8006430:	797b      	ldrb	r3, [r7, #5]
 8006432:	3301      	adds	r3, #1
 8006434:	2b1f      	cmp	r3, #31
 8006436:	f300 81d3 	bgt.w	80067e0 <turn_in_L135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 800643a:	7938      	ldrb	r0, [r7, #4]
 800643c:	7979      	ldrb	r1, [r7, #5]
 800643e:	78fb      	ldrb	r3, [r7, #3]
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	f7fa fe15 	bl	8001074 <make_position>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8006452:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006456:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 800645a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800645e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006462:	2103      	movs	r1, #3
 8006464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006466:	f7fa fe63 	bl	8001130 <wall_check>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 81b7 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 8006472:	793b      	ldrb	r3, [r7, #4]
 8006474:	3301      	adds	r3, #1
 8006476:	b2d8      	uxtb	r0, r3
 8006478:	7979      	ldrb	r1, [r7, #5]
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	085b      	lsrs	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	3303      	adds	r3, #3
 8006482:	425a      	negs	r2, r3
 8006484:	f003 0303 	and.w	r3, r3, #3
 8006488:	f002 0203 	and.w	r2, r2, #3
 800648c:	bf58      	it	pl
 800648e:	4253      	negpl	r3, r2
 8006490:	b2db      	uxtb	r3, r3
 8006492:	461a      	mov	r2, r3
 8006494:	f7fa fdee 	bl	8001074 <make_position>
 8006498:	4603      	mov	r3, r0
 800649a:	461a      	mov	r2, r3
 800649c:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80064a0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80064a4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80064a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80064ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80064b0:	2103      	movs	r1, #3
 80064b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b4:	f7fa fe3c 	bl	8001130 <wall_check>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f040 8190 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                {
                	//if self.wall_data[pos.x][pos.y+1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x, pos.y+1, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80064c0:	7938      	ldrb	r0, [r7, #4]
 80064c2:	797b      	ldrb	r3, [r7, #5]
 80064c4:	3301      	adds	r3, #1
 80064c6:	b2d9      	uxtb	r1, r3
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	085b      	lsrs	r3, r3, #1
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	f7fa fdd0 	bl	8001074 <make_position>
 80064d4:	4603      	mov	r3, r0
 80064d6:	461a      	mov	r2, r3
 80064d8:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 80064dc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80064e0:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 80064e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80064e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064ec:	2103      	movs	r1, #3
 80064ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064f0:	f7fa fe1e 	bl	8001130 <wall_check>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 8172 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 80064fc:	7938      	ldrb	r0, [r7, #4]
 80064fe:	797b      	ldrb	r3, [r7, #5]
 8006500:	3301      	adds	r3, #1
 8006502:	b2d9      	uxtb	r1, r3
 8006504:	78fb      	ldrb	r3, [r7, #3]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	b2db      	uxtb	r3, r3
 800650a:	3303      	adds	r3, #3
 800650c:	425a      	negs	r2, r3
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	f002 0203 	and.w	r2, r2, #3
 8006516:	bf58      	it	pl
 8006518:	4253      	negpl	r3, r2
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	f7fa fda9 	bl	8001074 <make_position>
 8006522:	4603      	mov	r3, r0
 8006524:	461a      	mov	r2, r3
 8006526:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 800652a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800652e:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8006532:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006536:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800653a:	2103      	movs	r1, #3
 800653c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800653e:	f7fa fdf7 	bl	8001130 <wall_check>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 814b 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                	{
						next_pos.x = pos.x;
 800654a:	793b      	ldrb	r3, [r7, #4]
 800654c:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y + 1;
 800654e:	797b      	ldrb	r3, [r7, #5]
 8006550:	3301      	adds	r3, #1
 8006552:	b2db      	uxtb	r3, r3
 8006554:	757b      	strb	r3, [r7, #21]
						next_pos.dir = east;
 8006556:	2301      	movs	r3, #1
 8006558:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 800655a:	2301      	movs	r3, #1
 800655c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006560:	e13e      	b.n	80067e0 <turn_in_L135_expand+0x56c>
                	}
                }
            }
        }
        else if(mouse_dir == South)
 8006562:	78fb      	ldrb	r3, [r7, #3]
 8006564:	2b04      	cmp	r3, #4
 8006566:	f040 809e 	bne.w	80066a6 <turn_in_L135_expand+0x432>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 800656a:	793b      	ldrb	r3, [r7, #4]
 800656c:	3301      	adds	r3, #1
 800656e:	2b1f      	cmp	r3, #31
 8006570:	f300 8136 	bgt.w	80067e0 <turn_in_L135_expand+0x56c>
 8006574:	797b      	ldrb	r3, [r7, #5]
 8006576:	3b01      	subs	r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	f2c0 8131 	blt.w	80067e0 <turn_in_L135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 800657e:	7938      	ldrb	r0, [r7, #4]
 8006580:	7979      	ldrb	r1, [r7, #5]
 8006582:	78fb      	ldrb	r3, [r7, #3]
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	f7fa fd73 	bl	8001074 <make_position>
 800658e:	4603      	mov	r3, r0
 8006590:	461a      	mov	r2, r3
 8006592:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8006596:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800659a:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 800659e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80065a2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80065a6:	2103      	movs	r1, #3
 80065a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80065aa:	f7fa fdc1 	bl	8001130 <wall_check>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 8115 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 80065b6:	7938      	ldrb	r0, [r7, #4]
 80065b8:	797b      	ldrb	r3, [r7, #5]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b2d9      	uxtb	r1, r3
 80065be:	78fb      	ldrb	r3, [r7, #3]
 80065c0:	085b      	lsrs	r3, r3, #1
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	3303      	adds	r3, #3
 80065c6:	425a      	negs	r2, r3
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	f002 0203 	and.w	r2, r2, #3
 80065d0:	bf58      	it	pl
 80065d2:	4253      	negpl	r3, r2
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	f7fa fd4c 	bl	8001074 <make_position>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80065e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80065e8:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80065ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80065f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80065f4:	2103      	movs	r1, #3
 80065f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065f8:	f7fa fd9a 	bl	8001130 <wall_check>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f040 80ee 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                {
                	//if self.wall_data[pos.x+1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x+1, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8006604:	793b      	ldrb	r3, [r7, #4]
 8006606:	3301      	adds	r3, #1
 8006608:	b2d8      	uxtb	r0, r3
 800660a:	7979      	ldrb	r1, [r7, #5]
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	f7fa fd2e 	bl	8001074 <make_position>
 8006618:	4603      	mov	r3, r0
 800661a:	461a      	mov	r2, r3
 800661c:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8006620:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006624:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8006628:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800662c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006630:	2103      	movs	r1, #3
 8006632:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006634:	f7fa fd7c 	bl	8001130 <wall_check>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	f040 80d0 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
 8006640:	793b      	ldrb	r3, [r7, #4]
 8006642:	3301      	adds	r3, #1
 8006644:	b2d8      	uxtb	r0, r3
 8006646:	7979      	ldrb	r1, [r7, #5]
 8006648:	78fb      	ldrb	r3, [r7, #3]
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	b2db      	uxtb	r3, r3
 800664e:	3303      	adds	r3, #3
 8006650:	425a      	negs	r2, r3
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	f002 0203 	and.w	r2, r2, #3
 800665a:	bf58      	it	pl
 800665c:	4253      	negpl	r3, r2
 800665e:	b2db      	uxtb	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	f7fa fd07 	bl	8001074 <make_position>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 800666e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006672:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8006676:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800667a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800667e:	2103      	movs	r1, #3
 8006680:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006682:	f7fa fd55 	bl	8001130 <wall_check>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	f040 80a9 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
                	{
						next_pos.x = pos.x + 1;
 800668e:	793b      	ldrb	r3, [r7, #4]
 8006690:	3301      	adds	r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 8006696:	797b      	ldrb	r3, [r7, #5]
 8006698:	757b      	strb	r3, [r7, #21]
						next_pos.dir = south;
 800669a:	2302      	movs	r3, #2
 800669c:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 800669e:	2301      	movs	r3, #1
 80066a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80066a4:	e09c      	b.n	80067e0 <turn_in_L135_expand+0x56c>
                	}
                }
            }
        }
        else if(mouse_dir == West)
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	2b06      	cmp	r3, #6
 80066aa:	f040 8099 	bne.w	80067e0 <turn_in_L135_expand+0x56c>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 80066ae:	793b      	ldrb	r3, [r7, #4]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f2c0 8094 	blt.w	80067e0 <turn_in_L135_expand+0x56c>
 80066b8:	797b      	ldrb	r3, [r7, #5]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f2c0 808f 	blt.w	80067e0 <turn_in_L135_expand+0x56c>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80066c2:	7938      	ldrb	r0, [r7, #4]
 80066c4:	7979      	ldrb	r1, [r7, #5]
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
 80066ce:	f7fa fcd1 	bl	8001074 <make_position>
 80066d2:	4603      	mov	r3, r0
 80066d4:	461a      	mov	r2, r3
 80066d6:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80066da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80066de:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 80066e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80066e6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80066ea:	2103      	movs	r1, #3
 80066ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80066ee:	f7fa fd1f 	bl	8001130 <wall_check>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d173      	bne.n	80067e0 <turn_in_L135_expand+0x56c>
 80066f8:	793b      	ldrb	r3, [r7, #4]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b2d8      	uxtb	r0, r3
 80066fe:	7979      	ldrb	r1, [r7, #5]
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	085b      	lsrs	r3, r3, #1
 8006704:	b2db      	uxtb	r3, r3
 8006706:	3303      	adds	r3, #3
 8006708:	425a      	negs	r2, r3
 800670a:	f003 0303 	and.w	r3, r3, #3
 800670e:	f002 0203 	and.w	r2, r2, #3
 8006712:	bf58      	it	pl
 8006714:	4253      	negpl	r3, r2
 8006716:	b2db      	uxtb	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	f7fa fcab 	bl	8001074 <make_position>
 800671e:	4603      	mov	r3, r0
 8006720:	461a      	mov	r2, r3
 8006722:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 8006726:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800672a:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 800672e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006732:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006736:	2103      	movs	r1, #3
 8006738:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800673a:	f7fa fcf9 	bl	8001130 <wall_check>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d14d      	bne.n	80067e0 <turn_in_L135_expand+0x56c>
                {
                	// if self.wall_data[pos.x][pos.y-1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x, pos.y-1, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8006744:	7938      	ldrb	r0, [r7, #4]
 8006746:	797b      	ldrb	r3, [r7, #5]
 8006748:	3b01      	subs	r3, #1
 800674a:	b2d9      	uxtb	r1, r3
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	b2db      	uxtb	r3, r3
 8006752:	461a      	mov	r2, r3
 8006754:	f7fa fc8e 	bl	8001074 <make_position>
 8006758:	4603      	mov	r3, r0
 800675a:	461a      	mov	r2, r3
 800675c:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 8006760:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006764:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 8006768:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800676c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006770:	2103      	movs	r1, #3
 8006772:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006774:	f7fa fcdc 	bl	8001130 <wall_check>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d130      	bne.n	80067e0 <turn_in_L135_expand+0x56c>
 800677e:	7938      	ldrb	r0, [r7, #4]
 8006780:	797b      	ldrb	r3, [r7, #5]
 8006782:	3b01      	subs	r3, #1
 8006784:	b2d9      	uxtb	r1, r3
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	085b      	lsrs	r3, r3, #1
 800678a:	b2db      	uxtb	r3, r3
 800678c:	3303      	adds	r3, #3
 800678e:	425a      	negs	r2, r3
 8006790:	f003 0303 	and.w	r3, r3, #3
 8006794:	f002 0203 	and.w	r2, r2, #3
 8006798:	bf58      	it	pl
 800679a:	4253      	negpl	r3, r2
 800679c:	b2db      	uxtb	r3, r3
 800679e:	461a      	mov	r2, r3
 80067a0:	f7fa fc68 	bl	8001074 <make_position>
 80067a4:	4603      	mov	r3, r0
 80067a6:	461a      	mov	r2, r3
 80067a8:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80067ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80067b0:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 80067b4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80067b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80067bc:	2103      	movs	r1, #3
 80067be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80067c0:	f7fa fcb6 	bl	8001130 <wall_check>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10a      	bne.n	80067e0 <turn_in_L135_expand+0x56c>
                	{
                		next_pos.x = pos.x;
 80067ca:	793b      	ldrb	r3, [r7, #4]
 80067cc:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y - 1;
 80067ce:	797b      	ldrb	r3, [r7, #5]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = west;
 80067d6:	2303      	movs	r3, #3
 80067d8:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                }
            }
        }
    }

    if(update_flag == true)
 80067e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d13c      	bne.n	8006862 <turn_in_L135_expand+0x5ee>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80067e8:	7d3b      	ldrb	r3, [r7, #20]
 80067ea:	7d79      	ldrb	r1, [r7, #21]
 80067ec:	7dba      	ldrb	r2, [r7, #22]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f7fa fc40 	bl	8001074 <make_position>
 80067f4:	4603      	mov	r3, r0
 80067f6:	461a      	mov	r2, r3
 80067f8:	733a      	strb	r2, [r7, #12]
 80067fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80067fe:	737a      	strb	r2, [r7, #13]
 8006800:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006804:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8006806:	6938      	ldr	r0, [r7, #16]
 8006808:	f7fd fb8a 	bl	8003f20 <pos_run_time>
 800680c:	4603      	mov	r3, r0
 800680e:	461c      	mov	r4, r3
 8006810:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006814:	2100      	movs	r1, #0
 8006816:	4618      	mov	r0, r3
 8006818:	f7fd fade 	bl	8003dd8 <calc_time>
 800681c:	4603      	mov	r3, r0
 800681e:	4423      	add	r3, r4
 8006820:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7fd fb7b 	bl	8003f20 <pos_run_time>
 800682a:	4603      	mov	r3, r0
 800682c:	461a      	mov	r2, r3
 800682e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006832:	4293      	cmp	r3, r2
 8006834:	d215      	bcs.n	8006862 <turn_in_L135_expand+0x5ee>
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7fd fe28 	bl	800448c <is_determine>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <turn_in_L135_expand+0x5ee>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8006842:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8006846:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800684a:	2300      	movs	r3, #0
 800684c:	9302      	str	r3, [sp, #8]
 800684e:	2300      	movs	r3, #0
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006856:	9300      	str	r3, [sp, #0]
 8006858:	460b      	mov	r3, r1
 800685a:	6939      	ldr	r1, [r7, #16]
 800685c:	68f8      	ldr	r0, [r7, #12]
 800685e:	f7fb f8e1 	bl	8001a24 <close_list_set>
		}
    }
}
 8006862:	bf00      	nop
 8006864:	3764      	adds	r7, #100	; 0x64
 8006866:	46bd      	mov	sp, r7
 8006868:	bd90      	pop	{r4, r7, pc}

0800686a <turn_out_R135_expand>:

void turn_out_R135_expand(t_position pos,t_eight_dir mouse_dir)
{
 800686a:	b590      	push	{r4, r7, lr}
 800686c:	b09d      	sub	sp, #116	; 0x74
 800686e:	af04      	add	r7, sp, #16
 8006870:	6078      	str	r0, [r7, #4]
 8006872:	460b      	mov	r3, r1
 8006874:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 3 + 8)%8;
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	330b      	adds	r3, #11
 800687a:	425a      	negs	r2, r3
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	f002 0207 	and.w	r2, r2, #7
 8006884:	bf58      	it	pl
 8006886:	4253      	negpl	r3, r2
 8006888:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 800688c:	793b      	ldrb	r3, [r7, #4]
 800688e:	7979      	ldrb	r1, [r7, #5]
 8006890:	79ba      	ldrb	r2, [r7, #6]
 8006892:	4618      	mov	r0, r3
 8006894:	f7fa fbee 	bl	8001074 <make_position>
 8006898:	4603      	mov	r3, r0
 800689a:	461a      	mov	r2, r3
 800689c:	753a      	strb	r2, [r7, #20]
 800689e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80068a2:	757a      	strb	r2, [r7, #21]
 80068a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80068a8:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 80068aa:	793b      	ldrb	r3, [r7, #4]
 80068ac:	7979      	ldrb	r1, [r7, #5]
 80068ae:	79ba      	ldrb	r2, [r7, #6]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fa fbdf 	bl	8001074 <make_position>
 80068b6:	4603      	mov	r3, r0
 80068b8:	461a      	mov	r2, r3
 80068ba:	743a      	strb	r2, [r7, #16]
 80068bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80068c0:	747a      	strb	r2, [r7, #17]
 80068c2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80068c6:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 80068c8:	2300      	movs	r3, #0
 80068ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    t_run_pattern run_pt = Turn_out_R135;
 80068ce:	230d      	movs	r3, #13
 80068d0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    if(pos.dir == north)
 80068d4:	79bb      	ldrb	r3, [r7, #6]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f040 809f 	bne.w	8006a1a <turn_out_R135_expand+0x1b0>
    {
    	if(mouse_dir == NorthEast)
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d149      	bne.n	8006976 <turn_out_R135_expand+0x10c>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 80068e2:	793b      	ldrb	r3, [r7, #4]
 80068e4:	3301      	adds	r3, #1
 80068e6:	2b1f      	cmp	r3, #31
 80068e8:	f300 828a 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
 80068ec:	797b      	ldrb	r3, [r7, #5]
 80068ee:	3301      	adds	r3, #1
 80068f0:	2b1f      	cmp	r3, #31
 80068f2:	f300 8285 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
    			//if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.West] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.North] == False:
                if( wall_check(make_position(pos.x+1,pos.y + 1,west),0x03) == false && wall_check(make_position(pos.x+1,pos.y,north),0x03) == false)
 80068f6:	793b      	ldrb	r3, [r7, #4]
 80068f8:	3301      	adds	r3, #1
 80068fa:	b2d8      	uxtb	r0, r3
 80068fc:	797b      	ldrb	r3, [r7, #5]
 80068fe:	3301      	adds	r3, #1
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2203      	movs	r2, #3
 8006904:	4619      	mov	r1, r3
 8006906:	f7fa fbb5 	bl	8001074 <make_position>
 800690a:	4603      	mov	r3, r0
 800690c:	461a      	mov	r2, r3
 800690e:	763a      	strb	r2, [r7, #24]
 8006910:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006914:	767a      	strb	r2, [r7, #25]
 8006916:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800691a:	76bb      	strb	r3, [r7, #26]
 800691c:	2103      	movs	r1, #3
 800691e:	69b8      	ldr	r0, [r7, #24]
 8006920:	f7fa fc06 	bl	8001130 <wall_check>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	f040 826a 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 800692c:	793b      	ldrb	r3, [r7, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	b2db      	uxtb	r3, r3
 8006932:	7979      	ldrb	r1, [r7, #5]
 8006934:	2200      	movs	r2, #0
 8006936:	4618      	mov	r0, r3
 8006938:	f7fa fb9c 	bl	8001074 <make_position>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	773a      	strb	r2, [r7, #28]
 8006942:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006946:	777a      	strb	r2, [r7, #29]
 8006948:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800694c:	77bb      	strb	r3, [r7, #30]
 800694e:	2103      	movs	r1, #3
 8006950:	69f8      	ldr	r0, [r7, #28]
 8006952:	f7fa fbed 	bl	8001130 <wall_check>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	f040 8251 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
					next_pos.x = pos.x + 1;
 800695e:	793b      	ldrb	r3, [r7, #4]
 8006960:	3301      	adds	r3, #1
 8006962:	b2db      	uxtb	r3, r3
 8006964:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 8006966:	797b      	ldrb	r3, [r7, #5]
 8006968:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 800696a:	2304      	movs	r3, #4
 800696c:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006974:	e244      	b.n	8006e00 <turn_out_R135_expand+0x596>
                }
    		}
    	}
    	else if(mouse_dir == SouthWest)
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	2b05      	cmp	r3, #5
 800697a:	f040 8241 	bne.w	8006e00 <turn_out_R135_expand+0x596>
    	{
    		if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 800697e:	793b      	ldrb	r3, [r7, #4]
 8006980:	3b01      	subs	r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	f2c0 823c 	blt.w	8006e00 <turn_out_R135_expand+0x596>
 8006988:	797b      	ldrb	r3, [r7, #5]
 800698a:	3301      	adds	r3, #1
 800698c:	2b1f      	cmp	r3, #31
 800698e:	f300 8237 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False and  self.wall_data[pos.x-1][pos.y][Node_pos_dir.North] == False:
                if( wall_check(make_position(pos.x,pos.y,west),0x03) == false && wall_check(make_position(pos.x-1,pos.y,north),0x03) == false)
 8006992:	793b      	ldrb	r3, [r7, #4]
 8006994:	7979      	ldrb	r1, [r7, #5]
 8006996:	2203      	movs	r2, #3
 8006998:	4618      	mov	r0, r3
 800699a:	f7fa fb6b 	bl	8001074 <make_position>
 800699e:	4603      	mov	r3, r0
 80069a0:	461a      	mov	r2, r3
 80069a2:	f887 2020 	strb.w	r2, [r7, #32]
 80069a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80069aa:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80069ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80069b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069b6:	2103      	movs	r1, #3
 80069b8:	6a38      	ldr	r0, [r7, #32]
 80069ba:	f7fa fbb9 	bl	8001130 <wall_check>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f040 821d 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 80069c6:	793b      	ldrb	r3, [r7, #4]
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	7979      	ldrb	r1, [r7, #5]
 80069ce:	2200      	movs	r2, #0
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fa fb4f 	bl	8001074 <make_position>
 80069d6:	4603      	mov	r3, r0
 80069d8:	461a      	mov	r2, r3
 80069da:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80069de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80069e2:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80069e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80069ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80069ee:	2103      	movs	r1, #3
 80069f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069f2:	f7fa fb9d 	bl	8001130 <wall_check>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f040 8201 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
					next_pos.x = pos.x - 1;
 80069fe:	793b      	ldrb	r3, [r7, #4]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8006a06:	797b      	ldrb	r3, [r7, #5]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8006a0e:	2304      	movs	r3, #4
 8006a10:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006a18:	e1f2      	b.n	8006e00 <turn_out_R135_expand+0x596>
                }
    		}
    	}
    }
    else if(pos.dir == east)
 8006a1a:	79bb      	ldrb	r3, [r7, #6]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	f040 80a5 	bne.w	8006b6c <turn_out_R135_expand+0x302>
    {
    	if(mouse_dir == NorthWest)
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	2b07      	cmp	r3, #7
 8006a26:	d14d      	bne.n	8006ac4 <turn_out_R135_expand+0x25a>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8006a28:	793b      	ldrb	r3, [r7, #4]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	2b1f      	cmp	r3, #31
 8006a2e:	f300 81e7 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
 8006a32:	797b      	ldrb	r3, [r7, #5]
 8006a34:	3301      	adds	r3, #1
 8006a36:	2b1f      	cmp	r3, #31
 8006a38:	f300 81e2 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y + 1][Node_pos_dir.East] == False :
    			if( wall_check(make_position(pos.x,pos.y,north),0x03) == false && wall_check(make_position(pos.x,pos.y + 1,east),0x03) == false)
 8006a3c:	793b      	ldrb	r3, [r7, #4]
 8006a3e:	7979      	ldrb	r1, [r7, #5]
 8006a40:	2200      	movs	r2, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fa fb16 	bl	8001074 <make_position>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8006a50:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006a54:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8006a58:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006a5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006a60:	2103      	movs	r1, #3
 8006a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a64:	f7fa fb64 	bl	8001130 <wall_check>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 81c8 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 8006a70:	7938      	ldrb	r0, [r7, #4]
 8006a72:	797b      	ldrb	r3, [r7, #5]
 8006a74:	3301      	adds	r3, #1
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	2201      	movs	r2, #1
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7fa fafa 	bl	8001074 <make_position>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8006a88:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006a8c:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8006a90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006a94:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a98:	2103      	movs	r1, #3
 8006a9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a9c:	f7fa fb48 	bl	8001130 <wall_check>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 81ac 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
    				next_pos.x = pos.x + 1;
 8006aa8:	793b      	ldrb	r3, [r7, #4]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8006ab0:	797b      	ldrb	r3, [r7, #5]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8006ab8:	2304      	movs	r3, #4
 8006aba:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 8006abc:	2301      	movs	r3, #1
 8006abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ac2:	e19d      	b.n	8006e00 <turn_out_R135_expand+0x596>

                }
    		}
    	}
    	else if(mouse_dir == SouthEast)
 8006ac4:	78fb      	ldrb	r3, [r7, #3]
 8006ac6:	2b03      	cmp	r3, #3
 8006ac8:	f040 819a 	bne.w	8006e00 <turn_out_R135_expand+0x596>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0){
 8006acc:	793b      	ldrb	r3, [r7, #4]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	2b1f      	cmp	r3, #31
 8006ad2:	f300 8195 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
 8006ad6:	797b      	ldrb	r3, [r7, #5]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f2c0 8190 	blt.w	8006e00 <turn_out_R135_expand+0x596>
                //if self.wall_data[pos.x+1][pos.y - 1][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y - 1][Node_pos_dir.East] == False:
    			if( wall_check(make_position(pos.x+1,pos.y-1,north),0x03) == false && wall_check(make_position(pos.x,pos.y - 1,east),0x03) == false)
 8006ae0:	793b      	ldrb	r3, [r7, #4]
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	b2d8      	uxtb	r0, r3
 8006ae6:	797b      	ldrb	r3, [r7, #5]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2200      	movs	r2, #0
 8006aee:	4619      	mov	r1, r3
 8006af0:	f7fa fac0 	bl	8001074 <make_position>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8006afc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b00:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8006b04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006b08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006b0c:	2103      	movs	r1, #3
 8006b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b10:	f7fa fb0e 	bl	8001130 <wall_check>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f040 8172 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 8006b1c:	7938      	ldrb	r0, [r7, #4]
 8006b1e:	797b      	ldrb	r3, [r7, #5]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2201      	movs	r2, #1
 8006b26:	4619      	mov	r1, r3
 8006b28:	f7fa faa4 	bl	8001074 <make_position>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8006b34:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b38:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8006b3c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006b40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8006b44:	2103      	movs	r1, #3
 8006b46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006b48:	f7fa faf2 	bl	8001130 <wall_check>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f040 8156 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
					next_pos.x = pos.x;
 8006b54:	793b      	ldrb	r3, [r7, #4]
 8006b56:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8006b58:	797b      	ldrb	r3, [r7, #5]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8006b60:	2304      	movs	r3, #4
 8006b62:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 8006b64:	2301      	movs	r3, #1
 8006b66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006b6a:	e149      	b.n	8006e00 <turn_out_R135_expand+0x596>
                }
    		}
    	}
    }
    else if(pos.dir == south)
 8006b6c:	79bb      	ldrb	r3, [r7, #6]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	f040 80a5 	bne.w	8006cbe <turn_out_R135_expand+0x454>
    {
    	if(mouse_dir == NorthEast)
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d14d      	bne.n	8006c16 <turn_out_R135_expand+0x3ac>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8006b7a:	793b      	ldrb	r3, [r7, #4]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	2b1f      	cmp	r3, #31
 8006b80:	f300 813e 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
 8006b84:	797b      	ldrb	r3, [r7, #5]
 8006b86:	3b01      	subs	r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f2c0 8139 	blt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
    			// if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.South]:
    			if( wall_check(make_position(pos.x,pos.y,east),0x03) == false && wall_check(make_position(pos.x+1,pos.y,south),0x03) == false)
 8006b8e:	793b      	ldrb	r3, [r7, #4]
 8006b90:	7979      	ldrb	r1, [r7, #5]
 8006b92:	2201      	movs	r2, #1
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fa fa6d 	bl	8001074 <make_position>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8006ba2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006ba6:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8006baa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006bae:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8006bb2:	2103      	movs	r1, #3
 8006bb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bb6:	f7fa fabb 	bl	8001130 <wall_check>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f040 811f 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 8006bc2:	793b      	ldrb	r3, [r7, #4]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	7979      	ldrb	r1, [r7, #5]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7fa fa51 	bl	8001074 <make_position>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8006bda:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006bde:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8006be2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006be6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8006bea:	2103      	movs	r1, #3
 8006bec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006bee:	f7fa fa9f 	bl	8001130 <wall_check>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f040 8103 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
					next_pos.x = pos.x + 1;
 8006bfa:	793b      	ldrb	r3, [r7, #4]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8006c02:	797b      	ldrb	r3, [r7, #5]
 8006c04:	3b01      	subs	r3, #1
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8006c0a:	2304      	movs	r3, #4
 8006c0c:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006c14:	e0f4      	b.n	8006e00 <turn_out_R135_expand+0x596>
                }
    		}
    	}
    	else if(mouse_dir == SouthWest)
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	f040 80f1 	bne.w	8006e00 <turn_out_R135_expand+0x596>
    	{
    		if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8006c1e:	793b      	ldrb	r3, [r7, #4]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f2c0 80ec 	blt.w	8006e00 <turn_out_R135_expand+0x596>
 8006c28:	797b      	ldrb	r3, [r7, #5]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f2c0 80e7 	blt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
    			//if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.East] == False and self.wall_data[pos.x-1][pos.y][Node_pos_dir.South] == False:
    			if( wall_check(make_position(pos.x-1,pos.y-1,east),0x03) == false && wall_check(make_position(pos.x-1,pos.y,south),0x03) == false)
 8006c32:	793b      	ldrb	r3, [r7, #4]
 8006c34:	3b01      	subs	r3, #1
 8006c36:	b2d8      	uxtb	r0, r3
 8006c38:	797b      	ldrb	r3, [r7, #5]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2201      	movs	r2, #1
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7fa fa17 	bl	8001074 <make_position>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8006c4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006c52:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8006c56:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006c5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c5e:	2103      	movs	r1, #3
 8006c60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006c62:	f7fa fa65 	bl	8001130 <wall_check>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 80c9 	bne.w	8006e00 <turn_out_R135_expand+0x596>
 8006c6e:	793b      	ldrb	r3, [r7, #4]
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	7979      	ldrb	r1, [r7, #5]
 8006c76:	2202      	movs	r2, #2
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fa f9fb 	bl	8001074 <make_position>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	461a      	mov	r2, r3
 8006c82:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8006c86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006c8a:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8006c8e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006c92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8006c96:	2103      	movs	r1, #3
 8006c98:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006c9a:	f7fa fa49 	bl	8001130 <wall_check>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 80ad 	bne.w	8006e00 <turn_out_R135_expand+0x596>
                {
					next_pos.x = pos.x - 1;
 8006ca6:	793b      	ldrb	r3, [r7, #4]
 8006ca8:	3b01      	subs	r3, #1
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 8006cae:	797b      	ldrb	r3, [r7, #5]
 8006cb0:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8006cb2:	2304      	movs	r3, #4
 8006cb4:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006cbc:	e0a0      	b.n	8006e00 <turn_out_R135_expand+0x596>
                }
    		}
    	}
    }
    else if(pos.dir == west)
 8006cbe:	79bb      	ldrb	r3, [r7, #6]
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	f040 809d 	bne.w	8006e00 <turn_out_R135_expand+0x596>
    {
    	if(mouse_dir == NorthWest)
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	2b07      	cmp	r3, #7
 8006cca:	d14d      	bne.n	8006d68 <turn_out_R135_expand+0x4fe>
    	{
    		if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8006ccc:	793b      	ldrb	r3, [r7, #4]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f2c0 8095 	blt.w	8006e00 <turn_out_R135_expand+0x596>
 8006cd6:	797b      	ldrb	r3, [r7, #5]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	2b1f      	cmp	r3, #31
 8006cdc:	f300 8090 	bgt.w	8006e00 <turn_out_R135_expand+0x596>
    		{
    			//if self.wall_data[pos.x-1][pos.y+1][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y+1][Node_pos_dir.West]:
    			if( wall_check(make_position(pos.x-1,pos.y+1,south),0x03) == false && wall_check(make_position(pos.x,pos.y+1,west),0x03) == false)
 8006ce0:	793b      	ldrb	r3, [r7, #4]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b2d8      	uxtb	r0, r3
 8006ce6:	797b      	ldrb	r3, [r7, #5]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2202      	movs	r2, #2
 8006cee:	4619      	mov	r1, r3
 8006cf0:	f7fa f9c0 	bl	8001074 <make_position>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8006cfc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006d00:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 8006d04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006d08:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8006d0c:	2103      	movs	r1, #3
 8006d0e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006d10:	f7fa fa0e 	bl	8001130 <wall_check>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d172      	bne.n	8006e00 <turn_out_R135_expand+0x596>
 8006d1a:	7938      	ldrb	r0, [r7, #4]
 8006d1c:	797b      	ldrb	r3, [r7, #5]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2203      	movs	r2, #3
 8006d24:	4619      	mov	r1, r3
 8006d26:	f7fa f9a5 	bl	8001074 <make_position>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 8006d32:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006d36:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8006d3a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006d3e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8006d42:	2103      	movs	r1, #3
 8006d44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006d46:	f7fa f9f3 	bl	8001130 <wall_check>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d157      	bne.n	8006e00 <turn_out_R135_expand+0x596>
    			{
                	next_pos.x = pos.x;
 8006d50:	793b      	ldrb	r3, [r7, #4]
 8006d52:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8006d54:	797b      	ldrb	r3, [r7, #5]
 8006d56:	3301      	adds	r3, #1
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	757b      	strb	r3, [r7, #21]
                	next_pos.dir = center;
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	75bb      	strb	r3, [r7, #22]
                	update_flag = true;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006d66:	e04b      	b.n	8006e00 <turn_out_R135_expand+0x596>

    			}
    		}
    	}
    	else if(mouse_dir == SouthEast)
 8006d68:	78fb      	ldrb	r3, [r7, #3]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d148      	bne.n	8006e00 <turn_out_R135_expand+0x596>
    	{
    		if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8006d6e:	793b      	ldrb	r3, [r7, #4]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	db44      	blt.n	8006e00 <turn_out_R135_expand+0x596>
 8006d76:	797b      	ldrb	r3, [r7, #5]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	db40      	blt.n	8006e00 <turn_out_R135_expand+0x596>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.West] :
    			if( wall_check(make_position(pos.x,pos.y,south),0x03) == false && wall_check(make_position(pos.x,pos.y-1,west),0x03) == false)
 8006d7e:	793b      	ldrb	r3, [r7, #4]
 8006d80:	7979      	ldrb	r1, [r7, #5]
 8006d82:	2202      	movs	r2, #2
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fa f975 	bl	8001074 <make_position>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 8006d92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006d96:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 8006d9a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006d9e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8006da2:	2103      	movs	r1, #3
 8006da4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006da6:	f7fa f9c3 	bl	8001130 <wall_check>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d127      	bne.n	8006e00 <turn_out_R135_expand+0x596>
 8006db0:	7938      	ldrb	r0, [r7, #4]
 8006db2:	797b      	ldrb	r3, [r7, #5]
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2203      	movs	r2, #3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	f7fa f95a 	bl	8001074 <make_position>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8006dc8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006dcc:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 8006dd0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006dd4:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8006dd8:	2103      	movs	r1, #3
 8006dda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006ddc:	f7fa f9a8 	bl	8001130 <wall_check>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10c      	bne.n	8006e00 <turn_out_R135_expand+0x596>
    			{
                	next_pos.x = pos.x - 1;
 8006de6:	793b      	ldrb	r3, [r7, #4]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 8006dee:	797b      	ldrb	r3, [r7, #5]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	757b      	strb	r3, [r7, #21]
                	next_pos.dir = center;
 8006df6:	2304      	movs	r3, #4
 8006df8:	75bb      	strb	r3, [r7, #22]
                	update_flag = true;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    			}
    		}
    	}
    }

    if(update_flag == true)
 8006e00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d13c      	bne.n	8006e82 <turn_out_R135_expand+0x618>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8006e08:	7d3b      	ldrb	r3, [r7, #20]
 8006e0a:	7d79      	ldrb	r1, [r7, #21]
 8006e0c:	7dba      	ldrb	r2, [r7, #22]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f7fa f930 	bl	8001074 <make_position>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	733a      	strb	r2, [r7, #12]
 8006e1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006e1e:	737a      	strb	r2, [r7, #13]
 8006e20:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006e24:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8006e26:	6938      	ldr	r0, [r7, #16]
 8006e28:	f7fd f87a 	bl	8003f20 <pos_run_time>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	461c      	mov	r4, r3
 8006e30:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e34:	2100      	movs	r1, #0
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7fc ffce 	bl	8003dd8 <calc_time>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4423      	add	r3, r4
 8006e40:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7fd f86b 	bl	8003f20 <pos_run_time>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d215      	bcs.n	8006e82 <turn_out_R135_expand+0x618>
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f7fd fb18 	bl	800448c <is_determine>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10f      	bne.n	8006e82 <turn_out_R135_expand+0x618>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8006e62:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8006e66:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	9302      	str	r3, [sp, #8]
 8006e6e:	2300      	movs	r3, #0
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	6939      	ldr	r1, [r7, #16]
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7fa fdd1 	bl	8001a24 <close_list_set>
		}
    }
}
 8006e82:	bf00      	nop
 8006e84:	3764      	adds	r7, #100	; 0x64
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd90      	pop	{r4, r7, pc}

08006e8a <turn_out_L135_expand>:

void turn_out_L135_expand(t_position pos,t_eight_dir mouse_dir)
{
 8006e8a:	b590      	push	{r4, r7, lr}
 8006e8c:	b09d      	sub	sp, #116	; 0x74
 8006e8e:	af04      	add	r7, sp, #16
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 3 + 8)%8;
 8006e96:	78fb      	ldrb	r3, [r7, #3]
 8006e98:	3305      	adds	r3, #5
 8006e9a:	425a      	negs	r2, r3
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	f002 0207 	and.w	r2, r2, #7
 8006ea4:	bf58      	it	pl
 8006ea6:	4253      	negpl	r3, r2
 8006ea8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8006eac:	793b      	ldrb	r3, [r7, #4]
 8006eae:	7979      	ldrb	r1, [r7, #5]
 8006eb0:	79ba      	ldrb	r2, [r7, #6]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fa f8de 	bl	8001074 <make_position>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	461a      	mov	r2, r3
 8006ebc:	753a      	strb	r2, [r7, #20]
 8006ebe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006ec2:	757a      	strb	r2, [r7, #21]
 8006ec4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006ec8:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8006eca:	793b      	ldrb	r3, [r7, #4]
 8006ecc:	7979      	ldrb	r1, [r7, #5]
 8006ece:	79ba      	ldrb	r2, [r7, #6]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7fa f8cf 	bl	8001074 <make_position>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	743a      	strb	r2, [r7, #16]
 8006edc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006ee0:	747a      	strb	r2, [r7, #17]
 8006ee2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006ee6:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    t_run_pattern run_pt = Turn_out_L135;
 8006eee:	230e      	movs	r3, #14
 8006ef0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

    if(pos.dir == north)
 8006ef4:	79bb      	ldrb	r3, [r7, #6]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f040 809f 	bne.w	800703a <turn_out_L135_expand+0x1b0>
    {
    	if(mouse_dir == NorthWest)
 8006efc:	78fb      	ldrb	r3, [r7, #3]
 8006efe:	2b07      	cmp	r3, #7
 8006f00:	d149      	bne.n	8006f96 <turn_out_L135_expand+0x10c>
    	{
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8006f02:	793b      	ldrb	r3, [r7, #4]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f2c0 828a 	blt.w	8007420 <turn_out_L135_expand+0x596>
 8006f0c:	797b      	ldrb	r3, [r7, #5]
 8006f0e:	3301      	adds	r3, #1
 8006f10:	2b1f      	cmp	r3, #31
 8006f12:	f300 8285 	bgt.w	8007420 <turn_out_L135_expand+0x596>
            {
				//if self.wall_data[pos.x - 1][pos.y + 1][Node_pos_dir.East] == False and  self.wall_data[pos.x - 1][pos.y][Node_pos_dir.North] == False:
				if( wall_check(make_position(pos.x-1,pos.y+1,east),0x03) == false && wall_check(make_position(pos.x-1,pos.y,north),0x03) == false)
 8006f16:	793b      	ldrb	r3, [r7, #4]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b2d8      	uxtb	r0, r3
 8006f1c:	797b      	ldrb	r3, [r7, #5]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2201      	movs	r2, #1
 8006f24:	4619      	mov	r1, r3
 8006f26:	f7fa f8a5 	bl	8001074 <make_position>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	763a      	strb	r2, [r7, #24]
 8006f30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006f34:	767a      	strb	r2, [r7, #25]
 8006f36:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006f3a:	76bb      	strb	r3, [r7, #26]
 8006f3c:	2103      	movs	r1, #3
 8006f3e:	69b8      	ldr	r0, [r7, #24]
 8006f40:	f7fa f8f6 	bl	8001130 <wall_check>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f040 826a 	bne.w	8007420 <turn_out_L135_expand+0x596>
 8006f4c:	793b      	ldrb	r3, [r7, #4]
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	7979      	ldrb	r1, [r7, #5]
 8006f54:	2200      	movs	r2, #0
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fa f88c 	bl	8001074 <make_position>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	461a      	mov	r2, r3
 8006f60:	773a      	strb	r2, [r7, #28]
 8006f62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006f66:	777a      	strb	r2, [r7, #29]
 8006f68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006f6c:	77bb      	strb	r3, [r7, #30]
 8006f6e:	2103      	movs	r1, #3
 8006f70:	69f8      	ldr	r0, [r7, #28]
 8006f72:	f7fa f8dd 	bl	8001130 <wall_check>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f040 8251 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
					next_pos.x = pos.x - 1;
 8006f7e:	793b      	ldrb	r3, [r7, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y;
 8006f86:	797b      	ldrb	r3, [r7, #5]
 8006f88:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 8006f8a:	2304      	movs	r3, #4
 8006f8c:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f94:	e244      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
            }
    	}
    	else if(mouse_dir == SouthEast)
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	f040 8241 	bne.w	8007420 <turn_out_L135_expand+0x596>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8006f9e:	793b      	ldrb	r3, [r7, #4]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	2b1f      	cmp	r3, #31
 8006fa4:	f300 823c 	bgt.w	8007420 <turn_out_L135_expand+0x596>
 8006fa8:	797b      	ldrb	r3, [r7, #5]
 8006faa:	3301      	adds	r3, #1
 8006fac:	2b1f      	cmp	r3, #31
 8006fae:	f300 8237 	bgt.w	8007420 <turn_out_L135_expand+0x596>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False and  self.wall_data[pos.x+1][pos.y][Node_pos_dir.North] == False:
				if( wall_check(make_position(pos.x,pos.y,east),0x03) == false && wall_check(make_position(pos.x+1,pos.y,north),0x03) == false)
 8006fb2:	793b      	ldrb	r3, [r7, #4]
 8006fb4:	7979      	ldrb	r1, [r7, #5]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fa f85b 	bl	8001074 <make_position>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	f887 2020 	strb.w	r2, [r7, #32]
 8006fc6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006fca:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8006fce:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8006fd2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006fd6:	2103      	movs	r1, #3
 8006fd8:	6a38      	ldr	r0, [r7, #32]
 8006fda:	f7fa f8a9 	bl	8001130 <wall_check>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f040 821d 	bne.w	8007420 <turn_out_L135_expand+0x596>
 8006fe6:	793b      	ldrb	r3, [r7, #4]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2db      	uxtb	r3, r3
 8006fec:	7979      	ldrb	r1, [r7, #5]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fa f83f 	bl	8001074 <make_position>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8006ffe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007002:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8007006:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800700a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800700e:	2103      	movs	r1, #3
 8007010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007012:	f7fa f88d 	bl	8001130 <wall_check>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 8201 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
					next_pos.x = pos.x + 1;
 800701e:	793b      	ldrb	r3, [r7, #4]
 8007020:	3301      	adds	r3, #1
 8007022:	b2db      	uxtb	r3, r3
 8007024:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y + 1;
 8007026:	797b      	ldrb	r3, [r7, #5]
 8007028:	3301      	adds	r3, #1
 800702a:	b2db      	uxtb	r3, r3
 800702c:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 800702e:	2304      	movs	r3, #4
 8007030:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8007032:	2301      	movs	r3, #1
 8007034:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007038:	e1f2      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
    		}
    	}
    }
    else if(pos.dir == east)
 800703a:	79bb      	ldrb	r3, [r7, #6]
 800703c:	2b01      	cmp	r3, #1
 800703e:	f040 80a5 	bne.w	800718c <turn_out_L135_expand+0x302>
    {
    	if(mouse_dir == NorthEast)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d14f      	bne.n	80070e8 <turn_out_L135_expand+0x25e>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8007048:	793b      	ldrb	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	2b1f      	cmp	r3, #31
 800704e:	f300 81e7 	bgt.w	8007420 <turn_out_L135_expand+0x596>
 8007052:	797b      	ldrb	r3, [r7, #5]
 8007054:	3301      	adds	r3, #1
 8007056:	2b1f      	cmp	r3, #31
 8007058:	f300 81e2 	bgt.w	8007420 <turn_out_L135_expand+0x596>
    		{
				//if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y + 1][Node_pos_dir.East] == False:
				if( wall_check(make_position(pos.x+1,pos.y+1,south),0x03) == false && wall_check(make_position(pos.x,pos.y+1,east),0x03) == false)
 800705c:	793b      	ldrb	r3, [r7, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	b2d8      	uxtb	r0, r3
 8007062:	797b      	ldrb	r3, [r7, #5]
 8007064:	3301      	adds	r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2202      	movs	r2, #2
 800706a:	4619      	mov	r1, r3
 800706c:	f7fa f802 	bl	8001074 <make_position>
 8007070:	4603      	mov	r3, r0
 8007072:	461a      	mov	r2, r3
 8007074:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8007078:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800707c:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8007080:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007088:	2103      	movs	r1, #3
 800708a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708c:	f7fa f850 	bl	8001130 <wall_check>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	f040 81c4 	bne.w	8007420 <turn_out_L135_expand+0x596>
 8007098:	7938      	ldrb	r0, [r7, #4]
 800709a:	797b      	ldrb	r3, [r7, #5]
 800709c:	3301      	adds	r3, #1
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2201      	movs	r2, #1
 80070a2:	4619      	mov	r1, r3
 80070a4:	f7f9 ffe6 	bl	8001074 <make_position>
 80070a8:	4603      	mov	r3, r0
 80070aa:	461a      	mov	r2, r3
 80070ac:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80070b0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80070b4:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80070b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80070bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80070c0:	2103      	movs	r1, #3
 80070c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c4:	f7fa f834 	bl	8001130 <wall_check>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f040 81a8 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
					next_pos.x = pos.x;
 80070d0:	793b      	ldrb	r3, [r7, #4]
 80070d2:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y + 1;
 80070d4:	797b      	ldrb	r3, [r7, #5]
 80070d6:	3301      	adds	r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 80070dc:	2304      	movs	r3, #4
 80070de:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80070e6:	e19b      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
    		}
    	}
    	else if(mouse_dir == SouthWest)
 80070e8:	78fb      	ldrb	r3, [r7, #3]
 80070ea:	2b05      	cmp	r3, #5
 80070ec:	f040 8198 	bne.w	8007420 <turn_out_L135_expand+0x596>
    	{
            if(pos.y - 1 >= 0 && pos.x + 1 < MAZE_SIZE_X)
 80070f0:	797b      	ldrb	r3, [r7, #5]
 80070f2:	3b01      	subs	r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f2c0 8193 	blt.w	8007420 <turn_out_L135_expand+0x596>
 80070fa:	793b      	ldrb	r3, [r7, #4]
 80070fc:	3301      	adds	r3, #1
 80070fe:	2b1f      	cmp	r3, #31
 8007100:	f300 818e 	bgt.w	8007420 <turn_out_L135_expand+0x596>
            {
				//if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.East] == False:
				if(wall_check(make_position(pos.x, pos.y, south),0x03) == false && wall_check(make_position(pos.x, pos.y-1, east),0x03) == false )
 8007104:	793b      	ldrb	r3, [r7, #4]
 8007106:	7979      	ldrb	r1, [r7, #5]
 8007108:	2202      	movs	r2, #2
 800710a:	4618      	mov	r0, r3
 800710c:	f7f9 ffb2 	bl	8001074 <make_position>
 8007110:	4603      	mov	r3, r0
 8007112:	461a      	mov	r2, r3
 8007114:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8007118:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800711c:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8007120:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007124:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007128:	2103      	movs	r1, #3
 800712a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800712c:	f7fa f800 	bl	8001130 <wall_check>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	f040 8174 	bne.w	8007420 <turn_out_L135_expand+0x596>
 8007138:	7938      	ldrb	r0, [r7, #4]
 800713a:	797b      	ldrb	r3, [r7, #5]
 800713c:	3b01      	subs	r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2201      	movs	r2, #1
 8007142:	4619      	mov	r1, r3
 8007144:	f7f9 ff96 	bl	8001074 <make_position>
 8007148:	4603      	mov	r3, r0
 800714a:	461a      	mov	r2, r3
 800714c:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8007150:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007154:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8007158:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800715c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8007160:	2103      	movs	r1, #3
 8007162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007164:	f7f9 ffe4 	bl	8001130 <wall_check>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	f040 8158 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
					next_pos.x = pos.x + 1;
 8007170:	793b      	ldrb	r3, [r7, #4]
 8007172:	3301      	adds	r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y - 1;
 8007178:	797b      	ldrb	r3, [r7, #5]
 800717a:	3b01      	subs	r3, #1
 800717c:	b2db      	uxtb	r3, r3
 800717e:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 8007180:	2304      	movs	r3, #4
 8007182:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800718a:	e149      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
            }
    	}
    }
    else if(pos.dir == south)
 800718c:	79bb      	ldrb	r3, [r7, #6]
 800718e:	2b02      	cmp	r3, #2
 8007190:	f040 80a5 	bne.w	80072de <turn_out_L135_expand+0x454>
    {
    	if(mouse_dir == NorthWest)
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	2b07      	cmp	r3, #7
 8007198:	d14d      	bne.n	8007236 <turn_out_L135_expand+0x3ac>
    	{
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 800719a:	793b      	ldrb	r3, [r7, #4]
 800719c:	3b01      	subs	r3, #1
 800719e:	2b00      	cmp	r3, #0
 80071a0:	f2c0 813e 	blt.w	8007420 <turn_out_L135_expand+0x596>
 80071a4:	797b      	ldrb	r3, [r7, #5]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f2c0 8139 	blt.w	8007420 <turn_out_L135_expand+0x596>
            {
            //if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False and  self.wall_data[pos.x-1][pos.y][Node_pos_dir.South] == False:
				if(wall_check(make_position(pos.x, pos.y, west),0x03) == false && wall_check(make_position(pos.x-1, pos.y, south),0x03) == false )
 80071ae:	793b      	ldrb	r3, [r7, #4]
 80071b0:	7979      	ldrb	r1, [r7, #5]
 80071b2:	2203      	movs	r2, #3
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7f9 ff5d 	bl	8001074 <make_position>
 80071ba:	4603      	mov	r3, r0
 80071bc:	461a      	mov	r2, r3
 80071be:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 80071c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80071c6:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 80071ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80071ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80071d2:	2103      	movs	r1, #3
 80071d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071d6:	f7f9 ffab 	bl	8001130 <wall_check>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f040 811f 	bne.w	8007420 <turn_out_L135_expand+0x596>
 80071e2:	793b      	ldrb	r3, [r7, #4]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	7979      	ldrb	r1, [r7, #5]
 80071ea:	2202      	movs	r2, #2
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7f9 ff41 	bl	8001074 <make_position>
 80071f2:	4603      	mov	r3, r0
 80071f4:	461a      	mov	r2, r3
 80071f6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80071fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80071fe:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8007202:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007206:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800720a:	2103      	movs	r1, #3
 800720c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800720e:	f7f9 ff8f 	bl	8001130 <wall_check>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	f040 8103 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
            		next_pos.x = pos.x - 1;
 800721a:	793b      	ldrb	r3, [r7, #4]
 800721c:	3b01      	subs	r3, #1
 800721e:	b2db      	uxtb	r3, r3
 8007220:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y - 1;
 8007222:	797b      	ldrb	r3, [r7, #5]
 8007224:	3b01      	subs	r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 800722a:	2304      	movs	r3, #4
 800722c:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 800722e:	2301      	movs	r3, #1
 8007230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007234:	e0f4      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
            }
    	}
    	else if(mouse_dir == SouthEast)
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	2b03      	cmp	r3, #3
 800723a:	f040 80f1 	bne.w	8007420 <turn_out_L135_expand+0x596>
    	{
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 800723e:	793b      	ldrb	r3, [r7, #4]
 8007240:	3301      	adds	r3, #1
 8007242:	2b1f      	cmp	r3, #31
 8007244:	f300 80ec 	bgt.w	8007420 <turn_out_L135_expand+0x596>
 8007248:	797b      	ldrb	r3, [r7, #5]
 800724a:	3b01      	subs	r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	f2c0 80e7 	blt.w	8007420 <turn_out_L135_expand+0x596>
            {
                //if self.wall_data[pos.x+1][pos.y-1][Node_pos_dir.West] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.South] == False:
				if(wall_check(make_position(pos.x+1, pos.y-1, west),0x03) == false && wall_check(make_position(pos.x+1, pos.y, south),0x03) == false )
 8007252:	793b      	ldrb	r3, [r7, #4]
 8007254:	3301      	adds	r3, #1
 8007256:	b2d8      	uxtb	r0, r3
 8007258:	797b      	ldrb	r3, [r7, #5]
 800725a:	3b01      	subs	r3, #1
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2203      	movs	r2, #3
 8007260:	4619      	mov	r1, r3
 8007262:	f7f9 ff07 	bl	8001074 <make_position>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 800726e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007272:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8007276:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800727a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800727e:	2103      	movs	r1, #3
 8007280:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007282:	f7f9 ff55 	bl	8001130 <wall_check>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	f040 80c9 	bne.w	8007420 <turn_out_L135_expand+0x596>
 800728e:	793b      	ldrb	r3, [r7, #4]
 8007290:	3301      	adds	r3, #1
 8007292:	b2db      	uxtb	r3, r3
 8007294:	7979      	ldrb	r1, [r7, #5]
 8007296:	2202      	movs	r2, #2
 8007298:	4618      	mov	r0, r3
 800729a:	f7f9 feeb 	bl	8001074 <make_position>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 80072a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80072aa:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 80072ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80072b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80072b6:	2103      	movs	r1, #3
 80072b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072ba:	f7f9 ff39 	bl	8001130 <wall_check>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f040 80ad 	bne.w	8007420 <turn_out_L135_expand+0x596>
				{
            		next_pos.x = pos.x + 1;
 80072c6:	793b      	ldrb	r3, [r7, #4]
 80072c8:	3301      	adds	r3, #1
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y;
 80072ce:	797b      	ldrb	r3, [r7, #5]
 80072d0:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 80072d2:	2304      	movs	r3, #4
 80072d4:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80072dc:	e0a0      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
            }
    	}
    }
    else if(pos.dir == west)
 80072de:	79bb      	ldrb	r3, [r7, #6]
 80072e0:	2b03      	cmp	r3, #3
 80072e2:	f040 809d 	bne.w	8007420 <turn_out_L135_expand+0x596>
    {
    	if(mouse_dir == NorthEast)
 80072e6:	78fb      	ldrb	r3, [r7, #3]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d14b      	bne.n	8007384 <turn_out_L135_expand+0x4fa>
    	{
            if(pos.y + 1 < MAZE_SIZE_Y && pos.x - 1 >= 0)
 80072ec:	797b      	ldrb	r3, [r7, #5]
 80072ee:	3301      	adds	r3, #1
 80072f0:	2b1f      	cmp	r3, #31
 80072f2:	f300 8095 	bgt.w	8007420 <turn_out_L135_expand+0x596>
 80072f6:	793b      	ldrb	r3, [r7, #4]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f2c0 8090 	blt.w	8007420 <turn_out_L135_expand+0x596>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y+1][Node_pos_dir.West] == False:
				if(wall_check(make_position(pos.x, pos.y, north),0x03) == false && wall_check(make_position(pos.x, pos.y+1, west),0x03) == false )
 8007300:	793b      	ldrb	r3, [r7, #4]
 8007302:	7979      	ldrb	r1, [r7, #5]
 8007304:	2200      	movs	r2, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f7f9 feb4 	bl	8001074 <make_position>
 800730c:	4603      	mov	r3, r0
 800730e:	461a      	mov	r2, r3
 8007310:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 8007314:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007318:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 800731c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007320:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 8007324:	2103      	movs	r1, #3
 8007326:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8007328:	f7f9 ff02 	bl	8001130 <wall_check>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d176      	bne.n	8007420 <turn_out_L135_expand+0x596>
 8007332:	7938      	ldrb	r0, [r7, #4]
 8007334:	797b      	ldrb	r3, [r7, #5]
 8007336:	3301      	adds	r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2203      	movs	r2, #3
 800733c:	4619      	mov	r1, r3
 800733e:	f7f9 fe99 	bl	8001074 <make_position>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 800734a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800734e:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8007352:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007356:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800735a:	2103      	movs	r1, #3
 800735c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800735e:	f7f9 fee7 	bl	8001130 <wall_check>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d15b      	bne.n	8007420 <turn_out_L135_expand+0x596>
				{
            		next_pos.x = pos.x - 1;
 8007368:	793b      	ldrb	r3, [r7, #4]
 800736a:	3b01      	subs	r3, #1
 800736c:	b2db      	uxtb	r3, r3
 800736e:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y + 1;
 8007370:	797b      	ldrb	r3, [r7, #5]
 8007372:	3301      	adds	r3, #1
 8007374:	b2db      	uxtb	r3, r3
 8007376:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8007378:	2304      	movs	r3, #4
 800737a:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 800737c:	2301      	movs	r3, #1
 800737e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007382:	e04d      	b.n	8007420 <turn_out_L135_expand+0x596>
				}
            }
    	}
    	else if(mouse_dir == SouthWest)
 8007384:	78fb      	ldrb	r3, [r7, #3]
 8007386:	2b05      	cmp	r3, #5
 8007388:	d14a      	bne.n	8007420 <turn_out_L135_expand+0x596>
    	{
            if(pos.y - 1 >= 0 && pos.x - 1 >= 0)
 800738a:	797b      	ldrb	r3, [r7, #5]
 800738c:	3b01      	subs	r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	db46      	blt.n	8007420 <turn_out_L135_expand+0x596>
 8007392:	793b      	ldrb	r3, [r7, #4]
 8007394:	3b01      	subs	r3, #1
 8007396:	2b00      	cmp	r3, #0
 8007398:	db42      	blt.n	8007420 <turn_out_L135_expand+0x596>
            {
                //if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.West] == False:
				if(wall_check(make_position(pos.x-1, pos.y-1, north),0x03) == false && wall_check(make_position(pos.x, pos.y-1, west),0x03) == false )
 800739a:	793b      	ldrb	r3, [r7, #4]
 800739c:	3b01      	subs	r3, #1
 800739e:	b2d8      	uxtb	r0, r3
 80073a0:	797b      	ldrb	r3, [r7, #5]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	2200      	movs	r2, #0
 80073a8:	4619      	mov	r1, r3
 80073aa:	f7f9 fe63 	bl	8001074 <make_position>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 80073b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80073ba:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 80073be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80073c2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80073c6:	2103      	movs	r1, #3
 80073c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80073ca:	f7f9 feb1 	bl	8001130 <wall_check>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d125      	bne.n	8007420 <turn_out_L135_expand+0x596>
 80073d4:	7938      	ldrb	r0, [r7, #4]
 80073d6:	797b      	ldrb	r3, [r7, #5]
 80073d8:	3b01      	subs	r3, #1
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2203      	movs	r2, #3
 80073de:	4619      	mov	r1, r3
 80073e0:	f7f9 fe48 	bl	8001074 <make_position>
 80073e4:	4603      	mov	r3, r0
 80073e6:	461a      	mov	r2, r3
 80073e8:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80073ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80073f0:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 80073f4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80073f8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80073fc:	2103      	movs	r1, #3
 80073fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007400:	f7f9 fe96 	bl	8001130 <wall_check>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10a      	bne.n	8007420 <turn_out_L135_expand+0x596>
				{
            		next_pos.x = pos.x;
 800740a:	793b      	ldrb	r3, [r7, #4]
 800740c:	753b      	strb	r3, [r7, #20]
                    next_pos.y = pos.y - 1;
 800740e:	797b      	ldrb	r3, [r7, #5]
 8007410:	3b01      	subs	r3, #1
 8007412:	b2db      	uxtb	r3, r3
 8007414:	757b      	strb	r3, [r7, #21]
                    next_pos.dir = center;
 8007416:	2304      	movs	r3, #4
 8007418:	75bb      	strb	r3, [r7, #22]
                    update_flag = true;
 800741a:	2301      	movs	r3, #1
 800741c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
            }
    	}
    }

    if(update_flag == true)
 8007420:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007424:	2b01      	cmp	r3, #1
 8007426:	d13c      	bne.n	80074a2 <turn_out_L135_expand+0x618>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8007428:	7d3b      	ldrb	r3, [r7, #20]
 800742a:	7d79      	ldrb	r1, [r7, #21]
 800742c:	7dba      	ldrb	r2, [r7, #22]
 800742e:	4618      	mov	r0, r3
 8007430:	f7f9 fe20 	bl	8001074 <make_position>
 8007434:	4603      	mov	r3, r0
 8007436:	461a      	mov	r2, r3
 8007438:	733a      	strb	r2, [r7, #12]
 800743a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800743e:	737a      	strb	r2, [r7, #13]
 8007440:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007444:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8007446:	6938      	ldr	r0, [r7, #16]
 8007448:	f7fc fd6a 	bl	8003f20 <pos_run_time>
 800744c:	4603      	mov	r3, r0
 800744e:	461c      	mov	r4, r3
 8007450:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f7fc fcbe 	bl	8003dd8 <calc_time>
 800745c:	4603      	mov	r3, r0
 800745e:	4423      	add	r3, r4
 8007460:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f7fc fd5b 	bl	8003f20 <pos_run_time>
 800746a:	4603      	mov	r3, r0
 800746c:	461a      	mov	r2, r3
 800746e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8007472:	4293      	cmp	r3, r2
 8007474:	d215      	bcs.n	80074a2 <turn_out_L135_expand+0x618>
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f7fd f808 	bl	800448c <is_determine>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10f      	bne.n	80074a2 <turn_out_L135_expand+0x618>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8007482:	f8b7 105a 	ldrh.w	r1, [r7, #90]	; 0x5a
 8007486:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800748a:	2300      	movs	r3, #0
 800748c:	9302      	str	r3, [sp, #8]
 800748e:	2300      	movs	r3, #0
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8007496:	9300      	str	r3, [sp, #0]
 8007498:	460b      	mov	r3, r1
 800749a:	6939      	ldr	r1, [r7, #16]
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f7fa fac1 	bl	8001a24 <close_list_set>
		}
    }
}
 80074a2:	bf00      	nop
 80074a4:	3764      	adds	r7, #100	; 0x64
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd90      	pop	{r4, r7, pc}

080074aa <turn_RV90_expand>:

void turn_RV90_expand(t_position pos,t_eight_dir mouse_dir)
{
 80074aa:	b590      	push	{r4, r7, lr}
 80074ac:	b0a5      	sub	sp, #148	; 0x94
 80074ae:	af04      	add	r7, sp, #16
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 2 + 8)%8;
 80074b6:	78fb      	ldrb	r3, [r7, #3]
 80074b8:	330a      	adds	r3, #10
 80074ba:	425a      	negs	r2, r3
 80074bc:	f003 0307 	and.w	r3, r3, #7
 80074c0:	f002 0207 	and.w	r2, r2, #7
 80074c4:	bf58      	it	pl
 80074c6:	4253      	negpl	r3, r2
 80074c8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 80074cc:	793b      	ldrb	r3, [r7, #4]
 80074ce:	7979      	ldrb	r1, [r7, #5]
 80074d0:	79ba      	ldrb	r2, [r7, #6]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7f9 fdce 	bl	8001074 <make_position>
 80074d8:	4603      	mov	r3, r0
 80074da:	461a      	mov	r2, r3
 80074dc:	753a      	strb	r2, [r7, #20]
 80074de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80074e2:	757a      	strb	r2, [r7, #21]
 80074e4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80074e8:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 80074ea:	793b      	ldrb	r3, [r7, #4]
 80074ec:	7979      	ldrb	r1, [r7, #5]
 80074ee:	79ba      	ldrb	r2, [r7, #6]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7f9 fdbf 	bl	8001074 <make_position>
 80074f6:	4603      	mov	r3, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	743a      	strb	r2, [r7, #16]
 80074fc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007500:	747a      	strb	r2, [r7, #17]
 8007502:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007506:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8007508:	2300      	movs	r3, #0
 800750a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    t_run_pattern run_pt = Turn_RV90;
 800750e:	230f      	movs	r3, #15
 8007510:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    if(pos.dir == north)
 8007514:	79bb      	ldrb	r3, [r7, #6]
 8007516:	2b00      	cmp	r3, #0
 8007518:	f040 80d7 	bne.w	80076ca <turn_RV90_expand+0x220>
    {
    	if(mouse_dir == NorthEast)
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d165      	bne.n	80075ee <turn_RV90_expand+0x144>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8007522:	793b      	ldrb	r3, [r7, #4]
 8007524:	3301      	adds	r3, #1
 8007526:	2b1f      	cmp	r3, #31
 8007528:	f300 836a 	bgt.w	8007c00 <turn_RV90_expand+0x756>
 800752c:	797b      	ldrb	r3, [r7, #5]
 800752e:	3301      	adds	r3, #1
 8007530:	2b1f      	cmp	r3, #31
 8007532:	f300 8365 	bgt.w	8007c00 <turn_RV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.West] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.North] == False:
                if( wall_check(make_position(pos.x+1,pos.y + 1,west),0x03) == false && wall_check(make_position(pos.x+1,pos.y,north),0x03) == false)
 8007536:	793b      	ldrb	r3, [r7, #4]
 8007538:	3301      	adds	r3, #1
 800753a:	b2d8      	uxtb	r0, r3
 800753c:	797b      	ldrb	r3, [r7, #5]
 800753e:	3301      	adds	r3, #1
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2203      	movs	r2, #3
 8007544:	4619      	mov	r1, r3
 8007546:	f7f9 fd95 	bl	8001074 <make_position>
 800754a:	4603      	mov	r3, r0
 800754c:	461a      	mov	r2, r3
 800754e:	763a      	strb	r2, [r7, #24]
 8007550:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007554:	767a      	strb	r2, [r7, #25]
 8007556:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800755a:	76bb      	strb	r3, [r7, #26]
 800755c:	2103      	movs	r1, #3
 800755e:	69b8      	ldr	r0, [r7, #24]
 8007560:	f7f9 fde6 	bl	8001130 <wall_check>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 834a 	bne.w	8007c00 <turn_RV90_expand+0x756>
 800756c:	793b      	ldrb	r3, [r7, #4]
 800756e:	3301      	adds	r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	7979      	ldrb	r1, [r7, #5]
 8007574:	2200      	movs	r2, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f7f9 fd7c 	bl	8001074 <make_position>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	773a      	strb	r2, [r7, #28]
 8007582:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007586:	777a      	strb	r2, [r7, #29]
 8007588:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800758c:	77bb      	strb	r3, [r7, #30]
 800758e:	2103      	movs	r1, #3
 8007590:	69f8      	ldr	r0, [r7, #28]
 8007592:	f7f9 fdcd 	bl	8001130 <wall_check>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 8331 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {
                    //if self.wall_data[pos.x+1][pos.y][Node_pos_dir.East] == False:
                	if( wall_check(make_position(pos.x+1,pos.y,east),0x03) == false)
 800759e:	793b      	ldrb	r3, [r7, #4]
 80075a0:	3301      	adds	r3, #1
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	7979      	ldrb	r1, [r7, #5]
 80075a6:	2201      	movs	r2, #1
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7f9 fd63 	bl	8001074 <make_position>
 80075ae:	4603      	mov	r3, r0
 80075b0:	461a      	mov	r2, r3
 80075b2:	f887 2020 	strb.w	r2, [r7, #32]
 80075b6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80075ba:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80075be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80075c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80075c6:	2103      	movs	r1, #3
 80075c8:	6a38      	ldr	r0, [r7, #32]
 80075ca:	f7f9 fdb1 	bl	8001130 <wall_check>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	f040 8315 	bne.w	8007c00 <turn_RV90_expand+0x756>
                	{
                		next_pos.x = pos.x + 1;
 80075d6:	793b      	ldrb	r3, [r7, #4]
 80075d8:	3301      	adds	r3, #1
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 80075de:	797b      	ldrb	r3, [r7, #5]
 80075e0:	757b      	strb	r3, [r7, #21]
						next_pos.dir = north;
 80075e2:	2300      	movs	r3, #0
 80075e4:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80075e6:	2301      	movs	r3, #1
 80075e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80075ec:	e308      	b.n	8007c00 <turn_RV90_expand+0x756>
                	}
                }
    		}
    	}
    	else if(mouse_dir == SouthWest)
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	2b05      	cmp	r3, #5
 80075f2:	f040 8305 	bne.w	8007c00 <turn_RV90_expand+0x756>
    	{
    		if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 80075f6:	793b      	ldrb	r3, [r7, #4]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f2c0 8300 	blt.w	8007c00 <turn_RV90_expand+0x756>
 8007600:	797b      	ldrb	r3, [r7, #5]
 8007602:	3301      	adds	r3, #1
 8007604:	2b1f      	cmp	r3, #31
 8007606:	f300 82fb 	bgt.w	8007c00 <turn_RV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False and  self.wall_data[pos.x-1][pos.y][Node_pos_dir.North] == False:
                if( wall_check(make_position(pos.x,pos.y,west),0x03) == false && wall_check(make_position(pos.x-1,pos.y,north),0x03) == false)
 800760a:	793b      	ldrb	r3, [r7, #4]
 800760c:	7979      	ldrb	r1, [r7, #5]
 800760e:	2203      	movs	r2, #3
 8007610:	4618      	mov	r0, r3
 8007612:	f7f9 fd2f 	bl	8001074 <make_position>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 800761e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007622:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8007626:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800762a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800762e:	2103      	movs	r1, #3
 8007630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007632:	f7f9 fd7d 	bl	8001130 <wall_check>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	f040 82e1 	bne.w	8007c00 <turn_RV90_expand+0x756>
 800763e:	793b      	ldrb	r3, [r7, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	7979      	ldrb	r1, [r7, #5]
 8007646:	2200      	movs	r2, #0
 8007648:	4618      	mov	r0, r3
 800764a:	f7f9 fd13 	bl	8001074 <make_position>
 800764e:	4603      	mov	r3, r0
 8007650:	461a      	mov	r2, r3
 8007652:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8007656:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800765a:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 800765e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007666:	2103      	movs	r1, #3
 8007668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800766a:	f7f9 fd61 	bl	8001130 <wall_check>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	f040 82c5 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {

                	//if self.wall_data[pos.x-1][pos.y+1][Node_pos_dir.West] == False:
                	if( wall_check(make_position(pos.x-1,pos.y+1,west),0x03) == false)
 8007676:	793b      	ldrb	r3, [r7, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	b2d8      	uxtb	r0, r3
 800767c:	797b      	ldrb	r3, [r7, #5]
 800767e:	3301      	adds	r3, #1
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2203      	movs	r2, #3
 8007684:	4619      	mov	r1, r3
 8007686:	f7f9 fcf5 	bl	8001074 <make_position>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8007692:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007696:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 800769a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800769e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80076a2:	2103      	movs	r1, #3
 80076a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80076a6:	f7f9 fd43 	bl	8001130 <wall_check>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	f040 82a7 	bne.w	8007c00 <turn_RV90_expand+0x756>
                	{
                		next_pos.x = pos.x - 1;
 80076b2:	793b      	ldrb	r3, [r7, #4]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y;
 80076ba:	797b      	ldrb	r3, [r7, #5]
 80076bc:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = north;
 80076be:	2300      	movs	r3, #0
 80076c0:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80076c8:	e29a      	b.n	8007c00 <turn_RV90_expand+0x756>
                	}
                }
    		}
    	}
    }
    else if(pos.dir == east)
 80076ca:	79bb      	ldrb	r3, [r7, #6]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	f040 80dd 	bne.w	800788c <turn_RV90_expand+0x3e2>
    {
    	if(mouse_dir == NorthWest)
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	2b07      	cmp	r3, #7
 80076d6:	d169      	bne.n	80077ac <turn_RV90_expand+0x302>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 80076d8:	793b      	ldrb	r3, [r7, #4]
 80076da:	3301      	adds	r3, #1
 80076dc:	2b1f      	cmp	r3, #31
 80076de:	f300 828f 	bgt.w	8007c00 <turn_RV90_expand+0x756>
 80076e2:	797b      	ldrb	r3, [r7, #5]
 80076e4:	3301      	adds	r3, #1
 80076e6:	2b1f      	cmp	r3, #31
 80076e8:	f300 828a 	bgt.w	8007c00 <turn_RV90_expand+0x756>
    		{
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y + 1][Node_pos_dir.East] == False :
    			if( wall_check(make_position(pos.x,pos.y,north),0x03) == false && wall_check(make_position(pos.x,pos.y + 1,east),0x03) == false)
 80076ec:	793b      	ldrb	r3, [r7, #4]
 80076ee:	7979      	ldrb	r1, [r7, #5]
 80076f0:	2200      	movs	r2, #0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7f9 fcbe 	bl	8001074 <make_position>
 80076f8:	4603      	mov	r3, r0
 80076fa:	461a      	mov	r2, r3
 80076fc:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8007700:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007704:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8007708:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800770c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007710:	2103      	movs	r1, #3
 8007712:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007714:	f7f9 fd0c 	bl	8001130 <wall_check>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	f040 8270 	bne.w	8007c00 <turn_RV90_expand+0x756>
 8007720:	7938      	ldrb	r0, [r7, #4]
 8007722:	797b      	ldrb	r3, [r7, #5]
 8007724:	3301      	adds	r3, #1
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2201      	movs	r2, #1
 800772a:	4619      	mov	r1, r3
 800772c:	f7f9 fca2 	bl	8001074 <make_position>
 8007730:	4603      	mov	r3, r0
 8007732:	461a      	mov	r2, r3
 8007734:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8007738:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800773c:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8007740:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007744:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8007748:	2103      	movs	r1, #3
 800774a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800774c:	f7f9 fcf0 	bl	8001130 <wall_check>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	f040 8254 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {
    				//if self.wall_data[pos.x + 1][pos.y+1][Node_pos_dir.North] == False:
                	if( wall_check(make_position(pos.x+1,pos.y+1,north),0x03) == false)
 8007758:	793b      	ldrb	r3, [r7, #4]
 800775a:	3301      	adds	r3, #1
 800775c:	b2d8      	uxtb	r0, r3
 800775e:	797b      	ldrb	r3, [r7, #5]
 8007760:	3301      	adds	r3, #1
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2200      	movs	r2, #0
 8007766:	4619      	mov	r1, r3
 8007768:	f7f9 fc84 	bl	8001074 <make_position>
 800776c:	4603      	mov	r3, r0
 800776e:	461a      	mov	r2, r3
 8007770:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8007774:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007778:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 800777c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007780:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007784:	2103      	movs	r1, #3
 8007786:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007788:	f7f9 fcd2 	bl	8001130 <wall_check>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	f040 8236 	bne.w	8007c00 <turn_RV90_expand+0x756>
                	{
    					next_pos.x = pos.x;
 8007794:	793b      	ldrb	r3, [r7, #4]
 8007796:	753b      	strb	r3, [r7, #20]
    					next_pos.y = pos.y + 1;
 8007798:	797b      	ldrb	r3, [r7, #5]
 800779a:	3301      	adds	r3, #1
 800779c:	b2db      	uxtb	r3, r3
 800779e:	757b      	strb	r3, [r7, #21]
    					next_pos.dir = east;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75bb      	strb	r3, [r7, #22]
    					update_flag = true;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80077aa:	e229      	b.n	8007c00 <turn_RV90_expand+0x756>
                	}

                }
    		}
    	}
    	else if(mouse_dir == SouthEast)
 80077ac:	78fb      	ldrb	r3, [r7, #3]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	f040 8226 	bne.w	8007c00 <turn_RV90_expand+0x756>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0){
 80077b4:	793b      	ldrb	r3, [r7, #4]
 80077b6:	3301      	adds	r3, #1
 80077b8:	2b1f      	cmp	r3, #31
 80077ba:	f300 8221 	bgt.w	8007c00 <turn_RV90_expand+0x756>
 80077be:	797b      	ldrb	r3, [r7, #5]
 80077c0:	3b01      	subs	r3, #1
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f2c0 821c 	blt.w	8007c00 <turn_RV90_expand+0x756>
                //if self.wall_data[pos.x+1][pos.y - 1][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y - 1][Node_pos_dir.East] == False:
    			if( wall_check(make_position(pos.x+1,pos.y-1,north),0x03) == false && wall_check(make_position(pos.x,pos.y - 1,east),0x03) == false)
 80077c8:	793b      	ldrb	r3, [r7, #4]
 80077ca:	3301      	adds	r3, #1
 80077cc:	b2d8      	uxtb	r0, r3
 80077ce:	797b      	ldrb	r3, [r7, #5]
 80077d0:	3b01      	subs	r3, #1
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2200      	movs	r2, #0
 80077d6:	4619      	mov	r1, r3
 80077d8:	f7f9 fc4c 	bl	8001074 <make_position>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 80077e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80077e8:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 80077ec:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80077f0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80077f4:	2103      	movs	r1, #3
 80077f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80077f8:	f7f9 fc9a 	bl	8001130 <wall_check>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f040 81fe 	bne.w	8007c00 <turn_RV90_expand+0x756>
 8007804:	7938      	ldrb	r0, [r7, #4]
 8007806:	797b      	ldrb	r3, [r7, #5]
 8007808:	3b01      	subs	r3, #1
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2201      	movs	r2, #1
 800780e:	4619      	mov	r1, r3
 8007810:	f7f9 fc30 	bl	8001074 <make_position>
 8007814:	4603      	mov	r3, r0
 8007816:	461a      	mov	r2, r3
 8007818:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 800781c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007820:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8007824:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800782c:	2103      	movs	r1, #3
 800782e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007830:	f7f9 fc7e 	bl	8001130 <wall_check>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	f040 81e2 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {
                    //if self.wall_data[pos.x][pos.y-1][Node_pos_dir.South] == False:
                	if( wall_check(make_position(pos.x,pos.y-1,south),0x03) == false)
 800783c:	7938      	ldrb	r0, [r7, #4]
 800783e:	797b      	ldrb	r3, [r7, #5]
 8007840:	3b01      	subs	r3, #1
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2202      	movs	r2, #2
 8007846:	4619      	mov	r1, r3
 8007848:	f7f9 fc14 	bl	8001074 <make_position>
 800784c:	4603      	mov	r3, r0
 800784e:	461a      	mov	r2, r3
 8007850:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8007854:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007858:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 800785c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007860:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8007864:	2103      	movs	r1, #3
 8007866:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007868:	f7f9 fc62 	bl	8001130 <wall_check>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	f040 81c6 	bne.w	8007c00 <turn_RV90_expand+0x756>
                	{
						next_pos.x = pos.x;
 8007874:	793b      	ldrb	r3, [r7, #4]
 8007876:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y - 1;
 8007878:	797b      	ldrb	r3, [r7, #5]
 800787a:	3b01      	subs	r3, #1
 800787c:	b2db      	uxtb	r3, r3
 800787e:	757b      	strb	r3, [r7, #21]
						next_pos.dir = east;
 8007880:	2301      	movs	r3, #1
 8007882:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8007884:	2301      	movs	r3, #1
 8007886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800788a:	e1b9      	b.n	8007c00 <turn_RV90_expand+0x756>
                	}
                }
    		}
    	}
    }
    else if(pos.dir == south)
 800788c:	79bb      	ldrb	r3, [r7, #6]
 800788e:	2b02      	cmp	r3, #2
 8007890:	f040 80dd 	bne.w	8007a4e <turn_RV90_expand+0x5a4>
    {
    	if(mouse_dir == NorthEast)
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d169      	bne.n	800796e <turn_RV90_expand+0x4c4>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 800789a:	793b      	ldrb	r3, [r7, #4]
 800789c:	3301      	adds	r3, #1
 800789e:	2b1f      	cmp	r3, #31
 80078a0:	f300 81ae 	bgt.w	8007c00 <turn_RV90_expand+0x756>
 80078a4:	797b      	ldrb	r3, [r7, #5]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f2c0 81a9 	blt.w	8007c00 <turn_RV90_expand+0x756>
    		{
    			// if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.South]:
    			if( wall_check(make_position(pos.x,pos.y,east),0x03) == false && wall_check(make_position(pos.x+1,pos.y,south),0x03) == false)
 80078ae:	793b      	ldrb	r3, [r7, #4]
 80078b0:	7979      	ldrb	r1, [r7, #5]
 80078b2:	2201      	movs	r2, #1
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7f9 fbdd 	bl	8001074 <make_position>
 80078ba:	4603      	mov	r3, r0
 80078bc:	461a      	mov	r2, r3
 80078be:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80078c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80078c6:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 80078ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80078ce:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80078d2:	2103      	movs	r1, #3
 80078d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80078d6:	f7f9 fc2b 	bl	8001130 <wall_check>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 818f 	bne.w	8007c00 <turn_RV90_expand+0x756>
 80078e2:	793b      	ldrb	r3, [r7, #4]
 80078e4:	3301      	adds	r3, #1
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	7979      	ldrb	r1, [r7, #5]
 80078ea:	2202      	movs	r2, #2
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7f9 fbc1 	bl	8001074 <make_position>
 80078f2:	4603      	mov	r3, r0
 80078f4:	461a      	mov	r2, r3
 80078f6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 80078fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80078fe:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 8007902:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007906:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 800790a:	2103      	movs	r1, #3
 800790c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800790e:	f7f9 fc0f 	bl	8001130 <wall_check>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	f040 8173 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {
    				//if self.wall_data[pos.x+1][pos.y-1][Node_pos_dir.East] == False:
    				if( wall_check(make_position(pos.x+1,pos.y-1,east),0x03) == false)
 800791a:	793b      	ldrb	r3, [r7, #4]
 800791c:	3301      	adds	r3, #1
 800791e:	b2d8      	uxtb	r0, r3
 8007920:	797b      	ldrb	r3, [r7, #5]
 8007922:	3b01      	subs	r3, #1
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2201      	movs	r2, #1
 8007928:	4619      	mov	r1, r3
 800792a:	f7f9 fba3 	bl	8001074 <make_position>
 800792e:	4603      	mov	r3, r0
 8007930:	461a      	mov	r2, r3
 8007932:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 8007936:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800793a:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 800793e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007942:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8007946:	2103      	movs	r1, #3
 8007948:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800794a:	f7f9 fbf1 	bl	8001130 <wall_check>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	f040 8155 	bne.w	8007c00 <turn_RV90_expand+0x756>
    				{
    					next_pos.x = pos.x + 1;
 8007956:	793b      	ldrb	r3, [r7, #4]
 8007958:	3301      	adds	r3, #1
 800795a:	b2db      	uxtb	r3, r3
 800795c:	753b      	strb	r3, [r7, #20]
    					next_pos.y = pos.y;
 800795e:	797b      	ldrb	r3, [r7, #5]
 8007960:	757b      	strb	r3, [r7, #21]
    					next_pos.dir = south;
 8007962:	2302      	movs	r3, #2
 8007964:	75bb      	strb	r3, [r7, #22]
    					update_flag = true;
 8007966:	2301      	movs	r3, #1
 8007968:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800796c:	e148      	b.n	8007c00 <turn_RV90_expand+0x756>
    				}
                }
    		}
    	}
    	else if(mouse_dir == SouthWest)
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	2b05      	cmp	r3, #5
 8007972:	f040 8145 	bne.w	8007c00 <turn_RV90_expand+0x756>
    	{
    		if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8007976:	793b      	ldrb	r3, [r7, #4]
 8007978:	3b01      	subs	r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	f2c0 8140 	blt.w	8007c00 <turn_RV90_expand+0x756>
 8007980:	797b      	ldrb	r3, [r7, #5]
 8007982:	3b01      	subs	r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	f2c0 813b 	blt.w	8007c00 <turn_RV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.East] == False and self.wall_data[pos.x-1][pos.y][Node_pos_dir.South] == False:
    			if( wall_check(make_position(pos.x-1,pos.y-1,east),0x03) == false && wall_check(make_position(pos.x-1,pos.y,south),0x03) == false)
 800798a:	793b      	ldrb	r3, [r7, #4]
 800798c:	3b01      	subs	r3, #1
 800798e:	b2d8      	uxtb	r0, r3
 8007990:	797b      	ldrb	r3, [r7, #5]
 8007992:	3b01      	subs	r3, #1
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2201      	movs	r2, #1
 8007998:	4619      	mov	r1, r3
 800799a:	f7f9 fb6b 	bl	8001074 <make_position>
 800799e:	4603      	mov	r3, r0
 80079a0:	461a      	mov	r2, r3
 80079a2:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 80079a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80079aa:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 80079ae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80079b2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80079b6:	2103      	movs	r1, #3
 80079b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80079ba:	f7f9 fbb9 	bl	8001130 <wall_check>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 811d 	bne.w	8007c00 <turn_RV90_expand+0x756>
 80079c6:	793b      	ldrb	r3, [r7, #4]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	7979      	ldrb	r1, [r7, #5]
 80079ce:	2202      	movs	r2, #2
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7f9 fb4f 	bl	8001074 <make_position>
 80079d6:	4603      	mov	r3, r0
 80079d8:	461a      	mov	r2, r3
 80079da:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
 80079de:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80079e2:	f887 2059 	strb.w	r2, [r7, #89]	; 0x59
 80079e6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80079ea:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80079ee:	2103      	movs	r1, #3
 80079f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80079f2:	f7f9 fb9d 	bl	8001130 <wall_check>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 8101 	bne.w	8007c00 <turn_RV90_expand+0x756>
                {
    				//if self.wall_data[pos.x-1][pos.y][Node_pos_dir.West] == False:
    				if( wall_check(make_position(pos.x-1,pos.y,west),0x03) == false)
 80079fe:	793b      	ldrb	r3, [r7, #4]
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	7979      	ldrb	r1, [r7, #5]
 8007a06:	2203      	movs	r2, #3
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7f9 fb33 	bl	8001074 <make_position>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	461a      	mov	r2, r3
 8007a12:	f887 205c 	strb.w	r2, [r7, #92]	; 0x5c
 8007a16:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007a1a:	f887 205d 	strb.w	r2, [r7, #93]	; 0x5d
 8007a1e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007a22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8007a26:	2103      	movs	r1, #3
 8007a28:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007a2a:	f7f9 fb81 	bl	8001130 <wall_check>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f040 80e5 	bne.w	8007c00 <turn_RV90_expand+0x756>
    				{
						next_pos.x = pos.x - 1;
 8007a36:	793b      	ldrb	r3, [r7, #4]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	753b      	strb	r3, [r7, #20]
                    	next_pos.y = pos.y;
 8007a3e:	797b      	ldrb	r3, [r7, #5]
 8007a40:	757b      	strb	r3, [r7, #21]
                    	next_pos.dir = south;
 8007a42:	2302      	movs	r3, #2
 8007a44:	75bb      	strb	r3, [r7, #22]
                    	update_flag = true;
 8007a46:	2301      	movs	r3, #1
 8007a48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007a4c:	e0d8      	b.n	8007c00 <turn_RV90_expand+0x756>
    				}
                }
    		}
    	}
    }
    else if(pos.dir == west)
 8007a4e:	79bb      	ldrb	r3, [r7, #6]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	f040 80d5 	bne.w	8007c00 <turn_RV90_expand+0x756>
    {
    	if(mouse_dir == NorthWest)
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	2b07      	cmp	r3, #7
 8007a5a:	d16a      	bne.n	8007b32 <turn_RV90_expand+0x688>
    	{
    		if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8007a5c:	793b      	ldrb	r3, [r7, #4]
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f2c0 80cd 	blt.w	8007c00 <turn_RV90_expand+0x756>
 8007a66:	797b      	ldrb	r3, [r7, #5]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	2b1f      	cmp	r3, #31
 8007a6c:	f300 80c8 	bgt.w	8007c00 <turn_RV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x-1][pos.y+1][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y+1][Node_pos_dir.West]:
    			if( wall_check(make_position(pos.x-1,pos.y+1,south),0x03) == false && wall_check(make_position(pos.x,pos.y+1,west),0x03) == false)
 8007a70:	793b      	ldrb	r3, [r7, #4]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	b2d8      	uxtb	r0, r3
 8007a76:	797b      	ldrb	r3, [r7, #5]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f7f9 faf8 	bl	8001074 <make_position>
 8007a84:	4603      	mov	r3, r0
 8007a86:	461a      	mov	r2, r3
 8007a88:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
 8007a8c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007a90:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
 8007a94:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007a98:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8007a9c:	2103      	movs	r1, #3
 8007a9e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007aa0:	f7f9 fb46 	bl	8001130 <wall_check>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f040 80aa 	bne.w	8007c00 <turn_RV90_expand+0x756>
 8007aac:	7938      	ldrb	r0, [r7, #4]
 8007aae:	797b      	ldrb	r3, [r7, #5]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2203      	movs	r2, #3
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	f7f9 fadc 	bl	8001074 <make_position>
 8007abc:	4603      	mov	r3, r0
 8007abe:	461a      	mov	r2, r3
 8007ac0:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
 8007ac4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007ac8:	f887 2065 	strb.w	r2, [r7, #101]	; 0x65
 8007acc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007ad0:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8007ad4:	2103      	movs	r1, #3
 8007ad6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007ad8:	f7f9 fb2a 	bl	8001130 <wall_check>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 808e 	bne.w	8007c00 <turn_RV90_expand+0x756>
    			{
    				//if self.wall_data[pos.x][pos.y+1][Node_pos_dir.North] == False:
    				if( wall_check(make_position(pos.x,pos.y+1,north),0x03) == false)
 8007ae4:	7938      	ldrb	r0, [r7, #4]
 8007ae6:	797b      	ldrb	r3, [r7, #5]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2200      	movs	r2, #0
 8007aee:	4619      	mov	r1, r3
 8007af0:	f7f9 fac0 	bl	8001074 <make_position>
 8007af4:	4603      	mov	r3, r0
 8007af6:	461a      	mov	r2, r3
 8007af8:	f887 2068 	strb.w	r2, [r7, #104]	; 0x68
 8007afc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b00:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
 8007b04:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007b08:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8007b0c:	2103      	movs	r1, #3
 8007b0e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007b10:	f7f9 fb0e 	bl	8001130 <wall_check>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d172      	bne.n	8007c00 <turn_RV90_expand+0x756>
    				{
    					next_pos.x = pos.x;
 8007b1a:	793b      	ldrb	r3, [r7, #4]
 8007b1c:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y + 1;
 8007b1e:	797b      	ldrb	r3, [r7, #5]
 8007b20:	3301      	adds	r3, #1
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = west;
 8007b26:	2303      	movs	r3, #3
 8007b28:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007b30:	e066      	b.n	8007c00 <turn_RV90_expand+0x756>
    				}
    			}
    		}
    	}
    	else if(mouse_dir == SouthEast)
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	2b03      	cmp	r3, #3
 8007b36:	d163      	bne.n	8007c00 <turn_RV90_expand+0x756>
    	{
    		if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8007b38:	793b      	ldrb	r3, [r7, #4]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	db5f      	blt.n	8007c00 <turn_RV90_expand+0x756>
 8007b40:	797b      	ldrb	r3, [r7, #5]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db5b      	blt.n	8007c00 <turn_RV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.West] :
    			if( wall_check(make_position(pos.x,pos.y,south),0x03) == false && wall_check(make_position(pos.x,pos.y-1,west),0x03) == false)
 8007b48:	793b      	ldrb	r3, [r7, #4]
 8007b4a:	7979      	ldrb	r1, [r7, #5]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7f9 fa90 	bl	8001074 <make_position>
 8007b54:	4603      	mov	r3, r0
 8007b56:	461a      	mov	r2, r3
 8007b58:	f887 206c 	strb.w	r2, [r7, #108]	; 0x6c
 8007b5c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b60:	f887 206d 	strb.w	r2, [r7, #109]	; 0x6d
 8007b64:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007b68:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8007b6c:	2103      	movs	r1, #3
 8007b6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b70:	f7f9 fade 	bl	8001130 <wall_check>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d142      	bne.n	8007c00 <turn_RV90_expand+0x756>
 8007b7a:	7938      	ldrb	r0, [r7, #4]
 8007b7c:	797b      	ldrb	r3, [r7, #5]
 8007b7e:	3b01      	subs	r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2203      	movs	r2, #3
 8007b84:	4619      	mov	r1, r3
 8007b86:	f7f9 fa75 	bl	8001074 <make_position>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
 8007b92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007b96:	f887 2071 	strb.w	r2, [r7, #113]	; 0x71
 8007b9a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007b9e:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8007ba2:	2103      	movs	r1, #3
 8007ba4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8007ba6:	f7f9 fac3 	bl	8001130 <wall_check>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d127      	bne.n	8007c00 <turn_RV90_expand+0x756>
    			{
    				if( wall_check(make_position(pos.x-1,pos.y-1,south),0x03) == false)
 8007bb0:	793b      	ldrb	r3, [r7, #4]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b2d8      	uxtb	r0, r3
 8007bb6:	797b      	ldrb	r3, [r7, #5]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2202      	movs	r2, #2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	f7f9 fa58 	bl	8001074 <make_position>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	f887 2074 	strb.w	r2, [r7, #116]	; 0x74
 8007bcc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007bd0:	f887 2075 	strb.w	r2, [r7, #117]	; 0x75
 8007bd4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007bd8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8007bdc:	2103      	movs	r1, #3
 8007bde:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8007be0:	f7f9 faa6 	bl	8001130 <wall_check>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d10a      	bne.n	8007c00 <turn_RV90_expand+0x756>
    				{
    					next_pos.x = pos.x;
 8007bea:	793b      	ldrb	r3, [r7, #4]
 8007bec:	753b      	strb	r3, [r7, #20]
    					next_pos.y = pos.y - 1;
 8007bee:	797b      	ldrb	r3, [r7, #5]
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	757b      	strb	r3, [r7, #21]
    					next_pos.dir = west;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	75bb      	strb	r3, [r7, #22]
    					update_flag = true;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    			}
    		}
    	}
    }

    if(update_flag == true)
 8007c00:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d13c      	bne.n	8007c82 <turn_RV90_expand+0x7d8>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8007c08:	7d3b      	ldrb	r3, [r7, #20]
 8007c0a:	7d79      	ldrb	r1, [r7, #21]
 8007c0c:	7dba      	ldrb	r2, [r7, #22]
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 fa30 	bl	8001074 <make_position>
 8007c14:	4603      	mov	r3, r0
 8007c16:	461a      	mov	r2, r3
 8007c18:	733a      	strb	r2, [r7, #12]
 8007c1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007c1e:	737a      	strb	r2, [r7, #13]
 8007c20:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007c24:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8007c26:	6938      	ldr	r0, [r7, #16]
 8007c28:	f7fc f97a 	bl	8003f20 <pos_run_time>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	461c      	mov	r4, r3
 8007c30:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007c34:	2100      	movs	r1, #0
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fc f8ce 	bl	8003dd8 <calc_time>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	4423      	add	r3, r4
 8007c40:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f7fc f96b 	bl	8003f20 <pos_run_time>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d215      	bcs.n	8007c82 <turn_RV90_expand+0x7d8>
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f7fc fc18 	bl	800448c <is_determine>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10f      	bne.n	8007c82 <turn_RV90_expand+0x7d8>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8007c62:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8007c66:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9302      	str	r3, [sp, #8]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	6939      	ldr	r1, [r7, #16]
 8007c7c:	68f8      	ldr	r0, [r7, #12]
 8007c7e:	f7f9 fed1 	bl	8001a24 <close_list_set>
		}
    }
}
 8007c82:	bf00      	nop
 8007c84:	3784      	adds	r7, #132	; 0x84
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd90      	pop	{r4, r7, pc}

08007c8a <turn_LV90_expand>:

void turn_LV90_expand(t_position pos,t_eight_dir mouse_dir)
{
 8007c8a:	b590      	push	{r4, r7, lr}
 8007c8c:	b0a5      	sub	sp, #148	; 0x94
 8007c8e:	af04      	add	r7, sp, #16
 8007c90:	6078      	str	r0, [r7, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 2 + 8)%8;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	3306      	adds	r3, #6
 8007c9a:	425a      	negs	r2, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	f002 0207 	and.w	r2, r2, #7
 8007ca4:	bf58      	it	pl
 8007ca6:	4253      	negpl	r3, r2
 8007ca8:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8007cac:	793b      	ldrb	r3, [r7, #4]
 8007cae:	7979      	ldrb	r1, [r7, #5]
 8007cb0:	79ba      	ldrb	r2, [r7, #6]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7f9 f9de 	bl	8001074 <make_position>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461a      	mov	r2, r3
 8007cbc:	753a      	strb	r2, [r7, #20]
 8007cbe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007cc2:	757a      	strb	r2, [r7, #21]
 8007cc4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007cc8:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8007cca:	793b      	ldrb	r3, [r7, #4]
 8007ccc:	7979      	ldrb	r1, [r7, #5]
 8007cce:	79ba      	ldrb	r2, [r7, #6]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7f9 f9cf 	bl	8001074 <make_position>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	743a      	strb	r2, [r7, #16]
 8007cdc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007ce0:	747a      	strb	r2, [r7, #17]
 8007ce2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007ce6:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    t_run_pattern run_pt = Turn_LV90;
 8007cee:	2310      	movs	r3, #16
 8007cf0:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    if(pos.dir == north)
 8007cf4:	79bb      	ldrb	r3, [r7, #6]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f040 80d7 	bne.w	8007eaa <turn_LV90_expand+0x220>
    {
    	if(mouse_dir == NorthWest)
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	2b07      	cmp	r3, #7
 8007d00:	d165      	bne.n	8007dce <turn_LV90_expand+0x144>
    	{
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8007d02:	793b      	ldrb	r3, [r7, #4]
 8007d04:	3b01      	subs	r3, #1
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	f2c0 836a 	blt.w	80083e0 <turn_LV90_expand+0x756>
 8007d0c:	797b      	ldrb	r3, [r7, #5]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	2b1f      	cmp	r3, #31
 8007d12:	f300 8365 	bgt.w	80083e0 <turn_LV90_expand+0x756>
            {
				//if self.wall_data[pos.x - 1][pos.y + 1][Node_pos_dir.East] == False and  self.wall_data[pos.x - 1][pos.y][Node_pos_dir.North] == False:
				if( wall_check(make_position(pos.x-1,pos.y+1,east),0x03) == false && wall_check(make_position(pos.x-1,pos.y,north),0x03) == false)
 8007d16:	793b      	ldrb	r3, [r7, #4]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	b2d8      	uxtb	r0, r3
 8007d1c:	797b      	ldrb	r3, [r7, #5]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2201      	movs	r2, #1
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7f9 f9a5 	bl	8001074 <make_position>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	763a      	strb	r2, [r7, #24]
 8007d30:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007d34:	767a      	strb	r2, [r7, #25]
 8007d36:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007d3a:	76bb      	strb	r3, [r7, #26]
 8007d3c:	2103      	movs	r1, #3
 8007d3e:	69b8      	ldr	r0, [r7, #24]
 8007d40:	f7f9 f9f6 	bl	8001130 <wall_check>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f040 834a 	bne.w	80083e0 <turn_LV90_expand+0x756>
 8007d4c:	793b      	ldrb	r3, [r7, #4]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	7979      	ldrb	r1, [r7, #5]
 8007d54:	2200      	movs	r2, #0
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7f9 f98c 	bl	8001074 <make_position>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	461a      	mov	r2, r3
 8007d60:	773a      	strb	r2, [r7, #28]
 8007d62:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007d66:	777a      	strb	r2, [r7, #29]
 8007d68:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007d6c:	77bb      	strb	r3, [r7, #30]
 8007d6e:	2103      	movs	r1, #3
 8007d70:	69f8      	ldr	r0, [r7, #28]
 8007d72:	f7f9 f9dd 	bl	8001130 <wall_check>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f040 8331 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x-1,pos.y,west),0x03) == false)
 8007d7e:	793b      	ldrb	r3, [r7, #4]
 8007d80:	3b01      	subs	r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	7979      	ldrb	r1, [r7, #5]
 8007d86:	2203      	movs	r2, #3
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7f9 f973 	bl	8001074 <make_position>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	461a      	mov	r2, r3
 8007d92:	f887 2020 	strb.w	r2, [r7, #32]
 8007d96:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007d9a:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8007d9e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007da2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007da6:	2103      	movs	r1, #3
 8007da8:	6a38      	ldr	r0, [r7, #32]
 8007daa:	f7f9 f9c1 	bl	8001130 <wall_check>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f040 8315 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x - 1;
 8007db6:	793b      	ldrb	r3, [r7, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 8007dbe:	797b      	ldrb	r3, [r7, #5]
 8007dc0:	757b      	strb	r3, [r7, #21]
						next_pos.dir = north;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007dcc:	e308      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
            }
    	}
    	else if(mouse_dir == SouthEast)
 8007dce:	78fb      	ldrb	r3, [r7, #3]
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	f040 8305 	bne.w	80083e0 <turn_LV90_expand+0x756>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8007dd6:	793b      	ldrb	r3, [r7, #4]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	2b1f      	cmp	r3, #31
 8007ddc:	f300 8300 	bgt.w	80083e0 <turn_LV90_expand+0x756>
 8007de0:	797b      	ldrb	r3, [r7, #5]
 8007de2:	3301      	adds	r3, #1
 8007de4:	2b1f      	cmp	r3, #31
 8007de6:	f300 82fb 	bgt.w	80083e0 <turn_LV90_expand+0x756>
    		{
    			//if self.wall_data[pos.x][pos.y][Node_pos_dir.East] == False and  self.wall_data[pos.x+1][pos.y][Node_pos_dir.North] == False:
				if( wall_check(make_position(pos.x,pos.y,east),0x03) == false && wall_check(make_position(pos.x+1,pos.y,north),0x03) == false)
 8007dea:	793b      	ldrb	r3, [r7, #4]
 8007dec:	7979      	ldrb	r1, [r7, #5]
 8007dee:	2201      	movs	r2, #1
 8007df0:	4618      	mov	r0, r3
 8007df2:	f7f9 f93f 	bl	8001074 <make_position>
 8007df6:	4603      	mov	r3, r0
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8007dfe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007e02:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8007e06:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007e0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e0e:	2103      	movs	r1, #3
 8007e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e12:	f7f9 f98d 	bl	8001130 <wall_check>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f040 82e1 	bne.w	80083e0 <turn_LV90_expand+0x756>
 8007e1e:	793b      	ldrb	r3, [r7, #4]
 8007e20:	3301      	adds	r3, #1
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	7979      	ldrb	r1, [r7, #5]
 8007e26:	2200      	movs	r2, #0
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7f9 f923 	bl	8001074 <make_position>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	461a      	mov	r2, r3
 8007e32:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8007e36:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007e3a:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8007e3e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007e42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e46:	2103      	movs	r1, #3
 8007e48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e4a:	f7f9 f971 	bl	8001130 <wall_check>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 82c5 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x+1,pos.y+1,east),0x03) == false)
 8007e56:	793b      	ldrb	r3, [r7, #4]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	b2d8      	uxtb	r0, r3
 8007e5c:	797b      	ldrb	r3, [r7, #5]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	2201      	movs	r2, #1
 8007e64:	4619      	mov	r1, r3
 8007e66:	f7f9 f905 	bl	8001074 <make_position>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8007e72:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007e76:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8007e7a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007e7e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8007e82:	2103      	movs	r1, #3
 8007e84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e86:	f7f9 f953 	bl	8001130 <wall_check>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 82a7 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x + 1;
 8007e92:	793b      	ldrb	r3, [r7, #4]
 8007e94:	3301      	adds	r3, #1
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 8007e9a:	797b      	ldrb	r3, [r7, #5]
 8007e9c:	757b      	strb	r3, [r7, #21]
						next_pos.dir = north;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007ea8:	e29a      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
    		}
    	}
    }
    else if(pos.dir == east)
 8007eaa:	79bb      	ldrb	r3, [r7, #6]
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	f040 80dd 	bne.w	800806c <turn_LV90_expand+0x3e2>
    {
    	if(mouse_dir == NorthEast)
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d16b      	bne.n	8007f90 <turn_LV90_expand+0x306>
    	{
    		if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8007eb8:	793b      	ldrb	r3, [r7, #4]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	2b1f      	cmp	r3, #31
 8007ebe:	f300 828f 	bgt.w	80083e0 <turn_LV90_expand+0x756>
 8007ec2:	797b      	ldrb	r3, [r7, #5]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	2b1f      	cmp	r3, #31
 8007ec8:	f300 828a 	bgt.w	80083e0 <turn_LV90_expand+0x756>
    		{
				//if self.wall_data[pos.x+1][pos.y + 1][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y + 1][Node_pos_dir.East] == False:
				if( wall_check(make_position(pos.x+1,pos.y+1,south),0x03) == false && wall_check(make_position(pos.x,pos.y+1,east),0x03) == false)
 8007ecc:	793b      	ldrb	r3, [r7, #4]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	b2d8      	uxtb	r0, r3
 8007ed2:	797b      	ldrb	r3, [r7, #5]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2202      	movs	r2, #2
 8007eda:	4619      	mov	r1, r3
 8007edc:	f7f9 f8ca 	bl	8001074 <make_position>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8007ee8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007eec:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8007ef0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007ef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007ef8:	2103      	movs	r1, #3
 8007efa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007efc:	f7f9 f918 	bl	8001130 <wall_check>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 826c 	bne.w	80083e0 <turn_LV90_expand+0x756>
 8007f08:	7938      	ldrb	r0, [r7, #4]
 8007f0a:	797b      	ldrb	r3, [r7, #5]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2201      	movs	r2, #1
 8007f12:	4619      	mov	r1, r3
 8007f14:	f7f9 f8ae 	bl	8001074 <make_position>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8007f20:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007f24:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8007f28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007f2c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8007f30:	2103      	movs	r1, #3
 8007f32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007f34:	f7f9 f8fc 	bl	8001130 <wall_check>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	f040 8250 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x,pos.y+1,north),0x03) == false)
 8007f40:	7938      	ldrb	r0, [r7, #4]
 8007f42:	797b      	ldrb	r3, [r7, #5]
 8007f44:	3301      	adds	r3, #1
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2200      	movs	r2, #0
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	f7f9 f892 	bl	8001074 <make_position>
 8007f50:	4603      	mov	r3, r0
 8007f52:	461a      	mov	r2, r3
 8007f54:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8007f58:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007f5c:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8007f60:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007f64:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8007f68:	2103      	movs	r1, #3
 8007f6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f6c:	f7f9 f8e0 	bl	8001130 <wall_check>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8234 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x;
 8007f78:	793b      	ldrb	r3, [r7, #4]
 8007f7a:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y + 1;
 8007f7c:	797b      	ldrb	r3, [r7, #5]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	757b      	strb	r3, [r7, #21]
						next_pos.dir = east;
 8007f84:	2301      	movs	r3, #1
 8007f86:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007f8e:	e227      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
    		}
    	}
    	else if(mouse_dir == SouthWest)
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	f040 8224 	bne.w	80083e0 <turn_LV90_expand+0x756>
    	{
            if(pos.y - 1 >= 0 && pos.x + 1 < MAZE_SIZE_X)
 8007f98:	797b      	ldrb	r3, [r7, #5]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f2c0 821f 	blt.w	80083e0 <turn_LV90_expand+0x756>
 8007fa2:	793b      	ldrb	r3, [r7, #4]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	2b1f      	cmp	r3, #31
 8007fa8:	f300 821a 	bgt.w	80083e0 <turn_LV90_expand+0x756>
            {
				//if self.wall_data[pos.x][pos.y][Node_pos_dir.South] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.East] == False:
				if(wall_check(make_position(pos.x, pos.y, south),0x03) == false && wall_check(make_position(pos.x, pos.y-1, east),0x03) == false )
 8007fac:	793b      	ldrb	r3, [r7, #4]
 8007fae:	7979      	ldrb	r1, [r7, #5]
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 f85e 	bl	8001074 <make_position>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8007fc0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007fc4:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8007fc8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007fcc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007fd0:	2103      	movs	r1, #3
 8007fd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007fd4:	f7f9 f8ac 	bl	8001130 <wall_check>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 8200 	bne.w	80083e0 <turn_LV90_expand+0x756>
 8007fe0:	7938      	ldrb	r0, [r7, #4]
 8007fe2:	797b      	ldrb	r3, [r7, #5]
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	2201      	movs	r2, #1
 8007fea:	4619      	mov	r1, r3
 8007fec:	f7f9 f842 	bl	8001074 <make_position>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8007ff8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007ffc:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8008000:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008004:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008008:	2103      	movs	r1, #3
 800800a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800800c:	f7f9 f890 	bl	8001130 <wall_check>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	f040 81e4 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x+1,pos.y-1,south),0x03) == false)
 8008018:	793b      	ldrb	r3, [r7, #4]
 800801a:	3301      	adds	r3, #1
 800801c:	b2d8      	uxtb	r0, r3
 800801e:	797b      	ldrb	r3, [r7, #5]
 8008020:	3b01      	subs	r3, #1
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2202      	movs	r2, #2
 8008026:	4619      	mov	r1, r3
 8008028:	f7f9 f824 	bl	8001074 <make_position>
 800802c:	4603      	mov	r3, r0
 800802e:	461a      	mov	r2, r3
 8008030:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8008034:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008038:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 800803c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008040:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008044:	2103      	movs	r1, #3
 8008046:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008048:	f7f9 f872 	bl	8001130 <wall_check>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	f040 81c6 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x;
 8008054:	793b      	ldrb	r3, [r7, #4]
 8008056:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y - 1;
 8008058:	797b      	ldrb	r3, [r7, #5]
 800805a:	3b01      	subs	r3, #1
 800805c:	b2db      	uxtb	r3, r3
 800805e:	757b      	strb	r3, [r7, #21]
						next_pos.dir = east;
 8008060:	2301      	movs	r3, #1
 8008062:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8008064:	2301      	movs	r3, #1
 8008066:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800806a:	e1b9      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
            }
    	}
    }
    else if(pos.dir == south)
 800806c:	79bb      	ldrb	r3, [r7, #6]
 800806e:	2b02      	cmp	r3, #2
 8008070:	f040 80dd 	bne.w	800822e <turn_LV90_expand+0x5a4>
    {
    	if(mouse_dir == NorthWest)
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	2b07      	cmp	r3, #7
 8008078:	d169      	bne.n	800814e <turn_LV90_expand+0x4c4>
    	{
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 800807a:	793b      	ldrb	r3, [r7, #4]
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	f2c0 81ae 	blt.w	80083e0 <turn_LV90_expand+0x756>
 8008084:	797b      	ldrb	r3, [r7, #5]
 8008086:	3b01      	subs	r3, #1
 8008088:	2b00      	cmp	r3, #0
 800808a:	f2c0 81a9 	blt.w	80083e0 <turn_LV90_expand+0x756>
            {
            //if self.wall_data[pos.x][pos.y][Node_pos_dir.West] == False and  self.wall_data[pos.x-1][pos.y][Node_pos_dir.South] == False:
				if(wall_check(make_position(pos.x, pos.y, west),0x03) == false && wall_check(make_position(pos.x-1, pos.y, south),0x03) == false )
 800808e:	793b      	ldrb	r3, [r7, #4]
 8008090:	7979      	ldrb	r1, [r7, #5]
 8008092:	2203      	movs	r2, #3
 8008094:	4618      	mov	r0, r3
 8008096:	f7f8 ffed 	bl	8001074 <make_position>
 800809a:	4603      	mov	r3, r0
 800809c:	461a      	mov	r2, r3
 800809e:	f887 2048 	strb.w	r2, [r7, #72]	; 0x48
 80080a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80080a6:	f887 2049 	strb.w	r2, [r7, #73]	; 0x49
 80080aa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80080ae:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
 80080b2:	2103      	movs	r1, #3
 80080b4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80080b6:	f7f9 f83b 	bl	8001130 <wall_check>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f040 818f 	bne.w	80083e0 <turn_LV90_expand+0x756>
 80080c2:	793b      	ldrb	r3, [r7, #4]
 80080c4:	3b01      	subs	r3, #1
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	7979      	ldrb	r1, [r7, #5]
 80080ca:	2202      	movs	r2, #2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7f8 ffd1 	bl	8001074 <make_position>
 80080d2:	4603      	mov	r3, r0
 80080d4:	461a      	mov	r2, r3
 80080d6:	f887 204c 	strb.w	r2, [r7, #76]	; 0x4c
 80080da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80080de:	f887 204d 	strb.w	r2, [r7, #77]	; 0x4d
 80080e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80080e6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80080ea:	2103      	movs	r1, #3
 80080ec:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80080ee:	f7f9 f81f 	bl	8001130 <wall_check>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f040 8173 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x-1,pos.y-1,west),0x03) == false)
 80080fa:	793b      	ldrb	r3, [r7, #4]
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b2d8      	uxtb	r0, r3
 8008100:	797b      	ldrb	r3, [r7, #5]
 8008102:	3b01      	subs	r3, #1
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2203      	movs	r2, #3
 8008108:	4619      	mov	r1, r3
 800810a:	f7f8 ffb3 	bl	8001074 <make_position>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 8008116:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800811a:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
 800811e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008122:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008126:	2103      	movs	r1, #3
 8008128:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800812a:	f7f9 f801 	bl	8001130 <wall_check>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 8155 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x - 1;
 8008136:	793b      	ldrb	r3, [r7, #4]
 8008138:	3b01      	subs	r3, #1
 800813a:	b2db      	uxtb	r3, r3
 800813c:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 800813e:	797b      	ldrb	r3, [r7, #5]
 8008140:	757b      	strb	r3, [r7, #21]
						next_pos.dir = north;
 8008142:	2300      	movs	r3, #0
 8008144:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800814c:	e148      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
            }
    	}
    	else if(mouse_dir == SouthEast)
 800814e:	78fb      	ldrb	r3, [r7, #3]
 8008150:	2b03      	cmp	r3, #3
 8008152:	f040 8145 	bne.w	80083e0 <turn_LV90_expand+0x756>
    	{
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8008156:	793b      	ldrb	r3, [r7, #4]
 8008158:	3301      	adds	r3, #1
 800815a:	2b1f      	cmp	r3, #31
 800815c:	f300 8140 	bgt.w	80083e0 <turn_LV90_expand+0x756>
 8008160:	797b      	ldrb	r3, [r7, #5]
 8008162:	3b01      	subs	r3, #1
 8008164:	2b00      	cmp	r3, #0
 8008166:	f2c0 813b 	blt.w	80083e0 <turn_LV90_expand+0x756>
            {
                //if self.wall_data[pos.x+1][pos.y-1][Node_pos_dir.West] == False and self.wall_data[pos.x+1][pos.y][Node_pos_dir.South] == False:
				if(wall_check(make_position(pos.x+1, pos.y-1, west),0x03) == false && wall_check(make_position(pos.x+1, pos.y, south),0x03) == false )
 800816a:	793b      	ldrb	r3, [r7, #4]
 800816c:	3301      	adds	r3, #1
 800816e:	b2d8      	uxtb	r0, r3
 8008170:	797b      	ldrb	r3, [r7, #5]
 8008172:	3b01      	subs	r3, #1
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2203      	movs	r2, #3
 8008178:	4619      	mov	r1, r3
 800817a:	f7f8 ff7b 	bl	8001074 <make_position>
 800817e:	4603      	mov	r3, r0
 8008180:	461a      	mov	r2, r3
 8008182:	f887 2054 	strb.w	r2, [r7, #84]	; 0x54
 8008186:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800818a:	f887 2055 	strb.w	r2, [r7, #85]	; 0x55
 800818e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008192:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8008196:	2103      	movs	r1, #3
 8008198:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800819a:	f7f8 ffc9 	bl	8001130 <wall_check>
 800819e:	4603      	mov	r3, r0
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f040 811d 	bne.w	80083e0 <turn_LV90_expand+0x756>
 80081a6:	793b      	ldrb	r3, [r7, #4]
 80081a8:	3301      	adds	r3, #1
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	7979      	ldrb	r1, [r7, #5]
 80081ae:	2202      	movs	r2, #2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7f8 ff5f 	bl	8001074 <make_position>
 80081b6:	4603      	mov	r3, r0
 80081b8:	461a      	mov	r2, r3
 80081ba:	f887 2058 	strb.w	r2, [r7, #88]	; 0x58
 80081be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80081c2:	f887 2059 	strb.w	r2, [r7, #89]	; 0x59
 80081c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80081ca:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 80081ce:	2103      	movs	r1, #3
 80081d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80081d2:	f7f8 ffad 	bl	8001130 <wall_check>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 8101 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x+1,pos.y,east),0x03) == false)
 80081de:	793b      	ldrb	r3, [r7, #4]
 80081e0:	3301      	adds	r3, #1
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	7979      	ldrb	r1, [r7, #5]
 80081e6:	2201      	movs	r2, #1
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7f8 ff43 	bl	8001074 <make_position>
 80081ee:	4603      	mov	r3, r0
 80081f0:	461a      	mov	r2, r3
 80081f2:	f887 205c 	strb.w	r2, [r7, #92]	; 0x5c
 80081f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80081fa:	f887 205d 	strb.w	r2, [r7, #93]	; 0x5d
 80081fe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008202:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8008206:	2103      	movs	r1, #3
 8008208:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800820a:	f7f8 ff91 	bl	8001130 <wall_check>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	f040 80e5 	bne.w	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x + 1;
 8008216:	793b      	ldrb	r3, [r7, #4]
 8008218:	3301      	adds	r3, #1
 800821a:	b2db      	uxtb	r3, r3
 800821c:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 800821e:	797b      	ldrb	r3, [r7, #5]
 8008220:	757b      	strb	r3, [r7, #21]
						next_pos.dir = north;
 8008222:	2300      	movs	r3, #0
 8008224:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800822c:	e0d8      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
            }
    	}
    }
    else if(pos.dir == west)
 800822e:	79bb      	ldrb	r3, [r7, #6]
 8008230:	2b03      	cmp	r3, #3
 8008232:	f040 80d5 	bne.w	80083e0 <turn_LV90_expand+0x756>
    {
    	if(mouse_dir == NorthEast)
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d168      	bne.n	800830e <turn_LV90_expand+0x684>
    	{
            if(pos.y + 1 < MAZE_SIZE_Y && pos.x - 1 >= 0)
 800823c:	797b      	ldrb	r3, [r7, #5]
 800823e:	3301      	adds	r3, #1
 8008240:	2b1f      	cmp	r3, #31
 8008242:	f300 80cd 	bgt.w	80083e0 <turn_LV90_expand+0x756>
 8008246:	793b      	ldrb	r3, [r7, #4]
 8008248:	3b01      	subs	r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	f2c0 80c8 	blt.w	80083e0 <turn_LV90_expand+0x756>
            {
                //if self.wall_data[pos.x][pos.y][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y+1][Node_pos_dir.West] == False:
				if(wall_check(make_position(pos.x, pos.y, north),0x03) == false && wall_check(make_position(pos.x, pos.y+1, west),0x03) == false )
 8008250:	793b      	ldrb	r3, [r7, #4]
 8008252:	7979      	ldrb	r1, [r7, #5]
 8008254:	2200      	movs	r2, #0
 8008256:	4618      	mov	r0, r3
 8008258:	f7f8 ff0c 	bl	8001074 <make_position>
 800825c:	4603      	mov	r3, r0
 800825e:	461a      	mov	r2, r3
 8008260:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
 8008264:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008268:	f887 2061 	strb.w	r2, [r7, #97]	; 0x61
 800826c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008270:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8008274:	2103      	movs	r1, #3
 8008276:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8008278:	f7f8 ff5a 	bl	8001130 <wall_check>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	f040 80ae 	bne.w	80083e0 <turn_LV90_expand+0x756>
 8008284:	7938      	ldrb	r0, [r7, #4]
 8008286:	797b      	ldrb	r3, [r7, #5]
 8008288:	3301      	adds	r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2203      	movs	r2, #3
 800828e:	4619      	mov	r1, r3
 8008290:	f7f8 fef0 	bl	8001074 <make_position>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
 800829c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80082a0:	f887 2065 	strb.w	r2, [r7, #101]	; 0x65
 80082a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80082a8:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80082ac:	2103      	movs	r1, #3
 80082ae:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80082b0:	f7f8 ff3e 	bl	8001130 <wall_check>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f040 8092 	bne.w	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x-1,pos.y+1,north),0x03) == false)
 80082bc:	793b      	ldrb	r3, [r7, #4]
 80082be:	3b01      	subs	r3, #1
 80082c0:	b2d8      	uxtb	r0, r3
 80082c2:	797b      	ldrb	r3, [r7, #5]
 80082c4:	3301      	adds	r3, #1
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2200      	movs	r2, #0
 80082ca:	4619      	mov	r1, r3
 80082cc:	f7f8 fed2 	bl	8001074 <make_position>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	f887 2068 	strb.w	r2, [r7, #104]	; 0x68
 80082d8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80082dc:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
 80082e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80082e4:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 80082e8:	2103      	movs	r1, #3
 80082ea:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80082ec:	f7f8 ff20 	bl	8001130 <wall_check>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d174      	bne.n	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x;
 80082f6:	793b      	ldrb	r3, [r7, #4]
 80082f8:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y + 1;
 80082fa:	797b      	ldrb	r3, [r7, #5]
 80082fc:	3301      	adds	r3, #1
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	757b      	strb	r3, [r7, #21]
						next_pos.dir = west;
 8008302:	2303      	movs	r3, #3
 8008304:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 8008306:	2301      	movs	r3, #1
 8008308:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800830c:	e068      	b.n	80083e0 <turn_LV90_expand+0x756>
					}
				}
            }
    	}
    	else if(mouse_dir == SouthWest)
 800830e:	78fb      	ldrb	r3, [r7, #3]
 8008310:	2b05      	cmp	r3, #5
 8008312:	d165      	bne.n	80083e0 <turn_LV90_expand+0x756>
    	{
            if(pos.y - 1 >= 0 && pos.x - 1 >= 0)
 8008314:	797b      	ldrb	r3, [r7, #5]
 8008316:	3b01      	subs	r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	db61      	blt.n	80083e0 <turn_LV90_expand+0x756>
 800831c:	793b      	ldrb	r3, [r7, #4]
 800831e:	3b01      	subs	r3, #1
 8008320:	2b00      	cmp	r3, #0
 8008322:	db5d      	blt.n	80083e0 <turn_LV90_expand+0x756>
            {
                //if self.wall_data[pos.x-1][pos.y-1][Node_pos_dir.North] == False and self.wall_data[pos.x][pos.y-1][Node_pos_dir.West] == False:
				if(wall_check(make_position(pos.x-1, pos.y-1, north),0x03) == false && wall_check(make_position(pos.x, pos.y-1, west),0x03) == false )
 8008324:	793b      	ldrb	r3, [r7, #4]
 8008326:	3b01      	subs	r3, #1
 8008328:	b2d8      	uxtb	r0, r3
 800832a:	797b      	ldrb	r3, [r7, #5]
 800832c:	3b01      	subs	r3, #1
 800832e:	b2db      	uxtb	r3, r3
 8008330:	2200      	movs	r2, #0
 8008332:	4619      	mov	r1, r3
 8008334:	f7f8 fe9e 	bl	8001074 <make_position>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	f887 206c 	strb.w	r2, [r7, #108]	; 0x6c
 8008340:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008344:	f887 206d 	strb.w	r2, [r7, #109]	; 0x6d
 8008348:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800834c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8008350:	2103      	movs	r1, #3
 8008352:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008354:	f7f8 feec 	bl	8001130 <wall_check>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d140      	bne.n	80083e0 <turn_LV90_expand+0x756>
 800835e:	7938      	ldrb	r0, [r7, #4]
 8008360:	797b      	ldrb	r3, [r7, #5]
 8008362:	3b01      	subs	r3, #1
 8008364:	b2db      	uxtb	r3, r3
 8008366:	2203      	movs	r2, #3
 8008368:	4619      	mov	r1, r3
 800836a:	f7f8 fe83 	bl	8001074 <make_position>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	f887 2070 	strb.w	r2, [r7, #112]	; 0x70
 8008376:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800837a:	f887 2071 	strb.w	r2, [r7, #113]	; 0x71
 800837e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008382:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
 8008386:	2103      	movs	r1, #3
 8008388:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800838a:	f7f8 fed1 	bl	8001130 <wall_check>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d125      	bne.n	80083e0 <turn_LV90_expand+0x756>
				{
					if( wall_check(make_position(pos.x,pos.y-1,south),0x03) == false)
 8008394:	7938      	ldrb	r0, [r7, #4]
 8008396:	797b      	ldrb	r3, [r7, #5]
 8008398:	3b01      	subs	r3, #1
 800839a:	b2db      	uxtb	r3, r3
 800839c:	2202      	movs	r2, #2
 800839e:	4619      	mov	r1, r3
 80083a0:	f7f8 fe68 	bl	8001074 <make_position>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	f887 2074 	strb.w	r2, [r7, #116]	; 0x74
 80083ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083b0:	f887 2075 	strb.w	r2, [r7, #117]	; 0x75
 80083b4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80083b8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80083bc:	2103      	movs	r1, #3
 80083be:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80083c0:	f7f8 feb6 	bl	8001130 <wall_check>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10a      	bne.n	80083e0 <turn_LV90_expand+0x756>
					{
						next_pos.x = pos.x;
 80083ca:	793b      	ldrb	r3, [r7, #4]
 80083cc:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y - 1;
 80083ce:	797b      	ldrb	r3, [r7, #5]
 80083d0:	3b01      	subs	r3, #1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	757b      	strb	r3, [r7, #21]
						next_pos.dir = west;
 80083d6:	2303      	movs	r3, #3
 80083d8:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
            }
    	}
    }

    if(update_flag == true)
 80083e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d13c      	bne.n	8008462 <turn_LV90_expand+0x7d8>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80083e8:	7d3b      	ldrb	r3, [r7, #20]
 80083ea:	7d79      	ldrb	r1, [r7, #21]
 80083ec:	7dba      	ldrb	r2, [r7, #22]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f8 fe40 	bl	8001074 <make_position>
 80083f4:	4603      	mov	r3, r0
 80083f6:	461a      	mov	r2, r3
 80083f8:	733a      	strb	r2, [r7, #12]
 80083fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80083fe:	737a      	strb	r2, [r7, #13]
 8008400:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008404:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8008406:	6938      	ldr	r0, [r7, #16]
 8008408:	f7fb fd8a 	bl	8003f20 <pos_run_time>
 800840c:	4603      	mov	r3, r0
 800840e:	461c      	mov	r4, r3
 8008410:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f7fb fcde 	bl	8003dd8 <calc_time>
 800841c:	4603      	mov	r3, r0
 800841e:	4423      	add	r3, r4
 8008420:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7fb fd7b 	bl	8003f20 <pos_run_time>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8008432:	4293      	cmp	r3, r2
 8008434:	d215      	bcs.n	8008462 <turn_LV90_expand+0x7d8>
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7fc f828 	bl	800448c <is_determine>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10f      	bne.n	8008462 <turn_LV90_expand+0x7d8>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8008442:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8008446:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 800844a:	2300      	movs	r3, #0
 800844c:	9302      	str	r3, [sp, #8]
 800844e:	2300      	movs	r3, #0
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8008456:	9300      	str	r3, [sp, #0]
 8008458:	460b      	mov	r3, r1
 800845a:	6939      	ldr	r1, [r7, #16]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7f9 fae1 	bl	8001a24 <close_list_set>
		}
    }
}
 8008462:	bf00      	nop
 8008464:	3784      	adds	r7, #132	; 0x84
 8008466:	46bd      	mov	sp, r7
 8008468:	bd90      	pop	{r4, r7, pc}

0800846a <long_turn_R90_expand>:

void long_turn_R90_expand(t_position pos,t_eight_dir mouse_dir)
{
 800846a:	b590      	push	{r4, r7, lr}
 800846c:	b095      	sub	sp, #84	; 0x54
 800846e:	af04      	add	r7, sp, #16
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	460b      	mov	r3, r1
 8008474:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 2 + 8)%8;
 8008476:	78fb      	ldrb	r3, [r7, #3]
 8008478:	330a      	adds	r3, #10
 800847a:	425a      	negs	r2, r3
 800847c:	f003 0307 	and.w	r3, r3, #7
 8008480:	f002 0207 	and.w	r2, r2, #7
 8008484:	bf58      	it	pl
 8008486:	4253      	negpl	r3, r2
 8008488:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 800848c:	793b      	ldrb	r3, [r7, #4]
 800848e:	7979      	ldrb	r1, [r7, #5]
 8008490:	79ba      	ldrb	r2, [r7, #6]
 8008492:	4618      	mov	r0, r3
 8008494:	f7f8 fdee 	bl	8001074 <make_position>
 8008498:	4603      	mov	r3, r0
 800849a:	461a      	mov	r2, r3
 800849c:	753a      	strb	r2, [r7, #20]
 800849e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80084a2:	757a      	strb	r2, [r7, #21]
 80084a4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80084a8:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 80084aa:	793b      	ldrb	r3, [r7, #4]
 80084ac:	7979      	ldrb	r1, [r7, #5]
 80084ae:	79ba      	ldrb	r2, [r7, #6]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7f8 fddf 	bl	8001074 <make_position>
 80084b6:	4603      	mov	r3, r0
 80084b8:	461a      	mov	r2, r3
 80084ba:	743a      	strb	r2, [r7, #16]
 80084bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80084c0:	747a      	strb	r2, [r7, #17]
 80084c2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80084c6:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    t_run_pattern run_pt = Long_turnR90;
 80084ce:	2303      	movs	r3, #3
 80084d0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    if(pos.dir == center)
 80084d4:	79bb      	ldrb	r3, [r7, #6]
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	f040 816c 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
    {
        if(mouse_dir == North)
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d154      	bne.n	800858c <long_turn_R90_expand+0x122>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 <  MAZE_SIZE_Y)
 80084e2:	793b      	ldrb	r3, [r7, #4]
 80084e4:	3301      	adds	r3, #1
 80084e6:	2b1f      	cmp	r3, #31
 80084e8:	f300 8164 	bgt.w	80087b4 <long_turn_R90_expand+0x34a>
 80084ec:	797b      	ldrb	r3, [r7, #5]
 80084ee:	3301      	adds	r3, #1
 80084f0:	2b1f      	cmp	r3, #31
 80084f2:	f300 815f 	bgt.w	80087b4 <long_turn_R90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 80084f6:	7938      	ldrb	r0, [r7, #4]
 80084f8:	7979      	ldrb	r1, [r7, #5]
 80084fa:	78fb      	ldrb	r3, [r7, #3]
 80084fc:	085b      	lsrs	r3, r3, #1
 80084fe:	b2db      	uxtb	r3, r3
 8008500:	461a      	mov	r2, r3
 8008502:	f7f8 fdb7 	bl	8001074 <make_position>
 8008506:	4603      	mov	r3, r0
 8008508:	461a      	mov	r2, r3
 800850a:	763a      	strb	r2, [r7, #24]
 800850c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008510:	767a      	strb	r2, [r7, #25]
 8008512:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008516:	76bb      	strb	r3, [r7, #26]
 8008518:	2103      	movs	r1, #3
 800851a:	69b8      	ldr	r0, [r7, #24]
 800851c:	f7f8 fe08 	bl	8001130 <wall_check>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 8146 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
 8008528:	7938      	ldrb	r0, [r7, #4]
 800852a:	797b      	ldrb	r3, [r7, #5]
 800852c:	3301      	adds	r3, #1
 800852e:	b2d9      	uxtb	r1, r3
 8008530:	78fb      	ldrb	r3, [r7, #3]
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	b2db      	uxtb	r3, r3
 8008536:	3305      	adds	r3, #5
 8008538:	425a      	negs	r2, r3
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	f002 0203 	and.w	r2, r2, #3
 8008542:	bf58      	it	pl
 8008544:	4253      	negpl	r3, r2
 8008546:	b2db      	uxtb	r3, r3
 8008548:	461a      	mov	r2, r3
 800854a:	f7f8 fd93 	bl	8001074 <make_position>
 800854e:	4603      	mov	r3, r0
 8008550:	461a      	mov	r2, r3
 8008552:	773a      	strb	r2, [r7, #28]
 8008554:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008558:	777a      	strb	r2, [r7, #29]
 800855a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800855e:	77bb      	strb	r3, [r7, #30]
 8008560:	2103      	movs	r1, #3
 8008562:	69f8      	ldr	r0, [r7, #28]
 8008564:	f7f8 fde4 	bl	8001130 <wall_check>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	f040 8122 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
                {
               		next_pos.x = pos.x + 1;
 8008570:	793b      	ldrb	r3, [r7, #4]
 8008572:	3301      	adds	r3, #1
 8008574:	b2db      	uxtb	r3, r3
 8008576:	753b      	strb	r3, [r7, #20]
               		next_pos.y = pos.y + 1;
 8008578:	797b      	ldrb	r3, [r7, #5]
 800857a:	3301      	adds	r3, #1
 800857c:	b2db      	uxtb	r3, r3
 800857e:	757b      	strb	r3, [r7, #21]
               	    next_pos.dir = center;
 8008580:	2304      	movs	r3, #4
 8008582:	75bb      	strb	r3, [r7, #22]
               		update_flag = true;
 8008584:	2301      	movs	r3, #1
 8008586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800858a:	e113      	b.n	80087b4 <long_turn_R90_expand+0x34a>
                }
            }
        }
        else if(mouse_dir == East)
 800858c:	78fb      	ldrb	r3, [r7, #3]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d15a      	bne.n	8008648 <long_turn_R90_expand+0x1de>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 > 0)
 8008592:	793b      	ldrb	r3, [r7, #4]
 8008594:	3301      	adds	r3, #1
 8008596:	2b1f      	cmp	r3, #31
 8008598:	f300 810c 	bgt.w	80087b4 <long_turn_R90_expand+0x34a>
 800859c:	797b      	ldrb	r3, [r7, #5]
 800859e:	3b01      	subs	r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f340 8107 	ble.w	80087b4 <long_turn_R90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 80085a6:	7938      	ldrb	r0, [r7, #4]
 80085a8:	7979      	ldrb	r1, [r7, #5]
 80085aa:	78fb      	ldrb	r3, [r7, #3]
 80085ac:	085b      	lsrs	r3, r3, #1
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	461a      	mov	r2, r3
 80085b2:	f7f8 fd5f 	bl	8001074 <make_position>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461a      	mov	r2, r3
 80085ba:	f887 2020 	strb.w	r2, [r7, #32]
 80085be:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80085c2:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80085c6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80085ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085ce:	2103      	movs	r1, #3
 80085d0:	6a38      	ldr	r0, [r7, #32]
 80085d2:	f7f8 fdad 	bl	8001130 <wall_check>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f040 80eb 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
 80085de:	793b      	ldrb	r3, [r7, #4]
 80085e0:	3301      	adds	r3, #1
 80085e2:	b2d8      	uxtb	r0, r3
 80085e4:	7979      	ldrb	r1, [r7, #5]
 80085e6:	78fb      	ldrb	r3, [r7, #3]
 80085e8:	085b      	lsrs	r3, r3, #1
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	3305      	adds	r3, #5
 80085ee:	425a      	negs	r2, r3
 80085f0:	f003 0303 	and.w	r3, r3, #3
 80085f4:	f002 0203 	and.w	r2, r2, #3
 80085f8:	bf58      	it	pl
 80085fa:	4253      	negpl	r3, r2
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	461a      	mov	r2, r3
 8008600:	f7f8 fd38 	bl	8001074 <make_position>
 8008604:	4603      	mov	r3, r0
 8008606:	461a      	mov	r2, r3
 8008608:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 800860c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008610:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8008614:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008618:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800861c:	2103      	movs	r1, #3
 800861e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008620:	f7f8 fd86 	bl	8001130 <wall_check>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	f040 80c4 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
                {
					next_pos.x = pos.x + 1;
 800862c:	793b      	ldrb	r3, [r7, #4]
 800862e:	3301      	adds	r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y - 1;
 8008634:	797b      	ldrb	r3, [r7, #5]
 8008636:	3b01      	subs	r3, #1
 8008638:	b2db      	uxtb	r3, r3
 800863a:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 800863c:	2304      	movs	r3, #4
 800863e:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8008640:	2301      	movs	r3, #1
 8008642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008646:	e0b5      	b.n	80087b4 <long_turn_R90_expand+0x34a>
                }
            }
    	 }
        else if(mouse_dir == South)
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	2b04      	cmp	r3, #4
 800864c:	d159      	bne.n	8008702 <long_turn_R90_expand+0x298>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 800864e:	793b      	ldrb	r3, [r7, #4]
 8008650:	3b01      	subs	r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	f2c0 80ae 	blt.w	80087b4 <long_turn_R90_expand+0x34a>
 8008658:	797b      	ldrb	r3, [r7, #5]
 800865a:	3b01      	subs	r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	f2c0 80a9 	blt.w	80087b4 <long_turn_R90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008662:	7938      	ldrb	r0, [r7, #4]
 8008664:	7979      	ldrb	r1, [r7, #5]
 8008666:	78fb      	ldrb	r3, [r7, #3]
 8008668:	085b      	lsrs	r3, r3, #1
 800866a:	b2db      	uxtb	r3, r3
 800866c:	461a      	mov	r2, r3
 800866e:	f7f8 fd01 	bl	8001074 <make_position>
 8008672:	4603      	mov	r3, r0
 8008674:	461a      	mov	r2, r3
 8008676:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 800867a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800867e:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8008682:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008686:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800868a:	2103      	movs	r1, #3
 800868c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800868e:	f7f8 fd4f 	bl	8001130 <wall_check>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	f040 808d 	bne.w	80087b4 <long_turn_R90_expand+0x34a>
 800869a:	7938      	ldrb	r0, [r7, #4]
 800869c:	797b      	ldrb	r3, [r7, #5]
 800869e:	3b01      	subs	r3, #1
 80086a0:	b2d9      	uxtb	r1, r3
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	085b      	lsrs	r3, r3, #1
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	3305      	adds	r3, #5
 80086aa:	425a      	negs	r2, r3
 80086ac:	f003 0303 	and.w	r3, r3, #3
 80086b0:	f002 0203 	and.w	r2, r2, #3
 80086b4:	bf58      	it	pl
 80086b6:	4253      	negpl	r3, r2
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7f8 fcda 	bl	8001074 <make_position>
 80086c0:	4603      	mov	r3, r0
 80086c2:	461a      	mov	r2, r3
 80086c4:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80086c8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80086cc:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80086d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80086d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80086d8:	2103      	movs	r1, #3
 80086da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086dc:	f7f8 fd28 	bl	8001130 <wall_check>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d166      	bne.n	80087b4 <long_turn_R90_expand+0x34a>
                {
                	next_pos.x = pos.x - 1;
 80086e6:	793b      	ldrb	r3, [r7, #4]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y - 1;
 80086ee:	797b      	ldrb	r3, [r7, #5]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 80086f6:	2304      	movs	r3, #4
 80086f8:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008700:	e058      	b.n	80087b4 <long_turn_R90_expand+0x34a>
                }
            }
        }
        else if(mouse_dir == West)
 8008702:	78fb      	ldrb	r3, [r7, #3]
 8008704:	2b06      	cmp	r3, #6
 8008706:	d155      	bne.n	80087b4 <long_turn_R90_expand+0x34a>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8008708:	793b      	ldrb	r3, [r7, #4]
 800870a:	3b01      	subs	r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	db51      	blt.n	80087b4 <long_turn_R90_expand+0x34a>
 8008710:	797b      	ldrb	r3, [r7, #5]
 8008712:	3301      	adds	r3, #1
 8008714:	2b1f      	cmp	r3, #31
 8008716:	dc4d      	bgt.n	80087b4 <long_turn_R90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008718:	7938      	ldrb	r0, [r7, #4]
 800871a:	7979      	ldrb	r1, [r7, #5]
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	085b      	lsrs	r3, r3, #1
 8008720:	b2db      	uxtb	r3, r3
 8008722:	461a      	mov	r2, r3
 8008724:	f7f8 fca6 	bl	8001074 <make_position>
 8008728:	4603      	mov	r3, r0
 800872a:	461a      	mov	r2, r3
 800872c:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8008730:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008734:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8008738:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800873c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008740:	2103      	movs	r1, #3
 8008742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008744:	f7f8 fcf4 	bl	8001130 <wall_check>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d132      	bne.n	80087b4 <long_turn_R90_expand+0x34a>
 800874e:	793b      	ldrb	r3, [r7, #4]
 8008750:	3b01      	subs	r3, #1
 8008752:	b2d8      	uxtb	r0, r3
 8008754:	7979      	ldrb	r1, [r7, #5]
 8008756:	78fb      	ldrb	r3, [r7, #3]
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	b2db      	uxtb	r3, r3
 800875c:	3305      	adds	r3, #5
 800875e:	425a      	negs	r2, r3
 8008760:	f003 0303 	and.w	r3, r3, #3
 8008764:	f002 0203 	and.w	r2, r2, #3
 8008768:	bf58      	it	pl
 800876a:	4253      	negpl	r3, r2
 800876c:	b2db      	uxtb	r3, r3
 800876e:	461a      	mov	r2, r3
 8008770:	f7f8 fc80 	bl	8001074 <make_position>
 8008774:	4603      	mov	r3, r0
 8008776:	461a      	mov	r2, r3
 8008778:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 800877c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008780:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8008784:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008788:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800878c:	2103      	movs	r1, #3
 800878e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008790:	f7f8 fcce 	bl	8001130 <wall_check>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10c      	bne.n	80087b4 <long_turn_R90_expand+0x34a>
                {
               		next_pos.x = pos.x - 1;
 800879a:	793b      	ldrb	r3, [r7, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	753b      	strb	r3, [r7, #20]
               		next_pos.y = pos.y + 1;
 80087a2:	797b      	ldrb	r3, [r7, #5]
 80087a4:	3301      	adds	r3, #1
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	757b      	strb	r3, [r7, #21]
               		next_pos.dir = center;
 80087aa:	2304      	movs	r3, #4
 80087ac:	75bb      	strb	r3, [r7, #22]
               		update_flag = true;
 80087ae:	2301      	movs	r3, #1
 80087b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

                }
            }
        }
    }
    if(update_flag == true)
 80087b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d139      	bne.n	8008830 <long_turn_R90_expand+0x3c6>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80087bc:	7d3b      	ldrb	r3, [r7, #20]
 80087be:	7d79      	ldrb	r1, [r7, #21]
 80087c0:	7dba      	ldrb	r2, [r7, #22]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f7f8 fc56 	bl	8001074 <make_position>
 80087c8:	4603      	mov	r3, r0
 80087ca:	461a      	mov	r2, r3
 80087cc:	733a      	strb	r2, [r7, #12]
 80087ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80087d2:	737a      	strb	r2, [r7, #13]
 80087d4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80087d8:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f7fb fba0 	bl	8003f20 <pos_run_time>
 80087e0:	4603      	mov	r3, r0
 80087e2:	461c      	mov	r4, r3
 80087e4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80087e8:	2100      	movs	r1, #0
 80087ea:	4618      	mov	r0, r3
 80087ec:	f7fb faf4 	bl	8003dd8 <calc_time>
 80087f0:	4603      	mov	r3, r0
 80087f2:	4423      	add	r3, r4
 80087f4:	877b      	strh	r3, [r7, #58]	; 0x3a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7fb fb92 	bl	8003f20 <pos_run_time>
 80087fc:	4603      	mov	r3, r0
 80087fe:	461a      	mov	r2, r3
 8008800:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008802:	4293      	cmp	r3, r2
 8008804:	d214      	bcs.n	8008830 <long_turn_R90_expand+0x3c6>
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7fb fe40 	bl	800448c <is_determine>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d10e      	bne.n	8008830 <long_turn_R90_expand+0x3c6>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8008812:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8008814:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008818:	2300      	movs	r3, #0
 800881a:	9302      	str	r3, [sp, #8]
 800881c:	2300      	movs	r3, #0
 800881e:	9301      	str	r3, [sp, #4]
 8008820:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	460b      	mov	r3, r1
 8008828:	6939      	ldr	r1, [r7, #16]
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f7f9 f8fa 	bl	8001a24 <close_list_set>
		}
    }
}
 8008830:	bf00      	nop
 8008832:	3744      	adds	r7, #68	; 0x44
 8008834:	46bd      	mov	sp, r7
 8008836:	bd90      	pop	{r4, r7, pc}

08008838 <long_turn_L90_expand>:

void long_turn_L90_expand(t_position pos,t_eight_dir mouse_dir)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b095      	sub	sp, #84	; 0x54
 800883c:	af04      	add	r7, sp, #16
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	460b      	mov	r3, r1
 8008842:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 2 + 8)%8;
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	3306      	adds	r3, #6
 8008848:	425a      	negs	r2, r3
 800884a:	f003 0307 	and.w	r3, r3, #7
 800884e:	f002 0207 	and.w	r2, r2, #7
 8008852:	bf58      	it	pl
 8008854:	4253      	negpl	r3, r2
 8008856:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 800885a:	793b      	ldrb	r3, [r7, #4]
 800885c:	7979      	ldrb	r1, [r7, #5]
 800885e:	79ba      	ldrb	r2, [r7, #6]
 8008860:	4618      	mov	r0, r3
 8008862:	f7f8 fc07 	bl	8001074 <make_position>
 8008866:	4603      	mov	r3, r0
 8008868:	461a      	mov	r2, r3
 800886a:	753a      	strb	r2, [r7, #20]
 800886c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008870:	757a      	strb	r2, [r7, #21]
 8008872:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008876:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8008878:	793b      	ldrb	r3, [r7, #4]
 800887a:	7979      	ldrb	r1, [r7, #5]
 800887c:	79ba      	ldrb	r2, [r7, #6]
 800887e:	4618      	mov	r0, r3
 8008880:	f7f8 fbf8 	bl	8001074 <make_position>
 8008884:	4603      	mov	r3, r0
 8008886:	461a      	mov	r2, r3
 8008888:	743a      	strb	r2, [r7, #16]
 800888a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800888e:	747a      	strb	r2, [r7, #17]
 8008890:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008894:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8008896:	2300      	movs	r3, #0
 8008898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    t_run_pattern run_pt = Long_turnL90;
 800889c:	2304      	movs	r3, #4
 800889e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if(pos.dir == center)
 80088a2:	79bb      	ldrb	r3, [r7, #6]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	f040 816c 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
    {
        if (mouse_dir == North)
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d154      	bne.n	800895a <long_turn_L90_expand+0x122>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 80088b0:	793b      	ldrb	r3, [r7, #4]
 80088b2:	3b01      	subs	r3, #1
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f2c0 8164 	blt.w	8008b82 <long_turn_L90_expand+0x34a>
 80088ba:	797b      	ldrb	r3, [r7, #5]
 80088bc:	3301      	adds	r3, #1
 80088be:	2b1f      	cmp	r3, #31
 80088c0:	f300 815f 	bgt.w	8008b82 <long_turn_L90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 80088c4:	7938      	ldrb	r0, [r7, #4]
 80088c6:	7979      	ldrb	r1, [r7, #5]
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	085b      	lsrs	r3, r3, #1
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7f8 fbd0 	bl	8001074 <make_position>
 80088d4:	4603      	mov	r3, r0
 80088d6:	461a      	mov	r2, r3
 80088d8:	763a      	strb	r2, [r7, #24]
 80088da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80088de:	767a      	strb	r2, [r7, #25]
 80088e0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80088e4:	76bb      	strb	r3, [r7, #26]
 80088e6:	2103      	movs	r1, #3
 80088e8:	69b8      	ldr	r0, [r7, #24]
 80088ea:	f7f8 fc21 	bl	8001130 <wall_check>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 8146 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
 80088f6:	7938      	ldrb	r0, [r7, #4]
 80088f8:	797b      	ldrb	r3, [r7, #5]
 80088fa:	3301      	adds	r3, #1
 80088fc:	b2d9      	uxtb	r1, r3
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	3303      	adds	r3, #3
 8008906:	425a      	negs	r2, r3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	f002 0203 	and.w	r2, r2, #3
 8008910:	bf58      	it	pl
 8008912:	4253      	negpl	r3, r2
 8008914:	b2db      	uxtb	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	f7f8 fbac 	bl	8001074 <make_position>
 800891c:	4603      	mov	r3, r0
 800891e:	461a      	mov	r2, r3
 8008920:	773a      	strb	r2, [r7, #28]
 8008922:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008926:	777a      	strb	r2, [r7, #29]
 8008928:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800892c:	77bb      	strb	r3, [r7, #30]
 800892e:	2103      	movs	r1, #3
 8008930:	69f8      	ldr	r0, [r7, #28]
 8008932:	f7f8 fbfd 	bl	8001130 <wall_check>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f040 8122 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
                {
                	next_pos.x = pos.x - 1;
 800893e:	793b      	ldrb	r3, [r7, #4]
 8008940:	3b01      	subs	r3, #1
 8008942:	b2db      	uxtb	r3, r3
 8008944:	753b      	strb	r3, [r7, #20]
                	next_pos.y = pos.y + 1;
 8008946:	797b      	ldrb	r3, [r7, #5]
 8008948:	3301      	adds	r3, #1
 800894a:	b2db      	uxtb	r3, r3
 800894c:	757b      	strb	r3, [r7, #21]
               		next_pos.dir = center;
 800894e:	2304      	movs	r3, #4
 8008950:	75bb      	strb	r3, [r7, #22]
               		update_flag = true;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008958:	e113      	b.n	8008b82 <long_turn_L90_expand+0x34a>
                }
            }
        }
        else if(mouse_dir == East)
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	2b02      	cmp	r3, #2
 800895e:	d15a      	bne.n	8008a16 <long_turn_L90_expand+0x1de>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8008960:	793b      	ldrb	r3, [r7, #4]
 8008962:	3301      	adds	r3, #1
 8008964:	2b1f      	cmp	r3, #31
 8008966:	f300 810c 	bgt.w	8008b82 <long_turn_L90_expand+0x34a>
 800896a:	797b      	ldrb	r3, [r7, #5]
 800896c:	3301      	adds	r3, #1
 800896e:	2b1f      	cmp	r3, #31
 8008970:	f300 8107 	bgt.w	8008b82 <long_turn_L90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8008974:	7938      	ldrb	r0, [r7, #4]
 8008976:	7979      	ldrb	r1, [r7, #5]
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	085b      	lsrs	r3, r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	f7f8 fb78 	bl	8001074 <make_position>
 8008984:	4603      	mov	r3, r0
 8008986:	461a      	mov	r2, r3
 8008988:	f887 2020 	strb.w	r2, [r7, #32]
 800898c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008990:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8008994:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800899c:	2103      	movs	r1, #3
 800899e:	6a38      	ldr	r0, [r7, #32]
 80089a0:	f7f8 fbc6 	bl	8001130 <wall_check>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f040 80eb 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
 80089ac:	793b      	ldrb	r3, [r7, #4]
 80089ae:	3301      	adds	r3, #1
 80089b0:	b2d8      	uxtb	r0, r3
 80089b2:	7979      	ldrb	r1, [r7, #5]
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	3303      	adds	r3, #3
 80089bc:	425a      	negs	r2, r3
 80089be:	f003 0303 	and.w	r3, r3, #3
 80089c2:	f002 0203 	and.w	r2, r2, #3
 80089c6:	bf58      	it	pl
 80089c8:	4253      	negpl	r3, r2
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	461a      	mov	r2, r3
 80089ce:	f7f8 fb51 	bl	8001074 <make_position>
 80089d2:	4603      	mov	r3, r0
 80089d4:	461a      	mov	r2, r3
 80089d6:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 80089da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80089de:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 80089e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80089e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80089ea:	2103      	movs	r1, #3
 80089ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80089ee:	f7f8 fb9f 	bl	8001130 <wall_check>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 80c4 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
                {
                	//if self.wall_data[pos.x+1][pos.y+1][int(mouse_dir/2)] == False:
					next_pos.x = pos.x + 1;
 80089fa:	793b      	ldrb	r3, [r7, #4]
 80089fc:	3301      	adds	r3, #1
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y + 1;
 8008a02:	797b      	ldrb	r3, [r7, #5]
 8008a04:	3301      	adds	r3, #1
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 8008a0a:	2304      	movs	r3, #4
 8008a0c:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008a14:	e0b5      	b.n	8008b82 <long_turn_L90_expand+0x34a>
                }
            }
        }
        else if(mouse_dir == South)
 8008a16:	78fb      	ldrb	r3, [r7, #3]
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d159      	bne.n	8008ad0 <long_turn_L90_expand+0x298>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8008a1c:	793b      	ldrb	r3, [r7, #4]
 8008a1e:	3301      	adds	r3, #1
 8008a20:	2b1f      	cmp	r3, #31
 8008a22:	f300 80ae 	bgt.w	8008b82 <long_turn_L90_expand+0x34a>
 8008a26:	797b      	ldrb	r3, [r7, #5]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f2c0 80a9 	blt.w	8008b82 <long_turn_L90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8008a30:	7938      	ldrb	r0, [r7, #4]
 8008a32:	7979      	ldrb	r1, [r7, #5]
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	085b      	lsrs	r3, r3, #1
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7f8 fb1a 	bl	8001074 <make_position>
 8008a40:	4603      	mov	r3, r0
 8008a42:	461a      	mov	r2, r3
 8008a44:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8008a48:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a4c:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8008a50:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008a54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a58:	2103      	movs	r1, #3
 8008a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a5c:	f7f8 fb68 	bl	8001130 <wall_check>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f040 808d 	bne.w	8008b82 <long_turn_L90_expand+0x34a>
 8008a68:	7938      	ldrb	r0, [r7, #4]
 8008a6a:	797b      	ldrb	r3, [r7, #5]
 8008a6c:	3b01      	subs	r3, #1
 8008a6e:	b2d9      	uxtb	r1, r3
 8008a70:	78fb      	ldrb	r3, [r7, #3]
 8008a72:	085b      	lsrs	r3, r3, #1
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3303      	adds	r3, #3
 8008a78:	425a      	negs	r2, r3
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	f002 0203 	and.w	r2, r2, #3
 8008a82:	bf58      	it	pl
 8008a84:	4253      	negpl	r3, r2
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	461a      	mov	r2, r3
 8008a8a:	f7f8 faf3 	bl	8001074 <make_position>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461a      	mov	r2, r3
 8008a92:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8008a96:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a9a:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8008a9e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008aa2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008aa6:	2103      	movs	r1, #3
 8008aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008aaa:	f7f8 fb41 	bl	8001130 <wall_check>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d166      	bne.n	8008b82 <long_turn_L90_expand+0x34a>
                {
                	//if self.wall_data[pos.x+1][pos.y-1][int(mouse_dir/2)] == False:
					next_pos.x = pos.x + 1;
 8008ab4:	793b      	ldrb	r3, [r7, #4]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	753b      	strb	r3, [r7, #20]
					next_pos.y = pos.y - 1;
 8008abc:	797b      	ldrb	r3, [r7, #5]
 8008abe:	3b01      	subs	r3, #1
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	757b      	strb	r3, [r7, #21]
					next_pos.dir = center;
 8008ac4:	2304      	movs	r3, #4
 8008ac6:	75bb      	strb	r3, [r7, #22]
					update_flag = true;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008ace:	e058      	b.n	8008b82 <long_turn_L90_expand+0x34a>
                }
            }
        }
        else if(mouse_dir == West)
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	2b06      	cmp	r3, #6
 8008ad4:	d155      	bne.n	8008b82 <long_turn_L90_expand+0x34a>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8008ad6:	793b      	ldrb	r3, [r7, #4]
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	db51      	blt.n	8008b82 <long_turn_L90_expand+0x34a>
 8008ade:	797b      	ldrb	r3, [r7, #5]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	db4d      	blt.n	8008b82 <long_turn_L90_expand+0x34a>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8008ae6:	7938      	ldrb	r0, [r7, #4]
 8008ae8:	7979      	ldrb	r1, [r7, #5]
 8008aea:	78fb      	ldrb	r3, [r7, #3]
 8008aec:	085b      	lsrs	r3, r3, #1
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	f7f8 fabf 	bl	8001074 <make_position>
 8008af6:	4603      	mov	r3, r0
 8008af8:	461a      	mov	r2, r3
 8008afa:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8008afe:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008b02:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8008b06:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008b0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008b0e:	2103      	movs	r1, #3
 8008b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b12:	f7f8 fb0d 	bl	8001130 <wall_check>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d132      	bne.n	8008b82 <long_turn_L90_expand+0x34a>
 8008b1c:	793b      	ldrb	r3, [r7, #4]
 8008b1e:	3b01      	subs	r3, #1
 8008b20:	b2d8      	uxtb	r0, r3
 8008b22:	7979      	ldrb	r1, [r7, #5]
 8008b24:	78fb      	ldrb	r3, [r7, #3]
 8008b26:	085b      	lsrs	r3, r3, #1
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	3303      	adds	r3, #3
 8008b2c:	425a      	negs	r2, r3
 8008b2e:	f003 0303 	and.w	r3, r3, #3
 8008b32:	f002 0203 	and.w	r2, r2, #3
 8008b36:	bf58      	it	pl
 8008b38:	4253      	negpl	r3, r2
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	f7f8 fa99 	bl	8001074 <make_position>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8008b4a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008b4e:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8008b52:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008b56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008b5a:	2103      	movs	r1, #3
 8008b5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008b5e:	f7f8 fae7 	bl	8001130 <wall_check>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10c      	bne.n	8008b82 <long_turn_L90_expand+0x34a>
                {
                	//if self.wall_data[pos.x-1][pos.y-1][int(mouse_dir/2)] == False:
               		next_pos.x = pos.x - 1;
 8008b68:	793b      	ldrb	r3, [r7, #4]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	753b      	strb	r3, [r7, #20]
               		next_pos.y = pos.y - 1;
 8008b70:	797b      	ldrb	r3, [r7, #5]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	757b      	strb	r3, [r7, #21]
                	next_pos.dir = center;
 8008b78:	2304      	movs	r3, #4
 8008b7a:	75bb      	strb	r3, [r7, #22]
                	update_flag = true;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                }
            }
        }
    }

    if(update_flag == true)
 8008b82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d139      	bne.n	8008bfe <long_turn_L90_expand+0x3c6>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8008b8a:	7d3b      	ldrb	r3, [r7, #20]
 8008b8c:	7d79      	ldrb	r1, [r7, #21]
 8008b8e:	7dba      	ldrb	r2, [r7, #22]
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7f8 fa6f 	bl	8001074 <make_position>
 8008b96:	4603      	mov	r3, r0
 8008b98:	461a      	mov	r2, r3
 8008b9a:	733a      	strb	r2, [r7, #12]
 8008b9c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ba0:	737a      	strb	r2, [r7, #13]
 8008ba2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008ba6:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8008ba8:	6938      	ldr	r0, [r7, #16]
 8008baa:	f7fb f9b9 	bl	8003f20 <pos_run_time>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	461c      	mov	r4, r3
 8008bb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008bb6:	2100      	movs	r1, #0
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fb f90d 	bl	8003dd8 <calc_time>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	4423      	add	r3, r4
 8008bc2:	877b      	strh	r3, [r7, #58]	; 0x3a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f7fb f9ab 	bl	8003f20 <pos_run_time>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	461a      	mov	r2, r3
 8008bce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d214      	bcs.n	8008bfe <long_turn_L90_expand+0x3c6>
 8008bd4:	68f8      	ldr	r0, [r7, #12]
 8008bd6:	f7fb fc59 	bl	800448c <is_determine>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <long_turn_L90_expand+0x3c6>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8008be0:	8f79      	ldrh	r1, [r7, #58]	; 0x3a
 8008be2:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8008be6:	2300      	movs	r3, #0
 8008be8:	9302      	str	r3, [sp, #8]
 8008bea:	2300      	movs	r3, #0
 8008bec:	9301      	str	r3, [sp, #4]
 8008bee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	6939      	ldr	r1, [r7, #16]
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7f8 ff13 	bl	8001a24 <close_list_set>
		}
    }
}
 8008bfe:	bf00      	nop
 8008c00:	3744      	adds	r7, #68	; 0x44
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd90      	pop	{r4, r7, pc}

08008c06 <long_turn_R180_expand>:

void long_turn_R180_expand(t_position pos,t_eight_dir mouse_dir)
{
 8008c06:	b590      	push	{r4, r7, lr}
 8008c08:	b099      	sub	sp, #100	; 0x64
 8008c0a:	af04      	add	r7, sp, #16
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir + 4 + 8)%8;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	330c      	adds	r3, #12
 8008c16:	425a      	negs	r2, r3
 8008c18:	f003 0307 	and.w	r3, r3, #7
 8008c1c:	f002 0207 	and.w	r2, r2, #7
 8008c20:	bf58      	it	pl
 8008c22:	4253      	negpl	r3, r2
 8008c24:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 8008c28:	793b      	ldrb	r3, [r7, #4]
 8008c2a:	7979      	ldrb	r1, [r7, #5]
 8008c2c:	79ba      	ldrb	r2, [r7, #6]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7f8 fa20 	bl	8001074 <make_position>
 8008c34:	4603      	mov	r3, r0
 8008c36:	461a      	mov	r2, r3
 8008c38:	753a      	strb	r2, [r7, #20]
 8008c3a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c3e:	757a      	strb	r2, [r7, #21]
 8008c40:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008c44:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 8008c46:	793b      	ldrb	r3, [r7, #4]
 8008c48:	7979      	ldrb	r1, [r7, #5]
 8008c4a:	79ba      	ldrb	r2, [r7, #6]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7f8 fa11 	bl	8001074 <make_position>
 8008c52:	4603      	mov	r3, r0
 8008c54:	461a      	mov	r2, r3
 8008c56:	743a      	strb	r2, [r7, #16]
 8008c58:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008c5c:	747a      	strb	r2, [r7, #17]
 8008c5e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008c62:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8008c64:	2300      	movs	r3, #0
 8008c66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    t_run_pattern run_pt = Long_turnR180;
 8008c6a:	2305      	movs	r3, #5
 8008c6c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if(pos.dir == center)
 8008c70:	79bb      	ldrb	r3, [r7, #6]
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	f040 81db 	bne.w	800902e <long_turn_R180_expand+0x428>
    {
        if(mouse_dir == North)
 8008c78:	78fb      	ldrb	r3, [r7, #3]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d170      	bne.n	8008d60 <long_turn_R180_expand+0x15a>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 <  MAZE_SIZE_Y)
 8008c7e:	793b      	ldrb	r3, [r7, #4]
 8008c80:	3301      	adds	r3, #1
 8008c82:	2b1f      	cmp	r3, #31
 8008c84:	f300 81d3 	bgt.w	800902e <long_turn_R180_expand+0x428>
 8008c88:	797b      	ldrb	r3, [r7, #5]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	2b1f      	cmp	r3, #31
 8008c8e:	f300 81ce 	bgt.w	800902e <long_turn_R180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008c92:	7938      	ldrb	r0, [r7, #4]
 8008c94:	7979      	ldrb	r1, [r7, #5]
 8008c96:	78fb      	ldrb	r3, [r7, #3]
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	b2db      	uxtb	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f7f8 f9e9 	bl	8001074 <make_position>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	763a      	strb	r2, [r7, #24]
 8008ca8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008cac:	767a      	strb	r2, [r7, #25]
 8008cae:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008cb2:	76bb      	strb	r3, [r7, #26]
 8008cb4:	2103      	movs	r1, #3
 8008cb6:	69b8      	ldr	r0, [r7, #24]
 8008cb8:	f7f8 fa3a 	bl	8001130 <wall_check>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f040 81b5 	bne.w	800902e <long_turn_R180_expand+0x428>
 8008cc4:	7938      	ldrb	r0, [r7, #4]
 8008cc6:	797b      	ldrb	r3, [r7, #5]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	b2d9      	uxtb	r1, r3
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	3305      	adds	r3, #5
 8008cd4:	425a      	negs	r2, r3
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	f002 0203 	and.w	r2, r2, #3
 8008cde:	bf58      	it	pl
 8008ce0:	4253      	negpl	r3, r2
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	f7f8 f9c5 	bl	8001074 <make_position>
 8008cea:	4603      	mov	r3, r0
 8008cec:	461a      	mov	r2, r3
 8008cee:	773a      	strb	r2, [r7, #28]
 8008cf0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008cf4:	777a      	strb	r2, [r7, #29]
 8008cf6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008cfa:	77bb      	strb	r3, [r7, #30]
 8008cfc:	2103      	movs	r1, #3
 8008cfe:	69f8      	ldr	r0, [r7, #28]
 8008d00:	f7f8 fa16 	bl	8001130 <wall_check>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 8191 	bne.w	800902e <long_turn_R180_expand+0x428>
                {
               	 //if self.wall_data[pos.x+1][pos.y][int(mouse_dir/2)] == False:
               	 if(wall_check(make_position(pos.x+1, pos.y, mouse_dir/2), 0x03) == false)
 8008d0c:	793b      	ldrb	r3, [r7, #4]
 8008d0e:	3301      	adds	r3, #1
 8008d10:	b2d8      	uxtb	r0, r3
 8008d12:	7979      	ldrb	r1, [r7, #5]
 8008d14:	78fb      	ldrb	r3, [r7, #3]
 8008d16:	085b      	lsrs	r3, r3, #1
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7f8 f9aa 	bl	8001074 <make_position>
 8008d20:	4603      	mov	r3, r0
 8008d22:	461a      	mov	r2, r3
 8008d24:	f887 2020 	strb.w	r2, [r7, #32]
 8008d28:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008d2c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8008d30:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d38:	2103      	movs	r1, #3
 8008d3a:	6a38      	ldr	r0, [r7, #32]
 8008d3c:	f7f8 f9f8 	bl	8001130 <wall_check>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f040 8173 	bne.w	800902e <long_turn_R180_expand+0x428>
               	 {
               		 next_pos.x = pos.x + 1;
 8008d48:	793b      	ldrb	r3, [r7, #4]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	753b      	strb	r3, [r7, #20]
               		 next_pos.y = pos.y;
 8008d50:	797b      	ldrb	r3, [r7, #5]
 8008d52:	757b      	strb	r3, [r7, #21]
               		 next_pos.dir = center;
 8008d54:	2304      	movs	r3, #4
 8008d56:	75bb      	strb	r3, [r7, #22]
               		 update_flag = true;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008d5e:	e166      	b.n	800902e <long_turn_R180_expand+0x428>
               	 }
                }
            }
        }
        else if(mouse_dir == East)
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d176      	bne.n	8008e54 <long_turn_R180_expand+0x24e>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 8008d66:	793b      	ldrb	r3, [r7, #4]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	2b1f      	cmp	r3, #31
 8008d6c:	f300 815f 	bgt.w	800902e <long_turn_R180_expand+0x428>
 8008d70:	797b      	ldrb	r3, [r7, #5]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f2c0 815a 	blt.w	800902e <long_turn_R180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008d7a:	7938      	ldrb	r0, [r7, #4]
 8008d7c:	7979      	ldrb	r1, [r7, #5]
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	461a      	mov	r2, r3
 8008d86:	f7f8 f975 	bl	8001074 <make_position>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8008d92:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008d96:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 8008d9a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008d9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008da2:	2103      	movs	r1, #3
 8008da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008da6:	f7f8 f9c3 	bl	8001130 <wall_check>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 813e 	bne.w	800902e <long_turn_R180_expand+0x428>
 8008db2:	793b      	ldrb	r3, [r7, #4]
 8008db4:	3301      	adds	r3, #1
 8008db6:	b2d8      	uxtb	r0, r3
 8008db8:	7979      	ldrb	r1, [r7, #5]
 8008dba:	78fb      	ldrb	r3, [r7, #3]
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	3305      	adds	r3, #5
 8008dc2:	425a      	negs	r2, r3
 8008dc4:	f003 0303 	and.w	r3, r3, #3
 8008dc8:	f002 0203 	and.w	r2, r2, #3
 8008dcc:	bf58      	it	pl
 8008dce:	4253      	negpl	r3, r2
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f7f8 f94e 	bl	8001074 <make_position>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8008de0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008de4:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 8008de8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008df0:	2103      	movs	r1, #3
 8008df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008df4:	f7f8 f99c 	bl	8001130 <wall_check>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f040 8117 	bne.w	800902e <long_turn_R180_expand+0x428>
                {
               	 //if self.wall_data[pos.x][pos.y-1][int(mouse_dir/2)] == False:
               	 if(wall_check(make_position(pos.x, pos.y-1, mouse_dir/2), 0x03) == false)
 8008e00:	7938      	ldrb	r0, [r7, #4]
 8008e02:	797b      	ldrb	r3, [r7, #5]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b2d9      	uxtb	r1, r3
 8008e08:	78fb      	ldrb	r3, [r7, #3]
 8008e0a:	085b      	lsrs	r3, r3, #1
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f7f8 f930 	bl	8001074 <make_position>
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 8008e1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e20:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 8008e24:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008e28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8008e2c:	2103      	movs	r1, #3
 8008e2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e30:	f7f8 f97e 	bl	8001130 <wall_check>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f040 80f9 	bne.w	800902e <long_turn_R180_expand+0x428>
               	 {
						 next_pos.x = pos.x;
 8008e3c:	793b      	ldrb	r3, [r7, #4]
 8008e3e:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y - 1;
 8008e40:	797b      	ldrb	r3, [r7, #5]
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = center;
 8008e48:	2304      	movs	r3, #4
 8008e4a:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008e52:	e0ec      	b.n	800902e <long_turn_R180_expand+0x428>
               	 }
                }
            }
    	 }
        else if(mouse_dir == South)
 8008e54:	78fb      	ldrb	r3, [r7, #3]
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d175      	bne.n	8008f46 <long_turn_R180_expand+0x340>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 8008e5a:	793b      	ldrb	r3, [r7, #4]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f2c0 80e5 	blt.w	800902e <long_turn_R180_expand+0x428>
 8008e64:	797b      	ldrb	r3, [r7, #5]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f2c0 80e0 	blt.w	800902e <long_turn_R180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008e6e:	7938      	ldrb	r0, [r7, #4]
 8008e70:	7979      	ldrb	r1, [r7, #5]
 8008e72:	78fb      	ldrb	r3, [r7, #3]
 8008e74:	085b      	lsrs	r3, r3, #1
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	461a      	mov	r2, r3
 8008e7a:	f7f8 f8fb 	bl	8001074 <make_position>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	461a      	mov	r2, r3
 8008e82:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8008e86:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008e8a:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8008e8e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8008e96:	2103      	movs	r1, #3
 8008e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e9a:	f7f8 f949 	bl	8001130 <wall_check>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f040 80c4 	bne.w	800902e <long_turn_R180_expand+0x428>
 8008ea6:	7938      	ldrb	r0, [r7, #4]
 8008ea8:	797b      	ldrb	r3, [r7, #5]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b2d9      	uxtb	r1, r3
 8008eae:	78fb      	ldrb	r3, [r7, #3]
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	3305      	adds	r3, #5
 8008eb6:	425a      	negs	r2, r3
 8008eb8:	f003 0303 	and.w	r3, r3, #3
 8008ebc:	f002 0203 	and.w	r2, r2, #3
 8008ec0:	bf58      	it	pl
 8008ec2:	4253      	negpl	r3, r2
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	f7f8 f8d4 	bl	8001074 <make_position>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8008ed4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ed8:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 8008edc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008ee0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8008ee4:	2103      	movs	r1, #3
 8008ee6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008ee8:	f7f8 f922 	bl	8001130 <wall_check>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f040 809d 	bne.w	800902e <long_turn_R180_expand+0x428>
                {
               	 //if self.wall_data[pos.x-1][pos.y][int(mouse_dir/2)] == False:
               	 if(wall_check(make_position(pos.x-1, pos.y, mouse_dir/2), 0x03) == false)
 8008ef4:	793b      	ldrb	r3, [r7, #4]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b2d8      	uxtb	r0, r3
 8008efa:	7979      	ldrb	r1, [r7, #5]
 8008efc:	78fb      	ldrb	r3, [r7, #3]
 8008efe:	085b      	lsrs	r3, r3, #1
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	f7f8 f8b6 	bl	8001074 <make_position>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 8008f10:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008f14:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 8008f18:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008f1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 8008f20:	2103      	movs	r1, #3
 8008f22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f24:	f7f8 f904 	bl	8001130 <wall_check>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d17f      	bne.n	800902e <long_turn_R180_expand+0x428>
               	 {
						 next_pos.x = pos.x - 1;
 8008f2e:	793b      	ldrb	r3, [r7, #4]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	753b      	strb	r3, [r7, #20]
						 next_pos.y = pos.y;
 8008f36:	797b      	ldrb	r3, [r7, #5]
 8008f38:	757b      	strb	r3, [r7, #21]
						 next_pos.dir = center;
 8008f3a:	2304      	movs	r3, #4
 8008f3c:	75bb      	strb	r3, [r7, #22]
						 update_flag = true;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008f44:	e073      	b.n	800902e <long_turn_R180_expand+0x428>
               	 }
                }
            }
        }
        else if(mouse_dir == West)
 8008f46:	78fb      	ldrb	r3, [r7, #3]
 8008f48:	2b06      	cmp	r3, #6
 8008f4a:	d170      	bne.n	800902e <long_turn_R180_expand+0x428>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8008f4c:	793b      	ldrb	r3, [r7, #4]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	db6c      	blt.n	800902e <long_turn_R180_expand+0x428>
 8008f54:	797b      	ldrb	r3, [r7, #5]
 8008f56:	3301      	adds	r3, #1
 8008f58:	2b1f      	cmp	r3, #31
 8008f5a:	dc68      	bgt.n	800902e <long_turn_R180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) + 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) + 1 + 4)%4), 0x03) == false)
 8008f5c:	7938      	ldrb	r0, [r7, #4]
 8008f5e:	7979      	ldrb	r1, [r7, #5]
 8008f60:	78fb      	ldrb	r3, [r7, #3]
 8008f62:	085b      	lsrs	r3, r3, #1
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	461a      	mov	r2, r3
 8008f68:	f7f8 f884 	bl	8001074 <make_position>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	461a      	mov	r2, r3
 8008f70:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8008f74:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008f78:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 8008f7c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008f80:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8008f84:	2103      	movs	r1, #3
 8008f86:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008f88:	f7f8 f8d2 	bl	8001130 <wall_check>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d14d      	bne.n	800902e <long_turn_R180_expand+0x428>
 8008f92:	793b      	ldrb	r3, [r7, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	b2d8      	uxtb	r0, r3
 8008f98:	7979      	ldrb	r1, [r7, #5]
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	085b      	lsrs	r3, r3, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	3305      	adds	r3, #5
 8008fa2:	425a      	negs	r2, r3
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	f002 0203 	and.w	r2, r2, #3
 8008fac:	bf58      	it	pl
 8008fae:	4253      	negpl	r3, r2
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f7f8 f85e 	bl	8001074 <make_position>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8008fc0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008fc4:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 8008fc8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8008fcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fd0:	2103      	movs	r1, #3
 8008fd2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008fd4:	f7f8 f8ac 	bl	8001130 <wall_check>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d127      	bne.n	800902e <long_turn_R180_expand+0x428>
                {
               	 // if self.wall_data[pos.x][pos.y+1][int(mouse_dir/2)] == False:
               	 if(wall_check(make_position(pos.x, pos.y+1, mouse_dir/2), 0x03) == false)
 8008fde:	7938      	ldrb	r0, [r7, #4]
 8008fe0:	797b      	ldrb	r3, [r7, #5]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	b2d9      	uxtb	r1, r3
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	085b      	lsrs	r3, r3, #1
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	f7f8 f841 	bl	8001074 <make_position>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 8008ffa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008ffe:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 8009002:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009006:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800900a:	2103      	movs	r1, #3
 800900c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800900e:	f7f8 f88f 	bl	8001130 <wall_check>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d10a      	bne.n	800902e <long_turn_R180_expand+0x428>
               	 {
               		 next_pos.x = pos.x;
 8009018:	793b      	ldrb	r3, [r7, #4]
 800901a:	753b      	strb	r3, [r7, #20]
               		 next_pos.y = pos.y + 1;
 800901c:	797b      	ldrb	r3, [r7, #5]
 800901e:	3301      	adds	r3, #1
 8009020:	b2db      	uxtb	r3, r3
 8009022:	757b      	strb	r3, [r7, #21]
               		 next_pos.dir = center;
 8009024:	2304      	movs	r3, #4
 8009026:	75bb      	strb	r3, [r7, #22]
               		 update_flag = true;
 8009028:	2301      	movs	r3, #1
 800902a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }
        }
    }

    if(update_flag == true)
 800902e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8009032:	2b01      	cmp	r3, #1
 8009034:	d13c      	bne.n	80090b0 <long_turn_R180_expand+0x4aa>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8009036:	7d3b      	ldrb	r3, [r7, #20]
 8009038:	7d79      	ldrb	r1, [r7, #21]
 800903a:	7dba      	ldrb	r2, [r7, #22]
 800903c:	4618      	mov	r0, r3
 800903e:	f7f8 f819 	bl	8001074 <make_position>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	733a      	strb	r2, [r7, #12]
 8009048:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800904c:	737a      	strb	r2, [r7, #13]
 800904e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009052:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8009054:	6938      	ldr	r0, [r7, #16]
 8009056:	f7fa ff63 	bl	8003f20 <pos_run_time>
 800905a:	4603      	mov	r3, r0
 800905c:	461c      	mov	r4, r3
 800905e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f7fa feb7 	bl	8003dd8 <calc_time>
 800906a:	4603      	mov	r3, r0
 800906c:	4423      	add	r3, r4
 800906e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f7fa ff54 	bl	8003f20 <pos_run_time>
 8009078:	4603      	mov	r3, r0
 800907a:	461a      	mov	r2, r3
 800907c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009080:	4293      	cmp	r3, r2
 8009082:	d215      	bcs.n	80090b0 <long_turn_R180_expand+0x4aa>
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f7fb fa01 	bl	800448c <is_determine>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10f      	bne.n	80090b0 <long_turn_R180_expand+0x4aa>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8009090:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8009094:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8009098:	2300      	movs	r3, #0
 800909a:	9302      	str	r3, [sp, #8]
 800909c:	2300      	movs	r3, #0
 800909e:	9301      	str	r3, [sp, #4]
 80090a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	460b      	mov	r3, r1
 80090a8:	6939      	ldr	r1, [r7, #16]
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f7f8 fcba 	bl	8001a24 <close_list_set>
		}
    }
}
 80090b0:	bf00      	nop
 80090b2:	3754      	adds	r7, #84	; 0x54
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd90      	pop	{r4, r7, pc}

080090b8 <long_turn_L180_expand>:

void long_turn_L180_expand(t_position pos,t_eight_dir mouse_dir)
{
 80090b8:	b590      	push	{r4, r7, lr}
 80090ba:	b099      	sub	sp, #100	; 0x64
 80090bc:	af04      	add	r7, sp, #16
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	460b      	mov	r3, r1
 80090c2:	70fb      	strb	r3, [r7, #3]
    t_eight_dir next_mouse_dir = (mouse_dir - 4 + 8)%8;
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	3304      	adds	r3, #4
 80090c8:	425a      	negs	r2, r3
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	f002 0207 	and.w	r2, r2, #7
 80090d2:	bf58      	it	pl
 80090d4:	4253      	negpl	r3, r2
 80090d6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    t_position next_pos = make_position(pos.x,pos.y,pos.dir);
 80090da:	793b      	ldrb	r3, [r7, #4]
 80090dc:	7979      	ldrb	r1, [r7, #5]
 80090de:	79ba      	ldrb	r2, [r7, #6]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f7 ffc7 	bl	8001074 <make_position>
 80090e6:	4603      	mov	r3, r0
 80090e8:	461a      	mov	r2, r3
 80090ea:	753a      	strb	r2, [r7, #20]
 80090ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80090f0:	757a      	strb	r2, [r7, #21]
 80090f2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80090f6:	75bb      	strb	r3, [r7, #22]
    t_position parent_pos = make_position(pos.x,pos.y,pos.dir);
 80090f8:	793b      	ldrb	r3, [r7, #4]
 80090fa:	7979      	ldrb	r1, [r7, #5]
 80090fc:	79ba      	ldrb	r2, [r7, #6]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 ffb8 	bl	8001074 <make_position>
 8009104:	4603      	mov	r3, r0
 8009106:	461a      	mov	r2, r3
 8009108:	743a      	strb	r2, [r7, #16]
 800910a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800910e:	747a      	strb	r2, [r7, #17]
 8009110:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009114:	74bb      	strb	r3, [r7, #18]
    t_bool update_flag = false;
 8009116:	2300      	movs	r3, #0
 8009118:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    t_run_pattern run_pt = Long_turnL180;
 800911c:	2306      	movs	r3, #6
 800911e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if(pos.dir == center)
 8009122:	79bb      	ldrb	r3, [r7, #6]
 8009124:	2b04      	cmp	r3, #4
 8009126:	f040 81db 	bne.w	80094e0 <long_turn_L180_expand+0x428>
    {
        if (mouse_dir == North)
 800912a:	78fb      	ldrb	r3, [r7, #3]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d170      	bne.n	8009212 <long_turn_L180_expand+0x15a>
        {
            if(pos.x - 1 >= 0 && pos.y + 1 < MAZE_SIZE_Y)
 8009130:	793b      	ldrb	r3, [r7, #4]
 8009132:	3b01      	subs	r3, #1
 8009134:	2b00      	cmp	r3, #0
 8009136:	f2c0 81d3 	blt.w	80094e0 <long_turn_L180_expand+0x428>
 800913a:	797b      	ldrb	r3, [r7, #5]
 800913c:	3301      	adds	r3, #1
 800913e:	2b1f      	cmp	r3, #31
 8009140:	f300 81ce 	bgt.w	80094e0 <long_turn_L180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y+1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8009144:	7938      	ldrb	r0, [r7, #4]
 8009146:	7979      	ldrb	r1, [r7, #5]
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	b2db      	uxtb	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	f7f7 ff90 	bl	8001074 <make_position>
 8009154:	4603      	mov	r3, r0
 8009156:	461a      	mov	r2, r3
 8009158:	763a      	strb	r2, [r7, #24]
 800915a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800915e:	767a      	strb	r2, [r7, #25]
 8009160:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009164:	76bb      	strb	r3, [r7, #26]
 8009166:	2103      	movs	r1, #3
 8009168:	69b8      	ldr	r0, [r7, #24]
 800916a:	f7f7 ffe1 	bl	8001130 <wall_check>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 81b5 	bne.w	80094e0 <long_turn_L180_expand+0x428>
 8009176:	7938      	ldrb	r0, [r7, #4]
 8009178:	797b      	ldrb	r3, [r7, #5]
 800917a:	3301      	adds	r3, #1
 800917c:	b2d9      	uxtb	r1, r3
 800917e:	78fb      	ldrb	r3, [r7, #3]
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	b2db      	uxtb	r3, r3
 8009184:	3303      	adds	r3, #3
 8009186:	425a      	negs	r2, r3
 8009188:	f003 0303 	and.w	r3, r3, #3
 800918c:	f002 0203 	and.w	r2, r2, #3
 8009190:	bf58      	it	pl
 8009192:	4253      	negpl	r3, r2
 8009194:	b2db      	uxtb	r3, r3
 8009196:	461a      	mov	r2, r3
 8009198:	f7f7 ff6c 	bl	8001074 <make_position>
 800919c:	4603      	mov	r3, r0
 800919e:	461a      	mov	r2, r3
 80091a0:	773a      	strb	r2, [r7, #28]
 80091a2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80091a6:	777a      	strb	r2, [r7, #29]
 80091a8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80091ac:	77bb      	strb	r3, [r7, #30]
 80091ae:	2103      	movs	r1, #3
 80091b0:	69f8      	ldr	r0, [r7, #28]
 80091b2:	f7f7 ffbd 	bl	8001130 <wall_check>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f040 8191 	bne.w	80094e0 <long_turn_L180_expand+0x428>
                {
                	//if self.wall_data[pos.x-1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x-1, pos.y, mouse_dir/2), 0x03) == false)
 80091be:	793b      	ldrb	r3, [r7, #4]
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b2d8      	uxtb	r0, r3
 80091c4:	7979      	ldrb	r1, [r7, #5]
 80091c6:	78fb      	ldrb	r3, [r7, #3]
 80091c8:	085b      	lsrs	r3, r3, #1
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	461a      	mov	r2, r3
 80091ce:	f7f7 ff51 	bl	8001074 <make_position>
 80091d2:	4603      	mov	r3, r0
 80091d4:	461a      	mov	r2, r3
 80091d6:	f887 2020 	strb.w	r2, [r7, #32]
 80091da:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80091de:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 80091e2:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80091e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80091ea:	2103      	movs	r1, #3
 80091ec:	6a38      	ldr	r0, [r7, #32]
 80091ee:	f7f7 ff9f 	bl	8001130 <wall_check>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 8173 	bne.w	80094e0 <long_turn_L180_expand+0x428>
                	{
                		next_pos.x = pos.x - 1;
 80091fa:	793b      	ldrb	r3, [r7, #4]
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y;
 8009202:	797b      	ldrb	r3, [r7, #5]
 8009204:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = center;
 8009206:	2304      	movs	r3, #4
 8009208:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 800920a:	2301      	movs	r3, #1
 800920c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009210:	e166      	b.n	80094e0 <long_turn_L180_expand+0x428>
                	}
                }
            }
        }
        else if(mouse_dir == East)
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d176      	bne.n	8009306 <long_turn_L180_expand+0x24e>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y + 1 < MAZE_SIZE_Y)
 8009218:	793b      	ldrb	r3, [r7, #4]
 800921a:	3301      	adds	r3, #1
 800921c:	2b1f      	cmp	r3, #31
 800921e:	f300 815f 	bgt.w	80094e0 <long_turn_L180_expand+0x428>
 8009222:	797b      	ldrb	r3, [r7, #5]
 8009224:	3301      	adds	r3, #1
 8009226:	2b1f      	cmp	r3, #31
 8009228:	f300 815a 	bgt.w	80094e0 <long_turn_L180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x+1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 800922c:	7938      	ldrb	r0, [r7, #4]
 800922e:	7979      	ldrb	r1, [r7, #5]
 8009230:	78fb      	ldrb	r3, [r7, #3]
 8009232:	085b      	lsrs	r3, r3, #1
 8009234:	b2db      	uxtb	r3, r3
 8009236:	461a      	mov	r2, r3
 8009238:	f7f7 ff1c 	bl	8001074 <make_position>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
 8009244:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009248:	f887 2025 	strb.w	r2, [r7, #37]	; 0x25
 800924c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009254:	2103      	movs	r1, #3
 8009256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009258:	f7f7 ff6a 	bl	8001130 <wall_check>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	f040 813e 	bne.w	80094e0 <long_turn_L180_expand+0x428>
 8009264:	793b      	ldrb	r3, [r7, #4]
 8009266:	3301      	adds	r3, #1
 8009268:	b2d8      	uxtb	r0, r3
 800926a:	7979      	ldrb	r1, [r7, #5]
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	3303      	adds	r3, #3
 8009274:	425a      	negs	r2, r3
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	f002 0203 	and.w	r2, r2, #3
 800927e:	bf58      	it	pl
 8009280:	4253      	negpl	r3, r2
 8009282:	b2db      	uxtb	r3, r3
 8009284:	461a      	mov	r2, r3
 8009286:	f7f7 fef5 	bl	8001074 <make_position>
 800928a:	4603      	mov	r3, r0
 800928c:	461a      	mov	r2, r3
 800928e:	f887 2028 	strb.w	r2, [r7, #40]	; 0x28
 8009292:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009296:	f887 2029 	strb.w	r2, [r7, #41]	; 0x29
 800929a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800929e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80092a2:	2103      	movs	r1, #3
 80092a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a6:	f7f7 ff43 	bl	8001130 <wall_check>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 8117 	bne.w	80094e0 <long_turn_L180_expand+0x428>
                {
                	//if self.wall_data[pos.x][pos.y+1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y+1][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x, pos.y+1, mouse_dir/2), 0x03) == false)
 80092b2:	7938      	ldrb	r0, [r7, #4]
 80092b4:	797b      	ldrb	r3, [r7, #5]
 80092b6:	3301      	adds	r3, #1
 80092b8:	b2d9      	uxtb	r1, r3
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	461a      	mov	r2, r3
 80092c2:	f7f7 fed7 	bl	8001074 <make_position>
 80092c6:	4603      	mov	r3, r0
 80092c8:	461a      	mov	r2, r3
 80092ca:	f887 202c 	strb.w	r2, [r7, #44]	; 0x2c
 80092ce:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80092d2:	f887 202d 	strb.w	r2, [r7, #45]	; 0x2d
 80092d6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80092da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80092de:	2103      	movs	r1, #3
 80092e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e2:	f7f7 ff25 	bl	8001130 <wall_check>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 80f9 	bne.w	80094e0 <long_turn_L180_expand+0x428>
                	{
						next_pos.x = pos.x;
 80092ee:	793b      	ldrb	r3, [r7, #4]
 80092f0:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y + 1;
 80092f2:	797b      	ldrb	r3, [r7, #5]
 80092f4:	3301      	adds	r3, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = center;
 80092fa:	2304      	movs	r3, #4
 80092fc:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8009304:	e0ec      	b.n	80094e0 <long_turn_L180_expand+0x428>
                	}
                }
            }
        }
        else if(mouse_dir == South)
 8009306:	78fb      	ldrb	r3, [r7, #3]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d175      	bne.n	80093f8 <long_turn_L180_expand+0x340>
        {
            if(pos.x + 1 < MAZE_SIZE_X && pos.y - 1 >= 0)
 800930c:	793b      	ldrb	r3, [r7, #4]
 800930e:	3301      	adds	r3, #1
 8009310:	2b1f      	cmp	r3, #31
 8009312:	f300 80e5 	bgt.w	80094e0 <long_turn_L180_expand+0x428>
 8009316:	797b      	ldrb	r3, [r7, #5]
 8009318:	3b01      	subs	r3, #1
 800931a:	2b00      	cmp	r3, #0
 800931c:	f2c0 80e0 	blt.w	80094e0 <long_turn_L180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x, pos.y-1, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 8009320:	7938      	ldrb	r0, [r7, #4]
 8009322:	7979      	ldrb	r1, [r7, #5]
 8009324:	78fb      	ldrb	r3, [r7, #3]
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	b2db      	uxtb	r3, r3
 800932a:	461a      	mov	r2, r3
 800932c:	f7f7 fea2 	bl	8001074 <make_position>
 8009330:	4603      	mov	r3, r0
 8009332:	461a      	mov	r2, r3
 8009334:	f887 2030 	strb.w	r2, [r7, #48]	; 0x30
 8009338:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800933c:	f887 2031 	strb.w	r2, [r7, #49]	; 0x31
 8009340:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009344:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009348:	2103      	movs	r1, #3
 800934a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800934c:	f7f7 fef0 	bl	8001130 <wall_check>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	f040 80c4 	bne.w	80094e0 <long_turn_L180_expand+0x428>
 8009358:	7938      	ldrb	r0, [r7, #4]
 800935a:	797b      	ldrb	r3, [r7, #5]
 800935c:	3b01      	subs	r3, #1
 800935e:	b2d9      	uxtb	r1, r3
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	085b      	lsrs	r3, r3, #1
 8009364:	b2db      	uxtb	r3, r3
 8009366:	3303      	adds	r3, #3
 8009368:	425a      	negs	r2, r3
 800936a:	f003 0303 	and.w	r3, r3, #3
 800936e:	f002 0203 	and.w	r2, r2, #3
 8009372:	bf58      	it	pl
 8009374:	4253      	negpl	r3, r2
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	f7f7 fe7b 	bl	8001074 <make_position>
 800937e:	4603      	mov	r3, r0
 8009380:	461a      	mov	r2, r3
 8009382:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 8009386:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800938a:	f887 2035 	strb.w	r2, [r7, #53]	; 0x35
 800938e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009392:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8009396:	2103      	movs	r1, #3
 8009398:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800939a:	f7f7 fec9 	bl	8001130 <wall_check>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f040 809d 	bne.w	80094e0 <long_turn_L180_expand+0x428>
                {
                	//if self.wall_data[pos.x+1][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x+1][pos.y][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x+1, pos.y, mouse_dir/2), 0x03) == false)
 80093a6:	793b      	ldrb	r3, [r7, #4]
 80093a8:	3301      	adds	r3, #1
 80093aa:	b2d8      	uxtb	r0, r3
 80093ac:	7979      	ldrb	r1, [r7, #5]
 80093ae:	78fb      	ldrb	r3, [r7, #3]
 80093b0:	085b      	lsrs	r3, r3, #1
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	f7f7 fe5d 	bl	8001074 <make_position>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
 80093c2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80093c6:	f887 2039 	strb.w	r2, [r7, #57]	; 0x39
 80093ca:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80093ce:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80093d2:	2103      	movs	r1, #3
 80093d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093d6:	f7f7 feab 	bl	8001130 <wall_check>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d17f      	bne.n	80094e0 <long_turn_L180_expand+0x428>
                	{
						next_pos.x = pos.x + 1;
 80093e0:	793b      	ldrb	r3, [r7, #4]
 80093e2:	3301      	adds	r3, #1
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	753b      	strb	r3, [r7, #20]
						next_pos.y = pos.y;
 80093e8:	797b      	ldrb	r3, [r7, #5]
 80093ea:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = center;
 80093ec:	2304      	movs	r3, #4
 80093ee:	75bb      	strb	r3, [r7, #22]
						update_flag = true;
 80093f0:	2301      	movs	r3, #1
 80093f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80093f6:	e073      	b.n	80094e0 <long_turn_L180_expand+0x428>
                	}
                }
            }
        }
        else if(mouse_dir == West)
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	2b06      	cmp	r3, #6
 80093fc:	d170      	bne.n	80094e0 <long_turn_L180_expand+0x428>
        {
            if(pos.x - 1 >= 0 && pos.y - 1 >= 0)
 80093fe:	793b      	ldrb	r3, [r7, #4]
 8009400:	3b01      	subs	r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	db6c      	blt.n	80094e0 <long_turn_L180_expand+0x428>
 8009406:	797b      	ldrb	r3, [r7, #5]
 8009408:	3b01      	subs	r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	db68      	blt.n	80094e0 <long_turn_L180_expand+0x428>
            {
                //if self.wall_data[pos.x][pos.y][int(mouse_dir/2)] == False and self.wall_data[pos.x-1][pos.y][(int(mouse_dir/2) - 1 + 4)%4] == False:
                if(wall_check(make_position(pos.x, pos.y, mouse_dir/2), 0x03) == false && wall_check(make_position(pos.x-1, pos.y, ((mouse_dir/2) - 1 + 4)%4), 0x03) == false)
 800940e:	7938      	ldrb	r0, [r7, #4]
 8009410:	7979      	ldrb	r1, [r7, #5]
 8009412:	78fb      	ldrb	r3, [r7, #3]
 8009414:	085b      	lsrs	r3, r3, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	f7f7 fe2b 	bl	8001074 <make_position>
 800941e:	4603      	mov	r3, r0
 8009420:	461a      	mov	r2, r3
 8009422:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
 8009426:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800942a:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
 800942e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009432:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8009436:	2103      	movs	r1, #3
 8009438:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800943a:	f7f7 fe79 	bl	8001130 <wall_check>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d14d      	bne.n	80094e0 <long_turn_L180_expand+0x428>
 8009444:	793b      	ldrb	r3, [r7, #4]
 8009446:	3b01      	subs	r3, #1
 8009448:	b2d8      	uxtb	r0, r3
 800944a:	7979      	ldrb	r1, [r7, #5]
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	085b      	lsrs	r3, r3, #1
 8009450:	b2db      	uxtb	r3, r3
 8009452:	3303      	adds	r3, #3
 8009454:	425a      	negs	r2, r3
 8009456:	f003 0303 	and.w	r3, r3, #3
 800945a:	f002 0203 	and.w	r2, r2, #3
 800945e:	bf58      	it	pl
 8009460:	4253      	negpl	r3, r2
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	f7f7 fe05 	bl	8001074 <make_position>
 800946a:	4603      	mov	r3, r0
 800946c:	461a      	mov	r2, r3
 800946e:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
 8009472:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009476:	f887 2041 	strb.w	r2, [r7, #65]	; 0x41
 800947a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800947e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009482:	2103      	movs	r1, #3
 8009484:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009486:	f7f7 fe53 	bl	8001130 <wall_check>
 800948a:	4603      	mov	r3, r0
 800948c:	2b00      	cmp	r3, #0
 800948e:	d127      	bne.n	80094e0 <long_turn_L180_expand+0x428>
                {
                	// if self.wall_data[pos.x][pos.y-1][int(mouse_dir/2)] == False and self.wall_data[pos.x][pos.y-1][(int(mouse_dir/2)-1+4)%4] == False:
                	if(wall_check(make_position(pos.x, pos.y-1, mouse_dir/2), 0x03) == false)
 8009490:	7938      	ldrb	r0, [r7, #4]
 8009492:	797b      	ldrb	r3, [r7, #5]
 8009494:	3b01      	subs	r3, #1
 8009496:	b2d9      	uxtb	r1, r3
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	085b      	lsrs	r3, r3, #1
 800949c:	b2db      	uxtb	r3, r3
 800949e:	461a      	mov	r2, r3
 80094a0:	f7f7 fde8 	bl	8001074 <make_position>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	f887 2044 	strb.w	r2, [r7, #68]	; 0x44
 80094ac:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80094b0:	f887 2045 	strb.w	r2, [r7, #69]	; 0x45
 80094b4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80094b8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80094bc:	2103      	movs	r1, #3
 80094be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80094c0:	f7f7 fe36 	bl	8001130 <wall_check>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d10a      	bne.n	80094e0 <long_turn_L180_expand+0x428>
                	{
                		next_pos.x = pos.x;
 80094ca:	793b      	ldrb	r3, [r7, #4]
 80094cc:	753b      	strb	r3, [r7, #20]
                		next_pos.y = pos.y - 1;
 80094ce:	797b      	ldrb	r3, [r7, #5]
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	757b      	strb	r3, [r7, #21]
                		next_pos.dir = center;
 80094d6:	2304      	movs	r3, #4
 80094d8:	75bb      	strb	r3, [r7, #22]
                		update_flag = true;
 80094da:	2301      	movs	r3, #1
 80094dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
                }
            }
        }
    }

    if(update_flag == true)
 80094e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d13c      	bne.n	8009562 <long_turn_L180_expand+0x4aa>
    {
    	t_position set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 80094e8:	7d3b      	ldrb	r3, [r7, #20]
 80094ea:	7d79      	ldrb	r1, [r7, #21]
 80094ec:	7dba      	ldrb	r2, [r7, #22]
 80094ee:	4618      	mov	r0, r3
 80094f0:	f7f7 fdc0 	bl	8001074 <make_position>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	733a      	strb	r2, [r7, #12]
 80094fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80094fe:	737a      	strb	r2, [r7, #13]
 8009500:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009504:	73bb      	strb	r3, [r7, #14]
    	uint16_t	set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, 0);
 8009506:	6938      	ldr	r0, [r7, #16]
 8009508:	f7fa fd0a 	bl	8003f20 <pos_run_time>
 800950c:	4603      	mov	r3, r0
 800950e:	461c      	mov	r4, r3
 8009510:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009514:	2100      	movs	r1, #0
 8009516:	4618      	mov	r0, r3
 8009518:	f7fa fc5e 	bl	8003dd8 <calc_time>
 800951c:	4603      	mov	r3, r0
 800951e:	4423      	add	r3, r4
 8009520:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7fa fcfb 	bl	8003f20 <pos_run_time>
 800952a:	4603      	mov	r3, r0
 800952c:	461a      	mov	r2, r3
 800952e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009532:	4293      	cmp	r3, r2
 8009534:	d215      	bcs.n	8009562 <long_turn_L180_expand+0x4aa>
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7fa ffa8 	bl	800448c <is_determine>
 800953c:	4603      	mov	r3, r0
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10f      	bne.n	8009562 <long_turn_L180_expand+0x4aa>
			close_list_set(set_pos,parent_pos,next_mouse_dir,set_run_t,run_pt,0,false);
 8009542:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8009546:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 800954a:	2300      	movs	r3, #0
 800954c:	9302      	str	r3, [sp, #8]
 800954e:	2300      	movs	r3, #0
 8009550:	9301      	str	r3, [sp, #4]
 8009552:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	460b      	mov	r3, r1
 800955a:	6939      	ldr	r1, [r7, #16]
 800955c:	68f8      	ldr	r0, [r7, #12]
 800955e:	f7f8 fa61 	bl	8001a24 <close_list_set>
		}
    }
}
 8009562:	bf00      	nop
 8009564:	3754      	adds	r7, #84	; 0x54
 8009566:	46bd      	mov	sp, r7
 8009568:	bd90      	pop	{r4, r7, pc}

0800956a <north_expand>:

void north_expand(t_position pos)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
	t_eight_dir mouse_dir = return_mouse_dir(pos);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fa fe6a 	bl	800424c <return_mouse_dir>
 8009578:	4603      	mov	r3, r0
 800957a:	73fb      	strb	r3, [r7, #15]
	if(mouse_dir == NorthEast)
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	2b01      	cmp	r3, #1
 8009580:	d114      	bne.n	80095ac <north_expand+0x42>
	{
		diagonal_expand(pos, mouse_dir);
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	4619      	mov	r1, r3
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7fb f920 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 800958c:	7bfb      	ldrb	r3, [r7, #15]
 800958e:	4619      	mov	r1, r3
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7fb ff4a 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f7fd f965 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	4619      	mov	r1, r3
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f7fd ff80 	bl	80074aa <turn_RV90_expand>
		diagonal_expand(pos, mouse_dir);
		turn_out_L45_expand(pos, mouse_dir);
		turn_out_L135_expand(pos, mouse_dir);
		turn_LV90_expand(pos, mouse_dir);
	}
}
 80095aa:	e046      	b.n	800963a <north_expand+0xd0>
	else if(mouse_dir == SouthEast)
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d114      	bne.n	80095dc <north_expand+0x72>
		diagonal_expand(pos, mouse_dir);
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	4619      	mov	r1, r3
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fb f908 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
 80095be:	4619      	mov	r1, r3
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f7fc f947 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 80095c6:	7bfb      	ldrb	r3, [r7, #15]
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f7fd fc5d 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 80095d0:	7bfb      	ldrb	r3, [r7, #15]
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f7fe fb58 	bl	8007c8a <turn_LV90_expand>
}
 80095da:	e02e      	b.n	800963a <north_expand+0xd0>
	else if(mouse_dir == SouthWest)
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d114      	bne.n	800960c <north_expand+0xa2>
		diagonal_expand(pos, mouse_dir);
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7fb f8f0 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f7fb ff1a 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	4619      	mov	r1, r3
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7fd f935 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f7fd ff50 	bl	80074aa <turn_RV90_expand>
}
 800960a:	e016      	b.n	800963a <north_expand+0xd0>
	else if(mouse_dir == NorthWest)
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	2b07      	cmp	r3, #7
 8009610:	d113      	bne.n	800963a <north_expand+0xd0>
		diagonal_expand(pos, mouse_dir);
 8009612:	7bfb      	ldrb	r3, [r7, #15]
 8009614:	4619      	mov	r1, r3
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7fb f8d8 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fc f917 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fd fc2d 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 8009630:	7bfb      	ldrb	r3, [r7, #15]
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7fe fb28 	bl	8007c8a <turn_LV90_expand>
}
 800963a:	bf00      	nop
 800963c:	3710      	adds	r7, #16
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <east_expand>:

void east_expand(t_position pos)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
	t_eight_dir mouse_dir = return_mouse_dir(pos);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f7fa fdfe 	bl	800424c <return_mouse_dir>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
	if(mouse_dir == NorthEast)
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d114      	bne.n	8009684 <east_expand+0x42>
	{
		diagonal_expand(pos, mouse_dir);
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	4619      	mov	r1, r3
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f7fb f8b4 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 8009664:	7bfb      	ldrb	r3, [r7, #15]
 8009666:	4619      	mov	r1, r3
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f7fc f8f3 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 800966e:	7bfb      	ldrb	r3, [r7, #15]
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fd fc09 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	4619      	mov	r1, r3
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f7fe fb04 	bl	8007c8a <turn_LV90_expand>
		diagonal_expand(pos, mouse_dir);
		turn_out_R45_expand(pos, mouse_dir);
		turn_out_R135_expand(pos, mouse_dir);
		turn_RV90_expand(pos, mouse_dir);
	}
}
 8009682:	e046      	b.n	8009712 <east_expand+0xd0>
	else if(mouse_dir == SouthEast)
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b03      	cmp	r3, #3
 8009688:	d114      	bne.n	80096b4 <east_expand+0x72>
		diagonal_expand(pos, mouse_dir);
 800968a:	7bfb      	ldrb	r3, [r7, #15]
 800968c:	4619      	mov	r1, r3
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7fb f89c 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7fb fec6 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 800969e:	7bfb      	ldrb	r3, [r7, #15]
 80096a0:	4619      	mov	r1, r3
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7fd f8e1 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f7fd fefc 	bl	80074aa <turn_RV90_expand>
}
 80096b2:	e02e      	b.n	8009712 <east_expand+0xd0>
	else if(mouse_dir == SouthWest)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d114      	bne.n	80096e4 <east_expand+0xa2>
		diagonal_expand(pos, mouse_dir);
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fb f884 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 80096c4:	7bfb      	ldrb	r3, [r7, #15]
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7fc f8c3 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f7fd fbd9 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fe fad4 	bl	8007c8a <turn_LV90_expand>
}
 80096e2:	e016      	b.n	8009712 <east_expand+0xd0>
	else if(mouse_dir == NorthWest)
 80096e4:	7bfb      	ldrb	r3, [r7, #15]
 80096e6:	2b07      	cmp	r3, #7
 80096e8:	d113      	bne.n	8009712 <east_expand+0xd0>
		diagonal_expand(pos, mouse_dir);
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7fb f86c 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 80096f4:	7bfb      	ldrb	r3, [r7, #15]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7fb fe96 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fd f8b1 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 8009708:	7bfb      	ldrb	r3, [r7, #15]
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fd fecc 	bl	80074aa <turn_RV90_expand>
}
 8009712:	bf00      	nop
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <south_expand>:

void south_expand(t_position pos)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
	t_eight_dir mouse_dir = return_mouse_dir(pos);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f7fa fd92 	bl	800424c <return_mouse_dir>
 8009728:	4603      	mov	r3, r0
 800972a:	73fb      	strb	r3, [r7, #15]
	if(mouse_dir == NorthEast)
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	2b01      	cmp	r3, #1
 8009730:	d114      	bne.n	800975c <south_expand+0x42>
	{
		diagonal_expand(pos, mouse_dir);
 8009732:	7bfb      	ldrb	r3, [r7, #15]
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7fb f848 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	4619      	mov	r1, r3
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f7fb fe72 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7fd f88d 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f7fd fea8 	bl	80074aa <turn_RV90_expand>
		diagonal_expand(pos, mouse_dir);
		turn_out_L45_expand(pos, mouse_dir);
		turn_out_L135_expand(pos, mouse_dir);
		turn_LV90_expand(pos, mouse_dir);
	}
}
 800975a:	e046      	b.n	80097ea <south_expand+0xd0>
	else if(mouse_dir == SouthEast)
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	2b03      	cmp	r3, #3
 8009760:	d114      	bne.n	800978c <south_expand+0x72>
		diagonal_expand(pos, mouse_dir);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f7fb f830 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 800976c:	7bfb      	ldrb	r3, [r7, #15]
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7fc f86f 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7fd fb85 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 8009780:	7bfb      	ldrb	r3, [r7, #15]
 8009782:	4619      	mov	r1, r3
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f7fe fa80 	bl	8007c8a <turn_LV90_expand>
}
 800978a:	e02e      	b.n	80097ea <south_expand+0xd0>
	else if(mouse_dir == SouthWest)
 800978c:	7bfb      	ldrb	r3, [r7, #15]
 800978e:	2b05      	cmp	r3, #5
 8009790:	d114      	bne.n	80097bc <south_expand+0xa2>
		diagonal_expand(pos, mouse_dir);
 8009792:	7bfb      	ldrb	r3, [r7, #15]
 8009794:	4619      	mov	r1, r3
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fb f818 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7fb fe42 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	4619      	mov	r1, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fd f85d 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7fd fe78 	bl	80074aa <turn_RV90_expand>
}
 80097ba:	e016      	b.n	80097ea <south_expand+0xd0>
	else if(mouse_dir == NorthWest)
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b07      	cmp	r3, #7
 80097c0:	d113      	bne.n	80097ea <south_expand+0xd0>
		diagonal_expand(pos, mouse_dir);
 80097c2:	7bfb      	ldrb	r3, [r7, #15]
 80097c4:	4619      	mov	r1, r3
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f7fb f800 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 80097cc:	7bfb      	ldrb	r3, [r7, #15]
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f7fc f83f 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	4619      	mov	r1, r3
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fd fb55 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	4619      	mov	r1, r3
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7fe fa50 	bl	8007c8a <turn_LV90_expand>
}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <west_expand>:

void west_expand(t_position pos)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
	t_eight_dir mouse_dir = return_mouse_dir(pos);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7fa fd26 	bl	800424c <return_mouse_dir>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]
	if(mouse_dir == NorthEast)
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d114      	bne.n	8009834 <west_expand+0x42>
	{
		diagonal_expand(pos, mouse_dir);
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	4619      	mov	r1, r3
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fa ffdc 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 8009814:	7bfb      	ldrb	r3, [r7, #15]
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f7fc f81b 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 800981e:	7bfb      	ldrb	r3, [r7, #15]
 8009820:	4619      	mov	r1, r3
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7fd fb31 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 8009828:	7bfb      	ldrb	r3, [r7, #15]
 800982a:	4619      	mov	r1, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7fe fa2c 	bl	8007c8a <turn_LV90_expand>
		diagonal_expand(pos, mouse_dir);
		turn_out_R45_expand(pos, mouse_dir);
		turn_out_R135_expand(pos, mouse_dir);
		turn_RV90_expand(pos, mouse_dir);
	}
}
 8009832:	e046      	b.n	80098c2 <west_expand+0xd0>
	else if(mouse_dir == SouthEast)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	2b03      	cmp	r3, #3
 8009838:	d114      	bne.n	8009864 <west_expand+0x72>
		diagonal_expand(pos, mouse_dir);
 800983a:	7bfb      	ldrb	r3, [r7, #15]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f7fa ffc4 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4619      	mov	r1, r3
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7fb fdee 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 800984e:	7bfb      	ldrb	r3, [r7, #15]
 8009850:	4619      	mov	r1, r3
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f7fd f809 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fd fe24 	bl	80074aa <turn_RV90_expand>
}
 8009862:	e02e      	b.n	80098c2 <west_expand+0xd0>
	else if(mouse_dir == SouthWest)
 8009864:	7bfb      	ldrb	r3, [r7, #15]
 8009866:	2b05      	cmp	r3, #5
 8009868:	d114      	bne.n	8009894 <west_expand+0xa2>
		diagonal_expand(pos, mouse_dir);
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7fa ffac 	bl	80047cc <diagonal_expand>
		turn_out_L45_expand(pos, mouse_dir);
 8009874:	7bfb      	ldrb	r3, [r7, #15]
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7fb ffeb 	bl	8005854 <turn_out_L45_expand>
		turn_out_L135_expand(pos, mouse_dir);
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fd fb01 	bl	8006e8a <turn_out_L135_expand>
		turn_LV90_expand(pos, mouse_dir);
 8009888:	7bfb      	ldrb	r3, [r7, #15]
 800988a:	4619      	mov	r1, r3
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f7fe f9fc 	bl	8007c8a <turn_LV90_expand>
}
 8009892:	e016      	b.n	80098c2 <west_expand+0xd0>
	else if(mouse_dir == NorthWest)
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	2b07      	cmp	r3, #7
 8009898:	d113      	bne.n	80098c2 <west_expand+0xd0>
		diagonal_expand(pos, mouse_dir);
 800989a:	7bfb      	ldrb	r3, [r7, #15]
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7fa ff94 	bl	80047cc <diagonal_expand>
		turn_out_R45_expand(pos, mouse_dir);
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
 80098a6:	4619      	mov	r1, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7fb fdbe 	bl	800542a <turn_out_R45_expand>
		turn_out_R135_expand(pos, mouse_dir);
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	4619      	mov	r1, r3
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f7fc ffd9 	bl	800686a <turn_out_R135_expand>
		turn_RV90_expand(pos, mouse_dir);
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f7fd fdf4 	bl	80074aa <turn_RV90_expand>
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <center_expand>:

void center_expand(t_position pos)
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE == 1
	printf("CENTER_EXPAND\n");
	HAL_Delay(1);
#endif
	t_eight_dir mouse_dir = return_mouse_dir(pos);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7fa fcba 	bl	800424c <return_mouse_dir>
 80098d8:	4603      	mov	r3, r0
 80098da:	73fb      	strb	r3, [r7, #15]
    straight_expand(pos,mouse_dir);
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f7fa fe4b 	bl	800457c <straight_expand>
    long_turn_L90_expand(pos,mouse_dir);
 80098e6:	7bfb      	ldrb	r3, [r7, #15]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7fe ffa4 	bl	8008838 <long_turn_L90_expand>
    turn_in_L45_expand(pos,mouse_dir);
 80098f0:	7bfb      	ldrb	r3, [r7, #15]
 80098f2:	4619      	mov	r1, r3
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7fb fb2e 	bl	8004f56 <turn_in_L45_expand>
    turn_in_L135_expand(pos,mouse_dir);
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7fc fcb8 	bl	8006274 <turn_in_L135_expand>
    long_turn_L180_expand(pos,mouse_dir);
 8009904:	7bfb      	ldrb	r3, [r7, #15]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fbd5 	bl	80090b8 <long_turn_L180_expand>
    long_turn_R90_expand(pos,mouse_dir);
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fe fda9 	bl	800846a <long_turn_R90_expand>
    turn_in_R45_expand(pos,mouse_dir);
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f7fb f8b0 	bl	8004a82 <turn_in_R45_expand>
    turn_in_R135_expand(pos,mouse_dir);
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7fc f9a9 	bl	8005c7e <turn_in_R135_expand>
    long_turn_R180_expand(pos,mouse_dir);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f968 	bl	8008c06 <long_turn_R180_expand>
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <expand_dijkstra>:

void expand_dijkstra(t_position pos)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b082      	sub	sp, #8
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
#if DEBUG_MODE == 1
	printf("EXPAND\n");
	HAL_Delay(1);
#endif
	switch(pos.dir)
 8009948:	79bb      	ldrb	r3, [r7, #6]
 800994a:	2b04      	cmp	r3, #4
 800994c:	d820      	bhi.n	8009990 <expand_dijkstra+0x50>
 800994e:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <expand_dijkstra+0x14>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	08009969 	.word	0x08009969
 8009958:	08009971 	.word	0x08009971
 800995c:	08009979 	.word	0x08009979
 8009960:	08009981 	.word	0x08009981
 8009964:	08009989 	.word	0x08009989
	{
		case north:
			north_expand(pos);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff fdfe 	bl	800956a <north_expand>
			break;
 800996e:	e00f      	b.n	8009990 <expand_dijkstra+0x50>
		case east:
			east_expand(pos);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fe66 	bl	8009642 <east_expand>
			break;
 8009976:	e00b      	b.n	8009990 <expand_dijkstra+0x50>
		case south:
			south_expand(pos);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fece 	bl	800971a <south_expand>
			break;
 800997e:	e007      	b.n	8009990 <expand_dijkstra+0x50>
		case west:
			west_expand(pos);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ff36 	bl	80097f2 <west_expand>
			break;
 8009986:	e003      	b.n	8009990 <expand_dijkstra+0x50>
		case center:
			center_expand(pos);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff ff9e 	bl	80098ca <center_expand>
			break;
 800998e:	bf00      	nop
	}
}
 8009990:	bf00      	nop
 8009992:	3708      	adds	r7, #8
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <last_straight_expand>:


t_position last_straight_expand(t_position pos, int *gx,int *gy,int goal_size)
{
 8009998:	b590      	push	{r4, r7, lr}
 800999a:	b093      	sub	sp, #76	; 0x4c
 800999c:	af04      	add	r7, sp, #16
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
	t_position next_pos 	= make_position(pos.x, pos.y, pos.dir);
 80099a6:	7b3b      	ldrb	r3, [r7, #12]
 80099a8:	7b79      	ldrb	r1, [r7, #13]
 80099aa:	7bba      	ldrb	r2, [r7, #14]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f7 fb61 	bl	8001074 <make_position>
 80099b2:	4603      	mov	r3, r0
 80099b4:	461a      	mov	r2, r3
 80099b6:	763a      	strb	r2, [r7, #24]
 80099b8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099bc:	767a      	strb	r2, [r7, #25]
 80099be:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80099c2:	76bb      	strb	r3, [r7, #26]
	t_position parent_pos	= make_position(pos.x, pos.y, pos.dir);
 80099c4:	7b3b      	ldrb	r3, [r7, #12]
 80099c6:	7b79      	ldrb	r1, [r7, #13]
 80099c8:	7bba      	ldrb	r2, [r7, #14]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7f7 fb52 	bl	8001074 <make_position>
 80099d0:	4603      	mov	r3, r0
 80099d2:	461a      	mov	r2, r3
 80099d4:	753a      	strb	r2, [r7, #20]
 80099d6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099da:	757a      	strb	r2, [r7, #21]
 80099dc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80099e0:	75bb      	strb	r3, [r7, #22]
	t_position set_pos		= make_position(pos.x, pos.y, pos.dir);
 80099e2:	7b3b      	ldrb	r3, [r7, #12]
 80099e4:	7b79      	ldrb	r1, [r7, #13]
 80099e6:	7bba      	ldrb	r2, [r7, #14]
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7f7 fb43 	bl	8001074 <make_position>
 80099ee:	4603      	mov	r3, r0
 80099f0:	461a      	mov	r2, r3
 80099f2:	743a      	strb	r2, [r7, #16]
 80099f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80099f8:	747a      	strb	r2, [r7, #17]
 80099fa:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80099fe:	74bb      	strb	r3, [r7, #18]
	t_eight_dir mouse_dir	= return_mouse_dir(pos);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7fa fc23 	bl	800424c <return_mouse_dir>
 8009a06:	4603      	mov	r3, r0
 8009a08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	t_run_pattern run_pt	= Straight;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(pos.dir == center)
 8009a12:	7bbb      	ldrb	r3, [r7, #14]
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	f040 8134 	bne.w	8009c82 <last_straight_expand+0x2ea>
	{
		if(mouse_dir == North || mouse_dir == South)
 8009a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d004      	beq.n	8009a2c <last_straight_expand+0x94>
 8009a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a26:	2b04      	cmp	r3, #4
 8009a28:	f040 8090 	bne.w	8009b4c <last_straight_expand+0x1b4>
		{
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	637b      	str	r3, [r7, #52]	; 0x34
 8009a30:	e081      	b.n	8009b36 <last_straight_expand+0x19e>
			{
				if(wall_check(make_position(next_pos.x, next_pos.x, (mouse_dir/2)), 0x01) == false)
 8009a32:	7e38      	ldrb	r0, [r7, #24]
 8009a34:	7e39      	ldrb	r1, [r7, #24]
 8009a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a3a:	085b      	lsrs	r3, r3, #1
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f7f7 fb18 	bl	8001074 <make_position>
 8009a44:	4603      	mov	r3, r0
 8009a46:	461a      	mov	r2, r3
 8009a48:	773a      	strb	r2, [r7, #28]
 8009a4a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009a4e:	777a      	strb	r2, [r7, #29]
 8009a50:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009a54:	77bb      	strb	r3, [r7, #30]
 8009a56:	2101      	movs	r1, #1
 8009a58:	69f8      	ldr	r0, [r7, #28]
 8009a5a:	f7f7 fb69 	bl	8001130 <wall_check>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d16d      	bne.n	8009b40 <last_straight_expand+0x1a8>
				{
					if(mouse_dir == North)
 8009a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d104      	bne.n	8009a76 <last_straight_expand+0xde>
					{
						next_pos.y = next_pos.y + 1;
 8009a6c:	7e7b      	ldrb	r3, [r7, #25]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	767b      	strb	r3, [r7, #25]
 8009a74:	e007      	b.n	8009a86 <last_straight_expand+0xee>
					}
					else if(mouse_dir == South)
 8009a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d103      	bne.n	8009a86 <last_straight_expand+0xee>
					{
						next_pos.y = next_pos.y - 1;
 8009a7e:	7e7b      	ldrb	r3, [r7, #25]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	767b      	strb	r3, [r7, #25]
					}

                    if(is_goal_dijkstra(set_pos,gx,gy,goal_size) == true && is_goal_dijkstra(next_pos,gx,gy,goal_size) == false)
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	6938      	ldr	r0, [r7, #16]
 8009a8e:	f7f8 fc71 	bl	8002374 <is_goal_dijkstra>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d108      	bne.n	8009aaa <last_straight_expand+0x112>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	69b8      	ldr	r0, [r7, #24]
 8009aa0:	f7f8 fc68 	bl	8002374 <is_goal_dijkstra>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d04c      	beq.n	8009b44 <last_straight_expand+0x1ac>
                    {
                        break;
                    }

					if(next_pos.y < MAZE_SIZE_Y &&next_pos.y >= 0)
 8009aaa:	7e7b      	ldrb	r3, [r7, #25]
 8009aac:	2b1f      	cmp	r3, #31
 8009aae:	d84b      	bhi.n	8009b48 <last_straight_expand+0x1b0>
					{
						set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8009ab0:	7e3b      	ldrb	r3, [r7, #24]
 8009ab2:	7e79      	ldrb	r1, [r7, #25]
 8009ab4:	7eba      	ldrb	r2, [r7, #26]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7f7 fadc 	bl	8001074 <make_position>
 8009abc:	4603      	mov	r3, r0
 8009abe:	461a      	mov	r2, r3
 8009ac0:	743a      	strb	r2, [r7, #16]
 8009ac2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009ac6:	747a      	strb	r2, [r7, #17]
 8009ac8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009acc:	74bb      	strb	r3, [r7, #18]
						uint16_t set_run_t = pos_run_time(parent_pos) + calc_time(run_pt,i+1);
 8009ace:	6978      	ldr	r0, [r7, #20]
 8009ad0:	f7fa fa26 	bl	8003f20 <pos_run_time>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	461c      	mov	r4, r3
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ae0:	4611      	mov	r1, r2
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f7fa f978 	bl	8003dd8 <calc_time>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	4423      	add	r3, r4
 8009aec:	857b      	strh	r3, [r7, #42]	; 0x2a
						if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8009aee:	6938      	ldr	r0, [r7, #16]
 8009af0:	f7fa fa16 	bl	8003f20 <pos_run_time>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d218      	bcs.n	8009b30 <last_straight_expand+0x198>
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f7fa fcc4 	bl	800448c <is_determine>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d112      	bne.n	8009b30 <last_straight_expand+0x198>
							close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,(i+1),false);
 8009b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	3301      	adds	r3, #1
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	8d78      	ldrh	r0, [r7, #42]	; 0x2a
 8009b14:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8009b18:	2200      	movs	r2, #0
 8009b1a:	9202      	str	r2, [sp, #8]
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	4603      	mov	r3, r0
 8009b26:	460a      	mov	r2, r1
 8009b28:	6979      	ldr	r1, [r7, #20]
 8009b2a:	6938      	ldr	r0, [r7, #16]
 8009b2c:	f7f7 ff7a 	bl	8001a24 <close_list_set>
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 8009b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b32:	3301      	adds	r3, #1
 8009b34:	637b      	str	r3, [r7, #52]	; 0x34
 8009b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b38:	2b1f      	cmp	r3, #31
 8009b3a:	f77f af7a 	ble.w	8009a32 <last_straight_expand+0x9a>
 8009b3e:	e0a0      	b.n	8009c82 <last_straight_expand+0x2ea>
						break;
					}
				}
				else
				{
					break;
 8009b40:	bf00      	nop
 8009b42:	e09e      	b.n	8009c82 <last_straight_expand+0x2ea>
                        break;
 8009b44:	bf00      	nop
 8009b46:	e09c      	b.n	8009c82 <last_straight_expand+0x2ea>
						break;
 8009b48:	bf00      	nop
			for(int i = 0;i < MAZE_SIZE_Y;i++)
 8009b4a:	e09a      	b.n	8009c82 <last_straight_expand+0x2ea>
				}
			}
		}
		else if(mouse_dir == East || mouse_dir == West)
 8009b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b50:	2b02      	cmp	r3, #2
 8009b52:	d004      	beq.n	8009b5e <last_straight_expand+0x1c6>
 8009b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b58:	2b06      	cmp	r3, #6
 8009b5a:	f040 8092 	bne.w	8009c82 <last_straight_expand+0x2ea>
		{
			for(int i = 0;i < MAZE_SIZE_X;i++)
 8009b5e:	2300      	movs	r3, #0
 8009b60:	633b      	str	r3, [r7, #48]	; 0x30
 8009b62:	e084      	b.n	8009c6e <last_straight_expand+0x2d6>
			{
				if(wall_check(make_position(next_pos.x, next_pos.y, (mouse_dir/2)), 0x01) == false)
 8009b64:	7e38      	ldrb	r0, [r7, #24]
 8009b66:	7e79      	ldrb	r1, [r7, #25]
 8009b68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b6c:	085b      	lsrs	r3, r3, #1
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	f7f7 fa7f 	bl	8001074 <make_position>
 8009b76:	4603      	mov	r3, r0
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f887 2020 	strb.w	r2, [r7, #32]
 8009b7e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009b82:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
 8009b86:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009b8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b8e:	2101      	movs	r1, #1
 8009b90:	6a38      	ldr	r0, [r7, #32]
 8009b92:	f7f7 facd 	bl	8001130 <wall_check>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d16d      	bne.n	8009c78 <last_straight_expand+0x2e0>
				{
					if(mouse_dir == East)
 8009b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ba0:	2b02      	cmp	r3, #2
 8009ba2:	d104      	bne.n	8009bae <last_straight_expand+0x216>
					{
						next_pos.x = next_pos.x + 1;
 8009ba4:	7e3b      	ldrb	r3, [r7, #24]
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	763b      	strb	r3, [r7, #24]
 8009bac:	e007      	b.n	8009bbe <last_straight_expand+0x226>
					}
					else if(mouse_dir == West)
 8009bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bb2:	2b06      	cmp	r3, #6
 8009bb4:	d103      	bne.n	8009bbe <last_straight_expand+0x226>
					{
						next_pos.x = next_pos.x - 1;
 8009bb6:	7e3b      	ldrb	r3, [r7, #24]
 8009bb8:	3b01      	subs	r3, #1
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	763b      	strb	r3, [r7, #24]
					}

                    if(is_goal_dijkstra(set_pos,gx,gy,goal_size) == true && is_goal_dijkstra(next_pos,gx,gy,goal_size) == false)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	68b9      	ldr	r1, [r7, #8]
 8009bc4:	6938      	ldr	r0, [r7, #16]
 8009bc6:	f7f8 fbd5 	bl	8002374 <is_goal_dijkstra>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d108      	bne.n	8009be2 <last_straight_expand+0x24a>
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	68b9      	ldr	r1, [r7, #8]
 8009bd6:	69b8      	ldr	r0, [r7, #24]
 8009bd8:	f7f8 fbcc 	bl	8002374 <is_goal_dijkstra>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d04c      	beq.n	8009c7c <last_straight_expand+0x2e4>
                    {
                        break;
                    }

					if(next_pos.x < MAZE_SIZE_X && next_pos.x >= 0)
 8009be2:	7e3b      	ldrb	r3, [r7, #24]
 8009be4:	2b1f      	cmp	r3, #31
 8009be6:	d84b      	bhi.n	8009c80 <last_straight_expand+0x2e8>
					{
						set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8009be8:	7e3b      	ldrb	r3, [r7, #24]
 8009bea:	7e79      	ldrb	r1, [r7, #25]
 8009bec:	7eba      	ldrb	r2, [r7, #26]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7f7 fa40 	bl	8001074 <make_position>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	743a      	strb	r2, [r7, #16]
 8009bfa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009bfe:	747a      	strb	r2, [r7, #17]
 8009c00:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009c04:	74bb      	strb	r3, [r7, #18]
						uint16_t set_run_t = pos_run_time(parent_pos) + calc_time(run_pt,i+1);
 8009c06:	6978      	ldr	r0, [r7, #20]
 8009c08:	f7fa f98a 	bl	8003f20 <pos_run_time>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	461c      	mov	r4, r3
 8009c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fa f8dc 	bl	8003dd8 <calc_time>
 8009c20:	4603      	mov	r3, r0
 8009c22:	4423      	add	r3, r4
 8009c24:	85bb      	strh	r3, [r7, #44]	; 0x2c
						if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8009c26:	6938      	ldr	r0, [r7, #16]
 8009c28:	f7fa f97a 	bl	8003f20 <pos_run_time>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	461a      	mov	r2, r3
 8009c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d218      	bcs.n	8009c68 <last_straight_expand+0x2d0>
 8009c36:	6938      	ldr	r0, [r7, #16]
 8009c38:	f7fa fc28 	bl	800448c <is_determine>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d112      	bne.n	8009c68 <last_straight_expand+0x2d0>
							close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,(i+1),false);
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	3301      	adds	r3, #1
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8009c4c:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8009c50:	2200      	movs	r2, #0
 8009c52:	9202      	str	r2, [sp, #8]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	460a      	mov	r2, r1
 8009c60:	6979      	ldr	r1, [r7, #20]
 8009c62:	6938      	ldr	r0, [r7, #16]
 8009c64:	f7f7 fede 	bl	8001a24 <close_list_set>
			for(int i = 0;i < MAZE_SIZE_X;i++)
 8009c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	633b      	str	r3, [r7, #48]	; 0x30
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c70:	2b1f      	cmp	r3, #31
 8009c72:	f77f af77 	ble.w	8009b64 <last_straight_expand+0x1cc>
 8009c76:	e004      	b.n	8009c82 <last_straight_expand+0x2ea>
					}

				}
				else
				{
					break;
 8009c78:	bf00      	nop
 8009c7a:	e002      	b.n	8009c82 <last_straight_expand+0x2ea>
                        break;
 8009c7c:	bf00      	nop
 8009c7e:	e000      	b.n	8009c82 <last_straight_expand+0x2ea>
						break;
 8009c80:	bf00      	nop
				}
			}
		}
	}
	return set_pos;
 8009c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c86:	f107 0210 	add.w	r2, r7, #16
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	4611      	mov	r1, r2
 8009c8e:	8019      	strh	r1, [r3, #0]
 8009c90:	3302      	adds	r3, #2
 8009c92:	0c12      	lsrs	r2, r2, #16
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	2300      	movs	r3, #0
 8009c98:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8009c9c:	f362 0307 	bfi	r3, r2, #0, #8
 8009ca0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8009ca4:	f362 230f 	bfi	r3, r2, #8, #8
 8009ca8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8009cac:	f362 4317 	bfi	r3, r2, #16, #8

}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	373c      	adds	r7, #60	; 0x3c
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd90      	pop	{r4, r7, pc}

08009cb8 <last_diagonal_expand>:

t_position last_diagonal_expand(t_position pos, int *gx,int *gy,int goal_size)
{
 8009cb8:	b590      	push	{r4, r7, lr}
 8009cba:	b093      	sub	sp, #76	; 0x4c
 8009cbc:	af04      	add	r7, sp, #16
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
 8009cc4:	603b      	str	r3, [r7, #0]
	t_position next_pos 	= make_position(pos.x, pos.y, pos.dir);
 8009cc6:	7b3b      	ldrb	r3, [r7, #12]
 8009cc8:	7b79      	ldrb	r1, [r7, #13]
 8009cca:	7bba      	ldrb	r2, [r7, #14]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f7 f9d1 	bl	8001074 <make_position>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	773a      	strb	r2, [r7, #28]
 8009cd8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009cdc:	777a      	strb	r2, [r7, #29]
 8009cde:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009ce2:	77bb      	strb	r3, [r7, #30]
	t_position set_pos		= make_position(pos.x, pos.y, pos.dir);
 8009ce4:	7b3b      	ldrb	r3, [r7, #12]
 8009ce6:	7b79      	ldrb	r1, [r7, #13]
 8009ce8:	7bba      	ldrb	r2, [r7, #14]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7f7 f9c2 	bl	8001074 <make_position>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	763a      	strb	r2, [r7, #24]
 8009cf6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009cfa:	767a      	strb	r2, [r7, #25]
 8009cfc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009d00:	76bb      	strb	r3, [r7, #26]
	t_position parent_pos	= make_position(pos.x, pos.y, pos.dir);
 8009d02:	7b3b      	ldrb	r3, [r7, #12]
 8009d04:	7b79      	ldrb	r1, [r7, #13]
 8009d06:	7bba      	ldrb	r2, [r7, #14]
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7f7 f9b3 	bl	8001074 <make_position>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	461a      	mov	r2, r3
 8009d12:	753a      	strb	r2, [r7, #20]
 8009d14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d18:	757a      	strb	r2, [r7, #21]
 8009d1a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009d1e:	75bb      	strb	r3, [r7, #22]
	t_run_pattern run_pt	= Diagonal;
 8009d20:	2302      	movs	r3, #2
 8009d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	t_eight_dir mouse_dir	= return_mouse_dir(pos);
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f7fa fa90 	bl	800424c <return_mouse_dir>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	int run_cnt = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
	if(pos_run_pt(pos) == Diagonal)
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7fa f96a 	bl	8004010 <pos_run_pt>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d129      	bne.n	8009d96 <last_diagonal_expand+0xde>
	{
		parent_pos = pos_parent(pos);
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f7fa f9dc 	bl	8004100 <pos_parent>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	753a      	strb	r2, [r7, #20]
 8009d4e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d52:	757a      	strb	r2, [r7, #21]
 8009d54:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009d58:	75bb      	strb	r3, [r7, #22]
		next_pos 	= make_position(parent_pos.x, parent_pos.y, parent_pos.dir);
 8009d5a:	7d3b      	ldrb	r3, [r7, #20]
 8009d5c:	7d79      	ldrb	r1, [r7, #21]
 8009d5e:	7dba      	ldrb	r2, [r7, #22]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7f7 f987 	bl	8001074 <make_position>
 8009d66:	4603      	mov	r3, r0
 8009d68:	461a      	mov	r2, r3
 8009d6a:	773a      	strb	r2, [r7, #28]
 8009d6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d70:	777a      	strb	r2, [r7, #29]
 8009d72:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009d76:	77bb      	strb	r3, [r7, #30]
		set_pos		= make_position(parent_pos.x, parent_pos.y, parent_pos.dir);
 8009d78:	7d3b      	ldrb	r3, [r7, #20]
 8009d7a:	7d79      	ldrb	r1, [r7, #21]
 8009d7c:	7dba      	ldrb	r2, [r7, #22]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f7f7 f978 	bl	8001074 <make_position>
 8009d84:	4603      	mov	r3, r0
 8009d86:	461a      	mov	r2, r3
 8009d88:	763a      	strb	r2, [r7, #24]
 8009d8a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d8e:	767a      	strb	r2, [r7, #25]
 8009d90:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009d94:	76bb      	strb	r3, [r7, #26]
	}

	for(int i = 0;i < MAZE_SIZE_X + MAZE_SIZE_Y;i++)
 8009d96:	2300      	movs	r3, #0
 8009d98:	633b      	str	r3, [r7, #48]	; 0x30
 8009d9a:	e136      	b.n	800a00a <last_diagonal_expand+0x352>
	{
		run_cnt = i;
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9e:	637b      	str	r3, [r7, #52]	; 0x34
		if(wall_check(next_pos, 0x03) != false) break;
 8009da0:	2103      	movs	r1, #3
 8009da2:	69f8      	ldr	r0, [r7, #28]
 8009da4:	f7f7 f9c4 	bl	8001130 <wall_check>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 8132 	bne.w	800a014 <last_diagonal_expand+0x35c>
		set_pos = make_position(next_pos.x, next_pos.y, next_pos.dir);
 8009db0:	7f3b      	ldrb	r3, [r7, #28]
 8009db2:	7f79      	ldrb	r1, [r7, #29]
 8009db4:	7fba      	ldrb	r2, [r7, #30]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f7 f95c 	bl	8001074 <make_position>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	763a      	strb	r2, [r7, #24]
 8009dc2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009dc6:	767a      	strb	r2, [r7, #25]
 8009dc8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009dcc:	76bb      	strb	r3, [r7, #26]
        if(next_pos.dir == north)
 8009dce:	7fbb      	ldrb	r3, [r7, #30]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d12c      	bne.n	8009e2e <last_diagonal_expand+0x176>
        {
            if(mouse_dir == NorthEast)
 8009dd4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d108      	bne.n	8009dee <last_diagonal_expand+0x136>
            {
                next_pos.x = next_pos.x + 1;
 8009ddc:	7f3b      	ldrb	r3, [r7, #28]
 8009dde:	3301      	adds	r3, #1
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y + 1;
 8009de4:	7f7b      	ldrb	r3, [r7, #29]
 8009de6:	3301      	adds	r3, #1
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	777b      	strb	r3, [r7, #29]
 8009dec:	e0ab      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if(mouse_dir == SouthEast)
 8009dee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009df2:	2b03      	cmp	r3, #3
 8009df4:	d104      	bne.n	8009e00 <last_diagonal_expand+0x148>
            {
                next_pos.x = next_pos.x;
 8009df6:	7f3b      	ldrb	r3, [r7, #28]
 8009df8:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009dfa:	7f7b      	ldrb	r3, [r7, #29]
 8009dfc:	777b      	strb	r3, [r7, #29]
 8009dfe:	e0a2      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if(mouse_dir == SouthWest)
 8009e00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e04:	2b05      	cmp	r3, #5
 8009e06:	d104      	bne.n	8009e12 <last_diagonal_expand+0x15a>
            {
                next_pos.x = next_pos.x;
 8009e08:	7f3b      	ldrb	r3, [r7, #28]
 8009e0a:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009e0c:	7f7b      	ldrb	r3, [r7, #29]
 8009e0e:	777b      	strb	r3, [r7, #29]
 8009e10:	e099      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if(mouse_dir ==  NorthWest)
 8009e12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e16:	2b07      	cmp	r3, #7
 8009e18:	f040 8095 	bne.w	8009f46 <last_diagonal_expand+0x28e>
            {
                next_pos.x = next_pos.x - 1;
 8009e1c:	7f3b      	ldrb	r3, [r7, #28]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b2db      	uxtb	r3, r3
 8009e22:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y + 1;
 8009e24:	7f7b      	ldrb	r3, [r7, #29]
 8009e26:	3301      	adds	r3, #1
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	777b      	strb	r3, [r7, #29]
 8009e2c:	e08b      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
        }

        else if(next_pos.dir == east)
 8009e2e:	7fbb      	ldrb	r3, [r7, #30]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d12b      	bne.n	8009e8c <last_diagonal_expand+0x1d4>
        {
            if(mouse_dir ==  NorthEast)
 8009e34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d108      	bne.n	8009e4e <last_diagonal_expand+0x196>
            {
                next_pos.x = next_pos.x + 1;
 8009e3c:	7f3b      	ldrb	r3, [r7, #28]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y + 1;
 8009e44:	7f7b      	ldrb	r3, [r7, #29]
 8009e46:	3301      	adds	r3, #1
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	777b      	strb	r3, [r7, #29]
 8009e4c:	e07b      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
			else if( mouse_dir ==  SouthEast)
 8009e4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d108      	bne.n	8009e68 <last_diagonal_expand+0x1b0>
            {
                next_pos.x = next_pos.x + 1;
 8009e56:	7f3b      	ldrb	r3, [r7, #28]
 8009e58:	3301      	adds	r3, #1
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y - 1;
 8009e5e:	7f7b      	ldrb	r3, [r7, #29]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	777b      	strb	r3, [r7, #29]
 8009e66:	e06e      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if( mouse_dir ==  SouthWest)
 8009e68:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e6c:	2b05      	cmp	r3, #5
 8009e6e:	d104      	bne.n	8009e7a <last_diagonal_expand+0x1c2>
            {
                next_pos.x = next_pos.x;
 8009e70:	7f3b      	ldrb	r3, [r7, #28]
 8009e72:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009e74:	7f7b      	ldrb	r3, [r7, #29]
 8009e76:	777b      	strb	r3, [r7, #29]
 8009e78:	e065      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if( mouse_dir ==  NorthWest)
 8009e7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e7e:	2b07      	cmp	r3, #7
 8009e80:	d161      	bne.n	8009f46 <last_diagonal_expand+0x28e>
            {
                next_pos.x = next_pos.x;
 8009e82:	7f3b      	ldrb	r3, [r7, #28]
 8009e84:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009e86:	7f7b      	ldrb	r3, [r7, #29]
 8009e88:	777b      	strb	r3, [r7, #29]
 8009e8a:	e05c      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
        }

        else if( next_pos.dir == south)
 8009e8c:	7fbb      	ldrb	r3, [r7, #30]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d12b      	bne.n	8009eea <last_diagonal_expand+0x232>
        {
            if (mouse_dir ==  NorthEast)
 8009e92:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d104      	bne.n	8009ea4 <last_diagonal_expand+0x1ec>
			{
                next_pos.x = next_pos.x;
 8009e9a:	7f3b      	ldrb	r3, [r7, #28]
 8009e9c:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009e9e:	7f7b      	ldrb	r3, [r7, #29]
 8009ea0:	777b      	strb	r3, [r7, #29]
 8009ea2:	e050      	b.n	8009f46 <last_diagonal_expand+0x28e>
			}
			else if( mouse_dir ==  SouthEast)
 8009ea4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ea8:	2b03      	cmp	r3, #3
 8009eaa:	d108      	bne.n	8009ebe <last_diagonal_expand+0x206>
			{
                next_pos.x = next_pos.x + 1;
 8009eac:	7f3b      	ldrb	r3, [r7, #28]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y - 1;
 8009eb4:	7f7b      	ldrb	r3, [r7, #29]
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	777b      	strb	r3, [r7, #29]
 8009ebc:	e043      	b.n	8009f46 <last_diagonal_expand+0x28e>
			}
			else if( mouse_dir ==  SouthWest)
 8009ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	d108      	bne.n	8009ed8 <last_diagonal_expand+0x220>
			{
                next_pos.x = next_pos.x - 1;
 8009ec6:	7f3b      	ldrb	r3, [r7, #28]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y - 1;
 8009ece:	7f7b      	ldrb	r3, [r7, #29]
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	777b      	strb	r3, [r7, #29]
 8009ed6:	e036      	b.n	8009f46 <last_diagonal_expand+0x28e>
			}
            else if( mouse_dir ==  NorthWest)
 8009ed8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009edc:	2b07      	cmp	r3, #7
 8009ede:	d132      	bne.n	8009f46 <last_diagonal_expand+0x28e>
            {
                next_pos.x = next_pos.x;
 8009ee0:	7f3b      	ldrb	r3, [r7, #28]
 8009ee2:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009ee4:	7f7b      	ldrb	r3, [r7, #29]
 8009ee6:	777b      	strb	r3, [r7, #29]
 8009ee8:	e02d      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
        }
        else if( next_pos.dir == west)
 8009eea:	7fbb      	ldrb	r3, [r7, #30]
 8009eec:	2b03      	cmp	r3, #3
 8009eee:	d12a      	bne.n	8009f46 <last_diagonal_expand+0x28e>
        {
            if(mouse_dir ==  NorthEast)
 8009ef0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d104      	bne.n	8009f02 <last_diagonal_expand+0x24a>
            {
                next_pos.x = next_pos.x;
 8009ef8:	7f3b      	ldrb	r3, [r7, #28]
 8009efa:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009efc:	7f7b      	ldrb	r3, [r7, #29]
 8009efe:	777b      	strb	r3, [r7, #29]
 8009f00:	e021      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if( mouse_dir ==  SouthEast)
 8009f02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f06:	2b03      	cmp	r3, #3
 8009f08:	d104      	bne.n	8009f14 <last_diagonal_expand+0x25c>
            {
                next_pos.x = next_pos.x;
 8009f0a:	7f3b      	ldrb	r3, [r7, #28]
 8009f0c:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y;
 8009f0e:	7f7b      	ldrb	r3, [r7, #29]
 8009f10:	777b      	strb	r3, [r7, #29]
 8009f12:	e018      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
            else if( mouse_dir ==  SouthWest)
 8009f14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f18:	2b05      	cmp	r3, #5
 8009f1a:	d108      	bne.n	8009f2e <last_diagonal_expand+0x276>
            {
                next_pos.x = next_pos.x - 1;
 8009f1c:	7f3b      	ldrb	r3, [r7, #28]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b2db      	uxtb	r3, r3
 8009f22:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y - 1;
 8009f24:	7f7b      	ldrb	r3, [r7, #29]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	777b      	strb	r3, [r7, #29]
 8009f2c:	e00b      	b.n	8009f46 <last_diagonal_expand+0x28e>
            }
			else if( mouse_dir ==  NorthWest)
 8009f2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f32:	2b07      	cmp	r3, #7
 8009f34:	d107      	bne.n	8009f46 <last_diagonal_expand+0x28e>
			{
                next_pos.x = next_pos.x - 1;
 8009f36:	7f3b      	ldrb	r3, [r7, #28]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	773b      	strb	r3, [r7, #28]
                next_pos.y = next_pos.y + 1 ;
 8009f3e:	7f7b      	ldrb	r3, [r7, #29]
 8009f40:	3301      	adds	r3, #1
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	777b      	strb	r3, [r7, #29]
			}
        }
        next_pos.dir = (next_pos.dir + 2*(next_pos.dir%2) + (8 + 4) - mouse_dir)%4;
 8009f46:	7fbb      	ldrb	r3, [r7, #30]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	7fbb      	ldrb	r3, [r7, #30]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	005b      	lsls	r3, r3, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	f103 020c 	add.w	r2, r3, #12
 8009f58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	425a      	negs	r2, r3
 8009f60:	f003 0303 	and.w	r3, r3, #3
 8009f64:	f002 0203 	and.w	r2, r2, #3
 8009f68:	bf58      	it	pl
 8009f6a:	4253      	negpl	r3, r2
 8009f6c:	b2db      	uxtb	r3, r3
 8009f6e:	77bb      	strb	r3, [r7, #30]

        if(wall_check(next_pos, 0x03) == false && i != 0)
 8009f70:	2103      	movs	r1, #3
 8009f72:	69f8      	ldr	r0, [r7, #28]
 8009f74:	f7f7 f8dc 	bl	8001130 <wall_check>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d130      	bne.n	8009fe0 <last_diagonal_expand+0x328>
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d02d      	beq.n	8009fe0 <last_diagonal_expand+0x328>
        {
        	int set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, i);
 8009f84:	6978      	ldr	r0, [r7, #20]
 8009f86:	f7f9 ffcb 	bl	8003f20 <pos_run_time>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	461c      	mov	r4, r3
 8009f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7f9 ff1f 	bl	8003dd8 <calc_time>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4423      	add	r3, r4
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
			if(pos_run_time(set_pos) > set_run_t && is_determine(set_pos) == false){
 8009fa0:	69b8      	ldr	r0, [r7, #24]
 8009fa2:	f7f9 ffbd 	bl	8003f20 <pos_run_time>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	461a      	mov	r2, r3
 8009faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fac:	4293      	cmp	r3, r2
 8009fae:	da17      	bge.n	8009fe0 <last_diagonal_expand+0x328>
 8009fb0:	69b8      	ldr	r0, [r7, #24]
 8009fb2:	f7fa fa6b 	bl	800448c <is_determine>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d111      	bne.n	8009fe0 <last_diagonal_expand+0x328>
				close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,i,false);
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	b298      	uxth	r0, r3
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8009fc8:	2200      	movs	r2, #0
 8009fca:	9202      	str	r2, [sp, #8]
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009fd2:	9300      	str	r3, [sp, #0]
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	460a      	mov	r2, r1
 8009fd8:	6979      	ldr	r1, [r7, #20]
 8009fda:	69b8      	ldr	r0, [r7, #24]
 8009fdc:	f7f7 fd22 	bl	8001a24 <close_list_set>
			}
        }

        //if(self.is_goal(Pos(next_pos_x,next_pos_y,next_pos_d),gx,gy) == False and self.is_goal(Pos(set_pos_x,set_pos_y,set_pos_d),gx,gy) == True):
           // break
        if(is_goal_dijkstra(set_pos,gx,gy,goal_size) == true && is_goal_dijkstra(next_pos,gx,gy,goal_size) == false)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	68b9      	ldr	r1, [r7, #8]
 8009fe6:	69b8      	ldr	r0, [r7, #24]
 8009fe8:	f7f8 f9c4 	bl	8002374 <is_goal_dijkstra>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d108      	bne.n	800a004 <last_diagonal_expand+0x34c>
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	69f8      	ldr	r0, [r7, #28]
 8009ffa:	f7f8 f9bb 	bl	8002374 <is_goal_dijkstra>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d009      	beq.n	800a018 <last_diagonal_expand+0x360>
	for(int i = 0;i < MAZE_SIZE_X + MAZE_SIZE_Y;i++)
 800a004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a006:	3301      	adds	r3, #1
 800a008:	633b      	str	r3, [r7, #48]	; 0x30
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	2b3f      	cmp	r3, #63	; 0x3f
 800a00e:	f77f aec5 	ble.w	8009d9c <last_diagonal_expand+0xe4>
 800a012:	e002      	b.n	800a01a <last_diagonal_expand+0x362>
		if(wall_check(next_pos, 0x03) != false) break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <last_diagonal_expand+0x362>
        {
        	break;
 800a018:	bf00      	nop
        }

	}
	run_cnt = run_cnt - 1;
 800a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01c:	3b01      	subs	r3, #1
 800a01e:	637b      	str	r3, [r7, #52]	; 0x34
	int set_run_t = pos_run_time(parent_pos) + calc_time(run_pt, run_cnt);
 800a020:	6978      	ldr	r0, [r7, #20]
 800a022:	f7f9 ff7d 	bl	8003f20 <pos_run_time>
 800a026:	4603      	mov	r3, r0
 800a028:	461c      	mov	r4, r3
 800a02a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a02e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a030:	4618      	mov	r0, r3
 800a032:	f7f9 fed1 	bl	8003dd8 <calc_time>
 800a036:	4603      	mov	r3, r0
 800a038:	4423      	add	r3, r4
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24
	if(pos_run_time(set_pos) > set_run_t)
 800a03c:	69b8      	ldr	r0, [r7, #24]
 800a03e:	f7f9 ff6f 	bl	8003f20 <pos_run_time>
 800a042:	4603      	mov	r3, r0
 800a044:	461a      	mov	r2, r3
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	4293      	cmp	r3, r2
 800a04a:	da11      	bge.n	800a070 <last_diagonal_expand+0x3b8>
	{
		close_list_set(set_pos,parent_pos,mouse_dir,set_run_t,run_pt,run_cnt,false);
 800a04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04e:	b298      	uxth	r0, r3
 800a050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a052:	b29b      	uxth	r3, r3
 800a054:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 800a058:	2200      	movs	r2, #0
 800a05a:	9202      	str	r2, [sp, #8]
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	4603      	mov	r3, r0
 800a066:	460a      	mov	r2, r1
 800a068:	6979      	ldr	r1, [r7, #20]
 800a06a:	69b8      	ldr	r0, [r7, #24]
 800a06c:	f7f7 fcda 	bl	8001a24 <close_list_set>
	}
	return set_pos;
 800a070:	f107 0320 	add.w	r3, r7, #32
 800a074:	f107 0218 	add.w	r2, r7, #24
 800a078:	6812      	ldr	r2, [r2, #0]
 800a07a:	4611      	mov	r1, r2
 800a07c:	8019      	strh	r1, [r3, #0]
 800a07e:	3302      	adds	r3, #2
 800a080:	0c12      	lsrs	r2, r2, #16
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	2300      	movs	r3, #0
 800a086:	f897 2020 	ldrb.w	r2, [r7, #32]
 800a08a:	f362 0307 	bfi	r3, r2, #0, #8
 800a08e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a092:	f362 230f 	bfi	r3, r2, #8, #8
 800a096:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a09a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	373c      	adds	r7, #60	; 0x3c
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd90      	pop	{r4, r7, pc}

0800a0a6 <last_expand>:

t_position last_expand(t_position pos, int *gx,int *gy,int goal_size)
{
 800a0a6:	b580      	push	{r7, lr}
 800a0a8:	b086      	sub	sp, #24
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	60f8      	str	r0, [r7, #12]
 800a0ae:	60b9      	str	r1, [r7, #8]
 800a0b0:	607a      	str	r2, [r7, #4]
 800a0b2:	603b      	str	r3, [r7, #0]
	t_position last_pos = make_position(pos.x, pos.y, pos.dir);
 800a0b4:	7b3b      	ldrb	r3, [r7, #12]
 800a0b6:	7b79      	ldrb	r1, [r7, #13]
 800a0b8:	7bba      	ldrb	r2, [r7, #14]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7f6 ffda 	bl	8001074 <make_position>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	743a      	strb	r2, [r7, #16]
 800a0c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a0ca:	747a      	strb	r2, [r7, #17]
 800a0cc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a0d0:	74bb      	strb	r3, [r7, #18]
	switch(pos.dir)
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	db23      	blt.n	800a120 <last_expand+0x7a>
 800a0d8:	2b03      	cmp	r3, #3
 800a0da:	dd11      	ble.n	800a100 <last_expand+0x5a>
 800a0dc:	2b04      	cmp	r3, #4
 800a0de:	d11f      	bne.n	800a120 <last_expand+0x7a>
	{
		case center:
			last_pos = last_straight_expand(pos, gx, gy, goal_size);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f7ff fc56 	bl	8009998 <last_straight_expand>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	461a      	mov	r2, r3
 800a0f0:	743a      	strb	r2, [r7, #16]
 800a0f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a0f6:	747a      	strb	r2, [r7, #17]
 800a0f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a0fc:	74bb      	strb	r3, [r7, #18]
			break;
 800a0fe:	e00f      	b.n	800a120 <last_expand+0x7a>
		case north:
		case east:
		case south:
		case west:
			last_pos = last_diagonal_expand(pos, gx, gy, goal_size);
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fdd6 	bl	8009cb8 <last_diagonal_expand>
 800a10c:	4603      	mov	r3, r0
 800a10e:	461a      	mov	r2, r3
 800a110:	743a      	strb	r2, [r7, #16]
 800a112:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a116:	747a      	strb	r2, [r7, #17]
 800a118:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800a11c:	74bb      	strb	r3, [r7, #18]
			break;
 800a11e:	bf00      	nop
	}
	return last_pos;
 800a120:	f107 0314 	add.w	r3, r7, #20
 800a124:	f107 0210 	add.w	r2, r7, #16
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	4611      	mov	r1, r2
 800a12c:	8019      	strh	r1, [r3, #0]
 800a12e:	3302      	adds	r3, #2
 800a130:	0c12      	lsrs	r2, r2, #16
 800a132:	701a      	strb	r2, [r3, #0]
 800a134:	2300      	movs	r3, #0
 800a136:	7d3a      	ldrb	r2, [r7, #20]
 800a138:	f362 0307 	bfi	r3, r2, #0, #8
 800a13c:	7d7a      	ldrb	r2, [r7, #21]
 800a13e:	f362 230f 	bfi	r3, r2, #8, #8
 800a142:	7dba      	ldrb	r2, [r7, #22]
 800a144:	f362 4317 	bfi	r3, r2, #16, #8
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3718      	adds	r7, #24
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <Encoder_Initialize>:
#define ENC_CNT_R 		(TIM3 -> CNT)

#define ENC_ZERO		(20000)


void Encoder_Initialize(){
 800a150:	b580      	push	{r7, lr}
 800a152:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800a154:	213c      	movs	r1, #60	; 0x3c
 800a156:	4806      	ldr	r0, [pc, #24]	; (800a170 <Encoder_Initialize+0x20>)
 800a158:	f010 f938 	bl	801a3cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800a15c:	213c      	movs	r1, #60	; 0x3c
 800a15e:	4805      	ldr	r0, [pc, #20]	; (800a174 <Encoder_Initialize+0x24>)
 800a160:	f010 f934 	bl	801a3cc <HAL_TIM_Encoder_Start>
	Encoder_ResetPosition_Left();
 800a164:	f000 f808 	bl	800a178 <Encoder_ResetPosition_Left>
	Encoder_ResetPosition_Right();
 800a168:	f000 f814 	bl	800a194 <Encoder_ResetPosition_Right>
}
 800a16c:	bf00      	nop
 800a16e:	bd80      	pop	{r7, pc}
 800a170:	2001bb00 	.word	0x2001bb00
 800a174:	2001ba20 	.word	0x2001ba20

0800a178 <Encoder_ResetPosition_Left>:

void Encoder_ResetPosition_Left(){
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
	ENC_CNT_L = ENC_ZERO;
 800a17c:	4b04      	ldr	r3, [pc, #16]	; (800a190 <Encoder_ResetPosition_Left+0x18>)
 800a17e:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a182:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a184:	bf00      	nop
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop
 800a190:	40000800 	.word	0x40000800

0800a194 <Encoder_ResetPosition_Right>:

void Encoder_ResetPosition_Right(){
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
	ENC_CNT_R = ENC_ZERO;
 800a198:	4b04      	ldr	r3, [pc, #16]	; (800a1ac <Encoder_ResetPosition_Right+0x18>)
 800a19a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800a19e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a1a0:	bf00      	nop
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40000400 	.word	0x40000400

0800a1b0 <Encoder_GetPosition_Right>:

uint32_t Encoder_Counts_Right(){
	return (uint32_t)ENC_CNT_R;
}

int32_t Encoder_GetPosition_Right(){
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
	return ((int32_t)ENC_CNT_R - (int32_t)ENC_ZERO);
 800a1b4:	4b04      	ldr	r3, [pc, #16]	; (800a1c8 <Encoder_GetPosition_Right+0x18>)
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	f5a3 439c 	sub.w	r3, r3, #19968	; 0x4e00
 800a1bc:	3b20      	subs	r3, #32
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	40000400 	.word	0x40000400

0800a1cc <Encoder_GetPosition_Left>:

int32_t Encoder_GetPosition_Left(){
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
	return -((int32_t)ENC_CNT_L - (int32_t)ENC_ZERO);
 800a1d0:	4b04      	ldr	r3, [pc, #16]	; (800a1e4 <Encoder_GetPosition_Left+0x18>)
 800a1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d4:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 800a1d8:	3320      	adds	r3, #32
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	40000800 	.word	0x40000800

0800a1e8 <save_data>:
	HAL_FLASH_Unlock();
	eraseFlash();
	HAL_FLASH_Lock();
}

void save_data(){
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	607b      	str	r3, [r7, #4]
 800a1f2:	e019      	b.n	800a228 <save_data+0x40>
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	603b      	str	r3, [r7, #0]
 800a1f8:	e010      	b.n	800a21c <save_data+0x34>
			//save_map [x][y] = map[x][y];
			save_wall[x][y] = wall[x][y];
 800a1fa:	4a10      	ldr	r2, [pc, #64]	; (800a23c <save_data+0x54>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	015b      	lsls	r3, r3, #5
 800a200:	441a      	add	r2, r3
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	4413      	add	r3, r2
 800a206:	490e      	ldr	r1, [pc, #56]	; (800a240 <save_data+0x58>)
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	0152      	lsls	r2, r2, #5
 800a20c:	4411      	add	r1, r2
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	440a      	add	r2, r1
 800a212:	7812      	ldrb	r2, [r2, #0]
 800a214:	701a      	strb	r2, [r3, #0]
		for( uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	3301      	adds	r3, #1
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b1f      	cmp	r3, #31
 800a220:	d9eb      	bls.n	800a1fa <save_data+0x12>
	for( uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	3301      	adds	r3, #1
 800a226:	607b      	str	r3, [r7, #4]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b1f      	cmp	r3, #31
 800a22c:	d9e2      	bls.n	800a1f4 <save_data+0xc>
		}
	}
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	2000948c 	.word	0x2000948c
 800a240:	2001b1e4 	.word	0x2001b1e4

0800a244 <write_save_data>:

void write_save_data(){
 800a244:	b580      	push	{r7, lr}
 800a246:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800a248:	f00e f932 	bl	80184b0 <HAL_FLASH_Unlock>
	eraseFlash();
 800a24c:	f000 f8d8 	bl	800a400 <eraseFlash>
	write_wall_flash();
 800a250:	f000 f876 	bl	800a340 <write_wall_flash>
	HAL_FLASH_Lock();
 800a254:	f00e f94e 	bl	80184f4 <HAL_FLASH_Lock>
}
 800a258:	bf00      	nop
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <read_save_data>:

void read_save_data(){
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
	read_wall_flash();
 800a260:	f000 f804 	bl	800a26c <read_wall_flash>
	save_data();
 800a264:	f7ff ffc0 	bl	800a1e8 <save_data>
}
 800a268:	bf00      	nop
 800a26a:	bd80      	pop	{r7, pc}

0800a26c <read_wall_flash>:


void read_wall_flash(){
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b084      	sub	sp, #16
 800a270:	af00      	add	r7, sp, #0
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a272:	2300      	movs	r3, #0
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e05a      	b.n	800a32e <read_wall_flash+0xc2>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a278:	2300      	movs	r3, #0
 800a27a:	60bb      	str	r3, [r7, #8]
 800a27c:	e051      	b.n	800a322 <read_wall_flash+0xb6>
			uint32_t address = WALL_START_ADDRESS + (x << 8) + y;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	021a      	lsls	r2, r3, #8
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	4413      	add	r3, r2
 800a286:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a28a:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800a28e:	607b      	str	r3, [r7, #4]
			uint16_t data = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	807b      	strh	r3, [r7, #2]
			loadFlash(address,&data,2);
 800a294:	1cbb      	adds	r3, r7, #2
 800a296:	2202      	movs	r2, #2
 800a298:	4619      	mov	r1, r3
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f8db 	bl	800a456 <loadFlash>
			wall[x][y].north = (data >> 6) & 0x03;
 800a2a0:	887b      	ldrh	r3, [r7, #2]
 800a2a2:	099b      	lsrs	r3, r3, #6
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	b2d9      	uxtb	r1, r3
 800a2ac:	4a23      	ldr	r2, [pc, #140]	; (800a33c <read_wall_flash+0xd0>)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	015b      	lsls	r3, r3, #5
 800a2b2:	441a      	add	r2, r3
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	441a      	add	r2, r3
 800a2b8:	7813      	ldrb	r3, [r2, #0]
 800a2ba:	f361 0301 	bfi	r3, r1, #0, #2
 800a2be:	7013      	strb	r3, [r2, #0]
			wall[x][y].east  = (data >> 4) & 0x03;
 800a2c0:	887b      	ldrh	r3, [r7, #2]
 800a2c2:	091b      	lsrs	r3, r3, #4
 800a2c4:	b29b      	uxth	r3, r3
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	b2d9      	uxtb	r1, r3
 800a2cc:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <read_wall_flash+0xd0>)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	015b      	lsls	r3, r3, #5
 800a2d2:	441a      	add	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	441a      	add	r2, r3
 800a2d8:	7813      	ldrb	r3, [r2, #0]
 800a2da:	f361 0383 	bfi	r3, r1, #2, #2
 800a2de:	7013      	strb	r3, [r2, #0]
			wall[x][y].south = (data >> 2) & 0x03;
 800a2e0:	887b      	ldrh	r3, [r7, #2]
 800a2e2:	089b      	lsrs	r3, r3, #2
 800a2e4:	b29b      	uxth	r3, r3
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	b2d9      	uxtb	r1, r3
 800a2ec:	4a13      	ldr	r2, [pc, #76]	; (800a33c <read_wall_flash+0xd0>)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	015b      	lsls	r3, r3, #5
 800a2f2:	441a      	add	r2, r3
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	441a      	add	r2, r3
 800a2f8:	7813      	ldrb	r3, [r2, #0]
 800a2fa:	f361 1305 	bfi	r3, r1, #4, #2
 800a2fe:	7013      	strb	r3, [r2, #0]
			wall[x][y].west  = (data >> 0) & 0x03;
 800a300:	887b      	ldrh	r3, [r7, #2]
 800a302:	f003 0303 	and.w	r3, r3, #3
 800a306:	b2d9      	uxtb	r1, r3
 800a308:	4a0c      	ldr	r2, [pc, #48]	; (800a33c <read_wall_flash+0xd0>)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	015b      	lsls	r3, r3, #5
 800a30e:	441a      	add	r2, r3
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	441a      	add	r2, r3
 800a314:	7813      	ldrb	r3, [r2, #0]
 800a316:	f361 1387 	bfi	r3, r1, #6, #2
 800a31a:	7013      	strb	r3, [r2, #0]
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	3301      	adds	r3, #1
 800a320:	60bb      	str	r3, [r7, #8]
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	2b1f      	cmp	r3, #31
 800a326:	d9aa      	bls.n	800a27e <read_wall_flash+0x12>
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3301      	adds	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2b1f      	cmp	r3, #31
 800a332:	d9a1      	bls.n	800a278 <read_wall_flash+0xc>
		}
	}
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	2001b1e4 	.word	0x2001b1e4

0800a340 <write_wall_flash>:

void write_wall_flash(){
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]
 800a34a:	e050      	b.n	800a3ee <write_wall_flash+0xae>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a34c:	2300      	movs	r3, #0
 800a34e:	60bb      	str	r3, [r7, #8]
 800a350:	e047      	b.n	800a3e2 <write_wall_flash+0xa2>
			uint32_t address = WALL_START_ADDRESS + (x << 8) + y;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	021a      	lsls	r2, r3, #8
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	4413      	add	r3, r2
 800a35a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800a35e:	f503 23e0 	add.w	r3, r3, #458752	; 0x70000
 800a362:	607b      	str	r3, [r7, #4]
			uint16_t data =((uint8_t)(save_wall[x][y].north) << 6) | ((uint8_t)(save_wall[x][y].east) << 4) | ((uint8_t)(save_wall[x][y].south) << 2) | ((uint8_t)(save_wall[x][y].west) << 0);
 800a364:	4a25      	ldr	r2, [pc, #148]	; (800a3fc <write_wall_flash+0xbc>)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	015b      	lsls	r3, r3, #5
 800a36a:	441a      	add	r2, r3
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	4413      	add	r3, r2
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800a376:	b2db      	uxtb	r3, r3
 800a378:	019b      	lsls	r3, r3, #6
 800a37a:	b21a      	sxth	r2, r3
 800a37c:	491f      	ldr	r1, [pc, #124]	; (800a3fc <write_wall_flash+0xbc>)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	015b      	lsls	r3, r3, #5
 800a382:	4419      	add	r1, r3
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	440b      	add	r3, r1
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800a38e:	b2db      	uxtb	r3, r3
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	b21b      	sxth	r3, r3
 800a394:	4313      	orrs	r3, r2
 800a396:	b21a      	sxth	r2, r3
 800a398:	4918      	ldr	r1, [pc, #96]	; (800a3fc <write_wall_flash+0xbc>)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	015b      	lsls	r3, r3, #5
 800a39e:	4419      	add	r1, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	440b      	add	r3, r1
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800a3aa:	b2db      	uxtb	r3, r3
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	b21b      	sxth	r3, r3
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	b21a      	sxth	r2, r3
 800a3b4:	4911      	ldr	r1, [pc, #68]	; (800a3fc <write_wall_flash+0xbc>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	015b      	lsls	r3, r3, #5
 800a3ba:	4419      	add	r1, r3
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	440b      	add	r3, r1
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	b21b      	sxth	r3, r3
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	b21b      	sxth	r3, r3
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	807b      	strh	r3, [r7, #2]
			writeFlash(address,&data);
 800a3d2:	1cbb      	adds	r3, r7, #2
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f829 	bl	800a42e <writeFlash>
		for(uint32_t y = 0 ; y < MAZE_SIZE_Y ; y++ ){
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	60bb      	str	r3, [r7, #8]
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b1f      	cmp	r3, #31
 800a3e6:	d9b4      	bls.n	800a352 <write_wall_flash+0x12>
	for(uint32_t x = 0 ; x < MAZE_SIZE_X ; x++ ){
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b1f      	cmp	r3, #31
 800a3f2:	d9ab      	bls.n	800a34c <write_wall_flash+0xc>
		}
	}
}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}
 800a3fc:	2000948c 	.word	0x2000948c

0800a400 <eraseFlash>:

void eraseFlash( void )
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;	// select sector
 800a406:	2300      	movs	r3, #0
 800a408:	607b      	str	r3, [r7, #4]
	erase.Sector = FLASH_SECTOR_7;		       // set selector7
 800a40a:	2307      	movs	r3, #7
 800a40c:	60fb      	str	r3, [r7, #12]
	erase.NbSectors = 1;		// set to erase one sector
 800a40e:	2301      	movs	r3, #1
 800a410:	613b      	str	r3, [r7, #16]
	erase.VoltageRange = FLASH_VOLTAGE_RANGE_3;	// set voltage range (2.7 to 3.6V)
 800a412:	2302      	movs	r3, #2
 800a414:	617b      	str	r3, [r7, #20]

	uint32_t pageError = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	603b      	str	r3, [r7, #0]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800a41a:	463a      	mov	r2, r7
 800a41c:	1d3b      	adds	r3, r7, #4
 800a41e:	4611      	mov	r1, r2
 800a420:	4618      	mov	r0, r3
 800a422:	f00e f9b5 	bl	8018790 <HAL_FLASHEx_Erase>
}
 800a426:	bf00      	nop
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <writeFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data write data
 * @param uint32_t size write data size
*/
void writeFlash(uint32_t address, uint16_t *data )
{
 800a42e:	b590      	push	{r4, r7, lr}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	6039      	str	r1, [r7, #0]
	//HAL_FLASH_Unlock();		// unlock flash

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address, *data); // write byte
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	f04f 0400 	mov.w	r4, #0
 800a442:	461a      	mov	r2, r3
 800a444:	4623      	mov	r3, r4
 800a446:	6879      	ldr	r1, [r7, #4]
 800a448:	2000      	movs	r0, #0
 800a44a:	f00d ffdd 	bl	8018408 <HAL_FLASH_Program>

	//HAL_FLASH_Lock();		// lock flash
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	bd90      	pop	{r4, r7, pc}

0800a456 <loadFlash>:
 * @param uint32_t address sector11 start address
 * @param uint8_t * data read data
 * @param uint32_t size read data size
*/
void loadFlash(uint32_t address,uint16_t *data, uint32_t size )
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint16_t*) address, size); // copy data
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	4619      	mov	r1, r3
 800a468:	68b8      	ldr	r0, [r7, #8]
 800a46a:	f011 fb5d 	bl	801bb28 <memcpy>
}
 800a46e:	bf00      	nop
 800a470:	3710      	adds	r7, #16
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <write_byte>:
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin,GPIO_PIN_SET);

	return val;
}

void write_byte(uint8_t reg, uint8_t data){
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	460a      	mov	r2, r1
 800a482:	71fb      	strb	r3, [r7, #7]
 800a484:	4613      	mov	r3, r2
 800a486:	71bb      	strb	r3, [r7, #6]
	reg = reg & 0x7F;
 800a488:	79fb      	ldrb	r3, [r7, #7]
 800a48a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a48e:	b2db      	uxtb	r3, r3
 800a490:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin,GPIO_PIN_RESET);
 800a492:	2200      	movs	r2, #0
 800a494:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a498:	480c      	ldr	r0, [pc, #48]	; (800a4cc <write_byte+0x54>)
 800a49a:	f00e fc45 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &reg, 1 , 100);
 800a49e:	1df9      	adds	r1, r7, #7
 800a4a0:	2364      	movs	r3, #100	; 0x64
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	480a      	ldr	r0, [pc, #40]	; (800a4d0 <write_byte+0x58>)
 800a4a6:	f00f f99d 	bl	80197e4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1 , 100);
 800a4aa:	1db9      	adds	r1, r7, #6
 800a4ac:	2364      	movs	r3, #100	; 0x64
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	4807      	ldr	r0, [pc, #28]	; (800a4d0 <write_byte+0x58>)
 800a4b2:	f00f f997 	bl	80197e4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin,GPIO_PIN_SET);
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a4bc:	4803      	ldr	r0, [pc, #12]	; (800a4cc <write_byte+0x54>)
 800a4be:	f00e fc33 	bl	8018d28 <HAL_GPIO_WritePin>

}
 800a4c2:	bf00      	nop
 800a4c4:	3708      	adds	r7, #8
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	40020400 	.word	0x40020400
 800a4d0:	2001b868 	.word	0x2001b868

0800a4d4 <imu_initialize>:

void imu_initialize(){
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	af00      	add	r7, sp, #0
	write_byte( PWR_MGMT_1    , 0x81 ); 	//Reset all register
 800a4d8:	2181      	movs	r1, #129	; 0x81
 800a4da:	2006      	movs	r0, #6
 800a4dc:	f7ff ffcc 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a4e0:	2032      	movs	r0, #50	; 0x32
 800a4e2:	f00c fe8b 	bl	80171fc <HAL_Delay>
	write_byte( USER_CTRL     , 0x10 );
 800a4e6:	2110      	movs	r1, #16
 800a4e8:	2003      	movs	r0, #3
 800a4ea:	f7ff ffc5 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a4ee:	2032      	movs	r0, #50	; 0x32
 800a4f0:	f00c fe84 	bl	80171fc <HAL_Delay>
	write_byte( PWR_MGMT_1    , 0x01 );		//set default value of 0x06
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	2006      	movs	r0, #6
 800a4f8:	f7ff ffbe 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a4fc:	2032      	movs	r0, #50	; 0x32
 800a4fe:	f00c fe7d 	bl	80171fc <HAL_Delay>

	write_byte( REG_BANK_SEL  , 0x20 );		//change user bank from bank0 to bank2
 800a502:	2120      	movs	r1, #32
 800a504:	207f      	movs	r0, #127	; 0x7f
 800a506:	f7ff ffb7 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a50a:	2032      	movs	r0, #50	; 0x32
 800a50c:	f00c fe76 	bl	80171fc <HAL_Delay>
	write_byte( GYRO_CONFIG_1 , 0x3f );		//set low pass filter, Gyro_sensor_FS = 2000dps,
 800a510:	213f      	movs	r1, #63	; 0x3f
 800a512:	2001      	movs	r0, #1
 800a514:	f7ff ffb0 	bl	800a478 <write_byte>
	//write_byte( GYRO_CONFIG_1 , 0x06 );		//set low pass filter, Gyro_sensor_FS = 2000dps,
	HAL_Delay(50);
 800a518:	2032      	movs	r0, #50	; 0x32
 800a51a:	f00c fe6f 	bl	80171fc <HAL_Delay>
	write_byte( ACCEL_CONFIG  , 0x23 );		//set low pass filter, Accel_sensor_FS = ,
 800a51e:	2123      	movs	r1, #35	; 0x23
 800a520:	2014      	movs	r0, #20
 800a522:	f7ff ffa9 	bl	800a478 <write_byte>
	//write_byte( ACCEL_CONFIG  , 0x23 );		//set low pass filter, Accel_sensor_FS = ,
	HAL_Delay(50);
 800a526:	2032      	movs	r0, #50	; 0x32
 800a528:	f00c fe68 	bl	80171fc <HAL_Delay>
	write_byte( ACCEL_CONFIG_2, 0x00 );		//set low pass filter, Accel_sensor_FS = ,
 800a52c:	2100      	movs	r1, #0
 800a52e:	2015      	movs	r0, #21
 800a530:	f7ff ffa2 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a534:	2032      	movs	r0, #50	; 0x32
 800a536:	f00c fe61 	bl	80171fc <HAL_Delay>

	write_byte( REG_BANK_SEL  , 0x00 );		//change user bank from bank2 to bank0
 800a53a:	2100      	movs	r1, #0
 800a53c:	207f      	movs	r0, #127	; 0x7f
 800a53e:	f7ff ff9b 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a542:	2032      	movs	r0, #50	; 0x32
 800a544:	f00c fe5a 	bl	80171fc <HAL_Delay>
	write_byte( PWR_MGMT_1    , 0x01 );		//set default value of 0x06,
 800a548:	2101      	movs	r1, #1
 800a54a:	2006      	movs	r0, #6
 800a54c:	f7ff ff94 	bl	800a478 <write_byte>
	HAL_Delay(50);
 800a550:	2032      	movs	r0, #50	; 0x32
 800a552:	f00c fe53 	bl	80171fc <HAL_Delay>
}
 800a556:	bf00      	nop
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <IMU_read_DMA_Start>:


void IMU_read_DMA_Start(){
 800a55c:	b580      	push	{r7, lr}
 800a55e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin,GPIO_PIN_RESET);
 800a560:	2200      	movs	r2, #0
 800a562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a566:	4805      	ldr	r0, [pc, #20]	; (800a57c <IMU_read_DMA_Start+0x20>)
 800a568:	f00e fbde 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_DMA(&hspi2, &imu_address, imu_value, sizeof(imu_value)/sizeof(uint8_t));
 800a56c:	230d      	movs	r3, #13
 800a56e:	4a04      	ldr	r2, [pc, #16]	; (800a580 <IMU_read_DMA_Start+0x24>)
 800a570:	4904      	ldr	r1, [pc, #16]	; (800a584 <IMU_read_DMA_Start+0x28>)
 800a572:	4805      	ldr	r0, [pc, #20]	; (800a588 <IMU_read_DMA_Start+0x2c>)
 800a574:	f00f fa6a 	bl	8019a4c <HAL_SPI_TransmitReceive_DMA>
}
 800a578:	bf00      	nop
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	40020400 	.word	0x40020400
 800a580:	2001b6e8 	.word	0x2001b6e8
 800a584:	20000000 	.word	0x20000000
 800a588:	2001b868 	.word	0x2001b868

0800a58c <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi){
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin,GPIO_PIN_SET);
 800a594:	2201      	movs	r2, #1
 800a596:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a59a:	4824      	ldr	r0, [pc, #144]	; (800a62c <HAL_SPI_TxRxCpltCallback+0xa0>)
 800a59c:	f00e fbc4 	bl	8018d28 <HAL_GPIO_WritePin>

		accel_data[x_axis] = (((int16_t)imu_value[1]<<8 ) | ( (int16_t)imu_value[2]&0x00ff ) );
 800a5a0:	4b23      	ldr	r3, [pc, #140]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5a2:	785b      	ldrb	r3, [r3, #1]
 800a5a4:	021b      	lsls	r3, r3, #8
 800a5a6:	b21a      	sxth	r2, r3
 800a5a8:	4b21      	ldr	r3, [pc, #132]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5aa:	789b      	ldrb	r3, [r3, #2]
 800a5ac:	b21b      	sxth	r3, r3
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	b21a      	sxth	r2, r3
 800a5b2:	4b20      	ldr	r3, [pc, #128]	; (800a634 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800a5b4:	801a      	strh	r2, [r3, #0]
		accel_data[y_axis] = (((int16_t)imu_value[3]<<8 ) | ( (int16_t)imu_value[4]&0x00ff ) );
 800a5b6:	4b1e      	ldr	r3, [pc, #120]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5b8:	78db      	ldrb	r3, [r3, #3]
 800a5ba:	021b      	lsls	r3, r3, #8
 800a5bc:	b21a      	sxth	r2, r3
 800a5be:	4b1c      	ldr	r3, [pc, #112]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5c0:	791b      	ldrb	r3, [r3, #4]
 800a5c2:	b21b      	sxth	r3, r3
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	b21a      	sxth	r2, r3
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800a5ca:	805a      	strh	r2, [r3, #2]
		accel_data[z_axis] = (((int16_t)imu_value[5]<<8 ) | ( (int16_t)imu_value[6]&0x00ff ) );
 800a5cc:	4b18      	ldr	r3, [pc, #96]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5ce:	795b      	ldrb	r3, [r3, #5]
 800a5d0:	021b      	lsls	r3, r3, #8
 800a5d2:	b21a      	sxth	r2, r3
 800a5d4:	4b16      	ldr	r3, [pc, #88]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5d6:	799b      	ldrb	r3, [r3, #6]
 800a5d8:	b21b      	sxth	r3, r3
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	b21a      	sxth	r2, r3
 800a5de:	4b15      	ldr	r3, [pc, #84]	; (800a634 <HAL_SPI_TxRxCpltCallback+0xa8>)
 800a5e0:	809a      	strh	r2, [r3, #4]
		gyro_data[x_axis] = (((int16_t)imu_value[7]<<8 ) | ( (int16_t)imu_value[8]&0x00ff ) );
 800a5e2:	4b13      	ldr	r3, [pc, #76]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5e4:	79db      	ldrb	r3, [r3, #7]
 800a5e6:	021b      	lsls	r3, r3, #8
 800a5e8:	b21a      	sxth	r2, r3
 800a5ea:	4b11      	ldr	r3, [pc, #68]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5ec:	7a1b      	ldrb	r3, [r3, #8]
 800a5ee:	b21b      	sxth	r3, r3
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	b21a      	sxth	r2, r3
 800a5f4:	4b10      	ldr	r3, [pc, #64]	; (800a638 <HAL_SPI_TxRxCpltCallback+0xac>)
 800a5f6:	801a      	strh	r2, [r3, #0]
		gyro_data[y_axis] = (((int16_t)imu_value[9]<<8 ) | ( (int16_t)imu_value[10]&0x00ff ) );
 800a5f8:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a5fa:	7a5b      	ldrb	r3, [r3, #9]
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	b21a      	sxth	r2, r3
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a602:	7a9b      	ldrb	r3, [r3, #10]
 800a604:	b21b      	sxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b21a      	sxth	r2, r3
 800a60a:	4b0b      	ldr	r3, [pc, #44]	; (800a638 <HAL_SPI_TxRxCpltCallback+0xac>)
 800a60c:	805a      	strh	r2, [r3, #2]
		gyro_data[z_axis] = (((int16_t)imu_value[11]<<8 ) | ( (int16_t)imu_value[12]&0x00ff ) );
 800a60e:	4b08      	ldr	r3, [pc, #32]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a610:	7adb      	ldrb	r3, [r3, #11]
 800a612:	021b      	lsls	r3, r3, #8
 800a614:	b21a      	sxth	r2, r3
 800a616:	4b06      	ldr	r3, [pc, #24]	; (800a630 <HAL_SPI_TxRxCpltCallback+0xa4>)
 800a618:	7b1b      	ldrb	r3, [r3, #12]
 800a61a:	b21b      	sxth	r3, r3
 800a61c:	4313      	orrs	r3, r2
 800a61e:	b21a      	sxth	r2, r3
 800a620:	4b05      	ldr	r3, [pc, #20]	; (800a638 <HAL_SPI_TxRxCpltCallback+0xac>)
 800a622:	809a      	strh	r2, [r3, #4]

		//IMU_read_DMA_Start();
}
 800a624:	bf00      	nop
 800a626:	3708      	adds	r7, #8
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	40020400 	.word	0x40020400
 800a630:	2001b6e8 	.word	0x2001b6e8
 800a634:	2001b6f8 	.word	0x2001b6f8
 800a638:	2001b700 	.word	0x2001b700

0800a63c <read_gyro_z_axis>:

float read_gyro_y_axis(){
	return  (float)gyro_data[y_axis]*(1.0f) / GYRO_FS_SEL_3;
}

float read_gyro_z_axis(){
 800a63c:	b480      	push	{r7}
 800a63e:	af00      	add	r7, sp, #0
	return  (float)gyro_data[z_axis]*(1.0f) / GYRO_FS_SEL_3;
 800a640:	4b09      	ldr	r3, [pc, #36]	; (800a668 <read_gyro_z_axis+0x2c>)
 800a642:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a64e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a66c <read_gyro_z_axis+0x30>
 800a652:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a656:	eef0 7a66 	vmov.f32	s15, s13
}
 800a65a:	eeb0 0a67 	vmov.f32	s0, s15
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	2001b700 	.word	0x2001b700
 800a66c:	4182e979 	.word	0x4182e979

0800a670 <read_accel_x_axis>:

float read_accel_x_axis(){
 800a670:	b480      	push	{r7}
 800a672:	af00      	add	r7, sp, #0
	return  (float)accel_data[x_axis] / ACCEL_FS_SEL_1 * G;
 800a674:	4b0a      	ldr	r3, [pc, #40]	; (800a6a0 <read_accel_x_axis+0x30>)
 800a676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a682:	eddf 6a08 	vldr	s13, [pc, #32]	; 800a6a4 <read_accel_x_axis+0x34>
 800a686:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a68a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a6a8 <read_accel_x_axis+0x38>
 800a68e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a692:	eeb0 0a67 	vmov.f32	s0, s15
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
 800a69e:	bf00      	nop
 800a6a0:	2001b6f8 	.word	0x2001b6f8
 800a6a4:	46000000 	.word	0x46000000
 800a6a8:	411ce80a 	.word	0x411ce80a

0800a6ac <read_accel_y_axis>:

float read_accel_y_axis(){
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
	return  (float)accel_data[y_axis] / ACCEL_FS_SEL_1 * G;
 800a6b0:	4b0a      	ldr	r3, [pc, #40]	; (800a6dc <read_accel_y_axis+0x30>)
 800a6b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6be:	eddf 6a08 	vldr	s13, [pc, #32]	; 800a6e0 <read_accel_y_axis+0x34>
 800a6c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a6c6:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a6e4 <read_accel_y_axis+0x38>
 800a6ca:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a6ce:	eeb0 0a67 	vmov.f32	s0, s15
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	2001b6f8 	.word	0x2001b6f8
 800a6e0:	46000000 	.word	0x46000000
 800a6e4:	411ce80a 	.word	0x411ce80a

0800a6e8 <read_accel_z_axis>:

float read_accel_z_axis(){
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
	return  (float)accel_data[z_axis] / ACCEL_FS_SEL_1 * G;
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <read_accel_z_axis+0x30>)
 800a6ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a6fa:	eddf 6a08 	vldr	s13, [pc, #32]	; 800a71c <read_accel_z_axis+0x34>
 800a6fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a702:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800a720 <read_accel_z_axis+0x38>
 800a706:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800a70a:	eeb0 0a67 	vmov.f32	s0, s15
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	2001b6f8 	.word	0x2001b6f8
 800a71c:	46000000 	.word	0x46000000
 800a720:	411ce80a 	.word	0x411ce80a

0800a724 <Mode_LED>:


#include "index.h"

void Mode_LED(uint8_t led_num)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, (led_num >> 4) & 0x01);
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	091b      	lsrs	r3, r3, #4
 800a732:	b2db      	uxtb	r3, r3
 800a734:	f003 0301 	and.w	r3, r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	2104      	movs	r1, #4
 800a73e:	4819      	ldr	r0, [pc, #100]	; (800a7a4 <Mode_LED+0x80>)
 800a740:	f00e faf2 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, (led_num >> 3) & 0x01);
 800a744:	79fb      	ldrb	r3, [r7, #7]
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	461a      	mov	r2, r3
 800a752:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a756:	4814      	ldr	r0, [pc, #80]	; (800a7a8 <Mode_LED+0x84>)
 800a758:	f00e fae6 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, (led_num >> 2) & 0x01);
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	089b      	lsrs	r3, r3, #2
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	b2db      	uxtb	r3, r3
 800a768:	461a      	mov	r2, r3
 800a76a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a76e:	480d      	ldr	r0, [pc, #52]	; (800a7a4 <Mode_LED+0x80>)
 800a770:	f00e fada 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, (led_num >> 1) & 0x01);
 800a774:	79fb      	ldrb	r3, [r7, #7]
 800a776:	085b      	lsrs	r3, r3, #1
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	461a      	mov	r2, r3
 800a782:	2110      	movs	r1, #16
 800a784:	4809      	ldr	r0, [pc, #36]	; (800a7ac <Mode_LED+0x88>)
 800a786:	f00e facf 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, (led_num >> 0) & 0x01);
 800a78a:	79fb      	ldrb	r3, [r7, #7]
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	b2db      	uxtb	r3, r3
 800a792:	461a      	mov	r2, r3
 800a794:	2120      	movs	r1, #32
 800a796:	4805      	ldr	r0, [pc, #20]	; (800a7ac <Mode_LED+0x88>)
 800a798:	f00e fac6 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a79c:	bf00      	nop
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	40020800 	.word	0x40020800
 800a7a8:	40020000 	.word	0x40020000
 800a7ac:	40020400 	.word	0x40020400

0800a7b0 <Check_LED_Toggle>:

void Check_LED_Toggle(uint8_t count)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	71fb      	strb	r3, [r7, #7]
	for(int i = 0 ;i < count*2 ; i++){
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	e009      	b.n	800a7d4 <Check_LED_Toggle+0x24>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	4809      	ldr	r0, [pc, #36]	; (800a7e8 <Check_LED_Toggle+0x38>)
 800a7c4:	f00e fac9 	bl	8018d5a <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800a7c8:	2032      	movs	r0, #50	; 0x32
 800a7ca:	f00c fd17 	bl	80171fc <HAL_Delay>
	for(int i = 0 ;i < count*2 ; i++){
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	005b      	lsls	r3, r3, #1
 800a7d8:	68fa      	ldr	r2, [r7, #12]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	dbf0      	blt.n	800a7c0 <Check_LED_Toggle+0x10>
	}
}
 800a7de:	bf00      	nop
 800a7e0:	3710      	adds	r7, #16
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
 800a7e6:	bf00      	nop
 800a7e8:	40020800 	.word	0x40020800

0800a7ec <Right_Side_On_LED>:

void Right_Side_On_LED()
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800a7f0:	2201      	movs	r2, #1
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	4802      	ldr	r0, [pc, #8]	; (800a800 <Right_Side_On_LED+0x14>)
 800a7f6:	f00e fa97 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a7fa:	bf00      	nop
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40020800 	.word	0x40020800

0800a804 <Right_Side_Off_LED>:

void Right_Side_Off_LED()
{
 800a804:	b580      	push	{r7, lr}
 800a806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800a808:	2200      	movs	r2, #0
 800a80a:	2101      	movs	r1, #1
 800a80c:	4802      	ldr	r0, [pc, #8]	; (800a818 <Right_Side_Off_LED+0x14>)
 800a80e:	f00e fa8b 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a812:	bf00      	nop
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	40020800 	.word	0x40020800

0800a81c <Left_Side_On_LED>:

void Left_Side_On_LED()
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800a820:	2201      	movs	r2, #1
 800a822:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a826:	4802      	ldr	r0, [pc, #8]	; (800a830 <Left_Side_On_LED+0x14>)
 800a828:	f00e fa7e 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a82c:	bf00      	nop
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	40020400 	.word	0x40020400

0800a834 <Left_Side_Off_LED>:

void Left_Side_Off_LED()
{
 800a834:	b580      	push	{r7, lr}
 800a836:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a838:	2200      	movs	r2, #0
 800a83a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a83e:	4802      	ldr	r0, [pc, #8]	; (800a848 <Left_Side_Off_LED+0x14>)
 800a840:	f00e fa72 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a844:	bf00      	nop
 800a846:	bd80      	pop	{r7, pc}
 800a848:	40020400 	.word	0x40020400

0800a84c <Front_On_LED>:

void Front_On_LED()
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a850:	2201      	movs	r2, #1
 800a852:	2104      	movs	r1, #4
 800a854:	4802      	ldr	r0, [pc, #8]	; (800a860 <Front_On_LED+0x14>)
 800a856:	f00e fa67 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a85a:	bf00      	nop
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	40020800 	.word	0x40020800

0800a864 <Front_Off_LED>:

void Front_Off_LED()
{
 800a864:	b580      	push	{r7, lr}
 800a866:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800a868:	2200      	movs	r2, #0
 800a86a:	2104      	movs	r1, #4
 800a86c:	4802      	ldr	r0, [pc, #8]	; (800a878 <Front_Off_LED+0x14>)
 800a86e:	f00e fa5b 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a872:	bf00      	nop
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	40020800 	.word	0x40020800

0800a87c <All_On_LED>:

void All_On_LED()
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800a880:	2201      	movs	r2, #1
 800a882:	2104      	movs	r1, #4
 800a884:	4812      	ldr	r0, [pc, #72]	; (800a8d0 <All_On_LED+0x54>)
 800a886:	f00e fa4f 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800a88a:	2201      	movs	r2, #1
 800a88c:	2101      	movs	r1, #1
 800a88e:	4810      	ldr	r0, [pc, #64]	; (800a8d0 <All_On_LED+0x54>)
 800a890:	f00e fa4a 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 800a894:	2201      	movs	r2, #1
 800a896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a89a:	480e      	ldr	r0, [pc, #56]	; (800a8d4 <All_On_LED+0x58>)
 800a89c:	f00e fa44 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_SET);
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8a6:	480a      	ldr	r0, [pc, #40]	; (800a8d0 <All_On_LED+0x54>)
 800a8a8:	f00e fa3e 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_SET);
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a8b2:	4809      	ldr	r0, [pc, #36]	; (800a8d8 <All_On_LED+0x5c>)
 800a8b4:	f00e fa38 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_SET);
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	2110      	movs	r1, #16
 800a8bc:	4805      	ldr	r0, [pc, #20]	; (800a8d4 <All_On_LED+0x58>)
 800a8be:	f00e fa33 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_SET);
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	2120      	movs	r1, #32
 800a8c6:	4803      	ldr	r0, [pc, #12]	; (800a8d4 <All_On_LED+0x58>)
 800a8c8:	f00e fa2e 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a8cc:	bf00      	nop
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	40020800 	.word	0x40020800
 800a8d4:	40020400 	.word	0x40020400
 800a8d8:	40020000 	.word	0x40020000

0800a8dc <All_Off_LED>:

void All_Off_LED()
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	2104      	movs	r1, #4
 800a8e4:	4812      	ldr	r0, [pc, #72]	; (800a930 <All_Off_LED+0x54>)
 800a8e6:	f00e fa1f 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2101      	movs	r1, #1
 800a8ee:	4810      	ldr	r0, [pc, #64]	; (800a930 <All_Off_LED+0x54>)
 800a8f0:	f00e fa1a 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8fa:	480e      	ldr	r0, [pc, #56]	; (800a934 <All_Off_LED+0x58>)
 800a8fc:	f00e fa14 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800a900:	2200      	movs	r2, #0
 800a902:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a906:	480a      	ldr	r0, [pc, #40]	; (800a930 <All_Off_LED+0x54>)
 800a908:	f00e fa0e 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 800a90c:	2200      	movs	r2, #0
 800a90e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a912:	4809      	ldr	r0, [pc, #36]	; (800a938 <All_Off_LED+0x5c>)
 800a914:	f00e fa08 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port, LED6_Pin, GPIO_PIN_RESET);
 800a918:	2200      	movs	r2, #0
 800a91a:	2110      	movs	r1, #16
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <All_Off_LED+0x58>)
 800a91e:	f00e fa03 	bl	8018d28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port, LED7_Pin, GPIO_PIN_RESET);
 800a922:	2200      	movs	r2, #0
 800a924:	2120      	movs	r1, #32
 800a926:	4803      	ldr	r0, [pc, #12]	; (800a934 <All_Off_LED+0x58>)
 800a928:	f00e f9fe 	bl	8018d28 <HAL_GPIO_WritePin>
}
 800a92c:	bf00      	nop
 800a92e:	bd80      	pop	{r7, pc}
 800a930:	40020800 	.word	0x40020800
 800a934:	40020400 	.word	0x40020400
 800a938:	40020000 	.word	0x40020000
 800a93c:	00000000 	.word	0x00000000

0800a940 <Mode_Change_ENC>:
#include "glob_var.h"

#define MAX_MODE_NUM 0x0f

void Mode_Change_ENC()
{
 800a940:	b580      	push	{r7, lr}
 800a942:	af00      	add	r7, sp, #0
	if(enc_R.wheel_speed > 0.1){
 800a944:	4b3c      	ldr	r3, [pc, #240]	; (800aa38 <Mode_Change_ENC+0xf8>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	4618      	mov	r0, r3
 800a94a:	f7f5 fe1d 	bl	8000588 <__aeabi_f2d>
 800a94e:	a336      	add	r3, pc, #216	; (adr r3, 800aa28 <Mode_Change_ENC+0xe8>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f6 f900 	bl	8000b58 <__aeabi_dcmpgt>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d017      	beq.n	800a98e <Mode_Change_ENC+0x4e>
		if(is_mode_enable == true) is_mode_enable = false;
 800a95e:	4b37      	ldr	r3, [pc, #220]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a960:	781b      	ldrb	r3, [r3, #0]
 800a962:	2b01      	cmp	r3, #1
 800a964:	d103      	bne.n	800a96e <Mode_Change_ENC+0x2e>
 800a966:	4b35      	ldr	r3, [pc, #212]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a968:	2200      	movs	r2, #0
 800a96a:	701a      	strb	r2, [r3, #0]
 800a96c:	e00b      	b.n	800a986 <Mode_Change_ENC+0x46>
		else mouse_mode = (mouse_mode == 0x0f) ? 0 : mouse_mode + 1 ;
 800a96e:	4b34      	ldr	r3, [pc, #208]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	2b0f      	cmp	r3, #15
 800a974:	d004      	beq.n	800a980 <Mode_Change_ENC+0x40>
 800a976:	4b32      	ldr	r3, [pc, #200]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	e000      	b.n	800a982 <Mode_Change_ENC+0x42>
 800a980:	2300      	movs	r3, #0
 800a982:	4a2f      	ldr	r2, [pc, #188]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a984:	7013      	strb	r3, [r2, #0]
		HAL_Delay(100);
 800a986:	2064      	movs	r0, #100	; 0x64
 800a988:	f00c fc38 	bl	80171fc <HAL_Delay>
 800a98c:	e023      	b.n	800a9d6 <Mode_Change_ENC+0x96>
	}
	else if(enc_R.wheel_speed < -0.1){
 800a98e:	4b2a      	ldr	r3, [pc, #168]	; (800aa38 <Mode_Change_ENC+0xf8>)
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	4618      	mov	r0, r3
 800a994:	f7f5 fdf8 	bl	8000588 <__aeabi_f2d>
 800a998:	a325      	add	r3, pc, #148	; (adr r3, 800aa30 <Mode_Change_ENC+0xf0>)
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	f7f6 f8bd 	bl	8000b1c <__aeabi_dcmplt>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d016      	beq.n	800a9d6 <Mode_Change_ENC+0x96>
		if(is_mode_enable == true) is_mode_enable = false;
 800a9a8:	4b24      	ldr	r3, [pc, #144]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d103      	bne.n	800a9b8 <Mode_Change_ENC+0x78>
 800a9b0:	4b22      	ldr	r3, [pc, #136]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	701a      	strb	r2, [r3, #0]
 800a9b6:	e00b      	b.n	800a9d0 <Mode_Change_ENC+0x90>
		else mouse_mode = (mouse_mode == 0) ? MAX_MODE_NUM : mouse_mode - 1 ;
 800a9b8:	4b21      	ldr	r3, [pc, #132]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d004      	beq.n	800a9ca <Mode_Change_ENC+0x8a>
 800a9c0:	4b1f      	ldr	r3, [pc, #124]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	3b01      	subs	r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	e000      	b.n	800a9cc <Mode_Change_ENC+0x8c>
 800a9ca:	230f      	movs	r3, #15
 800a9cc:	4a1c      	ldr	r2, [pc, #112]	; (800aa40 <Mode_Change_ENC+0x100>)
 800a9ce:	7013      	strb	r3, [r2, #0]
		HAL_Delay(100);
 800a9d0:	2064      	movs	r0, #100	; 0x64
 800a9d2:	f00c fc13 	bl	80171fc <HAL_Delay>
	}

	if(enc_L.wheel_speed > 0.1){
 800a9d6:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <Mode_Change_ENC+0x104>)
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7f5 fdd4 	bl	8000588 <__aeabi_f2d>
 800a9e0:	a311      	add	r3, pc, #68	; (adr r3, 800aa28 <Mode_Change_ENC+0xe8>)
 800a9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e6:	f7f6 f8b7 	bl	8000b58 <__aeabi_dcmpgt>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d009      	beq.n	800aa04 <Mode_Change_ENC+0xc4>
		if(is_mode_enable == false) is_mode_enable = true;
 800a9f0:	4b12      	ldr	r3, [pc, #72]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <Mode_Change_ENC+0xbe>
 800a9f8:	4b10      	ldr	r3, [pc, #64]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800a9fe:	2064      	movs	r0, #100	; 0x64
 800aa00:	f00c fbfc 	bl	80171fc <HAL_Delay>
	}

	Mode_LED(((uint8_t)is_mode_enable) << 4 |mouse_mode);
 800aa04:	4b0d      	ldr	r3, [pc, #52]	; (800aa3c <Mode_Change_ENC+0xfc>)
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	011b      	lsls	r3, r3, #4
 800aa0a:	b25a      	sxtb	r2, r3
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <Mode_Change_ENC+0x100>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	b25b      	sxtb	r3, r3
 800aa12:	4313      	orrs	r3, r2
 800aa14:	b25b      	sxtb	r3, r3
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff fe83 	bl	800a724 <Mode_LED>
}
 800aa1e:	bf00      	nop
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	f3af 8000 	nop.w
 800aa28:	9999999a 	.word	0x9999999a
 800aa2c:	3fb99999 	.word	0x3fb99999
 800aa30:	9999999a 	.word	0x9999999a
 800aa34:	bfb99999 	.word	0xbfb99999
 800aa38:	20009988 	.word	0x20009988
 800aa3c:	200002a8 	.word	0x200002a8
 800aa40:	20000aec 	.word	0x20000aec
 800aa44:	2001b1a4 	.word	0x2001b1a4

0800aa48 <Mode_Start_photo_Sens>:


t_bool Mode_Start_photo_Sens()
{
 800aa48:	b598      	push	{r3, r4, r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
	if((Sensor_GetValue(sensor_fl) + Sensor_GetValue(sensor_fr) + Sensor_GetValue(sensor_sl) + Sensor_GetValue(sensor_sr)) > 2000 * 4){
 800aa4c:	2003      	movs	r0, #3
 800aa4e:	f002 fd5b 	bl	800d508 <Sensor_GetValue>
 800aa52:	4603      	mov	r3, r0
 800aa54:	461c      	mov	r4, r3
 800aa56:	2004      	movs	r0, #4
 800aa58:	f002 fd56 	bl	800d508 <Sensor_GetValue>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	441c      	add	r4, r3
 800aa60:	2001      	movs	r0, #1
 800aa62:	f002 fd51 	bl	800d508 <Sensor_GetValue>
 800aa66:	4603      	mov	r3, r0
 800aa68:	441c      	add	r4, r3
 800aa6a:	2002      	movs	r0, #2
 800aa6c:	f002 fd4c 	bl	800d508 <Sensor_GetValue>
 800aa70:	4603      	mov	r3, r0
 800aa72:	4423      	add	r3, r4
 800aa74:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800aa78:	dd01      	ble.n	800aa7e <Mode_Start_photo_Sens+0x36>
		return true;
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	e000      	b.n	800aa80 <Mode_Start_photo_Sens+0x38>
	}
	return false;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	bd98      	pop	{r3, r4, r7, pc}

0800aa84 <Button_Read>:

t_bool Button_Read()
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
	t_bool button_data;
	if(HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 800aa8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800aa8e:	4808      	ldr	r0, [pc, #32]	; (800aab0 <Button_Read+0x2c>)
 800aa90:	f00e f932 	bl	8018cf8 <HAL_GPIO_ReadPin>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d002      	beq.n	800aaa0 <Button_Read+0x1c>
	{
		button_data = true;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	71fb      	strb	r3, [r7, #7]
 800aa9e:	e001      	b.n	800aaa4 <Button_Read+0x20>
	}
	else
	{
		button_data = false;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	71fb      	strb	r3, [r7, #7]
	}
	return button_data;
 800aaa4:	79fb      	ldrb	r3, [r7, #7]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3708      	adds	r7, #8
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	40020400 	.word	0x40020400

0800aab4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800aab4:	b480      	push	{r7}
 800aab6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800aab8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800aabc:	4b05      	ldr	r3, [pc, #20]	; (800aad4 <__NVIC_SystemReset+0x20>)
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800aac4:	4903      	ldr	r1, [pc, #12]	; (800aad4 <__NVIC_SystemReset+0x20>)
 800aac6:	4b04      	ldr	r3, [pc, #16]	; (800aad8 <__NVIC_SystemReset+0x24>)
 800aac8:	4313      	orrs	r3, r2
 800aaca:	60cb      	str	r3, [r1, #12]
 800aacc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800aad0:	bf00      	nop
 800aad2:	e7fd      	b.n	800aad0 <__NVIC_SystemReset+0x1c>
 800aad4:	e000ed00 	.word	0xe000ed00
 800aad8:	05fa0004 	.word	0x05fa0004

0800aadc <init_W_parameters>:
const int   m_dt = 1;
float model_predict_motor_r_ampere,model_predict_motor_l_ampere;


void init_W_parameters()
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
	W_rad_sp = 0.0;
 800aae0:	4b15      	ldr	r3, [pc, #84]	; (800ab38 <init_W_parameters+0x5c>)
 800aae2:	f04f 0200 	mov.w	r2, #0
 800aae6:	601a      	str	r2, [r3, #0]
	W_rad_acc = 0.004;
 800aae8:	4b14      	ldr	r3, [pc, #80]	; (800ab3c <init_W_parameters+0x60>)
 800aaea:	4a15      	ldr	r2, [pc, #84]	; (800ab40 <init_W_parameters+0x64>)
 800aaec:	601a      	str	r2, [r3, #0]
	W_sp = 0.0;
 800aaee:	4b15      	ldr	r3, [pc, #84]	; (800ab44 <init_W_parameters+0x68>)
 800aaf0:	f04f 0200 	mov.w	r2, #0
 800aaf4:	601a      	str	r2, [r3, #0]
	W_acc = 0.0;
 800aaf6:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <init_W_parameters+0x6c>)
 800aaf8:	f04f 0200 	mov.w	r2, #0
 800aafc:	601a      	str	r2, [r3, #0]
	W_yaw = 0.0;
 800aafe:	4b13      	ldr	r3, [pc, #76]	; (800ab4c <init_W_parameters+0x70>)
 800ab00:	f04f 0200 	mov.w	r2, #0
 800ab04:	601a      	str	r2, [r3, #0]
	prev_V_l = 0.0;
 800ab06:	4b12      	ldr	r3, [pc, #72]	; (800ab50 <init_W_parameters+0x74>)
 800ab08:	f04f 0200 	mov.w	r2, #0
 800ab0c:	601a      	str	r2, [r3, #0]
	prev_V_r = 0.0;
 800ab0e:	4b11      	ldr	r3, [pc, #68]	; (800ab54 <init_W_parameters+0x78>)
 800ab10:	f04f 0200 	mov.w	r2, #0
 800ab14:	601a      	str	r2, [r3, #0]
	W_yaw_kr = 0.0;
 800ab16:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <init_W_parameters+0x7c>)
 800ab18:	f04f 0200 	mov.w	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]

	W_rad_sp_rls = 0.0f;
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <init_W_parameters+0x80>)
 800ab20:	f04f 0200 	mov.w	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
	P_rad_sp_rls = 1.0f;
 800ab26:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <init_W_parameters+0x84>)
 800ab28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ab2c:	601a      	str	r2, [r3, #0]
	//W_yaw_dis = W_yaw_dis_acc =0.0;
	//W_yaw_kr_acc = W_yaw_dis_acc = 0.0;
	//MOTOR_R/(MOTOR_K_TR*GEAR_N)*(WEIGHT/1000*TIRE_RADIUS/2);
}
 800ab2e:	bf00      	nop
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	2001b77c 	.word	0x2001b77c
 800ab3c:	20000228 	.word	0x20000228
 800ab40:	3b83126f 	.word	0x3b83126f
 800ab44:	2001b76c 	.word	0x2001b76c
 800ab48:	2000022c 	.word	0x2000022c
 800ab4c:	2001b748 	.word	0x2001b748
 800ab50:	2000988c 	.word	0x2000988c
 800ab54:	20001700 	.word	0x20001700
 800ab58:	2001b790 	.word	0x2001b790
 800ab5c:	2001b710 	.word	0x2001b710
 800ab60:	2001b778 	.word	0x2001b778

0800ab64 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]

    if (htim == &htim5){
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	4a06      	ldr	r2, [pc, #24]	; (800ab88 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d105      	bne.n	800ab80 <HAL_TIM_PeriodElapsedCallback+0x1c>
        Interrupt_PreProcess();
 800ab74:	f000 f814 	bl	800aba0 <Interrupt_PreProcess>
        Interrupt_Main();
 800ab78:	f000 f81e 	bl	800abb8 <Interrupt_Main>
        Interrupt_PostProcess();
 800ab7c:	f000 ff08 	bl	800b990 <Interrupt_PostProcess>

    }
}
 800ab80:	bf00      	nop
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	2001bac0 	.word	0x2001bac0

0800ab8c <Interrupt_Initialize>:

void Interrupt_Initialize(){
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim5);
 800ab90:	4802      	ldr	r0, [pc, #8]	; (800ab9c <Interrupt_Initialize+0x10>)
 800ab92:	f00f fa9a 	bl	801a0ca <HAL_TIM_Base_Start_IT>
}
 800ab96:	bf00      	nop
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	2001bac0 	.word	0x2001bac0

0800aba0 <Interrupt_PreProcess>:


void Interrupt_PreProcess(){
 800aba0:	b580      	push	{r7, lr}
 800aba2:	af00      	add	r7, sp, #0
	//get & calc encoder pulse
	Interrupt_Get_Irsensor();
 800aba4:	f001 f840 	bl	800bc28 <Interrupt_Get_Irsensor>
	Interrupt_Get_Speed();
 800aba8:	f002 f8ae 	bl	800cd08 <Interrupt_Get_Speed>
	Interrupt_Set_Target_Speed();
 800abac:	f002 f9ee 	bl	800cf8c <Interrupt_Set_Target_Speed>
}
 800abb0:	bf00      	nop
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	0000      	movs	r0, r0
	...

0800abb8 <Interrupt_Main>:
		Motor_SetDuty_Right(0);
	}
}
*/

void Interrupt_Main(){
 800abb8:	b5b0      	push	{r4, r5, r7, lr}
 800abba:	ed2d 8b02 	vpush	{d8}
 800abbe:	b094      	sub	sp, #80	; 0x50
 800abc0:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
	V_r = V_l = 0.0f;
 800abc2:	4bd5      	ldr	r3, [pc, #852]	; (800af18 <Interrupt_Main+0x360>)
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	601a      	str	r2, [r3, #0]
 800abca:	4bd3      	ldr	r3, [pc, #844]	; (800af18 <Interrupt_Main+0x360>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4ad3      	ldr	r2, [pc, #844]	; (800af1c <Interrupt_Main+0x364>)
 800abd0:	6013      	str	r3, [r2, #0]
	motor_out_r = motor_out_l = 0;
 800abd2:	4bd3      	ldr	r3, [pc, #844]	; (800af20 <Interrupt_Main+0x368>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	4bd1      	ldr	r3, [pc, #836]	; (800af20 <Interrupt_Main+0x368>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4ad1      	ldr	r2, [pc, #836]	; (800af24 <Interrupt_Main+0x36c>)
 800abde:	6013      	str	r3, [r2, #0]

	if(run_mode == STRAIGHT_MODE || run_mode == TURN_MODE || run_mode == DIAG_MODE || run_mode == TURN_MODE_TABLE )
 800abe0:	4bd1      	ldr	r3, [pc, #836]	; (800af28 <Interrupt_Main+0x370>)
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d00c      	beq.n	800ac02 <Interrupt_Main+0x4a>
 800abe8:	4bcf      	ldr	r3, [pc, #828]	; (800af28 <Interrupt_Main+0x370>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d008      	beq.n	800ac02 <Interrupt_Main+0x4a>
 800abf0:	4bcd      	ldr	r3, [pc, #820]	; (800af28 <Interrupt_Main+0x370>)
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d004      	beq.n	800ac02 <Interrupt_Main+0x4a>
 800abf8:	4bcb      	ldr	r3, [pc, #812]	; (800af28 <Interrupt_Main+0x370>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b04      	cmp	r3, #4
 800abfe:	f040 85f2 	bne.w	800b7e6 <Interrupt_Main+0xc2e>
	{


	  	//determine FF
		float motor_r_rpm = RAD_2_RPM*GEAR_N*(target.velo*1000/TIRE_RADIUS + 1.0f*TREAD_WIDTH*target.rad_velo/(2*TIRE_RADIUS));
 800ac02:	4bca      	ldr	r3, [pc, #808]	; (800af2c <Interrupt_Main+0x374>)
 800ac04:	edd3 7a00 	vldr	s15, [r3]
 800ac08:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 800af30 <Interrupt_Main+0x378>
 800ac0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac10:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 800af34 <Interrupt_Main+0x37c>
 800ac14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ac18:	ee16 0a90 	vmov	r0, s13
 800ac1c:	f7f5 fcb4 	bl	8000588 <__aeabi_f2d>
 800ac20:	4604      	mov	r4, r0
 800ac22:	460d      	mov	r5, r1
 800ac24:	4bc1      	ldr	r3, [pc, #772]	; (800af2c <Interrupt_Main+0x374>)
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7f5 fcad 	bl	8000588 <__aeabi_f2d>
 800ac2e:	f04f 0200 	mov.w	r2, #0
 800ac32:	4bc1      	ldr	r3, [pc, #772]	; (800af38 <Interrupt_Main+0x380>)
 800ac34:	f7f5 fd00 	bl	8000638 <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	a3ab      	add	r3, pc, #684	; (adr r3, 800aef0 <Interrupt_Main+0x338>)
 800ac42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac46:	f7f5 fe21 	bl	800088c <__aeabi_ddiv>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	4620      	mov	r0, r4
 800ac50:	4629      	mov	r1, r5
 800ac52:	f7f5 fb3b 	bl	80002cc <__adddf3>
 800ac56:	4603      	mov	r3, r0
 800ac58:	460c      	mov	r4, r1
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	4621      	mov	r1, r4
 800ac5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800aef8 <Interrupt_Main+0x340>)
 800ac60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac64:	f7f5 fce8 	bl	8000638 <__aeabi_dmul>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	4621      	mov	r1, r4
 800ac70:	f7f5 ffda 	bl	8000c28 <__aeabi_d2f>
 800ac74:	4603      	mov	r3, r0
 800ac76:	647b      	str	r3, [r7, #68]	; 0x44
	  	float motor_l_rpm = RAD_2_RPM*GEAR_N*(target.velo*1000/TIRE_RADIUS - 1.0f*TREAD_WIDTH*target.rad_velo/(2*TIRE_RADIUS));
 800ac78:	4bac      	ldr	r3, [pc, #688]	; (800af2c <Interrupt_Main+0x374>)
 800ac7a:	edd3 7a00 	vldr	s15, [r3]
 800ac7e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800af30 <Interrupt_Main+0x378>
 800ac82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ac86:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800af34 <Interrupt_Main+0x37c>
 800ac8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ac8e:	ee16 0a90 	vmov	r0, s13
 800ac92:	f7f5 fc79 	bl	8000588 <__aeabi_f2d>
 800ac96:	4604      	mov	r4, r0
 800ac98:	460d      	mov	r5, r1
 800ac9a:	4ba4      	ldr	r3, [pc, #656]	; (800af2c <Interrupt_Main+0x374>)
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7f5 fc72 	bl	8000588 <__aeabi_f2d>
 800aca4:	f04f 0200 	mov.w	r2, #0
 800aca8:	4ba3      	ldr	r3, [pc, #652]	; (800af38 <Interrupt_Main+0x380>)
 800acaa:	f7f5 fcc5 	bl	8000638 <__aeabi_dmul>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4610      	mov	r0, r2
 800acb4:	4619      	mov	r1, r3
 800acb6:	a38e      	add	r3, pc, #568	; (adr r3, 800aef0 <Interrupt_Main+0x338>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fde6 	bl	800088c <__aeabi_ddiv>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4620      	mov	r0, r4
 800acc6:	4629      	mov	r1, r5
 800acc8:	f7f5 fafe 	bl	80002c8 <__aeabi_dsub>
 800accc:	4603      	mov	r3, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	4618      	mov	r0, r3
 800acd2:	4621      	mov	r1, r4
 800acd4:	a388      	add	r3, pc, #544	; (adr r3, 800aef8 <Interrupt_Main+0x340>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fcad 	bl	8000638 <__aeabi_dmul>
 800acde:	4603      	mov	r3, r0
 800ace0:	460c      	mov	r4, r1
 800ace2:	4618      	mov	r0, r3
 800ace4:	4621      	mov	r1, r4
 800ace6:	f7f5 ff9f 	bl	8000c28 <__aeabi_d2f>
 800acea:	4603      	mov	r3, r0
 800acec:	643b      	str	r3, [r7, #64]	; 0x40
	  	float prev_motor_r_amp = motor_r_ampere;
 800acee:	4b93      	ldr	r3, [pc, #588]	; (800af3c <Interrupt_Main+0x384>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  	float prev_motor_l_amp = motor_l_ampere;
 800acf4:	4b92      	ldr	r3, [pc, #584]	; (800af40 <Interrupt_Main+0x388>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	63bb      	str	r3, [r7, #56]	; 0x38
	  	motor_r_ampere = 1/(MOTOR_K_TR*GEAR_N)*(WEIGHT*target.accel/1000*TIRE_RADIUS/2 + 1.0f*MOUSE_INERTIA*target.rad_accel*TIRE_RADIUS/TREAD_WIDTH) + MOTOR_BR*motor_r_rpm/MOTOR_K_TR;
 800acfa:	4b8c      	ldr	r3, [pc, #560]	; (800af2c <Interrupt_Main+0x374>)
 800acfc:	68db      	ldr	r3, [r3, #12]
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f5 fc42 	bl	8000588 <__aeabi_f2d>
 800ad04:	f04f 0200 	mov.w	r2, #0
 800ad08:	4b8e      	ldr	r3, [pc, #568]	; (800af44 <Interrupt_Main+0x38c>)
 800ad0a:	f7f5 fc95 	bl	8000638 <__aeabi_dmul>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	460c      	mov	r4, r1
 800ad12:	4618      	mov	r0, r3
 800ad14:	4621      	mov	r1, r4
 800ad16:	f04f 0200 	mov.w	r2, #0
 800ad1a:	4b8b      	ldr	r3, [pc, #556]	; (800af48 <Interrupt_Main+0x390>)
 800ad1c:	f7f5 fdb6 	bl	800088c <__aeabi_ddiv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	460c      	mov	r4, r1
 800ad24:	4618      	mov	r0, r3
 800ad26:	4621      	mov	r1, r4
 800ad28:	a375      	add	r3, pc, #468	; (adr r3, 800af00 <Interrupt_Main+0x348>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	f7f5 fc83 	bl	8000638 <__aeabi_dmul>
 800ad32:	4603      	mov	r3, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	4618      	mov	r0, r3
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f04f 0200 	mov.w	r2, #0
 800ad3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad42:	f7f5 fda3 	bl	800088c <__aeabi_ddiv>
 800ad46:	4603      	mov	r3, r0
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4625      	mov	r5, r4
 800ad4c:	461c      	mov	r4, r3
 800ad4e:	4b77      	ldr	r3, [pc, #476]	; (800af2c <Interrupt_Main+0x374>)
 800ad50:	edd3 7a08 	vldr	s15, [r3, #32]
 800ad54:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800af4c <Interrupt_Main+0x394>
 800ad58:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad5c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800af34 <Interrupt_Main+0x37c>
 800ad60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad64:	ee17 0a90 	vmov	r0, s15
 800ad68:	f7f5 fc0e 	bl	8000588 <__aeabi_f2d>
 800ad6c:	f04f 0200 	mov.w	r2, #0
 800ad70:	4b71      	ldr	r3, [pc, #452]	; (800af38 <Interrupt_Main+0x380>)
 800ad72:	f7f5 fd8b 	bl	800088c <__aeabi_ddiv>
 800ad76:	4602      	mov	r2, r0
 800ad78:	460b      	mov	r3, r1
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	f7f5 faa5 	bl	80002cc <__adddf3>
 800ad82:	4603      	mov	r3, r0
 800ad84:	460c      	mov	r4, r1
 800ad86:	4618      	mov	r0, r3
 800ad88:	4621      	mov	r1, r4
 800ad8a:	a35f      	add	r3, pc, #380	; (adr r3, 800af08 <Interrupt_Main+0x350>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fc52 	bl	8000638 <__aeabi_dmul>
 800ad94:	4603      	mov	r3, r0
 800ad96:	460c      	mov	r4, r1
 800ad98:	4625      	mov	r5, r4
 800ad9a:	461c      	mov	r4, r3
 800ad9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad9e:	f7f5 fbf3 	bl	8000588 <__aeabi_f2d>
 800ada2:	f04f 0200 	mov.w	r2, #0
 800ada6:	f04f 0300 	mov.w	r3, #0
 800adaa:	f7f5 fc45 	bl	8000638 <__aeabi_dmul>
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4610      	mov	r0, r2
 800adb4:	4619      	mov	r1, r3
 800adb6:	a356      	add	r3, pc, #344	; (adr r3, 800af10 <Interrupt_Main+0x358>)
 800adb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adbc:	f7f5 fd66 	bl	800088c <__aeabi_ddiv>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	4620      	mov	r0, r4
 800adc6:	4629      	mov	r1, r5
 800adc8:	f7f5 fa80 	bl	80002cc <__adddf3>
 800adcc:	4603      	mov	r3, r0
 800adce:	460c      	mov	r4, r1
 800add0:	4618      	mov	r0, r3
 800add2:	4621      	mov	r1, r4
 800add4:	f7f5 ff28 	bl	8000c28 <__aeabi_d2f>
 800add8:	4602      	mov	r2, r0
 800adda:	4b58      	ldr	r3, [pc, #352]	; (800af3c <Interrupt_Main+0x384>)
 800addc:	601a      	str	r2, [r3, #0]
	  	motor_l_ampere = 1/(MOTOR_K_TR*GEAR_N)*(WEIGHT*target.accel/1000*TIRE_RADIUS/2 - 1.0f*MOUSE_INERTIA*target.rad_accel*TIRE_RADIUS/TREAD_WIDTH) + MOTOR_BR*motor_l_rpm/MOTOR_K_TR;
 800adde:	4b53      	ldr	r3, [pc, #332]	; (800af2c <Interrupt_Main+0x374>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f7f5 fbd0 	bl	8000588 <__aeabi_f2d>
 800ade8:	f04f 0200 	mov.w	r2, #0
 800adec:	4b55      	ldr	r3, [pc, #340]	; (800af44 <Interrupt_Main+0x38c>)
 800adee:	f7f5 fc23 	bl	8000638 <__aeabi_dmul>
 800adf2:	4603      	mov	r3, r0
 800adf4:	460c      	mov	r4, r1
 800adf6:	4618      	mov	r0, r3
 800adf8:	4621      	mov	r1, r4
 800adfa:	f04f 0200 	mov.w	r2, #0
 800adfe:	4b52      	ldr	r3, [pc, #328]	; (800af48 <Interrupt_Main+0x390>)
 800ae00:	f7f5 fd44 	bl	800088c <__aeabi_ddiv>
 800ae04:	4603      	mov	r3, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	4618      	mov	r0, r3
 800ae0a:	4621      	mov	r1, r4
 800ae0c:	a33c      	add	r3, pc, #240	; (adr r3, 800af00 <Interrupt_Main+0x348>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fc11 	bl	8000638 <__aeabi_dmul>
 800ae16:	4603      	mov	r3, r0
 800ae18:	460c      	mov	r4, r1
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f04f 0200 	mov.w	r2, #0
 800ae22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae26:	f7f5 fd31 	bl	800088c <__aeabi_ddiv>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	460c      	mov	r4, r1
 800ae2e:	4625      	mov	r5, r4
 800ae30:	461c      	mov	r4, r3
 800ae32:	4b3e      	ldr	r3, [pc, #248]	; (800af2c <Interrupt_Main+0x374>)
 800ae34:	edd3 7a08 	vldr	s15, [r3, #32]
 800ae38:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800af4c <Interrupt_Main+0x394>
 800ae3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae40:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800af34 <Interrupt_Main+0x37c>
 800ae44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae48:	ee17 0a90 	vmov	r0, s15
 800ae4c:	f7f5 fb9c 	bl	8000588 <__aeabi_f2d>
 800ae50:	f04f 0200 	mov.w	r2, #0
 800ae54:	4b38      	ldr	r3, [pc, #224]	; (800af38 <Interrupt_Main+0x380>)
 800ae56:	f7f5 fd19 	bl	800088c <__aeabi_ddiv>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fa31 	bl	80002c8 <__aeabi_dsub>
 800ae66:	4603      	mov	r3, r0
 800ae68:	460c      	mov	r4, r1
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	a326      	add	r3, pc, #152	; (adr r3, 800af08 <Interrupt_Main+0x350>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 fbe0 	bl	8000638 <__aeabi_dmul>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4625      	mov	r5, r4
 800ae7e:	461c      	mov	r4, r3
 800ae80:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ae82:	f7f5 fb81 	bl	8000588 <__aeabi_f2d>
 800ae86:	f04f 0200 	mov.w	r2, #0
 800ae8a:	f04f 0300 	mov.w	r3, #0
 800ae8e:	f7f5 fbd3 	bl	8000638 <__aeabi_dmul>
 800ae92:	4602      	mov	r2, r0
 800ae94:	460b      	mov	r3, r1
 800ae96:	4610      	mov	r0, r2
 800ae98:	4619      	mov	r1, r3
 800ae9a:	a31d      	add	r3, pc, #116	; (adr r3, 800af10 <Interrupt_Main+0x358>)
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	f7f5 fcf4 	bl	800088c <__aeabi_ddiv>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f7f5 fa0e 	bl	80002cc <__adddf3>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	460c      	mov	r4, r1
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	4621      	mov	r1, r4
 800aeb8:	f7f5 feb6 	bl	8000c28 <__aeabi_d2f>
 800aebc:	4602      	mov	r2, r0
 800aebe:	4b20      	ldr	r3, [pc, #128]	; (800af40 <Interrupt_Main+0x388>)
 800aec0:	601a      	str	r2, [r3, #0]

	  	float FF_Vr = (L_BAR_DT*(motor_r_ampere-prev_motor_r_amp) + MOTOR_R*motor_r_ampere + MOTOR_K_ER*motor_r_rpm/1000);
 800aec2:	4b1e      	ldr	r3, [pc, #120]	; (800af3c <Interrupt_Main+0x384>)
 800aec4:	ed93 7a00 	vldr	s14, [r3]
 800aec8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800aecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800af50 <Interrupt_Main+0x398>
 800aed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aed8:	ee17 0a90 	vmov	r0, s15
 800aedc:	f7f5 fb54 	bl	8000588 <__aeabi_f2d>
 800aee0:	4604      	mov	r4, r0
 800aee2:	460d      	mov	r5, r1
 800aee4:	4b15      	ldr	r3, [pc, #84]	; (800af3c <Interrupt_Main+0x384>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f5 fb4d 	bl	8000588 <__aeabi_f2d>
 800aeee:	e031      	b.n	800af54 <Interrupt_Main+0x39c>
 800aef0:	a0000000 	.word	0xa0000000
 800aef4:	402b9999 	.word	0x402b9999
 800aef8:	a99694d9 	.word	0xa99694d9
 800aefc:	4043193d 	.word	0x4043193d
 800af00:	a0000000 	.word	0xa0000000
 800af04:	401b9999 	.word	0x401b9999
 800af08:	76166929 	.word	0x76166929
 800af0c:	3fdaef9f 	.word	0x3fdaef9f
 800af10:	49ba5e35 	.word	0x49ba5e35
 800af14:	3fe3020c 	.word	0x3fe3020c
 800af18:	20001704 	.word	0x20001704
 800af1c:	2000940c 	.word	0x2000940c
 800af20:	20000af4 	.word	0x20000af4
 800af24:	2001b65c 	.word	0x2001b65c
 800af28:	20001708 	.word	0x20001708
 800af2c:	2001b6a0 	.word	0x2001b6a0
 800af30:	447a0000 	.word	0x447a0000
 800af34:	40dccccd 	.word	0x40dccccd
 800af38:	40400000 	.word	0x40400000
 800af3c:	2001b70c 	.word	0x2001b70c
 800af40:	2001b798 	.word	0x2001b798
 800af44:	40320000 	.word	0x40320000
 800af48:	408f4000 	.word	0x408f4000
 800af4c:	3a83126f 	.word	0x3a83126f
 800af50:	00000000 	.word	0x00000000
 800af54:	f04f 0200 	mov.w	r2, #0
 800af58:	4bd3      	ldr	r3, [pc, #844]	; (800b2a8 <Interrupt_Main+0x6f0>)
 800af5a:	f7f5 fb6d 	bl	8000638 <__aeabi_dmul>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4620      	mov	r0, r4
 800af64:	4629      	mov	r1, r5
 800af66:	f7f5 f9b1 	bl	80002cc <__adddf3>
 800af6a:	4603      	mov	r3, r0
 800af6c:	460c      	mov	r4, r1
 800af6e:	4625      	mov	r5, r4
 800af70:	461c      	mov	r4, r3
 800af72:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af74:	f7f5 fb08 	bl	8000588 <__aeabi_f2d>
 800af78:	a3c5      	add	r3, pc, #788	; (adr r3, 800b290 <Interrupt_Main+0x6d8>)
 800af7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7e:	f7f5 fb5b 	bl	8000638 <__aeabi_dmul>
 800af82:	4602      	mov	r2, r0
 800af84:	460b      	mov	r3, r1
 800af86:	4610      	mov	r0, r2
 800af88:	4619      	mov	r1, r3
 800af8a:	f04f 0200 	mov.w	r2, #0
 800af8e:	4bc7      	ldr	r3, [pc, #796]	; (800b2ac <Interrupt_Main+0x6f4>)
 800af90:	f7f5 fc7c 	bl	800088c <__aeabi_ddiv>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 f996 	bl	80002cc <__adddf3>
 800afa0:	4603      	mov	r3, r0
 800afa2:	460c      	mov	r4, r1
 800afa4:	4618      	mov	r0, r3
 800afa6:	4621      	mov	r1, r4
 800afa8:	f7f5 fe3e 	bl	8000c28 <__aeabi_d2f>
 800afac:	4603      	mov	r3, r0
 800afae:	637b      	str	r3, [r7, #52]	; 0x34
	  	float FF_Vl = (L_BAR_DT*(motor_l_ampere-prev_motor_l_amp) + MOTOR_R*motor_l_ampere + MOTOR_K_ER*motor_l_rpm/1000);
 800afb0:	4bbf      	ldr	r3, [pc, #764]	; (800b2b0 <Interrupt_Main+0x6f8>)
 800afb2:	ed93 7a00 	vldr	s14, [r3]
 800afb6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800afba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afbe:	ed9f 7abd 	vldr	s14, [pc, #756]	; 800b2b4 <Interrupt_Main+0x6fc>
 800afc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800afc6:	ee17 0a90 	vmov	r0, s15
 800afca:	f7f5 fadd 	bl	8000588 <__aeabi_f2d>
 800afce:	4604      	mov	r4, r0
 800afd0:	460d      	mov	r5, r1
 800afd2:	4bb7      	ldr	r3, [pc, #732]	; (800b2b0 <Interrupt_Main+0x6f8>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7f5 fad6 	bl	8000588 <__aeabi_f2d>
 800afdc:	f04f 0200 	mov.w	r2, #0
 800afe0:	4bb1      	ldr	r3, [pc, #708]	; (800b2a8 <Interrupt_Main+0x6f0>)
 800afe2:	f7f5 fb29 	bl	8000638 <__aeabi_dmul>
 800afe6:	4602      	mov	r2, r0
 800afe8:	460b      	mov	r3, r1
 800afea:	4620      	mov	r0, r4
 800afec:	4629      	mov	r1, r5
 800afee:	f7f5 f96d 	bl	80002cc <__adddf3>
 800aff2:	4603      	mov	r3, r0
 800aff4:	460c      	mov	r4, r1
 800aff6:	4625      	mov	r5, r4
 800aff8:	461c      	mov	r4, r3
 800affa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800affc:	f7f5 fac4 	bl	8000588 <__aeabi_f2d>
 800b000:	a3a3      	add	r3, pc, #652	; (adr r3, 800b290 <Interrupt_Main+0x6d8>)
 800b002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b006:	f7f5 fb17 	bl	8000638 <__aeabi_dmul>
 800b00a:	4602      	mov	r2, r0
 800b00c:	460b      	mov	r3, r1
 800b00e:	4610      	mov	r0, r2
 800b010:	4619      	mov	r1, r3
 800b012:	f04f 0200 	mov.w	r2, #0
 800b016:	4ba5      	ldr	r3, [pc, #660]	; (800b2ac <Interrupt_Main+0x6f4>)
 800b018:	f7f5 fc38 	bl	800088c <__aeabi_ddiv>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4620      	mov	r0, r4
 800b022:	4629      	mov	r1, r5
 800b024:	f7f5 f952 	bl	80002cc <__adddf3>
 800b028:	4603      	mov	r3, r0
 800b02a:	460c      	mov	r4, r1
 800b02c:	4618      	mov	r0, r3
 800b02e:	4621      	mov	r1, r4
 800b030:	f7f5 fdfa 	bl	8000c28 <__aeabi_d2f>
 800b034:	4603      	mov	r3, r0
 800b036:	633b      	str	r3, [r7, #48]	; 0x30
	  	FF_Vr_LPF = (1-k)*FF_Vr_LPF + k*FF_Vr;
 800b038:	eddf 7a9f 	vldr	s15, [pc, #636]	; 800b2b8 <Interrupt_Main+0x700>
 800b03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b040:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b044:	4b9d      	ldr	r3, [pc, #628]	; (800b2bc <Interrupt_Main+0x704>)
 800b046:	edd3 7a00 	vldr	s15, [r3]
 800b04a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b04e:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800b2b8 <Interrupt_Main+0x700>
 800b052:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b056:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b05a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b05e:	4b97      	ldr	r3, [pc, #604]	; (800b2bc <Interrupt_Main+0x704>)
 800b060:	edc3 7a00 	vstr	s15, [r3]
	  	FF_Vl_LPF = (1-k)*FF_Vl_LPF + k*FF_Vl;
 800b064:	eddf 7a94 	vldr	s15, [pc, #592]	; 800b2b8 <Interrupt_Main+0x700>
 800b068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b06c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b070:	4b93      	ldr	r3, [pc, #588]	; (800b2c0 <Interrupt_Main+0x708>)
 800b072:	edd3 7a00 	vldr	s15, [r3]
 800b076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b07a:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800b2b8 <Interrupt_Main+0x700>
 800b07e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b08a:	4b8d      	ldr	r3, [pc, #564]	; (800b2c0 <Interrupt_Main+0x708>)
 800b08c:	edc3 7a00 	vstr	s15, [r3]

	  	//


	  	V_r += FF_Vr_LPF;
 800b090:	4b8c      	ldr	r3, [pc, #560]	; (800b2c4 <Interrupt_Main+0x70c>)
 800b092:	ed93 7a00 	vldr	s14, [r3]
 800b096:	4b89      	ldr	r3, [pc, #548]	; (800b2bc <Interrupt_Main+0x704>)
 800b098:	edd3 7a00 	vldr	s15, [r3]
 800b09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0a0:	4b88      	ldr	r3, [pc, #544]	; (800b2c4 <Interrupt_Main+0x70c>)
 800b0a2:	edc3 7a00 	vstr	s15, [r3]
	  	V_l -= FF_Vl_LPF;
 800b0a6:	4b88      	ldr	r3, [pc, #544]	; (800b2c8 <Interrupt_Main+0x710>)
 800b0a8:	ed93 7a00 	vldr	s14, [r3]
 800b0ac:	4b84      	ldr	r3, [pc, #528]	; (800b2c0 <Interrupt_Main+0x708>)
 800b0ae:	edd3 7a00 	vldr	s15, [r3]
 800b0b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b6:	4b84      	ldr	r3, [pc, #528]	; (800b2c8 <Interrupt_Main+0x710>)
 800b0b8:	edc3 7a00 	vstr	s15, [r3]

		float ff_turn = (FF_Vr - FF_Vl_LPF)/2.0;
 800b0bc:	4b80      	ldr	r3, [pc, #512]	; (800b2c0 <Interrupt_Main+0x708>)
 800b0be:	edd3 7a00 	vldr	s15, [r3]
 800b0c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b0ca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b0ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b0d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		float ff_st   = (FF_Vr + FF_Vl_LPF)/2.0;
 800b0d6:	4b7a      	ldr	r3, [pc, #488]	; (800b2c0 <Interrupt_Main+0x708>)
 800b0d8:	ed93 7a00 	vldr	s14, [r3]
 800b0dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b0e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b0e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b0ec:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	  	float speed_fb = 0.0;
 800b0f0:	f04f 0300 	mov.w	r3, #0
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
	  	float omega_fb = 0.0;
 800b0f6:	f04f 0300 	mov.w	r3, #0
 800b0fa:	64fb      	str	r3, [r7, #76]	; 0x4c


	  	speed_fb += (target.velo - machine.velo)*velo_g.Kp;
 800b0fc:	4b73      	ldr	r3, [pc, #460]	; (800b2cc <Interrupt_Main+0x714>)
 800b0fe:	ed93 7a00 	vldr	s14, [r3]
 800b102:	4b73      	ldr	r3, [pc, #460]	; (800b2d0 <Interrupt_Main+0x718>)
 800b104:	edd3 7a00 	vldr	s15, [r3]
 800b108:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b10c:	4b71      	ldr	r3, [pc, #452]	; (800b2d4 <Interrupt_Main+0x71c>)
 800b10e:	edd3 7a00 	vldr	s15, [r3]
 800b112:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b116:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b11a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b11e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  	speed_fb += (target.I_velo - machine.I_velo)*velo_g.Ki;
 800b122:	4b6a      	ldr	r3, [pc, #424]	; (800b2cc <Interrupt_Main+0x714>)
 800b124:	ed93 7a02 	vldr	s14, [r3, #8]
 800b128:	4b69      	ldr	r3, [pc, #420]	; (800b2d0 <Interrupt_Main+0x718>)
 800b12a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b12e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b132:	4b68      	ldr	r3, [pc, #416]	; (800b2d4 <Interrupt_Main+0x71c>)
 800b134:	edd3 7a01 	vldr	s15, [r3, #4]
 800b138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b140:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b144:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  	diff_low_pass = 0.9*diff_low_pass + 0.1*(((target.velo - target.prev_velo) - (machine.velo - machine.prev_velo))*velo_g.Kd);
 800b148:	4b63      	ldr	r3, [pc, #396]	; (800b2d8 <Interrupt_Main+0x720>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f5 fa1b 	bl	8000588 <__aeabi_f2d>
 800b152:	a351      	add	r3, pc, #324	; (adr r3, 800b298 <Interrupt_Main+0x6e0>)
 800b154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b158:	f7f5 fa6e 	bl	8000638 <__aeabi_dmul>
 800b15c:	4603      	mov	r3, r0
 800b15e:	460c      	mov	r4, r1
 800b160:	4625      	mov	r5, r4
 800b162:	461c      	mov	r4, r3
 800b164:	4b59      	ldr	r3, [pc, #356]	; (800b2cc <Interrupt_Main+0x714>)
 800b166:	ed93 7a00 	vldr	s14, [r3]
 800b16a:	4b58      	ldr	r3, [pc, #352]	; (800b2cc <Interrupt_Main+0x714>)
 800b16c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b170:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b174:	4b56      	ldr	r3, [pc, #344]	; (800b2d0 <Interrupt_Main+0x718>)
 800b176:	edd3 6a00 	vldr	s13, [r3]
 800b17a:	4b55      	ldr	r3, [pc, #340]	; (800b2d0 <Interrupt_Main+0x718>)
 800b17c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b180:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b184:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b188:	4b52      	ldr	r3, [pc, #328]	; (800b2d4 <Interrupt_Main+0x71c>)
 800b18a:	edd3 7a02 	vldr	s15, [r3, #8]
 800b18e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b192:	ee17 0a90 	vmov	r0, s15
 800b196:	f7f5 f9f7 	bl	8000588 <__aeabi_f2d>
 800b19a:	a341      	add	r3, pc, #260	; (adr r3, 800b2a0 <Interrupt_Main+0x6e8>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	f7f5 fa4a 	bl	8000638 <__aeabi_dmul>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f5 f88e 	bl	80002cc <__adddf3>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	f7f5 fd36 	bl	8000c28 <__aeabi_d2f>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	4b46      	ldr	r3, [pc, #280]	; (800b2d8 <Interrupt_Main+0x720>)
 800b1c0:	601a      	str	r2, [r3, #0]
	  	speed_fb += diff_low_pass;
 800b1c2:	4b45      	ldr	r3, [pc, #276]	; (800b2d8 <Interrupt_Main+0x720>)
 800b1c4:	edd3 7a00 	vldr	s15, [r3]
 800b1c8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b1cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24


	  	omega_fb += (target.rad_velo - machine.rad_velo)*omega_g.Kp;;
 800b1d4:	4b3d      	ldr	r3, [pc, #244]	; (800b2cc <Interrupt_Main+0x714>)
 800b1d6:	ed93 7a05 	vldr	s14, [r3, #20]
 800b1da:	4b3d      	ldr	r3, [pc, #244]	; (800b2d0 <Interrupt_Main+0x718>)
 800b1dc:	edd3 7a05 	vldr	s15, [r3, #20]
 800b1e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b1e4:	4b3d      	ldr	r3, [pc, #244]	; (800b2dc <Interrupt_Main+0x724>)
 800b1e6:	edd3 7a00 	vldr	s15, [r3]
 800b1ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ee:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  	omega_fb += (target.I_rad_velo - machine.I_rad_velo)*omega_g.Ki;
 800b1fa:	4b34      	ldr	r3, [pc, #208]	; (800b2cc <Interrupt_Main+0x714>)
 800b1fc:	ed93 7a07 	vldr	s14, [r3, #28]
 800b200:	4b33      	ldr	r3, [pc, #204]	; (800b2d0 <Interrupt_Main+0x718>)
 800b202:	edd3 7a07 	vldr	s15, [r3, #28]
 800b206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b20a:	4b34      	ldr	r3, [pc, #208]	; (800b2dc <Interrupt_Main+0x724>)
 800b20c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b210:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b214:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b21c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
	  	omega_fb += ((target.rad_velo-target.prev_rad_velo) - (machine.rad_velo-machine.prev_rad_velo))*omega_g.Kd;
 800b220:	4b2a      	ldr	r3, [pc, #168]	; (800b2cc <Interrupt_Main+0x714>)
 800b222:	ed93 7a05 	vldr	s14, [r3, #20]
 800b226:	4b29      	ldr	r3, [pc, #164]	; (800b2cc <Interrupt_Main+0x714>)
 800b228:	edd3 7a06 	vldr	s15, [r3, #24]
 800b22c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b230:	4b27      	ldr	r3, [pc, #156]	; (800b2d0 <Interrupt_Main+0x718>)
 800b232:	edd3 6a05 	vldr	s13, [r3, #20]
 800b236:	4b26      	ldr	r3, [pc, #152]	; (800b2d0 <Interrupt_Main+0x718>)
 800b238:	edd3 7a06 	vldr	s15, [r3, #24]
 800b23c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b240:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b244:	4b25      	ldr	r3, [pc, #148]	; (800b2dc <Interrupt_Main+0x724>)
 800b246:	edd3 7a02 	vldr	s15, [r3, #8]
 800b24a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b24e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b252:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b256:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c




	  	float ctrl_limit = ABS(ff_turn) + ABS(ff_st);
 800b25a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b25e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b266:	d504      	bpl.n	800b272 <Interrupt_Main+0x6ba>
 800b268:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b26c:	eeb1 7a67 	vneg.f32	s14, s15
 800b270:	e001      	b.n	800b276 <Interrupt_Main+0x6be>
 800b272:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b276:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b27a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b282:	d52d      	bpl.n	800b2e0 <Interrupt_Main+0x728>
 800b284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b288:	eef1 7a67 	vneg.f32	s15, s15
 800b28c:	e02a      	b.n	800b2e4 <Interrupt_Main+0x72c>
 800b28e:	bf00      	nop
 800b290:	c8b43958 	.word	0xc8b43958
 800b294:	3fafbe76 	.word	0x3fafbe76
 800b298:	cccccccd 	.word	0xcccccccd
 800b29c:	3feccccc 	.word	0x3feccccc
 800b2a0:	9999999a 	.word	0x9999999a
 800b2a4:	3fb99999 	.word	0x3fb99999
 800b2a8:	40160000 	.word	0x40160000
 800b2ac:	408f4000 	.word	0x408f4000
 800b2b0:	2001b798 	.word	0x2001b798
 800b2b4:	00000000 	.word	0x00000000
 800b2b8:	3f733333 	.word	0x3f733333
 800b2bc:	2001b780 	.word	0x2001b780
 800b2c0:	2001b78c 	.word	0x2001b78c
 800b2c4:	2000940c 	.word	0x2000940c
 800b2c8:	20001704 	.word	0x20001704
 800b2cc:	2001b6a0 	.word	0x2001b6a0
 800b2d0:	2001b664 	.word	0x2001b664
 800b2d4:	2001b694 	.word	0x2001b694
 800b2d8:	2001b794 	.word	0x2001b794
 800b2dc:	20009890 	.word	0x20009890
 800b2e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2e8:	edc7 7a08 	vstr	s15, [r7, #32]
	  	float sp_limit = ABS(Battery_GetVoltage() - ctrl_limit);
 800b2ec:	f7f5 fe6c 	bl	8000fc8 <Battery_GetVoltage>
 800b2f0:	eeb0 7a40 	vmov.f32	s14, s0
 800b2f4:	edd7 7a08 	vldr	s15, [r7, #32]
 800b2f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b304:	d50a      	bpl.n	800b31c <Interrupt_Main+0x764>
 800b306:	f7f5 fe5f 	bl	8000fc8 <Battery_GetVoltage>
 800b30a:	eeb0 7a40 	vmov.f32	s14, s0
 800b30e:	edd7 7a08 	vldr	s15, [r7, #32]
 800b312:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b316:	eef1 7a67 	vneg.f32	s15, s15
 800b31a:	e007      	b.n	800b32c <Interrupt_Main+0x774>
 800b31c:	f7f5 fe54 	bl	8000fc8 <Battery_GetVoltage>
 800b320:	eeb0 7a40 	vmov.f32	s14, s0
 800b324:	edd7 7a08 	vldr	s15, [r7, #32]
 800b328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b32c:	edc7 7a07 	vstr	s15, [r7, #28]
		float sp_operation = speed_fb;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	64bb      	str	r3, [r7, #72]	; 0x48
	  	if(ABS(sp_operation) > sp_limit)
 800b334:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b33c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b340:	d504      	bpl.n	800b34c <Interrupt_Main+0x794>
 800b342:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b346:	eef1 7a67 	vneg.f32	s15, s15
 800b34a:	e001      	b.n	800b350 <Interrupt_Main+0x798>
 800b34c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b350:	ed97 7a07 	vldr	s14, [r7, #28]
 800b354:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b35c:	f340 8086 	ble.w	800b46c <Interrupt_Main+0x8b4>
		{
			float diff =  sp_operation - SIGN(sp_operation) * sp_limit;
 800b360:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b364:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b36c:	d502      	bpl.n	800b374 <Interrupt_Main+0x7bc>
 800b36e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b372:	e001      	b.n	800b378 <Interrupt_Main+0x7c0>
 800b374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b378:	edd7 7a07 	vldr	s15, [r7, #28]
 800b37c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b380:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b384:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b388:	edc7 7a06 	vstr	s15, [r7, #24]
			if(velo_g.Kp != 0.0f)
 800b38c:	4bbc      	ldr	r3, [pc, #752]	; (800b680 <Interrupt_Main+0xac8>)
 800b38e:	edd3 7a00 	vldr	s15, [r3]
 800b392:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39a:	d055      	beq.n	800b448 <Interrupt_Main+0x890>
			{
				target.I_velo  = target.I_velo  - 1/velo_g.Kp*diff/2.0;
 800b39c:	4bb9      	ldr	r3, [pc, #740]	; (800b684 <Interrupt_Main+0xacc>)
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f5 f8f1 	bl	8000588 <__aeabi_f2d>
 800b3a6:	4604      	mov	r4, r0
 800b3a8:	460d      	mov	r5, r1
 800b3aa:	4bb5      	ldr	r3, [pc, #724]	; (800b680 <Interrupt_Main+0xac8>)
 800b3ac:	edd3 7a00 	vldr	s15, [r3]
 800b3b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3c0:	ee17 0a90 	vmov	r0, s15
 800b3c4:	f7f5 f8e0 	bl	8000588 <__aeabi_f2d>
 800b3c8:	f04f 0200 	mov.w	r2, #0
 800b3cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3d0:	f7f5 fa5c 	bl	800088c <__aeabi_ddiv>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	460b      	mov	r3, r1
 800b3d8:	4620      	mov	r0, r4
 800b3da:	4629      	mov	r1, r5
 800b3dc:	f7f4 ff74 	bl	80002c8 <__aeabi_dsub>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	4621      	mov	r1, r4
 800b3e8:	f7f5 fc1e 	bl	8000c28 <__aeabi_d2f>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	4ba5      	ldr	r3, [pc, #660]	; (800b684 <Interrupt_Main+0xacc>)
 800b3f0:	609a      	str	r2, [r3, #8]
				machine.I_velo = machine.I_velo + 1/velo_g.Kp*diff/2.0;
 800b3f2:	4ba5      	ldr	r3, [pc, #660]	; (800b688 <Interrupt_Main+0xad0>)
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f5 f8c6 	bl	8000588 <__aeabi_f2d>
 800b3fc:	4604      	mov	r4, r0
 800b3fe:	460d      	mov	r5, r1
 800b400:	4b9f      	ldr	r3, [pc, #636]	; (800b680 <Interrupt_Main+0xac8>)
 800b402:	edd3 7a00 	vldr	s15, [r3]
 800b406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b40a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b412:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b416:	ee17 0a90 	vmov	r0, s15
 800b41a:	f7f5 f8b5 	bl	8000588 <__aeabi_f2d>
 800b41e:	f04f 0200 	mov.w	r2, #0
 800b422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b426:	f7f5 fa31 	bl	800088c <__aeabi_ddiv>
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4620      	mov	r0, r4
 800b430:	4629      	mov	r1, r5
 800b432:	f7f4 ff4b 	bl	80002cc <__adddf3>
 800b436:	4603      	mov	r3, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	4618      	mov	r0, r3
 800b43c:	4621      	mov	r1, r4
 800b43e:	f7f5 fbf3 	bl	8000c28 <__aeabi_d2f>
 800b442:	4602      	mov	r2, r0
 800b444:	4b90      	ldr	r3, [pc, #576]	; (800b688 <Interrupt_Main+0xad0>)
 800b446:	609a      	str	r2, [r3, #8]
			}
			sp_operation = SIGN(sp_operation) * sp_limit;
 800b448:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b44c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b454:	d502      	bpl.n	800b45c <Interrupt_Main+0x8a4>
 800b456:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b45a:	e001      	b.n	800b460 <Interrupt_Main+0x8a8>
 800b45c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b460:	edd7 7a07 	vldr	s15, [r7, #28]
 800b464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b468:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		}

	  	if(run_mode == STRAIGHT_MODE || run_mode == DIAG_MODE )
 800b46c:	4b87      	ldr	r3, [pc, #540]	; (800b68c <Interrupt_Main+0xad4>)
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	2b01      	cmp	r3, #1
 800b472:	d004      	beq.n	800b47e <Interrupt_Main+0x8c6>
 800b474:	4b85      	ldr	r3, [pc, #532]	; (800b68c <Interrupt_Main+0xad4>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b03      	cmp	r3, #3
 800b47a:	f040 80bd 	bne.w	800b5f8 <Interrupt_Main+0xa40>
	  	{
			//om_fb_controll = ct.omega_ctrl.Anti_windup_2(om_fb_controll + (sp_FF_controll_r-sp_FF_controll_l)/2.0, 1.0);
		  	if(ABS(ff_turn + omega_fb) > 1.0)
 800b47e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b482:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b48a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b492:	d510      	bpl.n	800b4b6 <Interrupt_Main+0x8fe>
 800b494:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b498:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b49c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4a0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b4a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ac:	bf4c      	ite	mi
 800b4ae:	2301      	movmi	r3, #1
 800b4b0:	2300      	movpl	r3, #0
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	e00f      	b.n	800b4d6 <Interrupt_Main+0x91e>
 800b4b6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b4ba:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	bfcc      	ite	gt
 800b4d0:	2301      	movgt	r3, #1
 800b4d2:	2300      	movle	r3, #0
 800b4d4:	b2db      	uxtb	r3, r3
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	f000 808e 	beq.w	800b5f8 <Interrupt_Main+0xa40>
			{
				float diff =  (ff_turn + omega_fb) - SIGN(ff_turn + omega_fb) * 1.0;
 800b4dc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b4e0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b4e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4e8:	ee17 0a90 	vmov	r0, s15
 800b4ec:	f7f5 f84c 	bl	8000588 <__aeabi_f2d>
 800b4f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b4f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b4f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b504:	d503      	bpl.n	800b50e <Interrupt_Main+0x956>
 800b506:	f04f 0300 	mov.w	r3, #0
 800b50a:	4c61      	ldr	r4, [pc, #388]	; (800b690 <Interrupt_Main+0xad8>)
 800b50c:	e002      	b.n	800b514 <Interrupt_Main+0x95c>
 800b50e:	f04f 0300 	mov.w	r3, #0
 800b512:	4c60      	ldr	r4, [pc, #384]	; (800b694 <Interrupt_Main+0xadc>)
 800b514:	461a      	mov	r2, r3
 800b516:	4623      	mov	r3, r4
 800b518:	f7f4 fed6 	bl	80002c8 <__aeabi_dsub>
 800b51c:	4603      	mov	r3, r0
 800b51e:	460c      	mov	r4, r1
 800b520:	4618      	mov	r0, r3
 800b522:	4621      	mov	r1, r4
 800b524:	f7f5 fb80 	bl	8000c28 <__aeabi_d2f>
 800b528:	4603      	mov	r3, r0
 800b52a:	617b      	str	r3, [r7, #20]
				if(omega_g.Kp != 0.0f)
 800b52c:	4b5a      	ldr	r3, [pc, #360]	; (800b698 <Interrupt_Main+0xae0>)
 800b52e:	edd3 7a00 	vldr	s15, [r3]
 800b532:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b53a:	d055      	beq.n	800b5e8 <Interrupt_Main+0xa30>
				{
					target.I_rad_velo  = target.I_rad_velo  - 1/omega_g.Kp*diff/2.0;
 800b53c:	4b51      	ldr	r3, [pc, #324]	; (800b684 <Interrupt_Main+0xacc>)
 800b53e:	69db      	ldr	r3, [r3, #28]
 800b540:	4618      	mov	r0, r3
 800b542:	f7f5 f821 	bl	8000588 <__aeabi_f2d>
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	4b53      	ldr	r3, [pc, #332]	; (800b698 <Interrupt_Main+0xae0>)
 800b54c:	edd3 7a00 	vldr	s15, [r3]
 800b550:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b554:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b558:	edd7 7a05 	vldr	s15, [r7, #20]
 800b55c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b560:	ee17 0a90 	vmov	r0, s15
 800b564:	f7f5 f810 	bl	8000588 <__aeabi_f2d>
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b570:	f7f5 f98c 	bl	800088c <__aeabi_ddiv>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4620      	mov	r0, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	f7f4 fea4 	bl	80002c8 <__aeabi_dsub>
 800b580:	4603      	mov	r3, r0
 800b582:	460c      	mov	r4, r1
 800b584:	4618      	mov	r0, r3
 800b586:	4621      	mov	r1, r4
 800b588:	f7f5 fb4e 	bl	8000c28 <__aeabi_d2f>
 800b58c:	4602      	mov	r2, r0
 800b58e:	4b3d      	ldr	r3, [pc, #244]	; (800b684 <Interrupt_Main+0xacc>)
 800b590:	61da      	str	r2, [r3, #28]
					machine.I_rad_velo = machine.I_rad_velo + 1/omega_g.Kp*diff/2.0;
 800b592:	4b3d      	ldr	r3, [pc, #244]	; (800b688 <Interrupt_Main+0xad0>)
 800b594:	69db      	ldr	r3, [r3, #28]
 800b596:	4618      	mov	r0, r3
 800b598:	f7f4 fff6 	bl	8000588 <__aeabi_f2d>
 800b59c:	4604      	mov	r4, r0
 800b59e:	460d      	mov	r5, r1
 800b5a0:	4b3d      	ldr	r3, [pc, #244]	; (800b698 <Interrupt_Main+0xae0>)
 800b5a2:	edd3 7a00 	vldr	s15, [r3]
 800b5a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ae:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5b6:	ee17 0a90 	vmov	r0, s15
 800b5ba:	f7f4 ffe5 	bl	8000588 <__aeabi_f2d>
 800b5be:	f04f 0200 	mov.w	r2, #0
 800b5c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5c6:	f7f5 f961 	bl	800088c <__aeabi_ddiv>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4629      	mov	r1, r5
 800b5d2:	f7f4 fe7b 	bl	80002cc <__adddf3>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	4618      	mov	r0, r3
 800b5dc:	4621      	mov	r1, r4
 800b5de:	f7f5 fb23 	bl	8000c28 <__aeabi_d2f>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	4b28      	ldr	r3, [pc, #160]	; (800b688 <Interrupt_Main+0xad0>)
 800b5e6:	61da      	str	r2, [r3, #28]
				}
				omega_fb = omega_fb - ff_turn;
 800b5e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b5ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b5f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5f4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			}
	  	}

	  	float omega_limit = ABS(Battery_GetVoltage() - ctrl_limit);
 800b5f8:	f7f5 fce6 	bl	8000fc8 <Battery_GetVoltage>
 800b5fc:	eeb0 7a40 	vmov.f32	s14, s0
 800b600:	edd7 7a08 	vldr	s15, [r7, #32]
 800b604:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b608:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b610:	d50a      	bpl.n	800b628 <Interrupt_Main+0xa70>
 800b612:	f7f5 fcd9 	bl	8000fc8 <Battery_GetVoltage>
 800b616:	eeb0 7a40 	vmov.f32	s14, s0
 800b61a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b61e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b622:	eef1 7a67 	vneg.f32	s15, s15
 800b626:	e007      	b.n	800b638 <Interrupt_Main+0xa80>
 800b628:	f7f5 fcce 	bl	8000fc8 <Battery_GetVoltage>
 800b62c:	eeb0 7a40 	vmov.f32	s14, s0
 800b630:	edd7 7a08 	vldr	s15, [r7, #32]
 800b634:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b638:	edc7 7a04 	vstr	s15, [r7, #16]
		float omega_operation = omega_fb;
 800b63c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63e:	60fb      	str	r3, [r7, #12]
	  	if(ABS(omega_operation) > omega_limit)
 800b640:	edd7 7a03 	vldr	s15, [r7, #12]
 800b644:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b64c:	d504      	bpl.n	800b658 <Interrupt_Main+0xaa0>
 800b64e:	edd7 7a03 	vldr	s15, [r7, #12]
 800b652:	eef1 7a67 	vneg.f32	s15, s15
 800b656:	e001      	b.n	800b65c <Interrupt_Main+0xaa4>
 800b658:	edd7 7a03 	vldr	s15, [r7, #12]
 800b65c:	ed97 7a04 	vldr	s14, [r7, #16]
 800b660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b668:	f340 8094 	ble.w	800b794 <Interrupt_Main+0xbdc>
		{
			float diff =  omega_operation - SIGN(omega_operation) * omega_limit;
 800b66c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b678:	d510      	bpl.n	800b69c <Interrupt_Main+0xae4>
 800b67a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b67e:	e00f      	b.n	800b6a0 <Interrupt_Main+0xae8>
 800b680:	2001b694 	.word	0x2001b694
 800b684:	2001b6a0 	.word	0x2001b6a0
 800b688:	2001b664 	.word	0x2001b664
 800b68c:	20001708 	.word	0x20001708
 800b690:	bff00000 	.word	0xbff00000
 800b694:	3ff00000 	.word	0x3ff00000
 800b698:	20009890 	.word	0x20009890
 800b69c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b6a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a8:	ed97 7a03 	vldr	s14, [r7, #12]
 800b6ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6b0:	edc7 7a02 	vstr	s15, [r7, #8]
			if(omega_g.Kp != 0.0f)
 800b6b4:	4bab      	ldr	r3, [pc, #684]	; (800b964 <Interrupt_Main+0xdac>)
 800b6b6:	edd3 7a00 	vldr	s15, [r3]
 800b6ba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c2:	d055      	beq.n	800b770 <Interrupt_Main+0xbb8>
			{
				target.I_rad_velo  = target.I_rad_velo  - 1/omega_g.Kp*diff/2.0;
 800b6c4:	4ba8      	ldr	r3, [pc, #672]	; (800b968 <Interrupt_Main+0xdb0>)
 800b6c6:	69db      	ldr	r3, [r3, #28]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7f4 ff5d 	bl	8000588 <__aeabi_f2d>
 800b6ce:	4604      	mov	r4, r0
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	4ba4      	ldr	r3, [pc, #656]	; (800b964 <Interrupt_Main+0xdac>)
 800b6d4:	edd3 7a00 	vldr	s15, [r3]
 800b6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6e0:	edd7 7a02 	vldr	s15, [r7, #8]
 800b6e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e8:	ee17 0a90 	vmov	r0, s15
 800b6ec:	f7f4 ff4c 	bl	8000588 <__aeabi_f2d>
 800b6f0:	f04f 0200 	mov.w	r2, #0
 800b6f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6f8:	f7f5 f8c8 	bl	800088c <__aeabi_ddiv>
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	460b      	mov	r3, r1
 800b700:	4620      	mov	r0, r4
 800b702:	4629      	mov	r1, r5
 800b704:	f7f4 fde0 	bl	80002c8 <__aeabi_dsub>
 800b708:	4603      	mov	r3, r0
 800b70a:	460c      	mov	r4, r1
 800b70c:	4618      	mov	r0, r3
 800b70e:	4621      	mov	r1, r4
 800b710:	f7f5 fa8a 	bl	8000c28 <__aeabi_d2f>
 800b714:	4602      	mov	r2, r0
 800b716:	4b94      	ldr	r3, [pc, #592]	; (800b968 <Interrupt_Main+0xdb0>)
 800b718:	61da      	str	r2, [r3, #28]
				machine.I_rad_velo = machine.I_rad_velo + 1/omega_g.Kp*diff/2.0;
 800b71a:	4b94      	ldr	r3, [pc, #592]	; (800b96c <Interrupt_Main+0xdb4>)
 800b71c:	69db      	ldr	r3, [r3, #28]
 800b71e:	4618      	mov	r0, r3
 800b720:	f7f4 ff32 	bl	8000588 <__aeabi_f2d>
 800b724:	4604      	mov	r4, r0
 800b726:	460d      	mov	r5, r1
 800b728:	4b8e      	ldr	r3, [pc, #568]	; (800b964 <Interrupt_Main+0xdac>)
 800b72a:	edd3 7a00 	vldr	s15, [r3]
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b736:	edd7 7a02 	vldr	s15, [r7, #8]
 800b73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73e:	ee17 0a90 	vmov	r0, s15
 800b742:	f7f4 ff21 	bl	8000588 <__aeabi_f2d>
 800b746:	f04f 0200 	mov.w	r2, #0
 800b74a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b74e:	f7f5 f89d 	bl	800088c <__aeabi_ddiv>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f4 fdb7 	bl	80002cc <__adddf3>
 800b75e:	4603      	mov	r3, r0
 800b760:	460c      	mov	r4, r1
 800b762:	4618      	mov	r0, r3
 800b764:	4621      	mov	r1, r4
 800b766:	f7f5 fa5f 	bl	8000c28 <__aeabi_d2f>
 800b76a:	4602      	mov	r2, r0
 800b76c:	4b7f      	ldr	r3, [pc, #508]	; (800b96c <Interrupt_Main+0xdb4>)
 800b76e:	61da      	str	r2, [r3, #28]
			}
			omega_operation = SIGN(sp_operation) * omega_limit;
 800b770:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b77c:	d502      	bpl.n	800b784 <Interrupt_Main+0xbcc>
 800b77e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b782:	e001      	b.n	800b788 <Interrupt_Main+0xbd0>
 800b784:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b788:	edd7 7a04 	vldr	s15, [r7, #16]
 800b78c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b790:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		V_r += sp_operation;
 800b794:	4b76      	ldr	r3, [pc, #472]	; (800b970 <Interrupt_Main+0xdb8>)
 800b796:	ed93 7a00 	vldr	s14, [r3]
 800b79a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a2:	4b73      	ldr	r3, [pc, #460]	; (800b970 <Interrupt_Main+0xdb8>)
 800b7a4:	edc3 7a00 	vstr	s15, [r3]
		V_l -= sp_operation;
 800b7a8:	4b72      	ldr	r3, [pc, #456]	; (800b974 <Interrupt_Main+0xdbc>)
 800b7aa:	ed93 7a00 	vldr	s14, [r3]
 800b7ae:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800b7b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7b6:	4b6f      	ldr	r3, [pc, #444]	; (800b974 <Interrupt_Main+0xdbc>)
 800b7b8:	edc3 7a00 	vstr	s15, [r3]

		V_r += omega_fb;
 800b7bc:	4b6c      	ldr	r3, [pc, #432]	; (800b970 <Interrupt_Main+0xdb8>)
 800b7be:	ed93 7a00 	vldr	s14, [r3]
 800b7c2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ca:	4b69      	ldr	r3, [pc, #420]	; (800b970 <Interrupt_Main+0xdb8>)
 800b7cc:	edc3 7a00 	vstr	s15, [r3]
		V_l += omega_fb;
 800b7d0:	4b68      	ldr	r3, [pc, #416]	; (800b974 <Interrupt_Main+0xdbc>)
 800b7d2:	ed93 7a00 	vldr	s14, [r3]
 800b7d6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b7da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7de:	4b65      	ldr	r3, [pc, #404]	; (800b974 <Interrupt_Main+0xdbc>)
 800b7e0:	edc3 7a00 	vstr	s15, [r3]
	{
 800b7e4:	e001      	b.n	800b7ea <Interrupt_Main+0xc32>

	}
	else
	{
		init_W_parameters();
 800b7e6:	f7ff f979 	bl	800aadc <init_W_parameters>
	}

	if(run_mode == STRAIGHT_MODE || run_mode == TURN_MODE || run_mode == DIAG_MODE || run_mode == TURN_MODE_TABLE )
 800b7ea:	4b63      	ldr	r3, [pc, #396]	; (800b978 <Interrupt_Main+0xdc0>)
 800b7ec:	781b      	ldrb	r3, [r3, #0]
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d00c      	beq.n	800b80c <Interrupt_Main+0xc54>
 800b7f2:	4b61      	ldr	r3, [pc, #388]	; (800b978 <Interrupt_Main+0xdc0>)
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	2b02      	cmp	r3, #2
 800b7f8:	d008      	beq.n	800b80c <Interrupt_Main+0xc54>
 800b7fa:	4b5f      	ldr	r3, [pc, #380]	; (800b978 <Interrupt_Main+0xdc0>)
 800b7fc:	781b      	ldrb	r3, [r3, #0]
 800b7fe:	2b03      	cmp	r3, #3
 800b800:	d004      	beq.n	800b80c <Interrupt_Main+0xc54>
 800b802:	4b5d      	ldr	r3, [pc, #372]	; (800b978 <Interrupt_Main+0xdc0>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b04      	cmp	r3, #4
 800b808:	f040 809c 	bne.w	800b944 <Interrupt_Main+0xd8c>
	{
		float duty_r = V_r/Battery_GetVoltage();
 800b80c:	4b58      	ldr	r3, [pc, #352]	; (800b970 <Interrupt_Main+0xdb8>)
 800b80e:	ed93 8a00 	vldr	s16, [r3]
 800b812:	f7f5 fbd9 	bl	8000fc8 <Battery_GetVoltage>
 800b816:	eeb0 7a40 	vmov.f32	s14, s0
 800b81a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800b81e:	edc7 7a01 	vstr	s15, [r7, #4]
		float duty_l = V_l/Battery_GetVoltage();
 800b822:	4b54      	ldr	r3, [pc, #336]	; (800b974 <Interrupt_Main+0xdbc>)
 800b824:	ed93 8a00 	vldr	s16, [r3]
 800b828:	f7f5 fbce 	bl	8000fc8 <Battery_GetVoltage>
 800b82c:	eeb0 7a40 	vmov.f32	s14, s0
 800b830:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800b834:	edc7 7a00 	vstr	s15, [r7]
		if(ABS(duty_r) > 1.0){
 800b838:	edd7 7a01 	vldr	s15, [r7, #4]
 800b83c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b844:	d50c      	bpl.n	800b860 <Interrupt_Main+0xca8>
 800b846:	edd7 7a01 	vldr	s15, [r7, #4]
 800b84a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b84e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b856:	bf4c      	ite	mi
 800b858:	2301      	movmi	r3, #1
 800b85a:	2300      	movpl	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	e00b      	b.n	800b878 <Interrupt_Main+0xcc0>
 800b860:	edd7 7a01 	vldr	s15, [r7, #4]
 800b864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b870:	bfcc      	ite	gt
 800b872:	2301      	movgt	r3, #1
 800b874:	2300      	movle	r3, #0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00d      	beq.n	800b898 <Interrupt_Main+0xce0>
			motor_out_r = (int)(SIGN(duty_r) * 4.0f * 250.0f);
 800b87c:	edd7 7a01 	vldr	s15, [r7, #4]
 800b880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b888:	d501      	bpl.n	800b88e <Interrupt_Main+0xcd6>
 800b88a:	4b3c      	ldr	r3, [pc, #240]	; (800b97c <Interrupt_Main+0xdc4>)
 800b88c:	e001      	b.n	800b892 <Interrupt_Main+0xcda>
 800b88e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b892:	4a3b      	ldr	r2, [pc, #236]	; (800b980 <Interrupt_Main+0xdc8>)
 800b894:	6013      	str	r3, [r2, #0]
 800b896:	e00b      	b.n	800b8b0 <Interrupt_Main+0xcf8>
		}else{
			motor_out_r = (int)(duty_r * 1000.0f);
 800b898:	edd7 7a01 	vldr	s15, [r7, #4]
 800b89c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b984 <Interrupt_Main+0xdcc>
 800b8a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8a8:	ee17 2a90 	vmov	r2, s15
 800b8ac:	4b34      	ldr	r3, [pc, #208]	; (800b980 <Interrupt_Main+0xdc8>)
 800b8ae:	601a      	str	r2, [r3, #0]
		}
		Motor_SetDuty_Right(motor_out_r);
 800b8b0:	4b33      	ldr	r3, [pc, #204]	; (800b980 <Interrupt_Main+0xdc8>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	b21b      	sxth	r3, r3
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f002 fac6 	bl	800de48 <Motor_SetDuty_Right>

		if(ABS(duty_l) > 1.0){
 800b8bc:	edd7 7a00 	vldr	s15, [r7]
 800b8c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c8:	d50c      	bpl.n	800b8e4 <Interrupt_Main+0xd2c>
 800b8ca:	edd7 7a00 	vldr	s15, [r7]
 800b8ce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b8d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8da:	bf4c      	ite	mi
 800b8dc:	2301      	movmi	r3, #1
 800b8de:	2300      	movpl	r3, #0
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	e00b      	b.n	800b8fc <Interrupt_Main+0xd44>
 800b8e4:	edd7 7a00 	vldr	s15, [r7]
 800b8e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f4:	bfcc      	ite	gt
 800b8f6:	2301      	movgt	r3, #1
 800b8f8:	2300      	movle	r3, #0
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00d      	beq.n	800b91c <Interrupt_Main+0xd64>
			motor_out_l = (int)(SIGN(duty_l) * 4.0f * 250.0f);
 800b900:	edd7 7a00 	vldr	s15, [r7]
 800b904:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90c:	d501      	bpl.n	800b912 <Interrupt_Main+0xd5a>
 800b90e:	4b1b      	ldr	r3, [pc, #108]	; (800b97c <Interrupt_Main+0xdc4>)
 800b910:	e001      	b.n	800b916 <Interrupt_Main+0xd5e>
 800b912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b916:	4a1c      	ldr	r2, [pc, #112]	; (800b988 <Interrupt_Main+0xdd0>)
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	e00b      	b.n	800b934 <Interrupt_Main+0xd7c>
		}else{
			motor_out_l = (int)(duty_l * 1000.0f);
 800b91c:	edd7 7a00 	vldr	s15, [r7]
 800b920:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b984 <Interrupt_Main+0xdcc>
 800b924:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b928:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b92c:	ee17 2a90 	vmov	r2, s15
 800b930:	4b15      	ldr	r3, [pc, #84]	; (800b988 <Interrupt_Main+0xdd0>)
 800b932:	601a      	str	r2, [r3, #0]
		}
		Motor_SetDuty_Left(motor_out_l);
 800b934:	4b14      	ldr	r3, [pc, #80]	; (800b988 <Interrupt_Main+0xdd0>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	b21b      	sxth	r3, r3
 800b93a:	4618      	mov	r0, r3
 800b93c:	f002 f9fc 	bl	800dd38 <Motor_SetDuty_Left>
	{
 800b940:	bf00      	nop
	else if(run_mode == NON_CON_MODE)
	{
		Motor_SetDuty_Left(0);
		Motor_SetDuty_Right(0);
	}
}
 800b942:	e009      	b.n	800b958 <Interrupt_Main+0xda0>
	else if(run_mode == NON_CON_MODE)
 800b944:	4b0c      	ldr	r3, [pc, #48]	; (800b978 <Interrupt_Main+0xdc0>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d105      	bne.n	800b958 <Interrupt_Main+0xda0>
		Motor_SetDuty_Left(0);
 800b94c:	2000      	movs	r0, #0
 800b94e:	f002 f9f3 	bl	800dd38 <Motor_SetDuty_Left>
		Motor_SetDuty_Right(0);
 800b952:	2000      	movs	r0, #0
 800b954:	f002 fa78 	bl	800de48 <Motor_SetDuty_Right>
}
 800b958:	bf00      	nop
 800b95a:	3750      	adds	r7, #80	; 0x50
 800b95c:	46bd      	mov	sp, r7
 800b95e:	ecbd 8b02 	vpop	{d8}
 800b962:	bdb0      	pop	{r4, r5, r7, pc}
 800b964:	20009890 	.word	0x20009890
 800b968:	2001b6a0 	.word	0x2001b6a0
 800b96c:	2001b664 	.word	0x2001b664
 800b970:	2000940c 	.word	0x2000940c
 800b974:	20001704 	.word	0x20001704
 800b978:	20001708 	.word	0x20001708
 800b97c:	fffffc18 	.word	0xfffffc18
 800b980:	2001b65c 	.word	0x2001b65c
 800b984:	447a0000 	.word	0x447a0000
 800b988:	20000af4 	.word	0x20000af4
 800b98c:	00000000 	.word	0x00000000

0800b990 <Interrupt_PostProcess>:
void Interrupt_PostProcess(){
 800b990:	b598      	push	{r3, r4, r7, lr}
 800b992:	af00      	add	r7, sp, #0
	if(log_flag)
 800b994:	4b9a      	ldr	r3, [pc, #616]	; (800bc00 <Interrupt_PostProcess+0x270>)
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d060      	beq.n	800ba5e <Interrupt_PostProcess+0xce>
	{
		log_data[0][time/SCALE] = target.velo;//machine.length;//target.velo;
 800b99c:	4b99      	ldr	r3, [pc, #612]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a99      	ldr	r2, [pc, #612]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800b9a2:	6812      	ldr	r2, [r2, #0]
 800b9a4:	4999      	ldr	r1, [pc, #612]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800b9a6:	009b      	lsls	r3, r3, #2
 800b9a8:	440b      	add	r3, r1
 800b9aa:	601a      	str	r2, [r3, #0]
		log_data[1][time/SCALE] = machine.velo;
 800b9ac:	4b95      	ldr	r3, [pc, #596]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a97      	ldr	r2, [pc, #604]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800b9b2:	6812      	ldr	r2, [r2, #0]
 800b9b4:	4995      	ldr	r1, [pc, #596]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800b9b6:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	440b      	add	r3, r1
 800b9be:	601a      	str	r2, [r3, #0]
		log_data[2][time/SCALE] = target.rad_velo;//machine.length;//target.velo;
 800b9c0:	4b90      	ldr	r3, [pc, #576]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a90      	ldr	r2, [pc, #576]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800b9c6:	6952      	ldr	r2, [r2, #20]
 800b9c8:	4990      	ldr	r1, [pc, #576]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800b9ca:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	440b      	add	r3, r1
 800b9d2:	601a      	str	r2, [r3, #0]
		log_data[3][time/SCALE] = machine.rad_velo;
 800b9d4:	4b8b      	ldr	r3, [pc, #556]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a8d      	ldr	r2, [pc, #564]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800b9da:	6952      	ldr	r2, [r2, #20]
 800b9dc:	498b      	ldr	r1, [pc, #556]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800b9de:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	601a      	str	r2, [r3, #0]
		log_data[4][time/SCALE] = machine.length;//sen_fr.value;//target.rad_velo;
 800b9e8:	4b86      	ldr	r3, [pc, #536]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a88      	ldr	r2, [pc, #544]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800b9ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b9f0:	4986      	ldr	r1, [pc, #536]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800b9f2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	440b      	add	r3, r1
 800b9fa:	601a      	str	r2, [r3, #0]
		log_data[5][time/SCALE] = (read_accel_y_axis());//sen_fl.value;//machine.rad_velo;
 800b9fc:	4b81      	ldr	r3, [pc, #516]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800b9fe:	681c      	ldr	r4, [r3, #0]
 800ba00:	f7fe fe54 	bl	800a6ac <read_accel_y_axis>
 800ba04:	eef0 7a40 	vmov.f32	s15, s0
 800ba08:	4a80      	ldr	r2, [pc, #512]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800ba0a:	f504 539c 	add.w	r3, r4, #4992	; 0x1380
 800ba0e:	3308      	adds	r3, #8
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	edc3 7a00 	vstr	s15, [r3]
		log_data[6][time/SCALE] = target.rad_accel;//machine.length;//sen_r.distance;
 800ba18:	4b7a      	ldr	r3, [pc, #488]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	4a7a      	ldr	r2, [pc, #488]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800ba1e:	6a12      	ldr	r2, [r2, #32]
 800ba20:	497a      	ldr	r1, [pc, #488]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800ba22:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 800ba26:	3310      	adds	r3, #16
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	601a      	str	r2, [r3, #0]
		log_data[7][time/SCALE] = machine.accel;
 800ba2e:	4b75      	ldr	r3, [pc, #468]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a77      	ldr	r2, [pc, #476]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800ba34:	68d2      	ldr	r2, [r2, #12]
 800ba36:	4975      	ldr	r1, [pc, #468]	; (800bc0c <Interrupt_PostProcess+0x27c>)
 800ba38:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800ba3c:	3318      	adds	r3, #24
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	601a      	str	r2, [r3, #0]
		time++;
 800ba44:	4b6f      	ldr	r3, [pc, #444]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	4a6e      	ldr	r2, [pc, #440]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800ba4c:	6013      	str	r3, [r2, #0]
		if(time/SCALE >= LOG_COUNT) log_flag = false;
 800ba4e:	4b6d      	ldr	r3, [pc, #436]	; (800bc04 <Interrupt_PostProcess+0x274>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba56:	d302      	bcc.n	800ba5e <Interrupt_PostProcess+0xce>
 800ba58:	4b69      	ldr	r3, [pc, #420]	; (800bc00 <Interrupt_PostProcess+0x270>)
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	701a      	strb	r2, [r3, #0]
	}
	IMU_read_DMA_Start();
 800ba5e:	f7fe fd7d 	bl	800a55c <IMU_read_DMA_Start>


	//error process
	//static int error_cnt;

	if((ABS(machine.I_velo) > 5000.0 || ABS(machine.I_rad_velo) > 5000.0) && run_mode != NON_CON_MODE){
 800ba62:	4b6b      	ldr	r3, [pc, #428]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800ba64:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba70:	d50a      	bpl.n	800ba88 <Interrupt_PostProcess+0xf8>
 800ba72:	4b67      	ldr	r3, [pc, #412]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800ba74:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba78:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800bc14 <Interrupt_PostProcess+0x284>
 800ba7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	d427      	bmi.n	800bad6 <Interrupt_PostProcess+0x146>
 800ba86:	e009      	b.n	800ba9c <Interrupt_PostProcess+0x10c>
 800ba88:	4b61      	ldr	r3, [pc, #388]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800ba8a:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba8e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 800bc18 <Interrupt_PostProcess+0x288>
 800ba92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9a:	dc1c      	bgt.n	800bad6 <Interrupt_PostProcess+0x146>
 800ba9c:	4b5c      	ldr	r3, [pc, #368]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800ba9e:	edd3 7a07 	vldr	s15, [r3, #28]
 800baa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baaa:	d50a      	bpl.n	800bac2 <Interrupt_PostProcess+0x132>
 800baac:	4b58      	ldr	r3, [pc, #352]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800baae:	edd3 7a07 	vldr	s15, [r3, #28]
 800bab2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800bc14 <Interrupt_PostProcess+0x284>
 800bab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	d40a      	bmi.n	800bad6 <Interrupt_PostProcess+0x146>
 800bac0:	e00e      	b.n	800bae0 <Interrupt_PostProcess+0x150>
 800bac2:	4b53      	ldr	r3, [pc, #332]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bac4:	edd3 7a07 	vldr	s15, [r3, #28]
 800bac8:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800bc18 <Interrupt_PostProcess+0x288>
 800bacc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad4:	dd04      	ble.n	800bae0 <Interrupt_PostProcess+0x150>
 800bad6:	4b51      	ldr	r3, [pc, #324]	; (800bc1c <Interrupt_PostProcess+0x28c>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	f040 808a 	bne.w	800bbf4 <Interrupt_PostProcess+0x264>
		//save_data();
		//write_save_data();
		//NVIC_SystemReset();
	}

	else if((ABS(target.velo - machine.velo) > 2.0 || ABS(target.rad_velo - machine.rad_velo) > DEG2RAD(1300.0)) && run_mode != NON_CON_MODE){
 800bae0:	4b49      	ldr	r3, [pc, #292]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bae2:	ed93 7a00 	vldr	s14, [r3]
 800bae6:	4b4a      	ldr	r3, [pc, #296]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bae8:	edd3 7a00 	vldr	s15, [r3]
 800baec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800baf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baf8:	d50f      	bpl.n	800bb1a <Interrupt_PostProcess+0x18a>
 800bafa:	4b43      	ldr	r3, [pc, #268]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bafc:	ed93 7a00 	vldr	s14, [r3]
 800bb00:	4b43      	ldr	r3, [pc, #268]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bb02:	edd3 7a00 	vldr	s15, [r3]
 800bb06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb0a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800bb0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb16:	d43b      	bmi.n	800bb90 <Interrupt_PostProcess+0x200>
 800bb18:	e00e      	b.n	800bb38 <Interrupt_PostProcess+0x1a8>
 800bb1a:	4b3b      	ldr	r3, [pc, #236]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bb1c:	ed93 7a00 	vldr	s14, [r3]
 800bb20:	4b3b      	ldr	r3, [pc, #236]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bb22:	edd3 7a00 	vldr	s15, [r3]
 800bb26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb2a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800bb2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb36:	dc2b      	bgt.n	800bb90 <Interrupt_PostProcess+0x200>
 800bb38:	4b33      	ldr	r3, [pc, #204]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bb3a:	ed93 7a05 	vldr	s14, [r3, #20]
 800bb3e:	4b34      	ldr	r3, [pc, #208]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bb40:	edd3 7a05 	vldr	s15, [r3, #20]
 800bb44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb50:	d50a      	bpl.n	800bb68 <Interrupt_PostProcess+0x1d8>
 800bb52:	4b2d      	ldr	r3, [pc, #180]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bb54:	ed93 7a05 	vldr	s14, [r3, #20]
 800bb58:	4b2d      	ldr	r3, [pc, #180]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bb5a:	edd3 7a05 	vldr	s15, [r3, #20]
 800bb5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb62:	eef1 7a67 	vneg.f32	s15, s15
 800bb66:	e007      	b.n	800bb78 <Interrupt_PostProcess+0x1e8>
 800bb68:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <Interrupt_PostProcess+0x278>)
 800bb6a:	ed93 7a05 	vldr	s14, [r3, #20]
 800bb6e:	4b28      	ldr	r3, [pc, #160]	; (800bc10 <Interrupt_PostProcess+0x280>)
 800bb70:	edd3 7a05 	vldr	s15, [r3, #20]
 800bb74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb78:	ee17 0a90 	vmov	r0, s15
 800bb7c:	f7f4 fd04 	bl	8000588 <__aeabi_f2d>
 800bb80:	a31d      	add	r3, pc, #116	; (adr r3, 800bbf8 <Interrupt_PostProcess+0x268>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f7f4 ffe7 	bl	8000b58 <__aeabi_dcmpgt>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d009      	beq.n	800bba4 <Interrupt_PostProcess+0x214>
 800bb90:	4b22      	ldr	r3, [pc, #136]	; (800bc1c <Interrupt_PostProcess+0x28c>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d005      	beq.n	800bba4 <Interrupt_PostProcess+0x214>
		Motor_Stop();
 800bb98:	f002 f8a2 	bl	800dce0 <Motor_Stop>
		//save_data();
		write_save_data();
 800bb9c:	f7fe fb52 	bl	800a244 <write_save_data>
		NVIC_SystemReset();
 800bba0:	f7fe ff88 	bl	800aab4 <__NVIC_SystemReset>
	}
	else if(ABS(read_accel_z_axis()) >= 35.0 && run_mode != NON_CON_MODE){
 800bba4:	f7fe fda0 	bl	800a6e8 <read_accel_z_axis>
 800bba8:	eef0 7a40 	vmov.f32	s15, s0
 800bbac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbb4:	d50e      	bpl.n	800bbd4 <Interrupt_PostProcess+0x244>
 800bbb6:	f7fe fd97 	bl	800a6e8 <read_accel_z_axis>
 800bbba:	eeb0 7a40 	vmov.f32	s14, s0
 800bbbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bc20 <Interrupt_PostProcess+0x290>
 800bbc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbca:	bf94      	ite	ls
 800bbcc:	2301      	movls	r3, #1
 800bbce:	2300      	movhi	r3, #0
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	e00d      	b.n	800bbf0 <Interrupt_PostProcess+0x260>
 800bbd4:	f7fe fd88 	bl	800a6e8 <read_accel_z_axis>
 800bbd8:	eeb0 7a40 	vmov.f32	s14, s0
 800bbdc:	eddf 7a11 	vldr	s15, [pc, #68]	; 800bc24 <Interrupt_PostProcess+0x294>
 800bbe0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe8:	bfac      	ite	ge
 800bbea:	2301      	movge	r3, #1
 800bbec:	2300      	movlt	r3, #0
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	2b00      	cmp	r3, #0
		//save_data();
		//write_save_data();
		//NVIC_SystemReset();
	}

}
 800bbf2:	e7ff      	b.n	800bbf4 <Interrupt_PostProcess+0x264>
 800bbf4:	bf00      	nop
 800bbf6:	bd98      	pop	{r3, r4, r7, pc}
 800bbf8:	99c71c72 	.word	0x99c71c72
 800bbfc:	4036b074 	.word	0x4036b074
 800bc00:	2001b658 	.word	0x2001b658
 800bc04:	20009998 	.word	0x20009998
 800bc08:	2001b6a0 	.word	0x2001b6a0
 800bc0c:	2000170c 	.word	0x2000170c
 800bc10:	2001b664 	.word	0x2001b664
 800bc14:	c59c4000 	.word	0xc59c4000
 800bc18:	459c4000 	.word	0x459c4000
 800bc1c:	20001708 	.word	0x20001708
 800bc20:	c20c0000 	.word	0xc20c0000
 800bc24:	420c0000 	.word	0x420c0000

0800bc28 <Interrupt_Get_Irsensor>:

void Interrupt_Get_Irsensor(){
 800bc28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bc2c:	af00      	add	r7, sp, #0
	//----------sensor_setup----------//
	static float r_threshold = SIDE_THRESHOLD;
	static float l_threshold = SIDE_THRESHOLD;
	prev_buff = 20;
 800bc2e:	4bc6      	ldr	r3, [pc, #792]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800bc30:	2214      	movs	r2, #20
 800bc32:	601a      	str	r2, [r3, #0]
	static uint8_t r_cnt= 0,l_cnt = 0;
	sen_r.value = Sensor_GetValue(sensor_sr);
 800bc34:	2002      	movs	r0, #2
 800bc36:	f001 fc67 	bl	800d508 <Sensor_GetValue>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	4bc3      	ldr	r3, [pc, #780]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc40:	801a      	strh	r2, [r3, #0]
	sen_r.buff[i%50] = sen_r.value;
 800bc42:	4bc3      	ldr	r3, [pc, #780]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4bc3      	ldr	r3, [pc, #780]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800bc48:	fb83 1302 	smull	r1, r3, r3, r2
 800bc4c:	1119      	asrs	r1, r3, #4
 800bc4e:	17d3      	asrs	r3, r2, #31
 800bc50:	1acb      	subs	r3, r1, r3
 800bc52:	2132      	movs	r1, #50	; 0x32
 800bc54:	fb01 f303 	mul.w	r3, r1, r3
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	4abc      	ldr	r2, [pc, #752]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc5c:	f9b2 1000 	ldrsh.w	r1, [r2]
 800bc60:	4aba      	ldr	r2, [pc, #744]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	4413      	add	r3, r2
 800bc66:	460a      	mov	r2, r1
 800bc68:	805a      	strh	r2, [r3, #2]
	sen_r.distance = Sensor_CalcDistance(sensor_sr,sen_r.value);
 800bc6a:	4bb8      	ldr	r3, [pc, #736]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bc70:	4619      	mov	r1, r3
 800bc72:	2002      	movs	r0, #2
 800bc74:	f001 fc86 	bl	800d584 <Sensor_CalcDistance>
 800bc78:	eef0 7a40 	vmov.f32	s15, s0
 800bc7c:	4bb3      	ldr	r3, [pc, #716]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc7e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	if(sen_r.distance <= SIDE_THRESHOLD)
 800bc82:	4bb2      	ldr	r3, [pc, #712]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc84:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bc88:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800bf58 <Interrupt_Get_Irsensor+0x330>
 800bc8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc94:	d804      	bhi.n	800bca0 <Interrupt_Get_Irsensor+0x78>
	{
		//sen_r.is_controll 	= true;
		sen_r.is_wall 		= true;
 800bc96:	4bad      	ldr	r3, [pc, #692]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bc98:	2201      	movs	r2, #1
 800bc9a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800bc9e:	e007      	b.n	800bcb0 <Interrupt_Get_Irsensor+0x88>
	}
	else
	{
		sen_r.is_controll 	= false;
 800bca0:	4baa      	ldr	r3, [pc, #680]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_r.is_wall 		= false;
 800bca8:	4ba8      	ldr	r3, [pc, #672]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}

	if(sen_r.distance <= r_threshold && sen_r.is_wall == true)
 800bcb0:	4ba6      	ldr	r3, [pc, #664]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bcb2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800bcb6:	4ba9      	ldr	r3, [pc, #676]	; (800bf5c <Interrupt_Get_Irsensor+0x334>)
 800bcb8:	edd3 7a00 	vldr	s15, [r3]
 800bcbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcc4:	d809      	bhi.n	800bcda <Interrupt_Get_Irsensor+0xb2>
 800bcc6:	4ba1      	ldr	r3, [pc, #644]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bcc8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d104      	bne.n	800bcda <Interrupt_Get_Irsensor+0xb2>
	{
		sen_r.is_controll 	= true;
 800bcd0:	4b9e      	ldr	r3, [pc, #632]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800bcd8:	e003      	b.n	800bce2 <Interrupt_Get_Irsensor+0xba>
	}
	else
	{
		sen_r.is_controll 	= false;
 800bcda:	4b9c      	ldr	r3, [pc, #624]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}


	sen_l.value = Sensor_GetValue(sensor_sl);
 800bce2:	2001      	movs	r0, #1
 800bce4:	f001 fc10 	bl	800d508 <Sensor_GetValue>
 800bce8:	4603      	mov	r3, r0
 800bcea:	461a      	mov	r2, r3
 800bcec:	4b9c      	ldr	r3, [pc, #624]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bcee:	801a      	strh	r2, [r3, #0]
	sen_l.distance = Sensor_CalcDistance(sensor_sl,sen_l.value);
 800bcf0:	4b9b      	ldr	r3, [pc, #620]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bcf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	f001 fc43 	bl	800d584 <Sensor_CalcDistance>
 800bcfe:	eef0 7a40 	vmov.f32	s15, s0
 800bd02:	4b97      	ldr	r3, [pc, #604]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd04:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sen_l.buff[i%50] = sen_l.value;
 800bd08:	4b91      	ldr	r3, [pc, #580]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	4b91      	ldr	r3, [pc, #580]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800bd0e:	fb83 1302 	smull	r1, r3, r3, r2
 800bd12:	1119      	asrs	r1, r3, #4
 800bd14:	17d3      	asrs	r3, r2, #31
 800bd16:	1acb      	subs	r3, r1, r3
 800bd18:	2132      	movs	r1, #50	; 0x32
 800bd1a:	fb01 f303 	mul.w	r3, r1, r3
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	4a8f      	ldr	r2, [pc, #572]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd22:	f9b2 1000 	ldrsh.w	r1, [r2]
 800bd26:	4a8e      	ldr	r2, [pc, #568]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	4413      	add	r3, r2
 800bd2c:	460a      	mov	r2, r1
 800bd2e:	805a      	strh	r2, [r3, #2]
	if(sen_l.distance  <= SIDE_THRESHOLD)
 800bd30:	4b8b      	ldr	r3, [pc, #556]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd32:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bd36:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800bf58 <Interrupt_Get_Irsensor+0x330>
 800bd3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd42:	d804      	bhi.n	800bd4e <Interrupt_Get_Irsensor+0x126>
	{
		//sen_l.is_controll 	= true;
		sen_l.is_wall 		= true;
 800bd44:	4b86      	ldr	r3, [pc, #536]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800bd4c:	e007      	b.n	800bd5e <Interrupt_Get_Irsensor+0x136>
	}
	else
	{
		sen_l.is_controll 	= false;
 800bd4e:	4b84      	ldr	r3, [pc, #528]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_l.is_wall 		= false;
 800bd56:	4b82      	ldr	r3, [pc, #520]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}


	if(sen_l.distance <= l_threshold && sen_l.is_wall == true)
 800bd5e:	4b80      	ldr	r3, [pc, #512]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd60:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800bd64:	4b7f      	ldr	r3, [pc, #508]	; (800bf64 <Interrupt_Get_Irsensor+0x33c>)
 800bd66:	edd3 7a00 	vldr	s15, [r3]
 800bd6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	d809      	bhi.n	800bd88 <Interrupt_Get_Irsensor+0x160>
 800bd74:	4b7a      	ldr	r3, [pc, #488]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd76:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d104      	bne.n	800bd88 <Interrupt_Get_Irsensor+0x160>
	{
		sen_l.is_controll 	= true;
 800bd7e:	4b78      	ldr	r3, [pc, #480]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd80:	2201      	movs	r2, #1
 800bd82:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800bd86:	e003      	b.n	800bd90 <Interrupt_Get_Irsensor+0x168>
	}
	else
	{
		sen_l.is_controll 	= false;
 800bd88:	4b75      	ldr	r3, [pc, #468]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	}


	if(ABS(Sensor_CalcDistance(sensor_sr,sen_r.buff[(i-prev_buff + 50)%50]) - sen_r.distance) >= 3.0)
 800bd90:	4b6f      	ldr	r3, [pc, #444]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	4b6c      	ldr	r3, [pc, #432]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	1ad3      	subs	r3, r2, r3
 800bd9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bd9e:	4b6d      	ldr	r3, [pc, #436]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800bda0:	fb83 1302 	smull	r1, r3, r3, r2
 800bda4:	1119      	asrs	r1, r3, #4
 800bda6:	17d3      	asrs	r3, r2, #31
 800bda8:	1acb      	subs	r3, r1, r3
 800bdaa:	2132      	movs	r1, #50	; 0x32
 800bdac:	fb01 f303 	mul.w	r3, r1, r3
 800bdb0:	1ad3      	subs	r3, r2, r3
 800bdb2:	4a66      	ldr	r2, [pc, #408]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	2002      	movs	r0, #2
 800bdc0:	f001 fbe0 	bl	800d584 <Sensor_CalcDistance>
 800bdc4:	eeb0 7a40 	vmov.f32	s14, s0
 800bdc8:	4b60      	ldr	r3, [pc, #384]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800bdca:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bdce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bdd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdda:	d52b      	bpl.n	800be34 <Interrupt_Get_Irsensor+0x20c>
 800bddc:	4b5c      	ldr	r3, [pc, #368]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	4b59      	ldr	r3, [pc, #356]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bdea:	4b5a      	ldr	r3, [pc, #360]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800bdec:	fb83 1302 	smull	r1, r3, r3, r2
 800bdf0:	1119      	asrs	r1, r3, #4
 800bdf2:	17d3      	asrs	r3, r2, #31
 800bdf4:	1acb      	subs	r3, r1, r3
 800bdf6:	2132      	movs	r1, #50	; 0x32
 800bdf8:	fb01 f303 	mul.w	r3, r1, r3
 800bdfc:	1ad3      	subs	r3, r2, r3
 800bdfe:	4a53      	ldr	r2, [pc, #332]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	4413      	add	r3, r2
 800be04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be08:	4619      	mov	r1, r3
 800be0a:	2002      	movs	r0, #2
 800be0c:	f001 fbba 	bl	800d584 <Sensor_CalcDistance>
 800be10:	eeb0 7a40 	vmov.f32	s14, s0
 800be14:	4b4d      	ldr	r3, [pc, #308]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800be16:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800be1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be1e:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800be22:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2a:	bf94      	ite	ls
 800be2c:	2301      	movls	r3, #1
 800be2e:	2300      	movhi	r3, #0
 800be30:	b2db      	uxtb	r3, r3
 800be32:	e02a      	b.n	800be8a <Interrupt_Get_Irsensor+0x262>
 800be34:	4b46      	ldr	r3, [pc, #280]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	4b43      	ldr	r3, [pc, #268]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be42:	4b44      	ldr	r3, [pc, #272]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800be44:	fb83 1302 	smull	r1, r3, r3, r2
 800be48:	1119      	asrs	r1, r3, #4
 800be4a:	17d3      	asrs	r3, r2, #31
 800be4c:	1acb      	subs	r3, r1, r3
 800be4e:	2132      	movs	r1, #50	; 0x32
 800be50:	fb01 f303 	mul.w	r3, r1, r3
 800be54:	1ad3      	subs	r3, r2, r3
 800be56:	4a3d      	ldr	r2, [pc, #244]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800be58:	005b      	lsls	r3, r3, #1
 800be5a:	4413      	add	r3, r2
 800be5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800be60:	4619      	mov	r1, r3
 800be62:	2002      	movs	r0, #2
 800be64:	f001 fb8e 	bl	800d584 <Sensor_CalcDistance>
 800be68:	eeb0 7a40 	vmov.f32	s14, s0
 800be6c:	4b37      	ldr	r3, [pc, #220]	; (800bf4c <Interrupt_Get_Irsensor+0x324>)
 800be6e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800be72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be76:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800be7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800be7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be82:	bfac      	ite	ge
 800be84:	2301      	movge	r3, #1
 800be86:	2300      	movlt	r3, #0
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d006      	beq.n	800be9c <Interrupt_Get_Irsensor+0x274>
	{
		//sen_l.error = 0.0;
		r_threshold = 45.0;
 800be8e:	4b33      	ldr	r3, [pc, #204]	; (800bf5c <Interrupt_Get_Irsensor+0x334>)
 800be90:	4a35      	ldr	r2, [pc, #212]	; (800bf68 <Interrupt_Get_Irsensor+0x340>)
 800be92:	601a      	str	r2, [r3, #0]
		//sen_r.is_controll = false;
		r_cnt = 0;
 800be94:	4b35      	ldr	r3, [pc, #212]	; (800bf6c <Interrupt_Get_Irsensor+0x344>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	e002      	b.n	800bea2 <Interrupt_Get_Irsensor+0x27a>
	}
	else
	{
		r_threshold = SIDE_THRESHOLD;
 800be9c:	4b2f      	ldr	r3, [pc, #188]	; (800bf5c <Interrupt_Get_Irsensor+0x334>)
 800be9e:	4a34      	ldr	r2, [pc, #208]	; (800bf70 <Interrupt_Get_Irsensor+0x348>)
 800bea0:	601a      	str	r2, [r3, #0]
	}

	if(ABS(Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) >= 3.0)
 800bea2:	4b2b      	ldr	r3, [pc, #172]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	4b28      	ldr	r3, [pc, #160]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800beb0:	4b28      	ldr	r3, [pc, #160]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800beb2:	fb83 1302 	smull	r1, r3, r3, r2
 800beb6:	1119      	asrs	r1, r3, #4
 800beb8:	17d3      	asrs	r3, r2, #31
 800beba:	1acb      	subs	r3, r1, r3
 800bebc:	2132      	movs	r1, #50	; 0x32
 800bebe:	fb01 f303 	mul.w	r3, r1, r3
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	4a26      	ldr	r2, [pc, #152]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bec6:	005b      	lsls	r3, r3, #1
 800bec8:	4413      	add	r3, r2
 800beca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bece:	4619      	mov	r1, r3
 800bed0:	2001      	movs	r0, #1
 800bed2:	f001 fb57 	bl	800d584 <Sensor_CalcDistance>
 800bed6:	eeb0 7a40 	vmov.f32	s14, s0
 800beda:	4b21      	ldr	r3, [pc, #132]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bedc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beec:	d542      	bpl.n	800bf74 <Interrupt_Get_Irsensor+0x34c>
 800beee:	4b18      	ldr	r3, [pc, #96]	; (800bf50 <Interrupt_Get_Irsensor+0x328>)
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	4b15      	ldr	r3, [pc, #84]	; (800bf48 <Interrupt_Get_Irsensor+0x320>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	1ad3      	subs	r3, r2, r3
 800bef8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800befc:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <Interrupt_Get_Irsensor+0x32c>)
 800befe:	fb83 1302 	smull	r1, r3, r3, r2
 800bf02:	1119      	asrs	r1, r3, #4
 800bf04:	17d3      	asrs	r3, r2, #31
 800bf06:	1acb      	subs	r3, r1, r3
 800bf08:	2132      	movs	r1, #50	; 0x32
 800bf0a:	fb01 f303 	mul.w	r3, r1, r3
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	4a13      	ldr	r2, [pc, #76]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	4413      	add	r3, r2
 800bf16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	f001 fb31 	bl	800d584 <Sensor_CalcDistance>
 800bf22:	eeb0 7a40 	vmov.f32	s14, s0
 800bf26:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <Interrupt_Get_Irsensor+0x338>)
 800bf28:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bf2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf30:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800bf34:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf3c:	bf94      	ite	ls
 800bf3e:	2301      	movls	r3, #1
 800bf40:	2300      	movhi	r3, #0
 800bf42:	b2db      	uxtb	r3, r3
 800bf44:	e041      	b.n	800bfca <Interrupt_Get_Irsensor+0x3a2>
 800bf46:	bf00      	nop
 800bf48:	2000021c 	.word	0x2000021c
 800bf4c:	2001b5e4 	.word	0x2001b5e4
 800bf50:	20000220 	.word	0x20000220
 800bf54:	51eb851f 	.word	0x51eb851f
 800bf58:	42820000 	.word	0x42820000
 800bf5c:	20000004 	.word	0x20000004
 800bf60:	20009410 	.word	0x20009410
 800bf64:	20000008 	.word	0x20000008
 800bf68:	42340000 	.word	0x42340000
 800bf6c:	20000230 	.word	0x20000230
 800bf70:	42820000 	.word	0x42820000
 800bf74:	4bb6      	ldr	r3, [pc, #728]	; (800c250 <Interrupt_Get_Irsensor+0x628>)
 800bf76:	681a      	ldr	r2, [r3, #0]
 800bf78:	4bb6      	ldr	r3, [pc, #728]	; (800c254 <Interrupt_Get_Irsensor+0x62c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	1ad3      	subs	r3, r2, r3
 800bf7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800bf82:	4bb5      	ldr	r3, [pc, #724]	; (800c258 <Interrupt_Get_Irsensor+0x630>)
 800bf84:	fb83 1302 	smull	r1, r3, r3, r2
 800bf88:	1119      	asrs	r1, r3, #4
 800bf8a:	17d3      	asrs	r3, r2, #31
 800bf8c:	1acb      	subs	r3, r1, r3
 800bf8e:	2132      	movs	r1, #50	; 0x32
 800bf90:	fb01 f303 	mul.w	r3, r1, r3
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	4ab1      	ldr	r2, [pc, #708]	; (800c25c <Interrupt_Get_Irsensor+0x634>)
 800bf98:	005b      	lsls	r3, r3, #1
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	2001      	movs	r0, #1
 800bfa4:	f001 faee 	bl	800d584 <Sensor_CalcDistance>
 800bfa8:	eeb0 7a40 	vmov.f32	s14, s0
 800bfac:	4bab      	ldr	r3, [pc, #684]	; (800c25c <Interrupt_Get_Irsensor+0x634>)
 800bfae:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800bfb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfb6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800bfba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc2:	bfac      	ite	ge
 800bfc4:	2301      	movge	r3, #1
 800bfc6:	2300      	movlt	r3, #0
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d006      	beq.n	800bfdc <Interrupt_Get_Irsensor+0x3b4>
	{
		//sen_l.error = 0.0;
		l_threshold = 45.0;
 800bfce:	4ba4      	ldr	r3, [pc, #656]	; (800c260 <Interrupt_Get_Irsensor+0x638>)
 800bfd0:	4aa4      	ldr	r2, [pc, #656]	; (800c264 <Interrupt_Get_Irsensor+0x63c>)
 800bfd2:	601a      	str	r2, [r3, #0]
		//sen_l.is_controll = false;
		l_cnt = 0;
 800bfd4:	4ba4      	ldr	r3, [pc, #656]	; (800c268 <Interrupt_Get_Irsensor+0x640>)
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	701a      	strb	r2, [r3, #0]
 800bfda:	e002      	b.n	800bfe2 <Interrupt_Get_Irsensor+0x3ba>
	}
	else
	{
		l_threshold = SIDE_THRESHOLD;
 800bfdc:	4ba0      	ldr	r3, [pc, #640]	; (800c260 <Interrupt_Get_Irsensor+0x638>)
 800bfde:	4aa3      	ldr	r2, [pc, #652]	; (800c26c <Interrupt_Get_Irsensor+0x644>)
 800bfe0:	601a      	str	r2, [r3, #0]
	}


	sen_fr.value = Sensor_GetValue(sensor_fr);
 800bfe2:	2004      	movs	r0, #4
 800bfe4:	f001 fa90 	bl	800d508 <Sensor_GetValue>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	461a      	mov	r2, r3
 800bfec:	4ba0      	ldr	r3, [pc, #640]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800bfee:	801a      	strh	r2, [r3, #0]
	sen_fr.distance = Sensor_CalcDistance(sensor_fr,sen_fr.value);
 800bff0:	4b9f      	ldr	r3, [pc, #636]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800bff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bff6:	4619      	mov	r1, r3
 800bff8:	2004      	movs	r0, #4
 800bffa:	f001 fac3 	bl	800d584 <Sensor_CalcDistance>
 800bffe:	eef0 7a40 	vmov.f32	s15, s0
 800c002:	4b9b      	ldr	r3, [pc, #620]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c004:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sen_fr.buff[i%50] = sen_fr.value;
 800c008:	4b91      	ldr	r3, [pc, #580]	; (800c250 <Interrupt_Get_Irsensor+0x628>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	4b92      	ldr	r3, [pc, #584]	; (800c258 <Interrupt_Get_Irsensor+0x630>)
 800c00e:	fb83 1302 	smull	r1, r3, r3, r2
 800c012:	1119      	asrs	r1, r3, #4
 800c014:	17d3      	asrs	r3, r2, #31
 800c016:	1acb      	subs	r3, r1, r3
 800c018:	2132      	movs	r1, #50	; 0x32
 800c01a:	fb01 f303 	mul.w	r3, r1, r3
 800c01e:	1ad3      	subs	r3, r2, r3
 800c020:	4a93      	ldr	r2, [pc, #588]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c022:	f9b2 1000 	ldrsh.w	r1, [r2]
 800c026:	4a92      	ldr	r2, [pc, #584]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	4413      	add	r3, r2
 800c02c:	460a      	mov	r2, r1
 800c02e:	805a      	strh	r2, [r3, #2]
	if(sen_fr.distance <= FRONT_THRESHOLD)
 800c030:	4b8f      	ldr	r3, [pc, #572]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c032:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c036:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 800c274 <Interrupt_Get_Irsensor+0x64c>
 800c03a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	d808      	bhi.n	800c056 <Interrupt_Get_Irsensor+0x42e>
	{
		sen_fr.is_controll 	= true;
 800c044:	4b8a      	ldr	r3, [pc, #552]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c046:	2201      	movs	r2, #1
 800c048:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_fr.is_wall 		= true;
 800c04c:	4b88      	ldr	r3, [pc, #544]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800c054:	e007      	b.n	800c066 <Interrupt_Get_Irsensor+0x43e>
	}
	else
	{
		sen_fr.is_controll 	= false;
 800c056:	4b86      	ldr	r3, [pc, #536]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_fr.is_wall 		= false;
 800c05e:	4b84      	ldr	r3, [pc, #528]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c060:	2200      	movs	r2, #0
 800c062:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	if(sen_fr.distance < 80.0)	sen_r.is_controll = false;
 800c066:	4b82      	ldr	r3, [pc, #520]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c068:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c06c:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800c278 <Interrupt_Get_Irsensor+0x650>
 800c070:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c078:	d503      	bpl.n	800c082 <Interrupt_Get_Irsensor+0x45a>
 800c07a:	4b80      	ldr	r3, [pc, #512]	; (800c27c <Interrupt_Get_Irsensor+0x654>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d


	sen_fl.value = Sensor_GetValue(sensor_fl);
 800c082:	2003      	movs	r0, #3
 800c084:	f001 fa40 	bl	800d508 <Sensor_GetValue>
 800c088:	4603      	mov	r3, r0
 800c08a:	461a      	mov	r2, r3
 800c08c:	4b7c      	ldr	r3, [pc, #496]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c08e:	801a      	strh	r2, [r3, #0]
	sen_fl.distance = Sensor_CalcDistance(sensor_fl,sen_fl.value);
 800c090:	4b7b      	ldr	r3, [pc, #492]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c092:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c096:	4619      	mov	r1, r3
 800c098:	2003      	movs	r0, #3
 800c09a:	f001 fa73 	bl	800d584 <Sensor_CalcDistance>
 800c09e:	eef0 7a40 	vmov.f32	s15, s0
 800c0a2:	4b77      	ldr	r3, [pc, #476]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0a4:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
	sen_fl.buff[i%50] = sen_fl.value;
 800c0a8:	4b69      	ldr	r3, [pc, #420]	; (800c250 <Interrupt_Get_Irsensor+0x628>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	4b6a      	ldr	r3, [pc, #424]	; (800c258 <Interrupt_Get_Irsensor+0x630>)
 800c0ae:	fb83 1302 	smull	r1, r3, r3, r2
 800c0b2:	1119      	asrs	r1, r3, #4
 800c0b4:	17d3      	asrs	r3, r2, #31
 800c0b6:	1acb      	subs	r3, r1, r3
 800c0b8:	2132      	movs	r1, #50	; 0x32
 800c0ba:	fb01 f303 	mul.w	r3, r1, r3
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	4a6f      	ldr	r2, [pc, #444]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0c2:	f9b2 1000 	ldrsh.w	r1, [r2]
 800c0c6:	4a6e      	ldr	r2, [pc, #440]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0c8:	005b      	lsls	r3, r3, #1
 800c0ca:	4413      	add	r3, r2
 800c0cc:	460a      	mov	r2, r1
 800c0ce:	805a      	strh	r2, [r3, #2]
	if(sen_fl.distance <= FRONT_THRESHOLD)
 800c0d0:	4b6b      	ldr	r3, [pc, #428]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0d2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c0d6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c274 <Interrupt_Get_Irsensor+0x64c>
 800c0da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e2:	d808      	bhi.n	800c0f6 <Interrupt_Get_Irsensor+0x4ce>
	{
		sen_fl.is_controll 	= true;
 800c0e4:	4b66      	ldr	r3, [pc, #408]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_fl.is_wall 		= true;
 800c0ec:	4b64      	ldr	r3, [pc, #400]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800c0f4:	e007      	b.n	800c106 <Interrupt_Get_Irsensor+0x4de>
	}
	else
	{
		sen_fl.is_controll 	= false;
 800c0f6:	4b62      	ldr	r3, [pc, #392]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		sen_fl.is_wall 		= false;
 800c0fe:	4b60      	ldr	r3, [pc, #384]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c100:	2200      	movs	r2, #0
 800c102:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	}
	if(sen_fl.distance < 80.0)	sen_l.is_controll = false;
 800c106:	4b5e      	ldr	r3, [pc, #376]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c108:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c10c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c278 <Interrupt_Get_Irsensor+0x650>
 800c110:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c118:	d503      	bpl.n	800c122 <Interrupt_Get_Irsensor+0x4fa>
 800c11a:	4b50      	ldr	r3, [pc, #320]	; (800c25c <Interrupt_Get_Irsensor+0x634>)
 800c11c:	2200      	movs	r2, #0
 800c11e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d

	//----------set_indicator----------//


	r_cnt++;l_cnt++;
 800c122:	4b58      	ldr	r3, [pc, #352]	; (800c284 <Interrupt_Get_Irsensor+0x65c>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	3301      	adds	r3, #1
 800c128:	b2da      	uxtb	r2, r3
 800c12a:	4b56      	ldr	r3, [pc, #344]	; (800c284 <Interrupt_Get_Irsensor+0x65c>)
 800c12c:	701a      	strb	r2, [r3, #0]
 800c12e:	4b4e      	ldr	r3, [pc, #312]	; (800c268 <Interrupt_Get_Irsensor+0x640>)
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	3301      	adds	r3, #1
 800c134:	b2da      	uxtb	r2, r3
 800c136:	4b4c      	ldr	r3, [pc, #304]	; (800c268 <Interrupt_Get_Irsensor+0x640>)
 800c138:	701a      	strb	r2, [r3, #0]
	if(run_mode != NON_CON_MODE)
 800c13a:	4b53      	ldr	r3, [pc, #332]	; (800c288 <Interrupt_Get_Irsensor+0x660>)
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d039      	beq.n	800c1b6 <Interrupt_Get_Irsensor+0x58e>
	{
		switch(sen_r.is_controll)
 800c142:	4b4e      	ldr	r3, [pc, #312]	; (800c27c <Interrupt_Get_Irsensor+0x654>)
 800c144:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d004      	beq.n	800c156 <Interrupt_Get_Irsensor+0x52e>
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d105      	bne.n	800c15c <Interrupt_Get_Irsensor+0x534>
		{
			case true:	Right_Side_On_LED(); 	break;
 800c150:	f7fe fb4c 	bl	800a7ec <Right_Side_On_LED>
 800c154:	e002      	b.n	800c15c <Interrupt_Get_Irsensor+0x534>
			case false:	Right_Side_Off_LED(); 	break;
 800c156:	f7fe fb55 	bl	800a804 <Right_Side_Off_LED>
 800c15a:	bf00      	nop
		}
		if(r_cnt > 100) r_cnt = 100;
 800c15c:	4b49      	ldr	r3, [pc, #292]	; (800c284 <Interrupt_Get_Irsensor+0x65c>)
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	2b64      	cmp	r3, #100	; 0x64
 800c162:	d902      	bls.n	800c16a <Interrupt_Get_Irsensor+0x542>
 800c164:	4b47      	ldr	r3, [pc, #284]	; (800c284 <Interrupt_Get_Irsensor+0x65c>)
 800c166:	2264      	movs	r2, #100	; 0x64
 800c168:	701a      	strb	r2, [r3, #0]
		switch(sen_l.is_controll)
 800c16a:	4b3c      	ldr	r3, [pc, #240]	; (800c25c <Interrupt_Get_Irsensor+0x634>)
 800c16c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c170:	2b00      	cmp	r3, #0
 800c172:	d004      	beq.n	800c17e <Interrupt_Get_Irsensor+0x556>
 800c174:	2b01      	cmp	r3, #1
 800c176:	d105      	bne.n	800c184 <Interrupt_Get_Irsensor+0x55c>
		{
			case true:	Left_Side_On_LED(); 	break;
 800c178:	f7fe fb50 	bl	800a81c <Left_Side_On_LED>
 800c17c:	e002      	b.n	800c184 <Interrupt_Get_Irsensor+0x55c>
			case false:	Left_Side_Off_LED(); 	break;
 800c17e:	f7fe fb59 	bl	800a834 <Left_Side_Off_LED>
 800c182:	bf00      	nop
		}
		if(l_cnt > 100) l_cnt = 100;
 800c184:	4b38      	ldr	r3, [pc, #224]	; (800c268 <Interrupt_Get_Irsensor+0x640>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	2b64      	cmp	r3, #100	; 0x64
 800c18a:	d902      	bls.n	800c192 <Interrupt_Get_Irsensor+0x56a>
 800c18c:	4b36      	ldr	r3, [pc, #216]	; (800c268 <Interrupt_Get_Irsensor+0x640>)
 800c18e:	2264      	movs	r2, #100	; 0x64
 800c190:	701a      	strb	r2, [r3, #0]
		switch(sen_fr.is_wall|sen_fl.is_wall)
 800c192:	4b37      	ldr	r3, [pc, #220]	; (800c270 <Interrupt_Get_Irsensor+0x648>)
 800c194:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 800c198:	4b39      	ldr	r3, [pc, #228]	; (800c280 <Interrupt_Get_Irsensor+0x658>)
 800c19a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d004      	beq.n	800c1b0 <Interrupt_Get_Irsensor+0x588>
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d105      	bne.n	800c1b6 <Interrupt_Get_Irsensor+0x58e>
		{
			case true:	Front_On_LED(); 	break;
 800c1aa:	f7fe fb4f 	bl	800a84c <Front_On_LED>
 800c1ae:	e002      	b.n	800c1b6 <Interrupt_Get_Irsensor+0x58e>
			case false:	Front_Off_LED(); 	break;
 800c1b0:	f7fe fb58 	bl	800a864 <Front_Off_LED>
 800c1b4:	bf00      	nop
		}
	}
	//----------set_controll----------//


	if(target.velo >= 0.20 && target.velo < 0.7){
 800c1b6:	4b35      	ldr	r3, [pc, #212]	; (800c28c <Interrupt_Get_Irsensor+0x664>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7f4 f9e4 	bl	8000588 <__aeabi_f2d>
 800c1c0:	a31f      	add	r3, pc, #124	; (adr r3, 800c240 <Interrupt_Get_Irsensor+0x618>)
 800c1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c6:	f7f4 fcbd 	bl	8000b44 <__aeabi_dcmpge>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d024      	beq.n	800c21a <Interrupt_Get_Irsensor+0x5f2>
 800c1d0:	4b2e      	ldr	r3, [pc, #184]	; (800c28c <Interrupt_Get_Irsensor+0x664>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7f4 f9d7 	bl	8000588 <__aeabi_f2d>
 800c1da:	a31b      	add	r3, pc, #108	; (adr r3, 800c248 <Interrupt_Get_Irsensor+0x620>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d017      	beq.n	800c21a <Interrupt_Get_Irsensor+0x5f2>
		prev_buff = (int)(6.0/target.velo);
 800c1ea:	4b28      	ldr	r3, [pc, #160]	; (800c28c <Interrupt_Get_Irsensor+0x664>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7f4 f9ca 	bl	8000588 <__aeabi_f2d>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	4623      	mov	r3, r4
 800c1fc:	f04f 0000 	mov.w	r0, #0
 800c200:	4923      	ldr	r1, [pc, #140]	; (800c290 <Interrupt_Get_Irsensor+0x668>)
 800c202:	f7f4 fb43 	bl	800088c <__aeabi_ddiv>
 800c206:	4603      	mov	r3, r0
 800c208:	460c      	mov	r4, r1
 800c20a:	4618      	mov	r0, r3
 800c20c:	4621      	mov	r1, r4
 800c20e:	f7f4 fcc3 	bl	8000b98 <__aeabi_d2iz>
 800c212:	4602      	mov	r2, r0
 800c214:	4b0f      	ldr	r3, [pc, #60]	; (800c254 <Interrupt_Get_Irsensor+0x62c>)
 800c216:	601a      	str	r2, [r3, #0]
 800c218:	e03f      	b.n	800c29a <Interrupt_Get_Irsensor+0x672>
	}
	else if(target.velo >= 0.7)
 800c21a:	4b1c      	ldr	r3, [pc, #112]	; (800c28c <Interrupt_Get_Irsensor+0x664>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7f4 f9b2 	bl	8000588 <__aeabi_f2d>
 800c224:	a308      	add	r3, pc, #32	; (adr r3, 800c248 <Interrupt_Get_Irsensor+0x620>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	f7f4 fc8b 	bl	8000b44 <__aeabi_dcmpge>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d02f      	beq.n	800c294 <Interrupt_Get_Irsensor+0x66c>
	{
		prev_buff = 3;
 800c234:	4b07      	ldr	r3, [pc, #28]	; (800c254 <Interrupt_Get_Irsensor+0x62c>)
 800c236:	2203      	movs	r2, #3
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	e02e      	b.n	800c29a <Interrupt_Get_Irsensor+0x672>
 800c23c:	f3af 8000 	nop.w
 800c240:	9999999a 	.word	0x9999999a
 800c244:	3fc99999 	.word	0x3fc99999
 800c248:	66666666 	.word	0x66666666
 800c24c:	3fe66666 	.word	0x3fe66666
 800c250:	20000220 	.word	0x20000220
 800c254:	2000021c 	.word	0x2000021c
 800c258:	51eb851f 	.word	0x51eb851f
 800c25c:	20009410 	.word	0x20009410
 800c260:	20000008 	.word	0x20000008
 800c264:	42340000 	.word	0x42340000
 800c268:	20000231 	.word	0x20000231
 800c26c:	42820000 	.word	0x42820000
 800c270:	200098a0 	.word	0x200098a0
 800c274:	42ec0000 	.word	0x42ec0000
 800c278:	42a00000 	.word	0x42a00000
 800c27c:	2001b5e4 	.word	0x2001b5e4
 800c280:	20009914 	.word	0x20009914
 800c284:	20000230 	.word	0x20000230
 800c288:	20001708 	.word	0x20001708
 800c28c:	2001b6a0 	.word	0x2001b6a0
 800c290:	40180000 	.word	0x40180000
	}
	else
	{
		prev_buff = 20;
 800c294:	4bb8      	ldr	r3, [pc, #736]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c296:	2214      	movs	r2, #20
 800c298:	601a      	str	r2, [r3, #0]
	}


	if(run_mode == STRAIGHT_MODE && wall_controll.is_controll == true)
 800c29a:	4bb8      	ldr	r3, [pc, #736]	; (800c57c <Interrupt_Get_Irsensor+0x954>)
 800c29c:	781b      	ldrb	r3, [r3, #0]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	f040 8254 	bne.w	800c74c <Interrupt_Get_Irsensor+0xb24>
 800c2a4:	4bb6      	ldr	r3, [pc, #728]	; (800c580 <Interrupt_Get_Irsensor+0x958>)
 800c2a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	f040 824e 	bne.w	800c74c <Interrupt_Get_Irsensor+0xb24>
	{
		if(sen_r.is_controll == true){
 800c2b0:	4bb4      	ldr	r3, [pc, #720]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c2b2:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	f040 8099 	bne.w	800c3ee <Interrupt_Get_Irsensor+0x7c6>
			sen_r.error = sen_r.distance - 45.0;
 800c2bc:	4bb1      	ldr	r3, [pc, #708]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c2be:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c2c2:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 800c588 <Interrupt_Get_Irsensor+0x960>
 800c2c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2ca:	4bae      	ldr	r3, [pc, #696]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c2cc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			if(ABS(Sensor_CalcDistance(sensor_sr,sen_r.buff[(i-prev_buff + 50)%50]) - sen_r.distance) >= 3.0 && sen_r.error > 0.0)
 800c2d0:	4bae      	ldr	r3, [pc, #696]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	4ba8      	ldr	r3, [pc, #672]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	1ad3      	subs	r3, r2, r3
 800c2da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c2de:	4bac      	ldr	r3, [pc, #688]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c2e0:	fb83 1302 	smull	r1, r3, r3, r2
 800c2e4:	1119      	asrs	r1, r3, #4
 800c2e6:	17d3      	asrs	r3, r2, #31
 800c2e8:	1acb      	subs	r3, r1, r3
 800c2ea:	2132      	movs	r1, #50	; 0x32
 800c2ec:	fb01 f303 	mul.w	r3, r1, r3
 800c2f0:	1ad3      	subs	r3, r2, r3
 800c2f2:	4aa4      	ldr	r2, [pc, #656]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c2f4:	005b      	lsls	r3, r3, #1
 800c2f6:	4413      	add	r3, r2
 800c2f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	2002      	movs	r0, #2
 800c300:	f001 f940 	bl	800d584 <Sensor_CalcDistance>
 800c304:	eeb0 7a40 	vmov.f32	s14, s0
 800c308:	4b9e      	ldr	r3, [pc, #632]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c30a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c30e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c312:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31a:	d52b      	bpl.n	800c374 <Interrupt_Get_Irsensor+0x74c>
 800c31c:	4b9b      	ldr	r3, [pc, #620]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c31e:	681a      	ldr	r2, [r3, #0]
 800c320:	4b95      	ldr	r3, [pc, #596]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c32a:	4b99      	ldr	r3, [pc, #612]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c32c:	fb83 1302 	smull	r1, r3, r3, r2
 800c330:	1119      	asrs	r1, r3, #4
 800c332:	17d3      	asrs	r3, r2, #31
 800c334:	1acb      	subs	r3, r1, r3
 800c336:	2132      	movs	r1, #50	; 0x32
 800c338:	fb01 f303 	mul.w	r3, r1, r3
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	4a91      	ldr	r2, [pc, #580]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c348:	4619      	mov	r1, r3
 800c34a:	2002      	movs	r0, #2
 800c34c:	f001 f91a 	bl	800d584 <Sensor_CalcDistance>
 800c350:	eeb0 7a40 	vmov.f32	s14, s0
 800c354:	4b8b      	ldr	r3, [pc, #556]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c356:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c35a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c35e:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800c362:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36a:	bf94      	ite	ls
 800c36c:	2301      	movls	r3, #1
 800c36e:	2300      	movhi	r3, #0
 800c370:	b2db      	uxtb	r3, r3
 800c372:	e02a      	b.n	800c3ca <Interrupt_Get_Irsensor+0x7a2>
 800c374:	4b85      	ldr	r3, [pc, #532]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	4b7f      	ldr	r3, [pc, #508]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c382:	4b83      	ldr	r3, [pc, #524]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c384:	fb83 1302 	smull	r1, r3, r3, r2
 800c388:	1119      	asrs	r1, r3, #4
 800c38a:	17d3      	asrs	r3, r2, #31
 800c38c:	1acb      	subs	r3, r1, r3
 800c38e:	2132      	movs	r1, #50	; 0x32
 800c390:	fb01 f303 	mul.w	r3, r1, r3
 800c394:	1ad3      	subs	r3, r2, r3
 800c396:	4a7b      	ldr	r2, [pc, #492]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	2002      	movs	r0, #2
 800c3a4:	f001 f8ee 	bl	800d584 <Sensor_CalcDistance>
 800c3a8:	eeb0 7a40 	vmov.f32	s14, s0
 800c3ac:	4b75      	ldr	r3, [pc, #468]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c3ae:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c3b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3b6:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c3ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3c2:	bfac      	ite	ge
 800c3c4:	2301      	movge	r3, #1
 800c3c6:	2300      	movlt	r3, #0
 800c3c8:	b2db      	uxtb	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d013      	beq.n	800c3f6 <Interrupt_Get_Irsensor+0x7ce>
 800c3ce:	4b6d      	ldr	r3, [pc, #436]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c3d0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c3d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	dd0b      	ble.n	800c3f6 <Interrupt_Get_Irsensor+0x7ce>
			{
				sen_r.error = 0.0;
 800c3de:	4b69      	ldr	r3, [pc, #420]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c3e0:	f04f 0200 	mov.w	r2, #0
 800c3e4:	671a      	str	r2, [r3, #112]	; 0x70
				r_cnt = 0;
 800c3e6:	4b6b      	ldr	r3, [pc, #428]	; (800c594 <Interrupt_Get_Irsensor+0x96c>)
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	701a      	strb	r2, [r3, #0]
 800c3ec:	e003      	b.n	800c3f6 <Interrupt_Get_Irsensor+0x7ce>
			}
		}
		else{
			sen_r.error = 0.0;
 800c3ee:	4b65      	ldr	r3, [pc, #404]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c3f0:	f04f 0200 	mov.w	r2, #0
 800c3f4:	671a      	str	r2, [r3, #112]	; 0x70
		}

		if(sen_l.is_controll == true){
 800c3f6:	4b68      	ldr	r3, [pc, #416]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c3f8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	f040 8099 	bne.w	800c534 <Interrupt_Get_Irsensor+0x90c>
			sen_l.error = sen_l.distance - 45.0;
 800c402:	4b65      	ldr	r3, [pc, #404]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c404:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c408:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800c588 <Interrupt_Get_Irsensor+0x960>
 800c40c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c410:	4b61      	ldr	r3, [pc, #388]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c412:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			if(ABS(Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) >= 3.0 && sen_l.error  > 0.0)
 800c416:	4b5d      	ldr	r3, [pc, #372]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	4b57      	ldr	r3, [pc, #348]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c424:	4b5a      	ldr	r3, [pc, #360]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c426:	fb83 1302 	smull	r1, r3, r3, r2
 800c42a:	1119      	asrs	r1, r3, #4
 800c42c:	17d3      	asrs	r3, r2, #31
 800c42e:	1acb      	subs	r3, r1, r3
 800c430:	2132      	movs	r1, #50	; 0x32
 800c432:	fb01 f303 	mul.w	r3, r1, r3
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	4a57      	ldr	r2, [pc, #348]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	4413      	add	r3, r2
 800c43e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c442:	4619      	mov	r1, r3
 800c444:	2001      	movs	r0, #1
 800c446:	f001 f89d 	bl	800d584 <Sensor_CalcDistance>
 800c44a:	eeb0 7a40 	vmov.f32	s14, s0
 800c44e:	4b52      	ldr	r3, [pc, #328]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c450:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c454:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	d52b      	bpl.n	800c4ba <Interrupt_Get_Irsensor+0x892>
 800c462:	4b4a      	ldr	r3, [pc, #296]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c464:	681a      	ldr	r2, [r3, #0]
 800c466:	4b44      	ldr	r3, [pc, #272]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	1ad3      	subs	r3, r2, r3
 800c46c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c470:	4b47      	ldr	r3, [pc, #284]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c472:	fb83 1302 	smull	r1, r3, r3, r2
 800c476:	1119      	asrs	r1, r3, #4
 800c478:	17d3      	asrs	r3, r2, #31
 800c47a:	1acb      	subs	r3, r1, r3
 800c47c:	2132      	movs	r1, #50	; 0x32
 800c47e:	fb01 f303 	mul.w	r3, r1, r3
 800c482:	1ad3      	subs	r3, r2, r3
 800c484:	4a44      	ldr	r2, [pc, #272]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c486:	005b      	lsls	r3, r3, #1
 800c488:	4413      	add	r3, r2
 800c48a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c48e:	4619      	mov	r1, r3
 800c490:	2001      	movs	r0, #1
 800c492:	f001 f877 	bl	800d584 <Sensor_CalcDistance>
 800c496:	eeb0 7a40 	vmov.f32	s14, s0
 800c49a:	4b3f      	ldr	r3, [pc, #252]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c49c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c4a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a4:	eeb8 7a08 	vmov.f32	s14, #136	; 0xc0400000 -3.0
 800c4a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b0:	bf94      	ite	ls
 800c4b2:	2301      	movls	r3, #1
 800c4b4:	2300      	movhi	r3, #0
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	e02a      	b.n	800c510 <Interrupt_Get_Irsensor+0x8e8>
 800c4ba:	4b34      	ldr	r3, [pc, #208]	; (800c58c <Interrupt_Get_Irsensor+0x964>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	4b2e      	ldr	r3, [pc, #184]	; (800c578 <Interrupt_Get_Irsensor+0x950>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c4c8:	4b31      	ldr	r3, [pc, #196]	; (800c590 <Interrupt_Get_Irsensor+0x968>)
 800c4ca:	fb83 1302 	smull	r1, r3, r3, r2
 800c4ce:	1119      	asrs	r1, r3, #4
 800c4d0:	17d3      	asrs	r3, r2, #31
 800c4d2:	1acb      	subs	r3, r1, r3
 800c4d4:	2132      	movs	r1, #50	; 0x32
 800c4d6:	fb01 f303 	mul.w	r3, r1, r3
 800c4da:	1ad3      	subs	r3, r2, r3
 800c4dc:	4a2e      	ldr	r2, [pc, #184]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	4413      	add	r3, r2
 800c4e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c4e6:	4619      	mov	r1, r3
 800c4e8:	2001      	movs	r0, #1
 800c4ea:	f001 f84b 	bl	800d584 <Sensor_CalcDistance>
 800c4ee:	eeb0 7a40 	vmov.f32	s14, s0
 800c4f2:	4b29      	ldr	r3, [pc, #164]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c4f4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c4f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4fc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c500:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c508:	bfac      	ite	ge
 800c50a:	2301      	movge	r3, #1
 800c50c:	2300      	movlt	r3, #0
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	2b00      	cmp	r3, #0
 800c512:	d013      	beq.n	800c53c <Interrupt_Get_Irsensor+0x914>
 800c514:	4b20      	ldr	r3, [pc, #128]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c516:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c51a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c522:	dd0b      	ble.n	800c53c <Interrupt_Get_Irsensor+0x914>
			{
				sen_l.error = 0.0;
 800c524:	4b1c      	ldr	r3, [pc, #112]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	671a      	str	r2, [r3, #112]	; 0x70
				l_cnt = 0;
 800c52c:	4b1b      	ldr	r3, [pc, #108]	; (800c59c <Interrupt_Get_Irsensor+0x974>)
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	e003      	b.n	800c53c <Interrupt_Get_Irsensor+0x914>
			}

		}
		else
		{
			sen_l.error = 0.0;
 800c534:	4b18      	ldr	r3, [pc, #96]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	671a      	str	r2, [r3, #112]	; 0x70
		}


		wall_controll.prev_om_error = wall_controll.om_error;
 800c53c:	4b10      	ldr	r3, [pc, #64]	; (800c580 <Interrupt_Get_Irsensor+0x958>)
 800c53e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c540:	4a0f      	ldr	r2, [pc, #60]	; (800c580 <Interrupt_Get_Irsensor+0x958>)
 800c542:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(sen_r.is_controll == true && sen_l.is_controll == true)
 800c544:	4b0f      	ldr	r3, [pc, #60]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c546:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c54a:	2b01      	cmp	r3, #1
 800c54c:	d128      	bne.n	800c5a0 <Interrupt_Get_Irsensor+0x978>
 800c54e:	4b12      	ldr	r3, [pc, #72]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c550:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c554:	2b01      	cmp	r3, #1
 800c556:	d123      	bne.n	800c5a0 <Interrupt_Get_Irsensor+0x978>
		{
			wall_controll.om_error = (sen_l.error - sen_r.error)/2.0;
 800c558:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <Interrupt_Get_Irsensor+0x970>)
 800c55a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800c55e:	4b09      	ldr	r3, [pc, #36]	; (800c584 <Interrupt_Get_Irsensor+0x95c>)
 800c560:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c564:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c568:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800c56c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c570:	4b03      	ldr	r3, [pc, #12]	; (800c580 <Interrupt_Get_Irsensor+0x958>)
 800c572:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800c576:	e01e      	b.n	800c5b6 <Interrupt_Get_Irsensor+0x98e>
 800c578:	2000021c 	.word	0x2000021c
 800c57c:	20001708 	.word	0x20001708
 800c580:	20000aac 	.word	0x20000aac
 800c584:	2001b5e4 	.word	0x2001b5e4
 800c588:	42340000 	.word	0x42340000
 800c58c:	20000220 	.word	0x20000220
 800c590:	51eb851f 	.word	0x51eb851f
 800c594:	20000230 	.word	0x20000230
 800c598:	20009410 	.word	0x20009410
 800c59c:	20000231 	.word	0x20000231
		}
		else
		{
			wall_controll.om_error = (sen_l.error - sen_r.error);
 800c5a0:	4b89      	ldr	r3, [pc, #548]	; (800c7c8 <Interrupt_Get_Irsensor+0xba0>)
 800c5a2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800c5a6:	4b89      	ldr	r3, [pc, #548]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c5a8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c5ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5b0:	4b87      	ldr	r3, [pc, #540]	; (800c7d0 <Interrupt_Get_Irsensor+0xba8>)
 800c5b2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
*/

		//target.rad_velo = 0.0;


		target.rad_accel = (3.0)*wall_controll.om_error*1.0;
 800c5b6:	4b86      	ldr	r3, [pc, #536]	; (800c7d0 <Interrupt_Get_Irsensor+0xba8>)
 800c5b8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800c5bc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c5c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5c4:	4b83      	ldr	r3, [pc, #524]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c5c6:	edc3 7a08 	vstr	s15, [r3, #32]
	    target.rad_accel = target.rad_accel-(machine.velo*target.rad_velo*10.00+target.rad_velo*30.0);
 800c5ca:	4b82      	ldr	r3, [pc, #520]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f7f3 ffda 	bl	8000588 <__aeabi_f2d>
 800c5d4:	4604      	mov	r4, r0
 800c5d6:	460d      	mov	r5, r1
 800c5d8:	4b7f      	ldr	r3, [pc, #508]	; (800c7d8 <Interrupt_Get_Irsensor+0xbb0>)
 800c5da:	ed93 7a00 	vldr	s14, [r3]
 800c5de:	4b7d      	ldr	r3, [pc, #500]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c5e0:	edd3 7a05 	vldr	s15, [r3, #20]
 800c5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e8:	ee17 0a90 	vmov	r0, s15
 800c5ec:	f7f3 ffcc 	bl	8000588 <__aeabi_f2d>
 800c5f0:	f04f 0200 	mov.w	r2, #0
 800c5f4:	4b79      	ldr	r3, [pc, #484]	; (800c7dc <Interrupt_Get_Irsensor+0xbb4>)
 800c5f6:	f7f4 f81f 	bl	8000638 <__aeabi_dmul>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4690      	mov	r8, r2
 800c600:	4699      	mov	r9, r3
 800c602:	4b74      	ldr	r3, [pc, #464]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	4618      	mov	r0, r3
 800c608:	f7f3 ffbe 	bl	8000588 <__aeabi_f2d>
 800c60c:	f04f 0200 	mov.w	r2, #0
 800c610:	4b73      	ldr	r3, [pc, #460]	; (800c7e0 <Interrupt_Get_Irsensor+0xbb8>)
 800c612:	f7f4 f811 	bl	8000638 <__aeabi_dmul>
 800c616:	4602      	mov	r2, r0
 800c618:	460b      	mov	r3, r1
 800c61a:	4640      	mov	r0, r8
 800c61c:	4649      	mov	r1, r9
 800c61e:	f7f3 fe55 	bl	80002cc <__adddf3>
 800c622:	4602      	mov	r2, r0
 800c624:	460b      	mov	r3, r1
 800c626:	4620      	mov	r0, r4
 800c628:	4629      	mov	r1, r5
 800c62a:	f7f3 fe4d 	bl	80002c8 <__aeabi_dsub>
 800c62e:	4603      	mov	r3, r0
 800c630:	460c      	mov	r4, r1
 800c632:	4618      	mov	r0, r3
 800c634:	4621      	mov	r1, r4
 800c636:	f7f4 faf7 	bl	8000c28 <__aeabi_d2f>
 800c63a:	4602      	mov	r2, r0
 800c63c:	4b65      	ldr	r3, [pc, #404]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c63e:	621a      	str	r2, [r3, #32]
		//target.rad_accel = target.rad_accel-(target.velo*target.radian*10.00+target.rad_velo*10.0);
		//target.rad_accel = target.rad_accel-(machine.radian * machine.accel * 0.00);
	    target.rad_accel = target.rad_accel-(target.velo*target.radian*100.00);
 800c640:	4b64      	ldr	r3, [pc, #400]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c642:	6a1b      	ldr	r3, [r3, #32]
 800c644:	4618      	mov	r0, r3
 800c646:	f7f3 ff9f 	bl	8000588 <__aeabi_f2d>
 800c64a:	4604      	mov	r4, r0
 800c64c:	460d      	mov	r5, r1
 800c64e:	4b61      	ldr	r3, [pc, #388]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c650:	ed93 7a00 	vldr	s14, [r3]
 800c654:	4b5f      	ldr	r3, [pc, #380]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c656:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c65e:	ee17 0a90 	vmov	r0, s15
 800c662:	f7f3 ff91 	bl	8000588 <__aeabi_f2d>
 800c666:	f04f 0200 	mov.w	r2, #0
 800c66a:	4b5e      	ldr	r3, [pc, #376]	; (800c7e4 <Interrupt_Get_Irsensor+0xbbc>)
 800c66c:	f7f3 ffe4 	bl	8000638 <__aeabi_dmul>
 800c670:	4602      	mov	r2, r0
 800c672:	460b      	mov	r3, r1
 800c674:	4620      	mov	r0, r4
 800c676:	4629      	mov	r1, r5
 800c678:	f7f3 fe26 	bl	80002c8 <__aeabi_dsub>
 800c67c:	4603      	mov	r3, r0
 800c67e:	460c      	mov	r4, r1
 800c680:	4618      	mov	r0, r3
 800c682:	4621      	mov	r1, r4
 800c684:	f7f4 fad0 	bl	8000c28 <__aeabi_d2f>
 800c688:	4602      	mov	r2, r0
 800c68a:	4b52      	ldr	r3, [pc, #328]	; (800c7d4 <Interrupt_Get_Irsensor+0xbac>)
 800c68c:	621a      	str	r2, [r3, #32]
		//max_set.rad_velo = target.rad_velo + target.rad_accel/1000.0f;

		if((Sensor_CalcDistance(sensor_sr,sen_r.buff[(i-prev_buff + 50)%50]) - sen_r.distance) <= -12.0)
 800c68e:	4b56      	ldr	r3, [pc, #344]	; (800c7e8 <Interrupt_Get_Irsensor+0xbc0>)
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4b56      	ldr	r3, [pc, #344]	; (800c7ec <Interrupt_Get_Irsensor+0xbc4>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	1ad3      	subs	r3, r2, r3
 800c698:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c69c:	4b54      	ldr	r3, [pc, #336]	; (800c7f0 <Interrupt_Get_Irsensor+0xbc8>)
 800c69e:	fb83 1302 	smull	r1, r3, r3, r2
 800c6a2:	1119      	asrs	r1, r3, #4
 800c6a4:	17d3      	asrs	r3, r2, #31
 800c6a6:	1acb      	subs	r3, r1, r3
 800c6a8:	2132      	movs	r1, #50	; 0x32
 800c6aa:	fb01 f303 	mul.w	r3, r1, r3
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	4a46      	ldr	r2, [pc, #280]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	2002      	movs	r0, #2
 800c6be:	f000 ff61 	bl	800d584 <Sensor_CalcDistance>
 800c6c2:	eeb0 7a40 	vmov.f32	s14, s0
 800c6c6:	4b41      	ldr	r3, [pc, #260]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c6c8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c6cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6d0:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 800c6d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6dc:	d803      	bhi.n	800c6e6 <Interrupt_Get_Irsensor+0xabe>
		{
			st_r_hosei_check = true;
 800c6de:	4b45      	ldr	r3, [pc, #276]	; (800c7f4 <Interrupt_Get_Irsensor+0xbcc>)
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	e002      	b.n	800c6ec <Interrupt_Get_Irsensor+0xac4>
		}
		else
		{
			st_r_hosei_check = false;
 800c6e6:	4b43      	ldr	r3, [pc, #268]	; (800c7f4 <Interrupt_Get_Irsensor+0xbcc>)
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	701a      	strb	r2, [r3, #0]
		}

		if((Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) <= -12.0)
 800c6ec:	4b3e      	ldr	r3, [pc, #248]	; (800c7e8 <Interrupt_Get_Irsensor+0xbc0>)
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	4b3e      	ldr	r3, [pc, #248]	; (800c7ec <Interrupt_Get_Irsensor+0xbc4>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c6fa:	4b3d      	ldr	r3, [pc, #244]	; (800c7f0 <Interrupt_Get_Irsensor+0xbc8>)
 800c6fc:	fb83 1302 	smull	r1, r3, r3, r2
 800c700:	1119      	asrs	r1, r3, #4
 800c702:	17d3      	asrs	r3, r2, #31
 800c704:	1acb      	subs	r3, r1, r3
 800c706:	2132      	movs	r1, #50	; 0x32
 800c708:	fb01 f303 	mul.w	r3, r1, r3
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	4a2e      	ldr	r2, [pc, #184]	; (800c7c8 <Interrupt_Get_Irsensor+0xba0>)
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c718:	4619      	mov	r1, r3
 800c71a:	2001      	movs	r0, #1
 800c71c:	f000 ff32 	bl	800d584 <Sensor_CalcDistance>
 800c720:	eeb0 7a40 	vmov.f32	s14, s0
 800c724:	4b28      	ldr	r3, [pc, #160]	; (800c7c8 <Interrupt_Get_Irsensor+0xba0>)
 800c726:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c72e:	eeba 7a08 	vmov.f32	s14, #168	; 0xc1400000 -12.0
 800c732:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c73a:	d803      	bhi.n	800c744 <Interrupt_Get_Irsensor+0xb1c>
		{
			st_l_hosei_check = true;
 800c73c:	4b2e      	ldr	r3, [pc, #184]	; (800c7f8 <Interrupt_Get_Irsensor+0xbd0>)
 800c73e:	2201      	movs	r2, #1
 800c740:	701a      	strb	r2, [r3, #0]
		if((Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) <= -12.0)
 800c742:	e2c3      	b.n	800cccc <Interrupt_Get_Irsensor+0x10a4>
		}
		else
		{
			st_l_hosei_check = false;
 800c744:	4b2c      	ldr	r3, [pc, #176]	; (800c7f8 <Interrupt_Get_Irsensor+0xbd0>)
 800c746:	2200      	movs	r2, #0
 800c748:	701a      	strb	r2, [r3, #0]
		if((Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) <= -12.0)
 800c74a:	e2bf      	b.n	800cccc <Interrupt_Get_Irsensor+0x10a4>
		}

	}
	else if(run_mode == DIAG_MODE && wall_controll.is_controll == true)
 800c74c:	4b2b      	ldr	r3, [pc, #172]	; (800c7fc <Interrupt_Get_Irsensor+0xbd4>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b03      	cmp	r3, #3
 800c752:	f040 82ab 	bne.w	800ccac <Interrupt_Get_Irsensor+0x1084>
 800c756:	4b1e      	ldr	r3, [pc, #120]	; (800c7d0 <Interrupt_Get_Irsensor+0xba8>)
 800c758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	f040 82a5 	bne.w	800ccac <Interrupt_Get_Irsensor+0x1084>
	{

		if(sen_r.is_controll == true){
 800c762:	4b1a      	ldr	r3, [pc, #104]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c764:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d14b      	bne.n	800c804 <Interrupt_Get_Irsensor+0xbdc>
			sen_r.error = sen_r.distance - DIAG_HALF_SECTION;
 800c76c:	4b17      	ldr	r3, [pc, #92]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c76e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c770:	4618      	mov	r0, r3
 800c772:	f7f3 ff09 	bl	8000588 <__aeabi_f2d>
 800c776:	a312      	add	r3, pc, #72	; (adr r3, 800c7c0 <Interrupt_Get_Irsensor+0xb98>)
 800c778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77c:	f7f3 fda4 	bl	80002c8 <__aeabi_dsub>
 800c780:	4603      	mov	r3, r0
 800c782:	460c      	mov	r4, r1
 800c784:	4618      	mov	r0, r3
 800c786:	4621      	mov	r1, r4
 800c788:	f7f4 fa4e 	bl	8000c28 <__aeabi_d2f>
 800c78c:	4602      	mov	r2, r0
 800c78e:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c790:	671a      	str	r2, [r3, #112]	; 0x70
			if(sen_r.error > 0.0) {
 800c792:	4b0e      	ldr	r3, [pc, #56]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c794:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c798:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	dd04      	ble.n	800c7ac <Interrupt_Get_Irsensor+0xb84>
				sen_r.error = 0.0;
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c7a4:	f04f 0200 	mov.w	r2, #0
 800c7a8:	671a      	str	r2, [r3, #112]	; 0x70
 800c7aa:	e078      	b.n	800c89e <Interrupt_Get_Irsensor+0xc76>
			}
			else{
				diag_predict_xr = sen_r.distance;
 800c7ac:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <Interrupt_Get_Irsensor+0xba4>)
 800c7ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c7b0:	4a13      	ldr	r2, [pc, #76]	; (800c800 <Interrupt_Get_Irsensor+0xbd8>)
 800c7b2:	6013      	str	r3, [r2, #0]
				machine.radian = 0.0f;
 800c7b4:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <Interrupt_Get_Irsensor+0xbb0>)
 800c7b6:	f04f 0200 	mov.w	r2, #0
 800c7ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800c7bc:	e06f      	b.n	800c89e <Interrupt_Get_Irsensor+0xc76>
 800c7be:	bf00      	nop
 800c7c0:	69ad42c4 	.word	0x69ad42c4
 800c7c4:	403fd1de 	.word	0x403fd1de
 800c7c8:	20009410 	.word	0x20009410
 800c7cc:	2001b5e4 	.word	0x2001b5e4
 800c7d0:	20000aac 	.word	0x20000aac
 800c7d4:	2001b6a0 	.word	0x2001b6a0
 800c7d8:	2001b664 	.word	0x2001b664
 800c7dc:	40240000 	.word	0x40240000
 800c7e0:	403e0000 	.word	0x403e0000
 800c7e4:	40590000 	.word	0x40590000
 800c7e8:	20000220 	.word	0x20000220
 800c7ec:	2000021c 	.word	0x2000021c
 800c7f0:	51eb851f 	.word	0x51eb851f
 800c7f4:	200099a0 	.word	0x200099a0
 800c7f8:	20009488 	.word	0x20009488
 800c7fc:	20001708 	.word	0x20001708
 800c800:	20009484 	.word	0x20009484
			}
		}

		else if(target.length  > DIAG_SECTION && machine.length > DIAG_HALF_SECTION ){
 800c804:	4bc0      	ldr	r3, [pc, #768]	; (800cb08 <Interrupt_Get_Irsensor+0xee0>)
 800c806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c808:	4618      	mov	r0, r3
 800c80a:	f7f3 febd 	bl	8000588 <__aeabi_f2d>
 800c80e:	a3ba      	add	r3, pc, #744	; (adr r3, 800caf8 <Interrupt_Get_Irsensor+0xed0>)
 800c810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c814:	f7f4 f9a0 	bl	8000b58 <__aeabi_dcmpgt>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d03f      	beq.n	800c89e <Interrupt_Get_Irsensor+0xc76>
 800c81e:	4bbb      	ldr	r3, [pc, #748]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c822:	4618      	mov	r0, r3
 800c824:	f7f3 feb0 	bl	8000588 <__aeabi_f2d>
 800c828:	a3b5      	add	r3, pc, #724	; (adr r3, 800cb00 <Interrupt_Get_Irsensor+0xed8>)
 800c82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82e:	f7f4 f993 	bl	8000b58 <__aeabi_dcmpgt>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d032      	beq.n	800c89e <Interrupt_Get_Irsensor+0xc76>

			diag_predict_xr = diag_predict_xr + machine.velo*machine.radian;
 800c838:	4bb4      	ldr	r3, [pc, #720]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c83a:	ed93 7a00 	vldr	s14, [r3]
 800c83e:	4bb3      	ldr	r3, [pc, #716]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c840:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c844:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c848:	4bb1      	ldr	r3, [pc, #708]	; (800cb10 <Interrupt_Get_Irsensor+0xee8>)
 800c84a:	edd3 7a00 	vldr	s15, [r3]
 800c84e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c852:	4baf      	ldr	r3, [pc, #700]	; (800cb10 <Interrupt_Get_Irsensor+0xee8>)
 800c854:	edc3 7a00 	vstr	s15, [r3]
			sen_r.error = diag_predict_xr - DIAG_HALF_SECTION;
 800c858:	4bad      	ldr	r3, [pc, #692]	; (800cb10 <Interrupt_Get_Irsensor+0xee8>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f3 fe93 	bl	8000588 <__aeabi_f2d>
 800c862:	a3a7      	add	r3, pc, #668	; (adr r3, 800cb00 <Interrupt_Get_Irsensor+0xed8>)
 800c864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c868:	f7f3 fd2e 	bl	80002c8 <__aeabi_dsub>
 800c86c:	4603      	mov	r3, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	4618      	mov	r0, r3
 800c872:	4621      	mov	r1, r4
 800c874:	f7f4 f9d8 	bl	8000c28 <__aeabi_d2f>
 800c878:	4602      	mov	r2, r0
 800c87a:	4ba6      	ldr	r3, [pc, #664]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c87c:	671a      	str	r2, [r3, #112]	; 0x70
			if(sen_r.error > 0.0) sen_r.error = 0.0;
 800c87e:	4ba5      	ldr	r3, [pc, #660]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c880:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c884:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c88c:	dd03      	ble.n	800c896 <Interrupt_Get_Irsensor+0xc6e>
 800c88e:	4ba1      	ldr	r3, [pc, #644]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c890:	f04f 0200 	mov.w	r2, #0
 800c894:	671a      	str	r2, [r3, #112]	; 0x70
			sen_r.is_controll = true;
 800c896:	4b9f      	ldr	r3, [pc, #636]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		}

		if(sen_l.is_controll == true){
 800c89e:	4b9e      	ldr	r3, [pc, #632]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8a0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d128      	bne.n	800c8fa <Interrupt_Get_Irsensor+0xcd2>
			sen_l.error = sen_l.distance - DIAG_HALF_SECTION;
 800c8a8:	4b9b      	ldr	r3, [pc, #620]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7f3 fe6b 	bl	8000588 <__aeabi_f2d>
 800c8b2:	a393      	add	r3, pc, #588	; (adr r3, 800cb00 <Interrupt_Get_Irsensor+0xed8>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 fd06 	bl	80002c8 <__aeabi_dsub>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	460c      	mov	r4, r1
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	4621      	mov	r1, r4
 800c8c4:	f7f4 f9b0 	bl	8000c28 <__aeabi_d2f>
 800c8c8:	4602      	mov	r2, r0
 800c8ca:	4b93      	ldr	r3, [pc, #588]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8cc:	671a      	str	r2, [r3, #112]	; 0x70
			if(sen_l.error > 0.0){
 800c8ce:	4b92      	ldr	r3, [pc, #584]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8d0:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c8d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8dc:	dd04      	ble.n	800c8e8 <Interrupt_Get_Irsensor+0xcc0>
				sen_l.error = 0.0;
 800c8de:	4b8e      	ldr	r3, [pc, #568]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8e0:	f04f 0200 	mov.w	r2, #0
 800c8e4:	671a      	str	r2, [r3, #112]	; 0x70
 800c8e6:	e055      	b.n	800c994 <Interrupt_Get_Irsensor+0xd6c>
			}
			else{
				diag_predict_xl = sen_l.distance;
 800c8e8:	4b8b      	ldr	r3, [pc, #556]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c8ec:	4a8b      	ldr	r2, [pc, #556]	; (800cb1c <Interrupt_Get_Irsensor+0xef4>)
 800c8ee:	6013      	str	r3, [r2, #0]
				machine.radian = 0.0f;
 800c8f0:	4b86      	ldr	r3, [pc, #536]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c8f2:	f04f 0200 	mov.w	r2, #0
 800c8f6:	62da      	str	r2, [r3, #44]	; 0x2c
 800c8f8:	e04c      	b.n	800c994 <Interrupt_Get_Irsensor+0xd6c>
			}
		}

		else if(target.length > DIAG_SECTION && machine.length > DIAG_HALF_SECTION ){
 800c8fa:	4b83      	ldr	r3, [pc, #524]	; (800cb08 <Interrupt_Get_Irsensor+0xee0>)
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fe:	4618      	mov	r0, r3
 800c900:	f7f3 fe42 	bl	8000588 <__aeabi_f2d>
 800c904:	a37c      	add	r3, pc, #496	; (adr r3, 800caf8 <Interrupt_Get_Irsensor+0xed0>)
 800c906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90a:	f7f4 f925 	bl	8000b58 <__aeabi_dcmpgt>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d03f      	beq.n	800c994 <Interrupt_Get_Irsensor+0xd6c>
 800c914:	4b7d      	ldr	r3, [pc, #500]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c918:	4618      	mov	r0, r3
 800c91a:	f7f3 fe35 	bl	8000588 <__aeabi_f2d>
 800c91e:	a378      	add	r3, pc, #480	; (adr r3, 800cb00 <Interrupt_Get_Irsensor+0xed8>)
 800c920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c924:	f7f4 f918 	bl	8000b58 <__aeabi_dcmpgt>
 800c928:	4603      	mov	r3, r0
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d032      	beq.n	800c994 <Interrupt_Get_Irsensor+0xd6c>
			diag_predict_xl = diag_predict_xl - machine.velo*machine.radian;
 800c92e:	4b7b      	ldr	r3, [pc, #492]	; (800cb1c <Interrupt_Get_Irsensor+0xef4>)
 800c930:	ed93 7a00 	vldr	s14, [r3]
 800c934:	4b75      	ldr	r3, [pc, #468]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c936:	edd3 6a00 	vldr	s13, [r3]
 800c93a:	4b74      	ldr	r3, [pc, #464]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800c93c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800c940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c944:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c948:	4b74      	ldr	r3, [pc, #464]	; (800cb1c <Interrupt_Get_Irsensor+0xef4>)
 800c94a:	edc3 7a00 	vstr	s15, [r3]
			sen_l.error = diag_predict_xl - DIAG_HALF_SECTION;
 800c94e:	4b73      	ldr	r3, [pc, #460]	; (800cb1c <Interrupt_Get_Irsensor+0xef4>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4618      	mov	r0, r3
 800c954:	f7f3 fe18 	bl	8000588 <__aeabi_f2d>
 800c958:	a369      	add	r3, pc, #420	; (adr r3, 800cb00 <Interrupt_Get_Irsensor+0xed8>)
 800c95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c95e:	f7f3 fcb3 	bl	80002c8 <__aeabi_dsub>
 800c962:	4603      	mov	r3, r0
 800c964:	460c      	mov	r4, r1
 800c966:	4618      	mov	r0, r3
 800c968:	4621      	mov	r1, r4
 800c96a:	f7f4 f95d 	bl	8000c28 <__aeabi_d2f>
 800c96e:	4602      	mov	r2, r0
 800c970:	4b69      	ldr	r3, [pc, #420]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c972:	671a      	str	r2, [r3, #112]	; 0x70
			if(sen_l.error > 0.0){
 800c974:	4b68      	ldr	r3, [pc, #416]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c976:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800c97a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c97e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c982:	dd03      	ble.n	800c98c <Interrupt_Get_Irsensor+0xd64>
				sen_l.error = 0.0;
 800c984:	4b64      	ldr	r3, [pc, #400]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c986:	f04f 0200 	mov.w	r2, #0
 800c98a:	671a      	str	r2, [r3, #112]	; 0x70
			}
			sen_l.is_controll = true;
 800c98c:	4b62      	ldr	r3, [pc, #392]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
		}

		if((Sensor_CalcDistance(sensor_sr,sen_r.buff[(i-prev_buff + 50)%50]) - sen_r.distance) <= -10.0)
 800c994:	4b62      	ldr	r3, [pc, #392]	; (800cb20 <Interrupt_Get_Irsensor+0xef8>)
 800c996:	681a      	ldr	r2, [r3, #0]
 800c998:	4b62      	ldr	r3, [pc, #392]	; (800cb24 <Interrupt_Get_Irsensor+0xefc>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c9a2:	4b61      	ldr	r3, [pc, #388]	; (800cb28 <Interrupt_Get_Irsensor+0xf00>)
 800c9a4:	fb83 1302 	smull	r1, r3, r3, r2
 800c9a8:	1119      	asrs	r1, r3, #4
 800c9aa:	17d3      	asrs	r3, r2, #31
 800c9ac:	1acb      	subs	r3, r1, r3
 800c9ae:	2132      	movs	r1, #50	; 0x32
 800c9b0:	fb01 f303 	mul.w	r3, r1, r3
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	4a57      	ldr	r2, [pc, #348]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	2002      	movs	r0, #2
 800c9c4:	f000 fdde 	bl	800d584 <Sensor_CalcDistance>
 800c9c8:	eeb0 7a40 	vmov.f32	s14, s0
 800c9cc:	4b51      	ldr	r3, [pc, #324]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800c9ce:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800c9d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c9d6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800c9da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e2:	d803      	bhi.n	800c9ec <Interrupt_Get_Irsensor+0xdc4>
		{
			diag_r_hosei_check = true;
 800c9e4:	4b51      	ldr	r3, [pc, #324]	; (800cb2c <Interrupt_Get_Irsensor+0xf04>)
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	701a      	strb	r2, [r3, #0]
 800c9ea:	e002      	b.n	800c9f2 <Interrupt_Get_Irsensor+0xdca>
		}
		else
		{
			diag_r_hosei_check = false;
 800c9ec:	4b4f      	ldr	r3, [pc, #316]	; (800cb2c <Interrupt_Get_Irsensor+0xf04>)
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	701a      	strb	r2, [r3, #0]
		}

		if((Sensor_CalcDistance(sensor_sl,sen_l.buff[(i-prev_buff + 50)%50]) - sen_l.distance) <= -10.0)
 800c9f2:	4b4b      	ldr	r3, [pc, #300]	; (800cb20 <Interrupt_Get_Irsensor+0xef8>)
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	4b4b      	ldr	r3, [pc, #300]	; (800cb24 <Interrupt_Get_Irsensor+0xefc>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ca00:	4b49      	ldr	r3, [pc, #292]	; (800cb28 <Interrupt_Get_Irsensor+0xf00>)
 800ca02:	fb83 1302 	smull	r1, r3, r3, r2
 800ca06:	1119      	asrs	r1, r3, #4
 800ca08:	17d3      	asrs	r3, r2, #31
 800ca0a:	1acb      	subs	r3, r1, r3
 800ca0c:	2132      	movs	r1, #50	; 0x32
 800ca0e:	fb01 f303 	mul.w	r3, r1, r3
 800ca12:	1ad3      	subs	r3, r2, r3
 800ca14:	4a40      	ldr	r2, [pc, #256]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800ca16:	005b      	lsls	r3, r3, #1
 800ca18:	4413      	add	r3, r2
 800ca1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	2001      	movs	r0, #1
 800ca22:	f000 fdaf 	bl	800d584 <Sensor_CalcDistance>
 800ca26:	eeb0 7a40 	vmov.f32	s14, s0
 800ca2a:	4b3b      	ldr	r3, [pc, #236]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800ca2c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ca30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca34:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ca38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ca3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca40:	d803      	bhi.n	800ca4a <Interrupt_Get_Irsensor+0xe22>
		{
			diag_l_hosei_check = true;
 800ca42:	4b3b      	ldr	r3, [pc, #236]	; (800cb30 <Interrupt_Get_Irsensor+0xf08>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	701a      	strb	r2, [r3, #0]
 800ca48:	e002      	b.n	800ca50 <Interrupt_Get_Irsensor+0xe28>
		}
		else
		{
			diag_l_hosei_check = false;
 800ca4a:	4b39      	ldr	r3, [pc, #228]	; (800cb30 <Interrupt_Get_Irsensor+0xf08>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	701a      	strb	r2, [r3, #0]
		}

		target.rad_velo = 0.0;
 800ca50:	4b2d      	ldr	r3, [pc, #180]	; (800cb08 <Interrupt_Get_Irsensor+0xee0>)
 800ca52:	f04f 0200 	mov.w	r2, #0
 800ca56:	615a      	str	r2, [r3, #20]
		wall_controll.prev_om_error = wall_controll.om_error;
 800ca58:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <Interrupt_Get_Irsensor+0xf0c>)
 800ca5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca5c:	4a35      	ldr	r2, [pc, #212]	; (800cb34 <Interrupt_Get_Irsensor+0xf0c>)
 800ca5e:	62d3      	str	r3, [r2, #44]	; 0x2c
		if(sen_r.is_controll == true && sen_l.is_controll == true)
 800ca60:	4b2c      	ldr	r3, [pc, #176]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800ca62:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d114      	bne.n	800ca94 <Interrupt_Get_Irsensor+0xe6c>
 800ca6a:	4b2b      	ldr	r3, [pc, #172]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800ca6c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d10f      	bne.n	800ca94 <Interrupt_Get_Irsensor+0xe6c>
		{
			wall_controll.om_error = (sen_l.error - sen_r.error)/2.0;
 800ca74:	4b28      	ldr	r3, [pc, #160]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800ca76:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800ca7a:	4b26      	ldr	r3, [pc, #152]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800ca7c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800ca80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ca84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ca88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ca8c:	4b29      	ldr	r3, [pc, #164]	; (800cb34 <Interrupt_Get_Irsensor+0xf0c>)
 800ca8e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
 800ca92:	e00a      	b.n	800caaa <Interrupt_Get_Irsensor+0xe82>
		}
		else
		{
			wall_controll.om_error = (sen_l.error - sen_r.error);
 800ca94:	4b20      	ldr	r3, [pc, #128]	; (800cb18 <Interrupt_Get_Irsensor+0xef0>)
 800ca96:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800ca9a:	4b1e      	ldr	r3, [pc, #120]	; (800cb14 <Interrupt_Get_Irsensor+0xeec>)
 800ca9c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800caa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caa4:	4b23      	ldr	r3, [pc, #140]	; (800cb34 <Interrupt_Get_Irsensor+0xf0c>)
 800caa6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		}


		if(max_set.length - machine.length > 110.0)
 800caaa:	4b23      	ldr	r3, [pc, #140]	; (800cb38 <Interrupt_Get_Irsensor+0xf10>)
 800caac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800cab0:	4b16      	ldr	r3, [pc, #88]	; (800cb0c <Interrupt_Get_Irsensor+0xee4>)
 800cab2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800cab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800caba:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800cb3c <Interrupt_Get_Irsensor+0xf14>
 800cabe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cac6:	f340 80c7 	ble.w	800cc58 <Interrupt_Get_Irsensor+0x1030>
		{
			if(sen_fr.value >= 300)//340
 800caca:	4b1d      	ldr	r3, [pc, #116]	; (800cb40 <Interrupt_Get_Irsensor+0xf18>)
 800cacc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cad0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cad4:	db36      	blt.n	800cb44 <Interrupt_Get_Irsensor+0xf1c>
			{
				sen_fr.is_controll = true;
 800cad6:	4b1a      	ldr	r3, [pc, #104]	; (800cb40 <Interrupt_Get_Irsensor+0xf18>)
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				sen_fr.error = sen_fr.value - 300;
 800cade:	4b18      	ldr	r3, [pc, #96]	; (800cb40 <Interrupt_Get_Irsensor+0xf18>)
 800cae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cae4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800cae8:	ee07 3a90 	vmov	s15, r3
 800caec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caf0:	4b13      	ldr	r3, [pc, #76]	; (800cb40 <Interrupt_Get_Irsensor+0xf18>)
 800caf2:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800caf6:	e02d      	b.n	800cb54 <Interrupt_Get_Irsensor+0xf2c>
 800caf8:	69ad42c4 	.word	0x69ad42c4
 800cafc:	404fd1de 	.word	0x404fd1de
 800cb00:	69ad42c4 	.word	0x69ad42c4
 800cb04:	403fd1de 	.word	0x403fd1de
 800cb08:	2001b6a0 	.word	0x2001b6a0
 800cb0c:	2001b664 	.word	0x2001b664
 800cb10:	20009484 	.word	0x20009484
 800cb14:	2001b5e4 	.word	0x2001b5e4
 800cb18:	20009410 	.word	0x20009410
 800cb1c:	2001b660 	.word	0x2001b660
 800cb20:	20000220 	.word	0x20000220
 800cb24:	2000021c 	.word	0x2000021c
 800cb28:	51eb851f 	.word	0x51eb851f
 800cb2c:	2000989d 	.word	0x2000989d
 800cb30:	2000989c 	.word	0x2000989c
 800cb34:	20000aac 	.word	0x20000aac
 800cb38:	2001b1b4 	.word	0x2001b1b4
 800cb3c:	42dc0000 	.word	0x42dc0000
 800cb40:	200098a0 	.word	0x200098a0
			}
			else
			{
				sen_fr.is_controll = false;
 800cb44:	4b68      	ldr	r3, [pc, #416]	; (800cce8 <Interrupt_Get_Irsensor+0x10c0>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				sen_fr.error = 0.0;
 800cb4c:	4b66      	ldr	r3, [pc, #408]	; (800cce8 <Interrupt_Get_Irsensor+0x10c0>)
 800cb4e:	f04f 0200 	mov.w	r2, #0
 800cb52:	671a      	str	r2, [r3, #112]	; 0x70
			}

			if(sen_fl.value >= 260)//200
 800cb54:	4b65      	ldr	r3, [pc, #404]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb5e:	db10      	blt.n	800cb82 <Interrupt_Get_Irsensor+0xf5a>
			{
				sen_fl.is_controll = true;
 800cb60:	4b62      	ldr	r3, [pc, #392]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				sen_fl.error = sen_fl.value - 260;
 800cb68:	4b60      	ldr	r3, [pc, #384]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cb6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb72:	ee07 3a90 	vmov	s15, r3
 800cb76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb7a:	4b5c      	ldr	r3, [pc, #368]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb7c:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
 800cb80:	e007      	b.n	800cb92 <Interrupt_Get_Irsensor+0xf6a>
			}
			else
			{
				sen_fl.is_controll = false;
 800cb82:	4b5a      	ldr	r3, [pc, #360]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
				sen_fl.error = 0.0;
 800cb8a:	4b58      	ldr	r3, [pc, #352]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb8c:	f04f 0200 	mov.w	r2, #0
 800cb90:	671a      	str	r2, [r3, #112]	; 0x70
			}

			if(sen_fr.is_controll == true && sen_fl.is_controll == true)
 800cb92:	4b55      	ldr	r3, [pc, #340]	; (800cce8 <Interrupt_Get_Irsensor+0x10c0>)
 800cb94:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cb98:	2b01      	cmp	r3, #1
 800cb9a:	d136      	bne.n	800cc0a <Interrupt_Get_Irsensor+0xfe2>
 800cb9c:	4b53      	ldr	r3, [pc, #332]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cb9e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d131      	bne.n	800cc0a <Interrupt_Get_Irsensor+0xfe2>
			{
				wall_controll.om_error += (sen_fr.error-sen_fl.error)/2.0*0.02;
 800cba6:	4b52      	ldr	r3, [pc, #328]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f7f3 fcec 	bl	8000588 <__aeabi_f2d>
 800cbb0:	4604      	mov	r4, r0
 800cbb2:	460d      	mov	r5, r1
 800cbb4:	4b4c      	ldr	r3, [pc, #304]	; (800cce8 <Interrupt_Get_Irsensor+0x10c0>)
 800cbb6:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800cbba:	4b4c      	ldr	r3, [pc, #304]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cbbc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800cbc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cbc4:	ee17 0a90 	vmov	r0, s15
 800cbc8:	f7f3 fcde 	bl	8000588 <__aeabi_f2d>
 800cbcc:	f04f 0200 	mov.w	r2, #0
 800cbd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cbd4:	f7f3 fe5a 	bl	800088c <__aeabi_ddiv>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4610      	mov	r0, r2
 800cbde:	4619      	mov	r1, r3
 800cbe0:	a33f      	add	r3, pc, #252	; (adr r3, 800cce0 <Interrupt_Get_Irsensor+0x10b8>)
 800cbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe6:	f7f3 fd27 	bl	8000638 <__aeabi_dmul>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	4620      	mov	r0, r4
 800cbf0:	4629      	mov	r1, r5
 800cbf2:	f7f3 fb6b 	bl	80002cc <__adddf3>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	460c      	mov	r4, r1
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f7f4 f813 	bl	8000c28 <__aeabi_d2f>
 800cc02:	4602      	mov	r2, r0
 800cc04:	4b3a      	ldr	r3, [pc, #232]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc06:	629a      	str	r2, [r3, #40]	; 0x28
 800cc08:	e026      	b.n	800cc58 <Interrupt_Get_Irsensor+0x1030>
			}
			else
			{
				wall_controll.om_error += (sen_fr.error-sen_fl.error)*0.02;
 800cc0a:	4b39      	ldr	r3, [pc, #228]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7f3 fcba 	bl	8000588 <__aeabi_f2d>
 800cc14:	4604      	mov	r4, r0
 800cc16:	460d      	mov	r5, r1
 800cc18:	4b33      	ldr	r3, [pc, #204]	; (800cce8 <Interrupt_Get_Irsensor+0x10c0>)
 800cc1a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800cc1e:	4b33      	ldr	r3, [pc, #204]	; (800ccec <Interrupt_Get_Irsensor+0x10c4>)
 800cc20:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800cc24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc28:	ee17 0a90 	vmov	r0, s15
 800cc2c:	f7f3 fcac 	bl	8000588 <__aeabi_f2d>
 800cc30:	a32b      	add	r3, pc, #172	; (adr r3, 800cce0 <Interrupt_Get_Irsensor+0x10b8>)
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	f7f3 fcff 	bl	8000638 <__aeabi_dmul>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7f3 fb43 	bl	80002cc <__adddf3>
 800cc46:	4603      	mov	r3, r0
 800cc48:	460c      	mov	r4, r1
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	f7f3 ffeb 	bl	8000c28 <__aeabi_d2f>
 800cc52:	4602      	mov	r2, r0
 800cc54:	4b26      	ldr	r3, [pc, #152]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc56:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}

		target.rad_velo += wall_controll.om_error*wall_controll.side_om_wall_gain.Kp;
 800cc58:	4b26      	ldr	r3, [pc, #152]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800cc5a:	ed93 7a05 	vldr	s14, [r3, #20]
 800cc5e:	4b24      	ldr	r3, [pc, #144]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc60:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800cc64:	4b22      	ldr	r3, [pc, #136]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc66:	edd3 7a00 	vldr	s15, [r3]
 800cc6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc72:	4b20      	ldr	r3, [pc, #128]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800cc74:	edc3 7a05 	vstr	s15, [r3, #20]
		target.rad_velo	+=  (wall_controll.om_error-wall_controll.prev_om_error)*wall_controll.side_om_wall_gain.Kd;
 800cc78:	4b1e      	ldr	r3, [pc, #120]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800cc7a:	ed93 7a05 	vldr	s14, [r3, #20]
 800cc7e:	4b1c      	ldr	r3, [pc, #112]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc80:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800cc84:	4b1a      	ldr	r3, [pc, #104]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc86:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800cc8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800cc8e:	4b18      	ldr	r3, [pc, #96]	; (800ccf0 <Interrupt_Get_Irsensor+0x10c8>)
 800cc90:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cc98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc9c:	4b15      	ldr	r3, [pc, #84]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800cc9e:	edc3 7a05 	vstr	s15, [r3, #20]
		max_set.rad_velo = target.rad_velo;
 800cca2:	4b14      	ldr	r3, [pc, #80]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	4a14      	ldr	r2, [pc, #80]	; (800ccf8 <Interrupt_Get_Irsensor+0x10d0>)
 800cca8:	6153      	str	r3, [r2, #20]
 800ccaa:	e00f      	b.n	800cccc <Interrupt_Get_Irsensor+0x10a4>
	}
	else if(run_mode == STRAIGHT_MODE || run_mode == DIAG_MODE)
 800ccac:	4b13      	ldr	r3, [pc, #76]	; (800ccfc <Interrupt_Get_Irsensor+0x10d4>)
 800ccae:	781b      	ldrb	r3, [r3, #0]
 800ccb0:	2b01      	cmp	r3, #1
 800ccb2:	d003      	beq.n	800ccbc <Interrupt_Get_Irsensor+0x1094>
 800ccb4:	4b11      	ldr	r3, [pc, #68]	; (800ccfc <Interrupt_Get_Irsensor+0x10d4>)
 800ccb6:	781b      	ldrb	r3, [r3, #0]
 800ccb8:	2b03      	cmp	r3, #3
 800ccba:	d107      	bne.n	800cccc <Interrupt_Get_Irsensor+0x10a4>
	{
		max_set.rad_velo = 0.0;
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	; (800ccf8 <Interrupt_Get_Irsensor+0x10d0>)
 800ccbe:	f04f 0200 	mov.w	r2, #0
 800ccc2:	615a      	str	r2, [r3, #20]
		target.rad_velo  = 0.0;
 800ccc4:	4b0b      	ldr	r3, [pc, #44]	; (800ccf4 <Interrupt_Get_Irsensor+0x10cc>)
 800ccc6:	f04f 0200 	mov.w	r2, #0
 800ccca:	615a      	str	r2, [r3, #20]
	}

	i++;
 800cccc:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <Interrupt_Get_Irsensor+0x10d8>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	3301      	adds	r3, #1
 800ccd2:	4a0b      	ldr	r2, [pc, #44]	; (800cd00 <Interrupt_Get_Irsensor+0x10d8>)
 800ccd4:	6013      	str	r3, [r2, #0]
}
 800ccd6:	bf00      	nop
 800ccd8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ccdc:	f3af 8000 	nop.w
 800cce0:	47ae147b 	.word	0x47ae147b
 800cce4:	3f947ae1 	.word	0x3f947ae1
 800cce8:	200098a0 	.word	0x200098a0
 800ccec:	20009914 	.word	0x20009914
 800ccf0:	20000aac 	.word	0x20000aac
 800ccf4:	2001b6a0 	.word	0x2001b6a0
 800ccf8:	2001b1b4 	.word	0x2001b1b4
 800ccfc:	20001708 	.word	0x20001708
 800cd00:	20000220 	.word	0x20000220
 800cd04:	00000000 	.word	0x00000000

0800cd08 <Interrupt_Get_Speed>:

void Interrupt_Get_Speed(){
 800cd08:	b5b0      	push	{r4, r5, r7, lr}
 800cd0a:	af00      	add	r7, sp, #0
	enc_R.prev_sp_pulse = enc_R.sp_pulse;
 800cd0c:	4b94      	ldr	r3, [pc, #592]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a93      	ldr	r2, [pc, #588]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd12:	6053      	str	r3, [r2, #4]
	enc_L.prev_sp_pulse = enc_L.sp_pulse;
 800cd14:	4b93      	ldr	r3, [pc, #588]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	4a92      	ldr	r2, [pc, #584]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd1a:	6053      	str	r3, [r2, #4]

	enc_R.sp_pulse = Encoder_GetPosition_Right();		Encoder_ResetPosition_Right();
 800cd1c:	f7fd fa48 	bl	800a1b0 <Encoder_GetPosition_Right>
 800cd20:	4602      	mov	r2, r0
 800cd22:	4b8f      	ldr	r3, [pc, #572]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd24:	601a      	str	r2, [r3, #0]
 800cd26:	f7fd fa35 	bl	800a194 <Encoder_ResetPosition_Right>
	enc_L.sp_pulse = Encoder_GetPosition_Left();		Encoder_ResetPosition_Left();
 800cd2a:	f7fd fa4f 	bl	800a1cc <Encoder_GetPosition_Left>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	4b8c      	ldr	r3, [pc, #560]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd32:	601a      	str	r2, [r3, #0]
 800cd34:	f7fd fa20 	bl	800a178 <Encoder_ResetPosition_Left>

	enc_R.prev_wheel_speed = enc_R.wheel_speed;
 800cd38:	4b89      	ldr	r3, [pc, #548]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	4a88      	ldr	r2, [pc, #544]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd3e:	60d3      	str	r3, [r2, #12]
	enc_L.prev_wheel_speed = enc_L.wheel_speed;
 800cd40:	4b88      	ldr	r3, [pc, #544]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	4a87      	ldr	r2, [pc, #540]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd46:	60d3      	str	r3, [r2, #12]

	enc_R.wheel_speed =  (float)enc_R.sp_pulse * MMPP * m_dt; //計測はmm mm/ms-> m/s
 800cd48:	4b85      	ldr	r3, [pc, #532]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	ee07 3a90 	vmov	s15, r3
 800cd50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd54:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800cf68 <Interrupt_Get_Speed+0x260>
 800cd58:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd5c:	eddf 7a83 	vldr	s15, [pc, #524]	; 800cf6c <Interrupt_Get_Speed+0x264>
 800cd60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd68:	4b7d      	ldr	r3, [pc, #500]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd6a:	edc3 7a02 	vstr	s15, [r3, #8]
	enc_L.wheel_speed =  (float)enc_L.sp_pulse * MMPP * m_dt;
 800cd6e:	4b7d      	ldr	r3, [pc, #500]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	ee07 3a90 	vmov	s15, r3
 800cd76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd7a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800cf68 <Interrupt_Get_Speed+0x260>
 800cd7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cd82:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800cf6c <Interrupt_Get_Speed+0x264>
 800cd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd8e:	4b75      	ldr	r3, [pc, #468]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd90:	edc3 7a02 	vstr	s15, [r3, #8]

	enc_sp = (enc_R.wheel_speed - enc_L.wheel_speed)/2.0f;
 800cd94:	4b72      	ldr	r3, [pc, #456]	; (800cf60 <Interrupt_Get_Speed+0x258>)
 800cd96:	ed93 7a02 	vldr	s14, [r3, #8]
 800cd9a:	4b72      	ldr	r3, [pc, #456]	; (800cf64 <Interrupt_Get_Speed+0x25c>)
 800cd9c:	edd3 7a02 	vldr	s15, [r3, #8]
 800cda0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cda4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800cda8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cdac:	4b70      	ldr	r3, [pc, #448]	; (800cf70 <Interrupt_Get_Speed+0x268>)
 800cdae:	edc3 7a00 	vstr	s15, [r3]
	machine.prev_velo = machine.velo;
 800cdb2:	4b70      	ldr	r3, [pc, #448]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	4a6f      	ldr	r2, [pc, #444]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cdb8:	6053      	str	r3, [r2, #4]
	machine.prev_accel = machine.accel;
 800cdba:	4b6e      	ldr	r3, [pc, #440]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cdbc:	68db      	ldr	r3, [r3, #12]
 800cdbe:	4a6d      	ldr	r2, [pc, #436]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cdc0:	6113      	str	r3, [r2, #16]
	//machine.velo = (enc_R.wheel_speed - enc_L.wheel_speed)/2.0;
	machine.velo = calc_speed_filter((-1.0f)*(read_accel_x_axis()), enc_sp);
 800cdc2:	f7fd fc55 	bl	800a670 <read_accel_x_axis>
 800cdc6:	eef0 7a40 	vmov.f32	s15, s0
 800cdca:	eef1 7a67 	vneg.f32	s15, s15
 800cdce:	4b68      	ldr	r3, [pc, #416]	; (800cf70 <Interrupt_Get_Speed+0x268>)
 800cdd0:	ed93 7a00 	vldr	s14, [r3]
 800cdd4:	eef0 0a47 	vmov.f32	s1, s14
 800cdd8:	eeb0 0a67 	vmov.f32	s0, s15
 800cddc:	f000 fe5e 	bl	800da9c <calc_speed_filter>
 800cde0:	eef0 7a40 	vmov.f32	s15, s0
 800cde4:	4b63      	ldr	r3, [pc, #396]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cde6:	edc3 7a00 	vstr	s15, [r3]
	machine.length += enc_sp*interrupt_time*1000.0f;;
 800cdea:	4b62      	ldr	r3, [pc, #392]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cdec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800cdf0:	4b5f      	ldr	r3, [pc, #380]	; (800cf70 <Interrupt_Get_Speed+0x268>)
 800cdf2:	edd3 7a00 	vldr	s15, [r3]
 800cdf6:	eddf 6a60 	vldr	s13, [pc, #384]	; 800cf78 <Interrupt_Get_Speed+0x270>
 800cdfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cdfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf7c <Interrupt_Get_Speed+0x274>
 800ce02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ce06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce0a:	4b5a      	ldr	r3, [pc, #360]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce0c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	machine.I_velo += machine.velo ;
 800ce10:	4b58      	ldr	r3, [pc, #352]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce12:	ed93 7a02 	vldr	s14, [r3, #8]
 800ce16:	4b57      	ldr	r3, [pc, #348]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce18:	edd3 7a00 	vldr	s15, [r3]
 800ce1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce20:	4b54      	ldr	r3, [pc, #336]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce22:	edc3 7a02 	vstr	s15, [r3, #8]
    machine.accel = (-1.0f)*(read_accel_x_axis())*1.0 + machine.accel * 0.0;
 800ce26:	f7fd fc23 	bl	800a670 <read_accel_x_axis>
 800ce2a:	eef0 7a40 	vmov.f32	s15, s0
 800ce2e:	eef1 7a67 	vneg.f32	s15, s15
 800ce32:	ee17 3a90 	vmov	r3, s15
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7f3 fba6 	bl	8000588 <__aeabi_f2d>
 800ce3c:	4604      	mov	r4, r0
 800ce3e:	460d      	mov	r5, r1
 800ce40:	4b4c      	ldr	r3, [pc, #304]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f3 fb9f 	bl	8000588 <__aeabi_f2d>
 800ce4a:	f04f 0200 	mov.w	r2, #0
 800ce4e:	f04f 0300 	mov.w	r3, #0
 800ce52:	f7f3 fbf1 	bl	8000638 <__aeabi_dmul>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f7f3 fa35 	bl	80002cc <__adddf3>
 800ce62:	4603      	mov	r3, r0
 800ce64:	460c      	mov	r4, r1
 800ce66:	4618      	mov	r0, r3
 800ce68:	4621      	mov	r1, r4
 800ce6a:	f7f3 fedd 	bl	8000c28 <__aeabi_d2f>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	4b40      	ldr	r3, [pc, #256]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce72:	60da      	str	r2, [r3, #12]

	machine.prev_rad_velo = machine.rad_velo;
 800ce74:	4b3f      	ldr	r3, [pc, #252]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	4a3e      	ldr	r2, [pc, #248]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce7a:	6193      	str	r3, [r2, #24]
	machine.prev_rad_accel = machine.rad_accel;
 800ce7c:	4b3d      	ldr	r3, [pc, #244]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce7e:	6a1b      	ldr	r3, [r3, #32]
 800ce80:	4a3c      	ldr	r2, [pc, #240]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ce82:	6253      	str	r3, [r2, #36]	; 0x24
	machine.rad_velo = (-1.0f)*read_gyro_z_axis()*PI/180.0f;
 800ce84:	f7fd fbda 	bl	800a63c <read_gyro_z_axis>
 800ce88:	eef0 7a40 	vmov.f32	s15, s0
 800ce8c:	eef1 7a67 	vneg.f32	s15, s15
 800ce90:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800cf80 <Interrupt_Get_Speed+0x278>
 800ce94:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ce98:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800cf84 <Interrupt_Get_Speed+0x27c>
 800ce9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800cea0:	4b34      	ldr	r3, [pc, #208]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cea2:	edc3 7a05 	vstr	s15, [r3, #20]
	machine.rad_accel = (machine.rad_velo-machine.prev_rad_velo)*inv_interrupt_time;
 800cea6:	4b33      	ldr	r3, [pc, #204]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cea8:	ed93 7a05 	vldr	s14, [r3, #20]
 800ceac:	4b31      	ldr	r3, [pc, #196]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ceae:	edd3 7a06 	vldr	s15, [r3, #24]
 800ceb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cf7c <Interrupt_Get_Speed+0x274>
 800ceba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cebe:	4b2d      	ldr	r3, [pc, #180]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cec0:	edc3 7a08 	vstr	s15, [r3, #32]
	machine.radian += machine.rad_velo*interrupt_time;
 800cec4:	4b2b      	ldr	r3, [pc, #172]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cec6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ceca:	4b2a      	ldr	r3, [pc, #168]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cecc:	edd3 7a05 	vldr	s15, [r3, #20]
 800ced0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800cf78 <Interrupt_Get_Speed+0x270>
 800ced4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ced8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cedc:	4b25      	ldr	r3, [pc, #148]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cede:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	machine.I_rad_velo += machine.rad_velo;
 800cee2:	4b24      	ldr	r3, [pc, #144]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cee4:	ed93 7a07 	vldr	s14, [r3, #28]
 800cee8:	4b22      	ldr	r3, [pc, #136]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800ceea:	edd3 7a05 	vldr	s15, [r3, #20]
 800ceee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cef2:	4b20      	ldr	r3, [pc, #128]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cef4:	edc3 7a07 	vstr	s15, [r3, #28]
	fb_rad_velo = 0.95*fb_rad_velo + 0.05*machine.rad_velo;
 800cef8:	4b23      	ldr	r3, [pc, #140]	; (800cf88 <Interrupt_Get_Speed+0x280>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7f3 fb43 	bl	8000588 <__aeabi_f2d>
 800cf02:	a313      	add	r3, pc, #76	; (adr r3, 800cf50 <Interrupt_Get_Speed+0x248>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 fb96 	bl	8000638 <__aeabi_dmul>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	460c      	mov	r4, r1
 800cf10:	4625      	mov	r5, r4
 800cf12:	461c      	mov	r4, r3
 800cf14:	4b17      	ldr	r3, [pc, #92]	; (800cf74 <Interrupt_Get_Speed+0x26c>)
 800cf16:	695b      	ldr	r3, [r3, #20]
 800cf18:	4618      	mov	r0, r3
 800cf1a:	f7f3 fb35 	bl	8000588 <__aeabi_f2d>
 800cf1e:	a30e      	add	r3, pc, #56	; (adr r3, 800cf58 <Interrupt_Get_Speed+0x250>)
 800cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf24:	f7f3 fb88 	bl	8000638 <__aeabi_dmul>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	4620      	mov	r0, r4
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f7f3 f9cc 	bl	80002cc <__adddf3>
 800cf34:	4603      	mov	r3, r0
 800cf36:	460c      	mov	r4, r1
 800cf38:	4618      	mov	r0, r3
 800cf3a:	4621      	mov	r1, r4
 800cf3c:	f7f3 fe74 	bl	8000c28 <__aeabi_d2f>
 800cf40:	4602      	mov	r2, r0
 800cf42:	4b11      	ldr	r3, [pc, #68]	; (800cf88 <Interrupt_Get_Speed+0x280>)
 800cf44:	601a      	str	r2, [r3, #0]
}
 800cf46:	bf00      	nop
 800cf48:	bdb0      	pop	{r4, r5, r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	f3af 8000 	nop.w
 800cf50:	66666666 	.word	0x66666666
 800cf54:	3fee6666 	.word	0x3fee6666
 800cf58:	9999999a 	.word	0x9999999a
 800cf5c:	3fa99999 	.word	0x3fa99999
 800cf60:	20009988 	.word	0x20009988
 800cf64:	2001b1a4 	.word	0x2001b1a4
 800cf68:	3d2d6a79 	.word	0x3d2d6a79
 800cf6c:	00000001 	.word	0x00000001
 800cf70:	2001b744 	.word	0x2001b744
 800cf74:	2001b664 	.word	0x2001b664
 800cf78:	3a83126f 	.word	0x3a83126f
 800cf7c:	447a0000 	.word	0x447a0000
 800cf80:	40490fda 	.word	0x40490fda
 800cf84:	43340000 	.word	0x43340000
 800cf88:	20000224 	.word	0x20000224

0800cf8c <Interrupt_Set_Target_Speed>:

void Interrupt_Set_Target_Speed(){
 800cf8c:	b5b0      	push	{r4, r5, r7, lr}
 800cf8e:	ed2d 8b02 	vpush	{d8}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0

	static float turn_slip_acc = 0.0;
	target.prev_velo = target.velo;
 800cf96:	4bb1      	ldr	r3, [pc, #708]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4ab0      	ldr	r2, [pc, #704]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cf9c:	6053      	str	r3, [r2, #4]
	//target.accel = target.accel - turn_slip_acc;
	target.prev_accel = target.accel;
 800cf9e:	4baf      	ldr	r3, [pc, #700]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	4aae      	ldr	r2, [pc, #696]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfa4:	6113      	str	r3, [r2, #16]
	target.velo += target.accel*interrupt_time;
 800cfa6:	4bad      	ldr	r3, [pc, #692]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfa8:	ed93 7a00 	vldr	s14, [r3]
 800cfac:	4bab      	ldr	r3, [pc, #684]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfae:	edd3 7a03 	vldr	s15, [r3, #12]
 800cfb2:	eddf 6aab 	vldr	s13, [pc, #684]	; 800d260 <Interrupt_Set_Target_Speed+0x2d4>
 800cfb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cfba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfbe:	4ba7      	ldr	r3, [pc, #668]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfc0:	edc3 7a00 	vstr	s15, [r3]
	if(target.velo >= max_set.velo)
 800cfc4:	4ba5      	ldr	r3, [pc, #660]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfc6:	ed93 7a00 	vldr	s14, [r3]
 800cfca:	4ba6      	ldr	r3, [pc, #664]	; (800d264 <Interrupt_Set_Target_Speed+0x2d8>)
 800cfcc:	edd3 7a00 	vldr	s15, [r3]
 800cfd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfd8:	db07      	blt.n	800cfea <Interrupt_Set_Target_Speed+0x5e>
	{
		target.velo = max_set.velo;
 800cfda:	4ba2      	ldr	r3, [pc, #648]	; (800d264 <Interrupt_Set_Target_Speed+0x2d8>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	4a9f      	ldr	r2, [pc, #636]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfe0:	6013      	str	r3, [r2, #0]
		target.accel = 0.0f;
 800cfe2:	4b9e      	ldr	r3, [pc, #632]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfe4:	f04f 0200 	mov.w	r2, #0
 800cfe8:	60da      	str	r2, [r3, #12]
	}
	target.length += target.velo*interrupt_time*1000.0f;
 800cfea:	4b9c      	ldr	r3, [pc, #624]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cfec:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800cff0:	4b9a      	ldr	r3, [pc, #616]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800cff2:	edd3 7a00 	vldr	s15, [r3]
 800cff6:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800d260 <Interrupt_Set_Target_Speed+0x2d4>
 800cffa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cffe:	eddf 6a9a 	vldr	s13, [pc, #616]	; 800d268 <Interrupt_Set_Target_Speed+0x2dc>
 800d002:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d00a:	4b94      	ldr	r3, [pc, #592]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d00c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	target.I_velo += target.velo;
 800d010:	4b92      	ldr	r3, [pc, #584]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d012:	ed93 7a02 	vldr	s14, [r3, #8]
 800d016:	4b91      	ldr	r3, [pc, #580]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d018:	edd3 7a00 	vldr	s15, [r3]
 800d01c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d020:	4b8e      	ldr	r3, [pc, #568]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d022:	edc3 7a02 	vstr	s15, [r3, #8]

	if(run_mode == TURN_MODE_TABLE){
 800d026:	4b91      	ldr	r3, [pc, #580]	; (800d26c <Interrupt_Set_Target_Speed+0x2e0>)
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b04      	cmp	r3, #4
 800d02c:	f040 812a 	bne.w	800d284 <Interrupt_Set_Target_Speed+0x2f8>
		turn_time = turn_time + 1.0;
 800d030:	4b8f      	ldr	r3, [pc, #572]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d032:	edd3 7a00 	vldr	s15, [r3]
 800d036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d03a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d03e:	4b8c      	ldr	r3, [pc, #560]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d040:	edc3 7a00 	vstr	s15, [r3]
		if((float)turn_time < set_turn_time * 1000)
 800d044:	4b8b      	ldr	r3, [pc, #556]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d046:	edd3 7a00 	vldr	s15, [r3]
 800d04a:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800d268 <Interrupt_Set_Target_Speed+0x2dc>
 800d04e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d052:	4b87      	ldr	r3, [pc, #540]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d054:	edd3 7a00 	vldr	s15, [r3]
 800d058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d060:	f340 8082 	ble.w	800d168 <Interrupt_Set_Target_Speed+0x1dc>
		{
			target.prev_rad_velo = target.rad_velo;
 800d064:	4b7d      	ldr	r3, [pc, #500]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d066:	695b      	ldr	r3, [r3, #20]
 800d068:	4a7c      	ldr	r2, [pc, #496]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d06a:	6193      	str	r3, [r2, #24]
			target.prev_rad_accel = target.rad_accel;
 800d06c:	4b7b      	ldr	r3, [pc, #492]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	4a7a      	ldr	r2, [pc, #488]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d072:	6253      	str	r3, [r2, #36]	; 0x24
			float m =((float)(turn_time))/set_turn_time - (float)((int)(((float)(turn_time))/set_turn_time));
 800d074:	4b7e      	ldr	r3, [pc, #504]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d076:	edd3 6a00 	vldr	s13, [r3]
 800d07a:	4b7e      	ldr	r3, [pc, #504]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d07c:	edd3 7a00 	vldr	s15, [r3]
 800d080:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d084:	4b7a      	ldr	r3, [pc, #488]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d086:	ed93 6a00 	vldr	s12, [r3]
 800d08a:	4b7a      	ldr	r3, [pc, #488]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d08c:	edd3 6a00 	vldr	s13, [r3]
 800d090:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d09c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0a0:	edc7 7a01 	vstr	s15, [r7, #4]
			float n =(float)(((int)(((float)(turn_time))/set_turn_time))+1)- ((float)(turn_time))/set_turn_time;
 800d0a4:	4b72      	ldr	r3, [pc, #456]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d0a6:	edd3 6a00 	vldr	s13, [r3]
 800d0aa:	4b72      	ldr	r3, [pc, #456]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d0ac:	ed93 7a00 	vldr	s14, [r3]
 800d0b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0b8:	ee17 3a90 	vmov	r3, s15
 800d0bc:	3301      	adds	r3, #1
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d0c6:	4b6a      	ldr	r3, [pc, #424]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d0c8:	ed93 6a00 	vldr	s12, [r3]
 800d0cc:	4b69      	ldr	r3, [pc, #420]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d0ce:	edd3 6a00 	vldr	s13, [r3]
 800d0d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0da:	edc7 7a00 	vstr	s15, [r7]
			target.rad_velo = max_set.rad_velo*(n*accel_table[(int)(((float)(turn_time))/set_turn_time)] + m*accel_table[(int)(((float)(turn_time))/set_turn_time) + 1]);
 800d0de:	4b61      	ldr	r3, [pc, #388]	; (800d264 <Interrupt_Set_Target_Speed+0x2d8>)
 800d0e0:	ed93 7a05 	vldr	s14, [r3, #20]
 800d0e4:	4b62      	ldr	r3, [pc, #392]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d0e6:	ed93 6a00 	vldr	s12, [r3]
 800d0ea:	4b62      	ldr	r3, [pc, #392]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d0ec:	edd3 6a00 	vldr	s13, [r3]
 800d0f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800d0f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d0f8:	ee17 3a90 	vmov	r3, s15
 800d0fc:	4a5e      	ldr	r2, [pc, #376]	; (800d278 <Interrupt_Set_Target_Speed+0x2ec>)
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	4413      	add	r3, r2
 800d102:	edd3 6a00 	vldr	s13, [r3]
 800d106:	edd7 7a00 	vldr	s15, [r7]
 800d10a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d10e:	4b58      	ldr	r3, [pc, #352]	; (800d270 <Interrupt_Set_Target_Speed+0x2e4>)
 800d110:	edd3 5a00 	vldr	s11, [r3]
 800d114:	4b57      	ldr	r3, [pc, #348]	; (800d274 <Interrupt_Set_Target_Speed+0x2e8>)
 800d116:	ed93 6a00 	vldr	s12, [r3]
 800d11a:	eec5 7a86 	vdiv.f32	s15, s11, s12
 800d11e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d122:	ee17 3a90 	vmov	r3, s15
 800d126:	3301      	adds	r3, #1
 800d128:	4a53      	ldr	r2, [pc, #332]	; (800d278 <Interrupt_Set_Target_Speed+0x2ec>)
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	4413      	add	r3, r2
 800d12e:	ed93 6a00 	vldr	s12, [r3]
 800d132:	edd7 7a01 	vldr	s15, [r7, #4]
 800d136:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d13e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d142:	4b46      	ldr	r3, [pc, #280]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d144:	edc3 7a05 	vstr	s15, [r3, #20]
			target.rad_accel = (target.rad_velo - target.prev_rad_velo)*1000.0;
 800d148:	4b44      	ldr	r3, [pc, #272]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d14a:	ed93 7a05 	vldr	s14, [r3, #20]
 800d14e:	4b43      	ldr	r3, [pc, #268]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d150:	edd3 7a06 	vldr	s15, [r3, #24]
 800d154:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d158:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800d268 <Interrupt_Set_Target_Speed+0x2dc>
 800d15c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d160:	4b3e      	ldr	r3, [pc, #248]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d162:	edc3 7a08 	vstr	s15, [r3, #32]
 800d166:	e003      	b.n	800d170 <Interrupt_Set_Target_Speed+0x1e4>
		}
		else
		{
			target.rad_velo = 0.0;
 800d168:	4b3c      	ldr	r3, [pc, #240]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d16a:	f04f 0200 	mov.w	r2, #0
 800d16e:	615a      	str	r2, [r3, #20]
		}
		target.radian += target.rad_velo*interrupt_time;
 800d170:	4b3a      	ldr	r3, [pc, #232]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d172:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800d176:	4b39      	ldr	r3, [pc, #228]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d178:	edd3 7a05 	vldr	s15, [r3, #20]
 800d17c:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d260 <Interrupt_Set_Target_Speed+0x2d4>
 800d180:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d184:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d188:	4b34      	ldr	r3, [pc, #208]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d18a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		target.I_rad_velo += target.rad_velo;
 800d18e:	4b33      	ldr	r3, [pc, #204]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d190:	ed93 7a07 	vldr	s14, [r3, #28]
 800d194:	4b31      	ldr	r3, [pc, #196]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d196:	edd3 7a05 	vldr	s15, [r3, #20]
 800d19a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d19e:	4b2f      	ldr	r3, [pc, #188]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d1a0:	edc3 7a07 	vstr	s15, [r3, #28]
		//we neeed to think beta

		turn_slip_acc  = (1.0)*ABS(read_accel_y_axis()*read_accel_y_axis()/180.0);
 800d1a4:	f7fd fa82 	bl	800a6ac <read_accel_y_axis>
 800d1a8:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ac:	f7fd fa7e 	bl	800a6ac <read_accel_y_axis>
 800d1b0:	eef0 7a40 	vmov.f32	s15, s0
 800d1b4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d1b8:	ee17 0a90 	vmov	r0, s15
 800d1bc:	f7f3 f9e4 	bl	8000588 <__aeabi_f2d>
 800d1c0:	f04f 0200 	mov.w	r2, #0
 800d1c4:	4b2d      	ldr	r3, [pc, #180]	; (800d27c <Interrupt_Set_Target_Speed+0x2f0>)
 800d1c6:	f7f3 fb61 	bl	800088c <__aeabi_ddiv>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	4610      	mov	r0, r2
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	f04f 0200 	mov.w	r2, #0
 800d1d6:	f04f 0300 	mov.w	r3, #0
 800d1da:	f7f3 fc9f 	bl	8000b1c <__aeabi_dcmplt>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d018      	beq.n	800d216 <Interrupt_Set_Target_Speed+0x28a>
 800d1e4:	f7fd fa62 	bl	800a6ac <read_accel_y_axis>
 800d1e8:	eeb0 8a40 	vmov.f32	s16, s0
 800d1ec:	f7fd fa5e 	bl	800a6ac <read_accel_y_axis>
 800d1f0:	eef0 7a40 	vmov.f32	s15, s0
 800d1f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d1f8:	ee17 0a90 	vmov	r0, s15
 800d1fc:	f7f3 f9c4 	bl	8000588 <__aeabi_f2d>
 800d200:	f04f 0200 	mov.w	r2, #0
 800d204:	4b1d      	ldr	r3, [pc, #116]	; (800d27c <Interrupt_Set_Target_Speed+0x2f0>)
 800d206:	f7f3 fb41 	bl	800088c <__aeabi_ddiv>
 800d20a:	4602      	mov	r2, r0
 800d20c:	460b      	mov	r3, r1
 800d20e:	4614      	mov	r4, r2
 800d210:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800d214:	e016      	b.n	800d244 <Interrupt_Set_Target_Speed+0x2b8>
 800d216:	f7fd fa49 	bl	800a6ac <read_accel_y_axis>
 800d21a:	eeb0 8a40 	vmov.f32	s16, s0
 800d21e:	f7fd fa45 	bl	800a6ac <read_accel_y_axis>
 800d222:	eef0 7a40 	vmov.f32	s15, s0
 800d226:	ee68 7a27 	vmul.f32	s15, s16, s15
 800d22a:	ee17 0a90 	vmov	r0, s15
 800d22e:	f7f3 f9ab 	bl	8000588 <__aeabi_f2d>
 800d232:	f04f 0200 	mov.w	r2, #0
 800d236:	4b11      	ldr	r3, [pc, #68]	; (800d27c <Interrupt_Set_Target_Speed+0x2f0>)
 800d238:	f7f3 fb28 	bl	800088c <__aeabi_ddiv>
 800d23c:	4603      	mov	r3, r0
 800d23e:	460c      	mov	r4, r1
 800d240:	4625      	mov	r5, r4
 800d242:	461c      	mov	r4, r3
 800d244:	4620      	mov	r0, r4
 800d246:	4629      	mov	r1, r5
 800d248:	f7f3 fcee 	bl	8000c28 <__aeabi_d2f>
 800d24c:	4602      	mov	r2, r0
 800d24e:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <Interrupt_Set_Target_Speed+0x2f4>)
 800d250:	601a      	str	r2, [r3, #0]
		target.accel = turn_slip_acc;
 800d252:	4b0b      	ldr	r3, [pc, #44]	; (800d280 <Interrupt_Set_Target_Speed+0x2f4>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a01      	ldr	r2, [pc, #4]	; (800d25c <Interrupt_Set_Target_Speed+0x2d0>)
 800d258:	60d3      	str	r3, [r2, #12]
		}
		target.radian += target.rad_velo*interrupt_time;
		target.I_rad_velo += target.rad_velo;

	}
}
 800d25a:	e0bb      	b.n	800d3d4 <Interrupt_Set_Target_Speed+0x448>
 800d25c:	2001b6a0 	.word	0x2001b6a0
 800d260:	3a83126f 	.word	0x3a83126f
 800d264:	2001b1b4 	.word	0x2001b1b4
 800d268:	447a0000 	.word	0x447a0000
 800d26c:	20001708 	.word	0x20001708
 800d270:	2001b6e0 	.word	0x2001b6e0
 800d274:	2001b6e4 	.word	0x2001b6e4
 800d278:	0801e484 	.word	0x0801e484
 800d27c:	40668000 	.word	0x40668000
 800d280:	20000234 	.word	0x20000234
	else if(run_mode == STRAIGHT_MODE)
 800d284:	4b56      	ldr	r3, [pc, #344]	; (800d3e0 <Interrupt_Set_Target_Speed+0x454>)
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d13f      	bne.n	800d30c <Interrupt_Set_Target_Speed+0x380>
		target.prev_rad_velo = target.rad_velo;
 800d28c:	4b55      	ldr	r3, [pc, #340]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	4a54      	ldr	r2, [pc, #336]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d292:	6193      	str	r3, [r2, #24]
		target.prev_rad_accel = target.rad_accel;
 800d294:	4b53      	ldr	r3, [pc, #332]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d296:	6a1b      	ldr	r3, [r3, #32]
 800d298:	4a52      	ldr	r2, [pc, #328]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d29a:	6253      	str	r3, [r2, #36]	; 0x24
		target.rad_velo = target.rad_velo + target.rad_accel*interrupt_time;
 800d29c:	4b51      	ldr	r3, [pc, #324]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d29e:	ed93 7a05 	vldr	s14, [r3, #20]
 800d2a2:	4b50      	ldr	r3, [pc, #320]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2a4:	edd3 7a08 	vldr	s15, [r3, #32]
 800d2a8:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d3e8 <Interrupt_Set_Target_Speed+0x45c>
 800d2ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d2b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2b4:	4b4b      	ldr	r3, [pc, #300]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2b6:	edc3 7a05 	vstr	s15, [r3, #20]
		if(ABS(target.rad_velo) >= ABS(max_set.rad_velo))
 800d2ba:	4b4a      	ldr	r3, [pc, #296]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2bc:	edd3 7a05 	vldr	s15, [r3, #20]
 800d2c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c8:	4b48      	ldr	r3, [pc, #288]	; (800d3ec <Interrupt_Set_Target_Speed+0x460>)
 800d2ca:	edd3 7a05 	vldr	s15, [r3, #20]
 800d2ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		target.radian += target.rad_velo*interrupt_time;
 800d2d6:	4b43      	ldr	r3, [pc, #268]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2d8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800d2dc:	4b41      	ldr	r3, [pc, #260]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2de:	edd3 7a05 	vldr	s15, [r3, #20]
 800d2e2:	eddf 6a41 	vldr	s13, [pc, #260]	; 800d3e8 <Interrupt_Set_Target_Speed+0x45c>
 800d2e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d2ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2ee:	4b3d      	ldr	r3, [pc, #244]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2f0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		target.I_rad_velo += target.rad_velo;
 800d2f4:	4b3b      	ldr	r3, [pc, #236]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2f6:	ed93 7a07 	vldr	s14, [r3, #28]
 800d2fa:	4b3a      	ldr	r3, [pc, #232]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d2fc:	edd3 7a05 	vldr	s15, [r3, #20]
 800d300:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d304:	4b37      	ldr	r3, [pc, #220]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d306:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800d30a:	e063      	b.n	800d3d4 <Interrupt_Set_Target_Speed+0x448>
		target.prev_rad_velo = target.rad_velo;
 800d30c:	4b35      	ldr	r3, [pc, #212]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	4a34      	ldr	r2, [pc, #208]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d312:	6193      	str	r3, [r2, #24]
		target.prev_rad_accel = target.rad_accel;
 800d314:	4b33      	ldr	r3, [pc, #204]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d316:	6a1b      	ldr	r3, [r3, #32]
 800d318:	4a32      	ldr	r2, [pc, #200]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d31a:	6253      	str	r3, [r2, #36]	; 0x24
		target.rad_velo += target.rad_accel*interrupt_time;
 800d31c:	4b31      	ldr	r3, [pc, #196]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d31e:	ed93 7a05 	vldr	s14, [r3, #20]
 800d322:	4b30      	ldr	r3, [pc, #192]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d324:	edd3 7a08 	vldr	s15, [r3, #32]
 800d328:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d3e8 <Interrupt_Set_Target_Speed+0x45c>
 800d32c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d330:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d334:	4b2b      	ldr	r3, [pc, #172]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d336:	edc3 7a05 	vstr	s15, [r3, #20]
		if(ABS(target.rad_velo) >= ABS(max_set.rad_velo))
 800d33a:	4b2a      	ldr	r3, [pc, #168]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d33c:	edd3 7a05 	vldr	s15, [r3, #20]
 800d340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d348:	d505      	bpl.n	800d356 <Interrupt_Set_Target_Speed+0x3ca>
 800d34a:	4b26      	ldr	r3, [pc, #152]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d34c:	edd3 7a05 	vldr	s15, [r3, #20]
 800d350:	eeb1 7a67 	vneg.f32	s14, s15
 800d354:	e002      	b.n	800d35c <Interrupt_Set_Target_Speed+0x3d0>
 800d356:	4b23      	ldr	r3, [pc, #140]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d358:	ed93 7a05 	vldr	s14, [r3, #20]
 800d35c:	4b23      	ldr	r3, [pc, #140]	; (800d3ec <Interrupt_Set_Target_Speed+0x460>)
 800d35e:	edd3 7a05 	vldr	s15, [r3, #20]
 800d362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36a:	d505      	bpl.n	800d378 <Interrupt_Set_Target_Speed+0x3ec>
 800d36c:	4b1f      	ldr	r3, [pc, #124]	; (800d3ec <Interrupt_Set_Target_Speed+0x460>)
 800d36e:	edd3 7a05 	vldr	s15, [r3, #20]
 800d372:	eef1 7a67 	vneg.f32	s15, s15
 800d376:	e002      	b.n	800d37e <Interrupt_Set_Target_Speed+0x3f2>
 800d378:	4b1c      	ldr	r3, [pc, #112]	; (800d3ec <Interrupt_Set_Target_Speed+0x460>)
 800d37a:	edd3 7a05 	vldr	s15, [r3, #20]
 800d37e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	db0b      	blt.n	800d3a0 <Interrupt_Set_Target_Speed+0x414>
			target.rad_velo = max_set.rad_velo;
 800d388:	4b18      	ldr	r3, [pc, #96]	; (800d3ec <Interrupt_Set_Target_Speed+0x460>)
 800d38a:	695b      	ldr	r3, [r3, #20]
 800d38c:	4a15      	ldr	r2, [pc, #84]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d38e:	6153      	str	r3, [r2, #20]
			if(run_mode == TURN_MODE) target.rad_accel = 0.0f;
 800d390:	4b13      	ldr	r3, [pc, #76]	; (800d3e0 <Interrupt_Set_Target_Speed+0x454>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b02      	cmp	r3, #2
 800d396:	d103      	bne.n	800d3a0 <Interrupt_Set_Target_Speed+0x414>
 800d398:	4b12      	ldr	r3, [pc, #72]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d39a:	f04f 0200 	mov.w	r2, #0
 800d39e:	621a      	str	r2, [r3, #32]
		target.radian += target.rad_velo*interrupt_time;
 800d3a0:	4b10      	ldr	r3, [pc, #64]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3a2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800d3a6:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3a8:	edd3 7a05 	vldr	s15, [r3, #20]
 800d3ac:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800d3e8 <Interrupt_Set_Target_Speed+0x45c>
 800d3b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3ba:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		target.I_rad_velo += target.rad_velo;
 800d3be:	4b09      	ldr	r3, [pc, #36]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3c0:	ed93 7a07 	vldr	s14, [r3, #28]
 800d3c4:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3c6:	edd3 7a05 	vldr	s15, [r3, #20]
 800d3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ce:	4b05      	ldr	r3, [pc, #20]	; (800d3e4 <Interrupt_Set_Target_Speed+0x458>)
 800d3d0:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800d3d4:	bf00      	nop
 800d3d6:	3708      	adds	r7, #8
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	ecbd 8b02 	vpop	{d8}
 800d3de:	bdb0      	pop	{r4, r5, r7, pc}
 800d3e0:	20001708 	.word	0x20001708
 800d3e4:	2001b6a0 	.word	0x2001b6a0
 800d3e8:	3a83126f 	.word	0x3a83126f
 800d3ec:	2001b1b4 	.word	0x2001b1b4

0800d3f0 <Sensor_TurnOffLED>:
										 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000};

static uint16_t		adc_value[NUM_ADC];		// AD変換値

void Sensor_TurnOffLED()
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	af00      	add	r7, sp, #0
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	71fb      	strb	r3, [r7, #7]
 800d3fa:	e012      	b.n	800d422 <Sensor_TurnOffLED+0x32>
		led_on_pattern[i] = 0x00000000;
 800d3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d400:	4a0d      	ldr	r2, [pc, #52]	; (800d438 <Sensor_TurnOffLED+0x48>)
 800d402:	2100      	movs	r1, #0
 800d404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		led_off_pattern[i] = (uint32_t)SENSOR_ALL_PATTERN << 16;
 800d408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d40c:	4a0b      	ldr	r2, [pc, #44]	; (800d43c <Sensor_TurnOffLED+0x4c>)
 800d40e:	f04f 71d8 	mov.w	r1, #28311552	; 0x1b00000
 800d412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int8_t i = 0; i < NUM_ADC; i++ ) {
 800d416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	3301      	adds	r3, #1
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	71fb      	strb	r3, [r7, #7]
 800d422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d426:	2b09      	cmp	r3, #9
 800d428:	dde8      	ble.n	800d3fc <Sensor_TurnOffLED+0xc>
	}
}
 800d42a:	bf00      	nop
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	20000238 	.word	0x20000238
 800d43c:	20000260 	.word	0x20000260

0800d440 <Sensor_TurnOnLED>:

void Sensor_TurnOnLED()
{
 800d440:	b580      	push	{r7, lr}
 800d442:	af00      	add	r7, sp, #0
	Sensor_TurnOffLED();
 800d444:	f7ff ffd4 	bl	800d3f0 <Sensor_TurnOffLED>
	led_on_pattern[LED_SL_ON] = photo4_Pin;
 800d448:	4b07      	ldr	r3, [pc, #28]	; (800d468 <Sensor_TurnOnLED+0x28>)
 800d44a:	2280      	movs	r2, #128	; 0x80
 800d44c:	605a      	str	r2, [r3, #4]
	led_on_pattern[LED_SR_ON] = photo3_Pin;
 800d44e:	4b06      	ldr	r3, [pc, #24]	; (800d468 <Sensor_TurnOnLED+0x28>)
 800d450:	2220      	movs	r2, #32
 800d452:	60da      	str	r2, [r3, #12]
	led_on_pattern[LED_FL_ON] = photo2_Pin;
 800d454:	4b04      	ldr	r3, [pc, #16]	; (800d468 <Sensor_TurnOnLED+0x28>)
 800d456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d45a:	615a      	str	r2, [r3, #20]
	led_on_pattern[LED_FR_ON] = photo1_Pin;
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <Sensor_TurnOnLED+0x28>)
 800d45e:	2210      	movs	r2, #16
 800d460:	61da      	str	r2, [r3, #28]
	//led_on_pattern[LED_SL_OFF] = (uint32_t)LED1_Pin;
	//led_on_pattern[LED_FL_OFF] = (uint32_t)LED4_Pin;
}
 800d462:	bf00      	nop
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20000238 	.word	0x20000238

0800d46c <Sensor_Initialize>:

void Sensor_Initialize()
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	af00      	add	r7, sp, #0
	htim1.Instance->DIER |= TIM_DIER_CC1DE | TIM_DIER_CC2DE;
 800d470:	4b1a      	ldr	r3, [pc, #104]	; (800d4dc <Sensor_Initialize+0x70>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	4b19      	ldr	r3, [pc, #100]	; (800d4dc <Sensor_Initialize+0x70>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 800d47e:	60da      	str	r2, [r3, #12]
	__HAL_TIM_MOE_ENABLE(&htim1);
 800d480:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <Sensor_Initialize+0x70>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d486:	4b15      	ldr	r3, [pc, #84]	; (800d4dc <Sensor_Initialize+0x70>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d48e:	645a      	str	r2, [r3, #68]	; 0x44
	__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800d490:	4b12      	ldr	r3, [pc, #72]	; (800d4dc <Sensor_Initialize+0x70>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f06f 0201 	mvn.w	r2, #1
 800d498:	611a      	str	r2, [r3, #16]
	Sensor_TurnOnLED();
 800d49a:	f7ff ffd1 	bl	800d440 <Sensor_TurnOnLED>
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC1], (uint32_t)led_on_pattern,  (uint32_t)(&(GPIOC->BSRR)), NUM_ADC);//ODR
 800d49e:	4b0f      	ldr	r3, [pc, #60]	; (800d4dc <Sensor_Initialize+0x70>)
 800d4a0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800d4a2:	490f      	ldr	r1, [pc, #60]	; (800d4e0 <Sensor_Initialize+0x74>)
 800d4a4:	230a      	movs	r3, #10
 800d4a6:	4a0f      	ldr	r2, [pc, #60]	; (800d4e4 <Sensor_Initialize+0x78>)
 800d4a8:	f00a fcee 	bl	8017e88 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC2], (uint32_t)led_off_pattern, (uint32_t)(&(GPIOC->BSRR)), NUM_ADC);//ODR
 800d4ac:	4b0b      	ldr	r3, [pc, #44]	; (800d4dc <Sensor_Initialize+0x70>)
 800d4ae:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800d4b0:	490d      	ldr	r1, [pc, #52]	; (800d4e8 <Sensor_Initialize+0x7c>)
 800d4b2:	230a      	movs	r3, #10
 800d4b4:	4a0b      	ldr	r2, [pc, #44]	; (800d4e4 <Sensor_Initialize+0x78>)
 800d4b6:	f00a fce7 	bl	8017e88 <HAL_DMA_Start_IT>
	Sensor_StartADC();
 800d4ba:	f000 f817 	bl	800d4ec <Sensor_StartADC>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800d4be:	2100      	movs	r1, #0
 800d4c0:	4806      	ldr	r0, [pc, #24]	; (800d4dc <Sensor_Initialize+0x70>)
 800d4c2:	f00c fe5b 	bl	801a17c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800d4c6:	2104      	movs	r1, #4
 800d4c8:	4804      	ldr	r0, [pc, #16]	; (800d4dc <Sensor_Initialize+0x70>)
 800d4ca:	f00c fe57 	bl	801a17c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800d4ce:	2108      	movs	r1, #8
 800d4d0:	4802      	ldr	r0, [pc, #8]	; (800d4dc <Sensor_Initialize+0x70>)
 800d4d2:	f00c fe53 	bl	801a17c <HAL_TIM_PWM_Start>
}
 800d4d6:	bf00      	nop
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2001bb40 	.word	0x2001bb40
 800d4e0:	20000238 	.word	0x20000238
 800d4e4:	40020818 	.word	0x40020818
 800d4e8:	20000260 	.word	0x20000260

0800d4ec <Sensor_StartADC>:

void Sensor_StartADC()
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_value, NUM_ADC);
 800d4f0:	220a      	movs	r2, #10
 800d4f2:	4903      	ldr	r1, [pc, #12]	; (800d500 <Sensor_StartADC+0x14>)
 800d4f4:	4803      	ldr	r0, [pc, #12]	; (800d504 <Sensor_StartADC+0x18>)
 800d4f6:	f009 fee7 	bl	80172c8 <HAL_ADC_Start_DMA>
}
 800d4fa:	bf00      	nop
 800d4fc:	bd80      	pop	{r7, pc}
 800d4fe:	bf00      	nop
 800d500:	20000288 	.word	0x20000288
 800d504:	2001b7c0 	.word	0x2001b7c0

0800d508 <Sensor_GetValue>:
{
	return adc_value[num];
}

int16_t Sensor_GetValue(t_sensor_dir dir)
{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	4603      	mov	r3, r0
 800d510:	71fb      	strb	r3, [r7, #7]
	switch(dir)
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	3b01      	subs	r3, #1
 800d516:	2b03      	cmp	r3, #3
 800d518:	d82a      	bhi.n	800d570 <Sensor_GetValue+0x68>
 800d51a:	a201      	add	r2, pc, #4	; (adr r2, 800d520 <Sensor_GetValue+0x18>)
 800d51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d520:	0800d561 	.word	0x0800d561
 800d524:	0800d551 	.word	0x0800d551
 800d528:	0800d531 	.word	0x0800d531
 800d52c:	0800d541 	.word	0x0800d541
	{
		case sensor_fl:
			return ((int16_t)adc_value[LED_FL_ON] - (int16_t)adc_value[LED_FL_OFF]);
 800d530:	4b13      	ldr	r3, [pc, #76]	; (800d580 <Sensor_GetValue+0x78>)
 800d532:	895a      	ldrh	r2, [r3, #10]
 800d534:	4b12      	ldr	r3, [pc, #72]	; (800d580 <Sensor_GetValue+0x78>)
 800d536:	899b      	ldrh	r3, [r3, #12]
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	b21b      	sxth	r3, r3
 800d53e:	e018      	b.n	800d572 <Sensor_GetValue+0x6a>
			break;
		case sensor_fr:
			return ((int16_t)adc_value[LED_FR_ON] - (int16_t)adc_value[LED_FR_OFF]);
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <Sensor_GetValue+0x78>)
 800d542:	89da      	ldrh	r2, [r3, #14]
 800d544:	4b0e      	ldr	r3, [pc, #56]	; (800d580 <Sensor_GetValue+0x78>)
 800d546:	8a1b      	ldrh	r3, [r3, #16]
 800d548:	1ad3      	subs	r3, r2, r3
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	b21b      	sxth	r3, r3
 800d54e:	e010      	b.n	800d572 <Sensor_GetValue+0x6a>
			break;
		case sensor_sr:
			return ((int16_t)adc_value[LED_SR_ON] - (int16_t)adc_value[LED_SR_OFF]);
 800d550:	4b0b      	ldr	r3, [pc, #44]	; (800d580 <Sensor_GetValue+0x78>)
 800d552:	88da      	ldrh	r2, [r3, #6]
 800d554:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <Sensor_GetValue+0x78>)
 800d556:	891b      	ldrh	r3, [r3, #8]
 800d558:	1ad3      	subs	r3, r2, r3
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	b21b      	sxth	r3, r3
 800d55e:	e008      	b.n	800d572 <Sensor_GetValue+0x6a>
			break;
		case sensor_sl:
			return ((int16_t)adc_value[LED_SL_ON] - (int16_t)adc_value[LED_SL_OFF]);
 800d560:	4b07      	ldr	r3, [pc, #28]	; (800d580 <Sensor_GetValue+0x78>)
 800d562:	885a      	ldrh	r2, [r3, #2]
 800d564:	4b06      	ldr	r3, [pc, #24]	; (800d580 <Sensor_GetValue+0x78>)
 800d566:	889b      	ldrh	r3, [r3, #4]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	b29b      	uxth	r3, r3
 800d56c:	b21b      	sxth	r3, r3
 800d56e:	e000      	b.n	800d572 <Sensor_GetValue+0x6a>
			break;
	}
	return 0;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	370c      	adds	r7, #12
 800d576:	46bd      	mov	sp, r7
 800d578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57c:	4770      	bx	lr
 800d57e:	bf00      	nop
 800d580:	20000288 	.word	0x20000288

0800d584 <Sensor_CalcDistance>:

float Sensor_CalcDistance(t_sensor_dir dir,int16_t value)
{
 800d584:	b480      	push	{r7}
 800d586:	b089      	sub	sp, #36	; 0x24
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	460a      	mov	r2, r1
 800d58e:	71fb      	strb	r3, [r7, #7]
 800d590:	4613      	mov	r3, r2
 800d592:	80bb      	strh	r3, [r7, #4]
	float distance = 0.0f;
 800d594:	f04f 0300 	mov.w	r3, #0
 800d598:	61fb      	str	r3, [r7, #28]
	int array_length = 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	617b      	str	r3, [r7, #20]
	int count = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	61bb      	str	r3, [r7, #24]
	float m,n;
	switch(dir)
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	2b03      	cmp	r3, #3
 800d5a8:	f200 822b 	bhi.w	800da02 <Sensor_CalcDistance+0x47e>
 800d5ac:	a201      	add	r2, pc, #4	; (adr r2, 800d5b4 <Sensor_CalcDistance+0x30>)
 800d5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b2:	bf00      	nop
 800d5b4:	0800d8dd 	.word	0x0800d8dd
 800d5b8:	0800d7d5 	.word	0x0800d7d5
 800d5bc:	0800d6cd 	.word	0x0800d6cd
 800d5c0:	0800d5c5 	.word	0x0800d5c5
	{
		case sensor_fr:
			array_length = sizeof(sens_front_length_table) / sizeof(uint16_t);
 800d5c4:	2313      	movs	r3, #19
 800d5c6:	617b      	str	r3, [r7, #20]
			if(value >= sens_fr_table[0]) distance = (float)sens_front_length_table[0];
 800d5c8:	f640 6274 	movw	r2, #3700	; 0xe74
 800d5cc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d5d0:	4293      	cmp	r3, r2
 800d5d2:	db06      	blt.n	800d5e2 <Sensor_CalcDistance+0x5e>
 800d5d4:	eddf 7ac9 	vldr	s15, [pc, #804]	; 800d8fc <Sensor_CalcDistance+0x378>
 800d5d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5dc:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				m = (float)(sens_fr_table[count] - value);
				n = (float)(value - sens_fr_table[count+1]);
				distance = (n*(float)sens_front_length_table[count] + m*(float)sens_front_length_table[count+1])/(m+n);
			}
			break;
 800d5e0:	e20f      	b.n	800da02 <Sensor_CalcDistance+0x47e>
			else if (value <= sens_fr_table[array_length-1]) distance = (float)sens_front_length_table[array_length-1];
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	4ac6      	ldr	r2, [pc, #792]	; (800d900 <Sensor_CalcDistance+0x37c>)
 800d5e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	dc0b      	bgt.n	800d60c <Sensor_CalcDistance+0x88>
 800d5f4:	697b      	ldr	r3, [r7, #20]
 800d5f6:	3b01      	subs	r3, #1
 800d5f8:	4ac2      	ldr	r2, [pc, #776]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d5fa:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d5fe:	ee07 3a90 	vmov	s15, r3
 800d602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d606:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d60a:	e1fa      	b.n	800da02 <Sensor_CalcDistance+0x47e>
				for(count = 0; count < array_length-1;count++)
 800d60c:	2300      	movs	r3, #0
 800d60e:	61bb      	str	r3, [r7, #24]
 800d610:	e013      	b.n	800d63a <Sensor_CalcDistance+0xb6>
					if(value <=sens_fr_table[count] && value > sens_fr_table[count+1]) break;
 800d612:	4abb      	ldr	r2, [pc, #748]	; (800d900 <Sensor_CalcDistance+0x37c>)
 800d614:	69bb      	ldr	r3, [r7, #24]
 800d616:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d61a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d61e:	429a      	cmp	r2, r3
 800d620:	dc08      	bgt.n	800d634 <Sensor_CalcDistance+0xb0>
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	3301      	adds	r3, #1
 800d626:	4ab6      	ldr	r2, [pc, #728]	; (800d900 <Sensor_CalcDistance+0x37c>)
 800d628:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d62c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d630:	429a      	cmp	r2, r3
 800d632:	dc08      	bgt.n	800d646 <Sensor_CalcDistance+0xc2>
				for(count = 0; count < array_length-1;count++)
 800d634:	69bb      	ldr	r3, [r7, #24]
 800d636:	3301      	adds	r3, #1
 800d638:	61bb      	str	r3, [r7, #24]
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	3b01      	subs	r3, #1
 800d63e:	69ba      	ldr	r2, [r7, #24]
 800d640:	429a      	cmp	r2, r3
 800d642:	dbe6      	blt.n	800d612 <Sensor_CalcDistance+0x8e>
 800d644:	e000      	b.n	800d648 <Sensor_CalcDistance+0xc4>
					if(value <=sens_fr_table[count] && value > sens_fr_table[count+1]) break;
 800d646:	bf00      	nop
				m = (float)(sens_fr_table[count] - value);
 800d648:	4aad      	ldr	r2, [pc, #692]	; (800d900 <Sensor_CalcDistance+0x37c>)
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d650:	461a      	mov	r2, r3
 800d652:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d656:	1ad3      	subs	r3, r2, r3
 800d658:	ee07 3a90 	vmov	s15, r3
 800d65c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d660:	edc7 7a04 	vstr	s15, [r7, #16]
				n = (float)(value - sens_fr_table[count+1]);
 800d664:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d668:	69ba      	ldr	r2, [r7, #24]
 800d66a:	3201      	adds	r2, #1
 800d66c:	49a4      	ldr	r1, [pc, #656]	; (800d900 <Sensor_CalcDistance+0x37c>)
 800d66e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d672:	1a9b      	subs	r3, r3, r2
 800d674:	ee07 3a90 	vmov	s15, r3
 800d678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d67c:	edc7 7a03 	vstr	s15, [r7, #12]
				distance = (n*(float)sens_front_length_table[count] + m*(float)sens_front_length_table[count+1])/(m+n);
 800d680:	4aa0      	ldr	r2, [pc, #640]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d682:	69bb      	ldr	r3, [r7, #24]
 800d684:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d688:	ee07 3a90 	vmov	s15, r3
 800d68c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d690:	edd7 7a03 	vldr	s15, [r7, #12]
 800d694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	3301      	adds	r3, #1
 800d69c:	4a99      	ldr	r2, [pc, #612]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d69e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6a2:	ee07 3a90 	vmov	s15, r3
 800d6a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d6aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800d6ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6b2:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d6b6:	ed97 7a04 	vldr	s14, [r7, #16]
 800d6ba:	edd7 7a03 	vldr	s15, [r7, #12]
 800d6be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6c6:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d6ca:	e19a      	b.n	800da02 <Sensor_CalcDistance+0x47e>
		case sensor_fl:
			array_length = sizeof(sens_front_length_table) / sizeof(uint16_t);
 800d6cc:	2313      	movs	r3, #19
 800d6ce:	617b      	str	r3, [r7, #20]
			if(value >= sens_fl_table[0]) distance = (float)sens_front_length_table[0];
 800d6d0:	f640 6206 	movw	r2, #3590	; 0xe06
 800d6d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	db06      	blt.n	800d6ea <Sensor_CalcDistance+0x166>
 800d6dc:	eddf 7a87 	vldr	s15, [pc, #540]	; 800d8fc <Sensor_CalcDistance+0x378>
 800d6e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6e4:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				m = (float)(sens_fl_table[count] - value);
				n = (float)(value - sens_fl_table[count+1]);
				distance = (n*(float)sens_front_length_table[count] + m*(float)sens_front_length_table[count+1])/(m+n);
			}
			break;
 800d6e8:	e18b      	b.n	800da02 <Sensor_CalcDistance+0x47e>
			else if (value <= sens_fl_table[array_length-1]) distance = (float)sens_front_length_table[array_length-1];
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	4a86      	ldr	r2, [pc, #536]	; (800d908 <Sensor_CalcDistance+0x384>)
 800d6f0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d6f4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	dc0b      	bgt.n	800d714 <Sensor_CalcDistance+0x190>
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	3b01      	subs	r3, #1
 800d700:	4a80      	ldr	r2, [pc, #512]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d702:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d706:	ee07 3a90 	vmov	s15, r3
 800d70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d70e:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d712:	e176      	b.n	800da02 <Sensor_CalcDistance+0x47e>
				for(count = 0; count < array_length-1;count++)
 800d714:	2300      	movs	r3, #0
 800d716:	61bb      	str	r3, [r7, #24]
 800d718:	e013      	b.n	800d742 <Sensor_CalcDistance+0x1be>
					if(value <=sens_fl_table[count] && value > sens_fl_table[count+1]) break;
 800d71a:	4a7b      	ldr	r2, [pc, #492]	; (800d908 <Sensor_CalcDistance+0x384>)
 800d71c:	69bb      	ldr	r3, [r7, #24]
 800d71e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d722:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d726:	429a      	cmp	r2, r3
 800d728:	dc08      	bgt.n	800d73c <Sensor_CalcDistance+0x1b8>
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	3301      	adds	r3, #1
 800d72e:	4a76      	ldr	r2, [pc, #472]	; (800d908 <Sensor_CalcDistance+0x384>)
 800d730:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d734:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d738:	429a      	cmp	r2, r3
 800d73a:	dc08      	bgt.n	800d74e <Sensor_CalcDistance+0x1ca>
				for(count = 0; count < array_length-1;count++)
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	3301      	adds	r3, #1
 800d740:	61bb      	str	r3, [r7, #24]
 800d742:	697b      	ldr	r3, [r7, #20]
 800d744:	3b01      	subs	r3, #1
 800d746:	69ba      	ldr	r2, [r7, #24]
 800d748:	429a      	cmp	r2, r3
 800d74a:	dbe6      	blt.n	800d71a <Sensor_CalcDistance+0x196>
 800d74c:	e000      	b.n	800d750 <Sensor_CalcDistance+0x1cc>
					if(value <=sens_fl_table[count] && value > sens_fl_table[count+1]) break;
 800d74e:	bf00      	nop
				m = (float)(sens_fl_table[count] - value);
 800d750:	4a6d      	ldr	r2, [pc, #436]	; (800d908 <Sensor_CalcDistance+0x384>)
 800d752:	69bb      	ldr	r3, [r7, #24]
 800d754:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d758:	461a      	mov	r2, r3
 800d75a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	ee07 3a90 	vmov	s15, r3
 800d764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d768:	edc7 7a04 	vstr	s15, [r7, #16]
				n = (float)(value - sens_fl_table[count+1]);
 800d76c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d770:	69ba      	ldr	r2, [r7, #24]
 800d772:	3201      	adds	r2, #1
 800d774:	4964      	ldr	r1, [pc, #400]	; (800d908 <Sensor_CalcDistance+0x384>)
 800d776:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d77a:	1a9b      	subs	r3, r3, r2
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d784:	edc7 7a03 	vstr	s15, [r7, #12]
				distance = (n*(float)sens_front_length_table[count] + m*(float)sens_front_length_table[count+1])/(m+n);
 800d788:	4a5e      	ldr	r2, [pc, #376]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d78a:	69bb      	ldr	r3, [r7, #24]
 800d78c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d798:	edd7 7a03 	vldr	s15, [r7, #12]
 800d79c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7a0:	69bb      	ldr	r3, [r7, #24]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	4a57      	ldr	r2, [pc, #348]	; (800d904 <Sensor_CalcDistance+0x380>)
 800d7a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d7aa:	ee07 3a90 	vmov	s15, r3
 800d7ae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d7b2:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7ba:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d7be:	ed97 7a04 	vldr	s14, [r7, #16]
 800d7c2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d7c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ce:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d7d2:	e116      	b.n	800da02 <Sensor_CalcDistance+0x47e>
		case sensor_sr:
			array_length = sizeof(sens_side_length_table) / sizeof(uint16_t);
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	617b      	str	r3, [r7, #20]
			if(value >= sens_sr_table[0]) distance = (float)sens_side_length_table[0];
 800d7d8:	f640 5216 	movw	r2, #3350	; 0xd16
 800d7dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	db06      	blt.n	800d7f2 <Sensor_CalcDistance+0x26e>
 800d7e4:	eddf 7a49 	vldr	s15, [pc, #292]	; 800d90c <Sensor_CalcDistance+0x388>
 800d7e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7ec:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				m = (float)(sens_sr_table[count] - value);
				n = (float)(value - sens_sr_table[count+1]);
				distance = (n*(float)sens_side_length_table[count] + m*(float)sens_side_length_table[count+1])/(m+n);
			}
			break;
 800d7f0:	e107      	b.n	800da02 <Sensor_CalcDistance+0x47e>
			else if (value <= sens_sr_table[array_length-1]) distance = (float)sens_side_length_table[array_length-1];
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	3b01      	subs	r3, #1
 800d7f6:	4a46      	ldr	r2, [pc, #280]	; (800d910 <Sensor_CalcDistance+0x38c>)
 800d7f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d7fc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d800:	429a      	cmp	r2, r3
 800d802:	dc0b      	bgt.n	800d81c <Sensor_CalcDistance+0x298>
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	3b01      	subs	r3, #1
 800d808:	4a42      	ldr	r2, [pc, #264]	; (800d914 <Sensor_CalcDistance+0x390>)
 800d80a:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d816:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d81a:	e0f2      	b.n	800da02 <Sensor_CalcDistance+0x47e>
				for(count = 0; count < array_length-1;count++)
 800d81c:	2300      	movs	r3, #0
 800d81e:	61bb      	str	r3, [r7, #24]
 800d820:	e013      	b.n	800d84a <Sensor_CalcDistance+0x2c6>
					if(value <=sens_sr_table[count] && value > sens_sr_table[count+1]) break;
 800d822:	4a3b      	ldr	r2, [pc, #236]	; (800d910 <Sensor_CalcDistance+0x38c>)
 800d824:	69bb      	ldr	r3, [r7, #24]
 800d826:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d82a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d82e:	429a      	cmp	r2, r3
 800d830:	dc08      	bgt.n	800d844 <Sensor_CalcDistance+0x2c0>
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	3301      	adds	r3, #1
 800d836:	4a36      	ldr	r2, [pc, #216]	; (800d910 <Sensor_CalcDistance+0x38c>)
 800d838:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d83c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d840:	429a      	cmp	r2, r3
 800d842:	dc08      	bgt.n	800d856 <Sensor_CalcDistance+0x2d2>
				for(count = 0; count < array_length-1;count++)
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	3301      	adds	r3, #1
 800d848:	61bb      	str	r3, [r7, #24]
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	3b01      	subs	r3, #1
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	429a      	cmp	r2, r3
 800d852:	dbe6      	blt.n	800d822 <Sensor_CalcDistance+0x29e>
 800d854:	e000      	b.n	800d858 <Sensor_CalcDistance+0x2d4>
					if(value <=sens_sr_table[count] && value > sens_sr_table[count+1]) break;
 800d856:	bf00      	nop
				m = (float)(sens_sr_table[count] - value);
 800d858:	4a2d      	ldr	r2, [pc, #180]	; (800d910 <Sensor_CalcDistance+0x38c>)
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d860:	461a      	mov	r2, r3
 800d862:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d866:	1ad3      	subs	r3, r2, r3
 800d868:	ee07 3a90 	vmov	s15, r3
 800d86c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d870:	edc7 7a04 	vstr	s15, [r7, #16]
				n = (float)(value - sens_sr_table[count+1]);
 800d874:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d878:	69ba      	ldr	r2, [r7, #24]
 800d87a:	3201      	adds	r2, #1
 800d87c:	4924      	ldr	r1, [pc, #144]	; (800d910 <Sensor_CalcDistance+0x38c>)
 800d87e:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d882:	1a9b      	subs	r3, r3, r2
 800d884:	ee07 3a90 	vmov	s15, r3
 800d888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d88c:	edc7 7a03 	vstr	s15, [r7, #12]
				distance = (n*(float)sens_side_length_table[count] + m*(float)sens_side_length_table[count+1])/(m+n);
 800d890:	4a20      	ldr	r2, [pc, #128]	; (800d914 <Sensor_CalcDistance+0x390>)
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d898:	ee07 3a90 	vmov	s15, r3
 800d89c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d8a0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	4a19      	ldr	r2, [pc, #100]	; (800d914 <Sensor_CalcDistance+0x390>)
 800d8ae:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d8b2:	ee07 3a90 	vmov	s15, r3
 800d8b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d8ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8c2:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d8c6:	ed97 7a04 	vldr	s14, [r7, #16]
 800d8ca:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8d6:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d8da:	e092      	b.n	800da02 <Sensor_CalcDistance+0x47e>
		case sensor_sl:
			array_length = sizeof(sens_side_length_table) / sizeof(uint16_t);
 800d8dc:	230c      	movs	r3, #12
 800d8de:	617b      	str	r3, [r7, #20]
			if(value >= sens_sl_table[0]) distance = (float)sens_side_length_table[0];
 800d8e0:	f640 525c 	movw	r2, #3420	; 0xd5c
 800d8e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d8e8:	4293      	cmp	r3, r2
 800d8ea:	db15      	blt.n	800d918 <Sensor_CalcDistance+0x394>
 800d8ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 800d90c <Sensor_CalcDistance+0x388>
 800d8f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f4:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				m = (float)(sens_sl_table[count] - value);
				n = (float)(value - sens_sl_table[count+1]);
				distance = (n*(float)sens_side_length_table[count] + m*(float)sens_side_length_table[count+1])/(m+n);
			}
			break;
 800d8f8:	e082      	b.n	800da00 <Sensor_CalcDistance+0x47c>
 800d8fa:	bf00      	nop
 800d8fc:	00000023 	.word	0x00000023
 800d900:	0801f498 	.word	0x0801f498
 800d904:	0801f470 	.word	0x0801f470
 800d908:	0801f4c0 	.word	0x0801f4c0
 800d90c:	00000019 	.word	0x00000019
 800d910:	0801f440 	.word	0x0801f440
 800d914:	0801f428 	.word	0x0801f428
			else if (value <= sens_sl_table[array_length-1]) distance = (float)sens_side_length_table[array_length-1];
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	3b01      	subs	r3, #1
 800d91c:	4a3e      	ldr	r2, [pc, #248]	; (800da18 <Sensor_CalcDistance+0x494>)
 800d91e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d922:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d926:	429a      	cmp	r2, r3
 800d928:	dc0b      	bgt.n	800d942 <Sensor_CalcDistance+0x3be>
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	3b01      	subs	r3, #1
 800d92e:	4a3b      	ldr	r2, [pc, #236]	; (800da1c <Sensor_CalcDistance+0x498>)
 800d930:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d934:	ee07 3a90 	vmov	s15, r3
 800d938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d93c:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800d940:	e05e      	b.n	800da00 <Sensor_CalcDistance+0x47c>
				for(count = 0; count < array_length-1;count++)
 800d942:	2300      	movs	r3, #0
 800d944:	61bb      	str	r3, [r7, #24]
 800d946:	e013      	b.n	800d970 <Sensor_CalcDistance+0x3ec>
					if(value <=sens_sl_table[count] && value > sens_sl_table[count+1]) break;
 800d948:	4a33      	ldr	r2, [pc, #204]	; (800da18 <Sensor_CalcDistance+0x494>)
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d950:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d954:	429a      	cmp	r2, r3
 800d956:	dc08      	bgt.n	800d96a <Sensor_CalcDistance+0x3e6>
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	3301      	adds	r3, #1
 800d95c:	4a2e      	ldr	r2, [pc, #184]	; (800da18 <Sensor_CalcDistance+0x494>)
 800d95e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d962:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d966:	429a      	cmp	r2, r3
 800d968:	dc08      	bgt.n	800d97c <Sensor_CalcDistance+0x3f8>
				for(count = 0; count < array_length-1;count++)
 800d96a:	69bb      	ldr	r3, [r7, #24]
 800d96c:	3301      	adds	r3, #1
 800d96e:	61bb      	str	r3, [r7, #24]
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	3b01      	subs	r3, #1
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	429a      	cmp	r2, r3
 800d978:	dbe6      	blt.n	800d948 <Sensor_CalcDistance+0x3c4>
 800d97a:	e000      	b.n	800d97e <Sensor_CalcDistance+0x3fa>
					if(value <=sens_sl_table[count] && value > sens_sl_table[count+1]) break;
 800d97c:	bf00      	nop
				m = (float)(sens_sl_table[count] - value);
 800d97e:	4a26      	ldr	r2, [pc, #152]	; (800da18 <Sensor_CalcDistance+0x494>)
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d986:	461a      	mov	r2, r3
 800d988:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d996:	edc7 7a04 	vstr	s15, [r7, #16]
				n = (float)(value - sens_sl_table[count+1]);
 800d99a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d99e:	69ba      	ldr	r2, [r7, #24]
 800d9a0:	3201      	adds	r2, #1
 800d9a2:	491d      	ldr	r1, [pc, #116]	; (800da18 <Sensor_CalcDistance+0x494>)
 800d9a4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 800d9a8:	1a9b      	subs	r3, r3, r2
 800d9aa:	ee07 3a90 	vmov	s15, r3
 800d9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9b2:	edc7 7a03 	vstr	s15, [r7, #12]
				distance = (n*(float)sens_side_length_table[count] + m*(float)sens_side_length_table[count+1])/(m+n);
 800d9b6:	4a19      	ldr	r2, [pc, #100]	; (800da1c <Sensor_CalcDistance+0x498>)
 800d9b8:	69bb      	ldr	r3, [r7, #24]
 800d9ba:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d9c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	4a12      	ldr	r2, [pc, #72]	; (800da1c <Sensor_CalcDistance+0x498>)
 800d9d4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800d9d8:	ee07 3a90 	vmov	s15, r3
 800d9dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d9e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800d9e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e8:	ee77 6a27 	vadd.f32	s13, s14, s15
 800d9ec:	ed97 7a04 	vldr	s14, [r7, #16]
 800d9f0:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9fc:	edc7 7a07 	vstr	s15, [r7, #28]
			break;
 800da00:	bf00      	nop
	}
	return distance;
 800da02:	69fb      	ldr	r3, [r7, #28]
 800da04:	ee07 3a90 	vmov	s15, r3
}
 800da08:	eeb0 0a67 	vmov.f32	s0, s15
 800da0c:	3724      	adds	r7, #36	; 0x24
 800da0e:	46bd      	mov	sp, r7
 800da10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da14:	4770      	bx	lr
 800da16:	bf00      	nop
 800da18:	0801f458 	.word	0x0801f458
 800da1c:	0801f428 	.word	0x0801f428

0800da20 <Sensor_GetBatteryValue>:

int16_t Sensor_GetBatteryValue(){
 800da20:	b480      	push	{r7}
 800da22:	af00      	add	r7, sp, #0
	return (adc_value[0] + adc_value[9])/2 ;
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <Sensor_GetBatteryValue+0x24>)
 800da26:	881b      	ldrh	r3, [r3, #0]
 800da28:	461a      	mov	r2, r3
 800da2a:	4b06      	ldr	r3, [pc, #24]	; (800da44 <Sensor_GetBatteryValue+0x24>)
 800da2c:	8a5b      	ldrh	r3, [r3, #18]
 800da2e:	4413      	add	r3, r2
 800da30:	0fda      	lsrs	r2, r3, #31
 800da32:	4413      	add	r3, r2
 800da34:	105b      	asrs	r3, r3, #1
 800da36:	b21b      	sxth	r3, r3
}
 800da38:	4618      	mov	r0, r3
 800da3a:	46bd      	mov	sp, r7
 800da3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	20000288 	.word	0x20000288

0800da48 <filter_init>:
const float dt = 0.001;
float Q_acc = 0.01;
float Q_vel = 0.0008;

void filter_init()
{
 800da48:	b480      	push	{r7}
 800da4a:	af00      	add	r7, sp, #0
	P[0][0] = 0.0;
 800da4c:	4b10      	ldr	r3, [pc, #64]	; (800da90 <filter_init+0x48>)
 800da4e:	f04f 0200 	mov.w	r2, #0
 800da52:	601a      	str	r2, [r3, #0]
	P[0][1] = 0.0;
 800da54:	4b0e      	ldr	r3, [pc, #56]	; (800da90 <filter_init+0x48>)
 800da56:	f04f 0200 	mov.w	r2, #0
 800da5a:	605a      	str	r2, [r3, #4]
	P[1][0] = 0.0;
 800da5c:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <filter_init+0x48>)
 800da5e:	f04f 0200 	mov.w	r2, #0
 800da62:	609a      	str	r2, [r3, #8]
	P[1][1] = 0.0;
 800da64:	4b0a      	ldr	r3, [pc, #40]	; (800da90 <filter_init+0x48>)
 800da66:	f04f 0200 	mov.w	r2, #0
 800da6a:	60da      	str	r2, [r3, #12]

	K[0] = 0.0f;
 800da6c:	4b09      	ldr	r3, [pc, #36]	; (800da94 <filter_init+0x4c>)
 800da6e:	f04f 0200 	mov.w	r2, #0
 800da72:	601a      	str	r2, [r3, #0]
	K[1] = 0.0f;
 800da74:	4b07      	ldr	r3, [pc, #28]	; (800da94 <filter_init+0x4c>)
 800da76:	f04f 0200 	mov.w	r2, #0
 800da7a:	605a      	str	r2, [r3, #4]

	y = 0.0f;
 800da7c:	4b06      	ldr	r3, [pc, #24]	; (800da98 <filter_init+0x50>)
 800da7e:	f04f 0200 	mov.w	r2, #0
 800da82:	601a      	str	r2, [r3, #0]
}
 800da84:	bf00      	nop
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr
 800da8e:	bf00      	nop
 800da90:	2001b7b0 	.word	0x2001b7b0
 800da94:	2001b79c 	.word	0x2001b79c
 800da98:	2001b7a8 	.word	0x2001b7a8

0800da9c <calc_speed_filter>:

float calc_speed_filter(float acc,float velo){
 800da9c:	b480      	push	{r7}
 800da9e:	b087      	sub	sp, #28
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	ed87 0a01 	vstr	s0, [r7, #4]
 800daa6:	edc7 0a00 	vstr	s1, [r7]
	k_v = k_v - k_w*dt + acc*dt;
 800daaa:	4b7a      	ldr	r3, [pc, #488]	; (800dc94 <calc_speed_filter+0x1f8>)
 800daac:	ed93 7a00 	vldr	s14, [r3]
 800dab0:	4b79      	ldr	r3, [pc, #484]	; (800dc98 <calc_speed_filter+0x1fc>)
 800dab2:	edd3 7a00 	vldr	s15, [r3]
 800dab6:	eddf 6a79 	vldr	s13, [pc, #484]	; 800dc9c <calc_speed_filter+0x200>
 800daba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dabe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dac2:	eddf 6a76 	vldr	s13, [pc, #472]	; 800dc9c <calc_speed_filter+0x200>
 800dac6:	edd7 7a01 	vldr	s15, [r7, #4]
 800daca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dace:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dad2:	4b70      	ldr	r3, [pc, #448]	; (800dc94 <calc_speed_filter+0x1f8>)
 800dad4:	edc3 7a00 	vstr	s15, [r3]
	k_w = k_w;
 800dad8:	4b6f      	ldr	r3, [pc, #444]	; (800dc98 <calc_speed_filter+0x1fc>)
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	4a6e      	ldr	r2, [pc, #440]	; (800dc98 <calc_speed_filter+0x1fc>)
 800dade:	6013      	str	r3, [r2, #0]

	P[0][0] += dt*(P[1][1]*dt - P[0][1] - P[1][0] + Q_acc);
 800dae0:	4b6f      	ldr	r3, [pc, #444]	; (800dca0 <calc_speed_filter+0x204>)
 800dae2:	ed93 7a00 	vldr	s14, [r3]
 800dae6:	4b6e      	ldr	r3, [pc, #440]	; (800dca0 <calc_speed_filter+0x204>)
 800dae8:	edd3 7a03 	vldr	s15, [r3, #12]
 800daec:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800dc9c <calc_speed_filter+0x200>
 800daf0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800daf4:	4b6a      	ldr	r3, [pc, #424]	; (800dca0 <calc_speed_filter+0x204>)
 800daf6:	edd3 7a01 	vldr	s15, [r3, #4]
 800dafa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dafe:	4b68      	ldr	r3, [pc, #416]	; (800dca0 <calc_speed_filter+0x204>)
 800db00:	edd3 7a02 	vldr	s15, [r3, #8]
 800db04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800db08:	4b66      	ldr	r3, [pc, #408]	; (800dca4 <calc_speed_filter+0x208>)
 800db0a:	edd3 7a00 	vldr	s15, [r3]
 800db0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db12:	eddf 6a62 	vldr	s13, [pc, #392]	; 800dc9c <calc_speed_filter+0x200>
 800db16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db1e:	4b60      	ldr	r3, [pc, #384]	; (800dca0 <calc_speed_filter+0x204>)
 800db20:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= dt * P[1][1];
 800db24:	4b5e      	ldr	r3, [pc, #376]	; (800dca0 <calc_speed_filter+0x204>)
 800db26:	ed93 7a01 	vldr	s14, [r3, #4]
 800db2a:	4b5d      	ldr	r3, [pc, #372]	; (800dca0 <calc_speed_filter+0x204>)
 800db2c:	edd3 7a03 	vldr	s15, [r3, #12]
 800db30:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800dc9c <calc_speed_filter+0x200>
 800db34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db38:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db3c:	4b58      	ldr	r3, [pc, #352]	; (800dca0 <calc_speed_filter+0x204>)
 800db3e:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= dt * P[1][1];
 800db42:	4b57      	ldr	r3, [pc, #348]	; (800dca0 <calc_speed_filter+0x204>)
 800db44:	ed93 7a02 	vldr	s14, [r3, #8]
 800db48:	4b55      	ldr	r3, [pc, #340]	; (800dca0 <calc_speed_filter+0x204>)
 800db4a:	edd3 7a03 	vldr	s15, [r3, #12]
 800db4e:	eddf 6a53 	vldr	s13, [pc, #332]	; 800dc9c <calc_speed_filter+0x200>
 800db52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800db56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db5a:	4b51      	ldr	r3, [pc, #324]	; (800dca0 <calc_speed_filter+0x204>)
 800db5c:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1]  = P[1][1];
 800db60:	4b4f      	ldr	r3, [pc, #316]	; (800dca0 <calc_speed_filter+0x204>)
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	4a4e      	ldr	r2, [pc, #312]	; (800dca0 <calc_speed_filter+0x204>)
 800db66:	60d3      	str	r3, [r2, #12]

	y = velo - k_v;
 800db68:	4b4a      	ldr	r3, [pc, #296]	; (800dc94 <calc_speed_filter+0x1f8>)
 800db6a:	edd3 7a00 	vldr	s15, [r3]
 800db6e:	ed97 7a00 	vldr	s14, [r7]
 800db72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db76:	4b4c      	ldr	r3, [pc, #304]	; (800dca8 <calc_speed_filter+0x20c>)
 800db78:	edc3 7a00 	vstr	s15, [r3]

	float S = P[0][0] + Q_vel;
 800db7c:	4b48      	ldr	r3, [pc, #288]	; (800dca0 <calc_speed_filter+0x204>)
 800db7e:	ed93 7a00 	vldr	s14, [r3]
 800db82:	4b4a      	ldr	r3, [pc, #296]	; (800dcac <calc_speed_filter+0x210>)
 800db84:	edd3 7a00 	vldr	s15, [r3]
 800db88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db8c:	edc7 7a05 	vstr	s15, [r7, #20]

	K[0] = P[0][0]/S;
 800db90:	4b43      	ldr	r3, [pc, #268]	; (800dca0 <calc_speed_filter+0x204>)
 800db92:	edd3 6a00 	vldr	s13, [r3]
 800db96:	ed97 7a05 	vldr	s14, [r7, #20]
 800db9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db9e:	4b44      	ldr	r3, [pc, #272]	; (800dcb0 <calc_speed_filter+0x214>)
 800dba0:	edc3 7a00 	vstr	s15, [r3]
	K[1] = P[1][0]/S;
 800dba4:	4b3e      	ldr	r3, [pc, #248]	; (800dca0 <calc_speed_filter+0x204>)
 800dba6:	edd3 6a02 	vldr	s13, [r3, #8]
 800dbaa:	ed97 7a05 	vldr	s14, [r7, #20]
 800dbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb2:	4b3f      	ldr	r3, [pc, #252]	; (800dcb0 <calc_speed_filter+0x214>)
 800dbb4:	edc3 7a01 	vstr	s15, [r3, #4]

	k_v = k_v + K[0]*y;
 800dbb8:	4b3d      	ldr	r3, [pc, #244]	; (800dcb0 <calc_speed_filter+0x214>)
 800dbba:	ed93 7a00 	vldr	s14, [r3]
 800dbbe:	4b3a      	ldr	r3, [pc, #232]	; (800dca8 <calc_speed_filter+0x20c>)
 800dbc0:	edd3 7a00 	vldr	s15, [r3]
 800dbc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbc8:	4b32      	ldr	r3, [pc, #200]	; (800dc94 <calc_speed_filter+0x1f8>)
 800dbca:	edd3 7a00 	vldr	s15, [r3]
 800dbce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbd2:	4b30      	ldr	r3, [pc, #192]	; (800dc94 <calc_speed_filter+0x1f8>)
 800dbd4:	edc3 7a00 	vstr	s15, [r3]
	k_w = k_w + K[1]*y;
 800dbd8:	4b35      	ldr	r3, [pc, #212]	; (800dcb0 <calc_speed_filter+0x214>)
 800dbda:	ed93 7a01 	vldr	s14, [r3, #4]
 800dbde:	4b32      	ldr	r3, [pc, #200]	; (800dca8 <calc_speed_filter+0x20c>)
 800dbe0:	edd3 7a00 	vldr	s15, [r3]
 800dbe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbe8:	4b2b      	ldr	r3, [pc, #172]	; (800dc98 <calc_speed_filter+0x1fc>)
 800dbea:	edd3 7a00 	vldr	s15, [r3]
 800dbee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbf2:	4b29      	ldr	r3, [pc, #164]	; (800dc98 <calc_speed_filter+0x1fc>)
 800dbf4:	edc3 7a00 	vstr	s15, [r3]

	float P00_temp = P[0][0];
 800dbf8:	4b29      	ldr	r3, [pc, #164]	; (800dca0 <calc_speed_filter+0x204>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	613b      	str	r3, [r7, #16]
	float P01_temp = P[0][1];
 800dbfe:	4b28      	ldr	r3, [pc, #160]	; (800dca0 <calc_speed_filter+0x204>)
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	60fb      	str	r3, [r7, #12]
	P[0][0] -= K[0] * P00_temp;
 800dc04:	4b26      	ldr	r3, [pc, #152]	; (800dca0 <calc_speed_filter+0x204>)
 800dc06:	ed93 7a00 	vldr	s14, [r3]
 800dc0a:	4b29      	ldr	r3, [pc, #164]	; (800dcb0 <calc_speed_filter+0x214>)
 800dc0c:	edd3 6a00 	vldr	s13, [r3]
 800dc10:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc1c:	4b20      	ldr	r3, [pc, #128]	; (800dca0 <calc_speed_filter+0x204>)
 800dc1e:	edc3 7a00 	vstr	s15, [r3]
	P[0][1] -= K[0] * P01_temp;
 800dc22:	4b1f      	ldr	r3, [pc, #124]	; (800dca0 <calc_speed_filter+0x204>)
 800dc24:	ed93 7a01 	vldr	s14, [r3, #4]
 800dc28:	4b21      	ldr	r3, [pc, #132]	; (800dcb0 <calc_speed_filter+0x214>)
 800dc2a:	edd3 6a00 	vldr	s13, [r3]
 800dc2e:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc3a:	4b19      	ldr	r3, [pc, #100]	; (800dca0 <calc_speed_filter+0x204>)
 800dc3c:	edc3 7a01 	vstr	s15, [r3, #4]
	P[1][0] -= K[1] * P00_temp;
 800dc40:	4b17      	ldr	r3, [pc, #92]	; (800dca0 <calc_speed_filter+0x204>)
 800dc42:	ed93 7a02 	vldr	s14, [r3, #8]
 800dc46:	4b1a      	ldr	r3, [pc, #104]	; (800dcb0 <calc_speed_filter+0x214>)
 800dc48:	edd3 6a01 	vldr	s13, [r3, #4]
 800dc4c:	edd7 7a04 	vldr	s15, [r7, #16]
 800dc50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc58:	4b11      	ldr	r3, [pc, #68]	; (800dca0 <calc_speed_filter+0x204>)
 800dc5a:	edc3 7a02 	vstr	s15, [r3, #8]
	P[1][1] -= K[1] * P01_temp;
 800dc5e:	4b10      	ldr	r3, [pc, #64]	; (800dca0 <calc_speed_filter+0x204>)
 800dc60:	ed93 7a03 	vldr	s14, [r3, #12]
 800dc64:	4b12      	ldr	r3, [pc, #72]	; (800dcb0 <calc_speed_filter+0x214>)
 800dc66:	edd3 6a01 	vldr	s13, [r3, #4]
 800dc6a:	edd7 7a03 	vldr	s15, [r7, #12]
 800dc6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dc72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc76:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <calc_speed_filter+0x204>)
 800dc78:	edc3 7a03 	vstr	s15, [r3, #12]

	return k_v;
 800dc7c:	4b05      	ldr	r3, [pc, #20]	; (800dc94 <calc_speed_filter+0x1f8>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	ee07 3a90 	vmov	s15, r3
}
 800dc84:	eeb0 0a67 	vmov.f32	s0, s15
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
 800dc92:	bf00      	nop
 800dc94:	2001b7a4 	.word	0x2001b7a4
 800dc98:	2001b7ac 	.word	0x2001b7ac
 800dc9c:	3a83126f 	.word	0x3a83126f
 800dca0:	2001b7b0 	.word	0x2001b7b0
 800dca4:	2000000c 	.word	0x2000000c
 800dca8:	2001b7a8 	.word	0x2001b7a8
 800dcac:	20000010 	.word	0x20000010
 800dcb0:	2001b79c 	.word	0x2001b79c

0800dcb4 <Motor_Initialize>:
#define MOT_SET_COMPARE_L_REVERSE(x)	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, x)
#define MOT_SET_COMPARE_R_FORWARD(x)	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, x)
#define MOT_SET_COMPARE_R_REVERSE(x)	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, x)

void Motor_Initialize()
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800dcb8:	2100      	movs	r1, #0
 800dcba:	4808      	ldr	r0, [pc, #32]	; (800dcdc <Motor_Initialize+0x28>)
 800dcbc:	f00c fa5e 	bl	801a17c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800dcc0:	2104      	movs	r1, #4
 800dcc2:	4806      	ldr	r0, [pc, #24]	; (800dcdc <Motor_Initialize+0x28>)
 800dcc4:	f00c fa5a 	bl	801a17c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800dcc8:	2108      	movs	r1, #8
 800dcca:	4804      	ldr	r0, [pc, #16]	; (800dcdc <Motor_Initialize+0x28>)
 800dccc:	f00c fa56 	bl	801a17c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800dcd0:	210c      	movs	r1, #12
 800dcd2:	4802      	ldr	r0, [pc, #8]	; (800dcdc <Motor_Initialize+0x28>)
 800dcd4:	f00c fa52 	bl	801a17c <HAL_TIM_PWM_Start>
}
 800dcd8:	bf00      	nop
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	2001bb80 	.word	0x2001bb80

0800dce0 <Motor_Stop>:

void Motor_Stop(){
 800dce0:	b580      	push	{r7, lr}
 800dce2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800dce4:	2100      	movs	r1, #0
 800dce6:	4809      	ldr	r0, [pc, #36]	; (800dd0c <Motor_Stop+0x2c>)
 800dce8:	f00c fa86 	bl	801a1f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800dcec:	2104      	movs	r1, #4
 800dcee:	4807      	ldr	r0, [pc, #28]	; (800dd0c <Motor_Stop+0x2c>)
 800dcf0:	f00c fa82 	bl	801a1f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 800dcf4:	2108      	movs	r1, #8
 800dcf6:	4805      	ldr	r0, [pc, #20]	; (800dd0c <Motor_Stop+0x2c>)
 800dcf8:	f00c fa7e 	bl	801a1f8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800dcfc:	210c      	movs	r1, #12
 800dcfe:	4803      	ldr	r0, [pc, #12]	; (800dd0c <Motor_Stop+0x2c>)
 800dd00:	f00c fa7a 	bl	801a1f8 <HAL_TIM_PWM_Stop>
	FAN_Motor_Stop();
 800dd04:	f000 f80e 	bl	800dd24 <FAN_Motor_Stop>
}
 800dd08:	bf00      	nop
 800dd0a:	bd80      	pop	{r7, pc}
 800dd0c:	2001bb80 	.word	0x2001bb80

0800dd10 <FAN_Motor_Initialize>:

void FAN_Motor_Initialize()
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800dd14:	2100      	movs	r1, #0
 800dd16:	4802      	ldr	r0, [pc, #8]	; (800dd20 <FAN_Motor_Initialize+0x10>)
 800dd18:	f00c fa30 	bl	801a17c <HAL_TIM_PWM_Start>
}
 800dd1c:	bf00      	nop
 800dd1e:	bd80      	pop	{r7, pc}
 800dd20:	2001b9e0 	.word	0x2001b9e0

0800dd24 <FAN_Motor_Stop>:

void FAN_Motor_Stop(){
 800dd24:	b580      	push	{r7, lr}
 800dd26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 800dd28:	2100      	movs	r1, #0
 800dd2a:	4802      	ldr	r0, [pc, #8]	; (800dd34 <FAN_Motor_Stop+0x10>)
 800dd2c:	f00c fa64 	bl	801a1f8 <HAL_TIM_PWM_Stop>
}
 800dd30:	bf00      	nop
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	2001b9e0 	.word	0x2001b9e0

0800dd38 <Motor_SetDuty_Left>:

void Motor_SetDuty_Left( int16_t duty_l )
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_l;

	if( ABS(duty_l) > MOT_DUTY_MAX ) {
 800dd42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	bfb8      	it	lt
 800dd4a:	425b      	neglt	r3, r3
 800dd4c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd50:	4293      	cmp	r3, r2
 800dd52:	dd13      	ble.n	800dd7c <Motor_SetDuty_Left+0x44>
		pulse_l = (uint32_t)((PCLK1*2) / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800dd54:	f00b f90e 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	099b      	lsrs	r3, r3, #6
 800dd5e:	4a37      	ldr	r2, [pc, #220]	; (800de3c <Motor_SetDuty_Left+0x104>)
 800dd60:	fba2 2303 	umull	r2, r3, r2, r3
 800dd64:	099b      	lsrs	r3, r3, #6
 800dd66:	f240 32b6 	movw	r2, #950	; 0x3b6
 800dd6a:	fb02 f303 	mul.w	r3, r2, r3
 800dd6e:	4a34      	ldr	r2, [pc, #208]	; (800de40 <Motor_SetDuty_Left+0x108>)
 800dd70:	fba2 2303 	umull	r2, r3, r2, r3
 800dd74:	099b      	lsrs	r3, r3, #6
 800dd76:	3b01      	subs	r3, #1
 800dd78:	60fb      	str	r3, [r7, #12]
 800dd7a:	e038      	b.n	800ddee <Motor_SetDuty_Left+0xb6>
	} else if( ABS(duty_l) < MOT_DUTY_MIN ) {
 800dd7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd80:	f113 0f1d 	cmn.w	r3, #29
 800dd84:	db18      	blt.n	800ddb8 <Motor_SetDuty_Left+0x80>
 800dd86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd8a:	2b1d      	cmp	r3, #29
 800dd8c:	dc14      	bgt.n	800ddb8 <Motor_SetDuty_Left+0x80>
		pulse_l = (uint32_t)((PCLK1*2) / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800dd8e:	f00b f8f1 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800dd92:	4603      	mov	r3, r0
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	099b      	lsrs	r3, r3, #6
 800dd98:	4a28      	ldr	r2, [pc, #160]	; (800de3c <Motor_SetDuty_Left+0x104>)
 800dd9a:	fba2 2303 	umull	r2, r3, r2, r3
 800dd9e:	099a      	lsrs	r2, r3, #6
 800dda0:	4613      	mov	r3, r2
 800dda2:	011b      	lsls	r3, r3, #4
 800dda4:	1a9b      	subs	r3, r3, r2
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	461a      	mov	r2, r3
 800ddaa:	4b25      	ldr	r3, [pc, #148]	; (800de40 <Motor_SetDuty_Left+0x108>)
 800ddac:	fba3 2302 	umull	r2, r3, r3, r2
 800ddb0:	099b      	lsrs	r3, r3, #6
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	60fb      	str	r3, [r7, #12]
 800ddb6:	e01a      	b.n	800ddee <Motor_SetDuty_Left+0xb6>
	} else {
		pulse_l = (uint32_t)((PCLK1*2) / PWMFREQ * ABS(duty_l) / 1000) - 1;
 800ddb8:	f00b f8dc 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	005b      	lsls	r3, r3, #1
 800ddc0:	099b      	lsrs	r3, r3, #6
 800ddc2:	4a1e      	ldr	r2, [pc, #120]	; (800de3c <Motor_SetDuty_Left+0x104>)
 800ddc4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc8:	099a      	lsrs	r2, r3, #6
 800ddca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	da03      	bge.n	800ddda <Motor_SetDuty_Left+0xa2>
 800ddd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddd6:	425b      	negs	r3, r3
 800ddd8:	e001      	b.n	800ddde <Motor_SetDuty_Left+0xa6>
 800ddda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddde:	fb02 f303 	mul.w	r3, r2, r3
 800dde2:	4a17      	ldr	r2, [pc, #92]	; (800de40 <Motor_SetDuty_Left+0x108>)
 800dde4:	fba2 2303 	umull	r2, r3, r2, r3
 800dde8:	099b      	lsrs	r3, r3, #6
 800ddea:	3b01      	subs	r3, #1
 800ddec:	60fb      	str	r3, [r7, #12]
	}

	if( duty_l > 0 ) {
 800ddee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd08      	ble.n	800de08 <Motor_SetDuty_Left+0xd0>
		MOT_SET_COMPARE_L_FORWARD( pulse_l );
 800ddf6:	4b13      	ldr	r3, [pc, #76]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_L_REVERSE( 0 );
 800ddfe:	4b11      	ldr	r3, [pc, #68]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	2200      	movs	r2, #0
 800de04:	641a      	str	r2, [r3, #64]	; 0x40
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
	} else {
		MOT_SET_COMPARE_L_FORWARD( 0 );
		MOT_SET_COMPARE_L_REVERSE( 0 );
	}
}
 800de06:	e014      	b.n	800de32 <Motor_SetDuty_Left+0xfa>
	} else if( duty_l < 0 ) {
 800de08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	da08      	bge.n	800de22 <Motor_SetDuty_Left+0xea>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800de10:	4b0c      	ldr	r3, [pc, #48]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	2200      	movs	r2, #0
 800de16:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_L_REVERSE( pulse_l );
 800de18:	4b0a      	ldr	r3, [pc, #40]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800de20:	e007      	b.n	800de32 <Motor_SetDuty_Left+0xfa>
		MOT_SET_COMPARE_L_FORWARD( 0 );
 800de22:	4b08      	ldr	r3, [pc, #32]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2200      	movs	r2, #0
 800de28:	63da      	str	r2, [r3, #60]	; 0x3c
		MOT_SET_COMPARE_L_REVERSE( 0 );
 800de2a:	4b06      	ldr	r3, [pc, #24]	; (800de44 <Motor_SetDuty_Left+0x10c>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2200      	movs	r2, #0
 800de30:	641a      	str	r2, [r3, #64]	; 0x40
}
 800de32:	bf00      	nop
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
 800de3a:	bf00      	nop
 800de3c:	053e2d63 	.word	0x053e2d63
 800de40:	10624dd3 	.word	0x10624dd3
 800de44:	2001bb80 	.word	0x2001bb80

0800de48 <Motor_SetDuty_Right>:

void Motor_SetDuty_Right( int16_t duty_r )
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	4603      	mov	r3, r0
 800de50:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_r;

	if( ABS(duty_r) > MOT_DUTY_MAX ) {
 800de52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de56:	2b00      	cmp	r3, #0
 800de58:	bfb8      	it	lt
 800de5a:	425b      	neglt	r3, r3
 800de5c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800de60:	4293      	cmp	r3, r2
 800de62:	dd13      	ble.n	800de8c <Motor_SetDuty_Right+0x44>
		pulse_r = (uint32_t)((PCLK1*2) / PWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800de64:	f00b f886 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800de68:	4603      	mov	r3, r0
 800de6a:	005b      	lsls	r3, r3, #1
 800de6c:	099b      	lsrs	r3, r3, #6
 800de6e:	4a37      	ldr	r2, [pc, #220]	; (800df4c <Motor_SetDuty_Right+0x104>)
 800de70:	fba2 2303 	umull	r2, r3, r2, r3
 800de74:	099b      	lsrs	r3, r3, #6
 800de76:	f240 32b6 	movw	r2, #950	; 0x3b6
 800de7a:	fb02 f303 	mul.w	r3, r2, r3
 800de7e:	4a34      	ldr	r2, [pc, #208]	; (800df50 <Motor_SetDuty_Right+0x108>)
 800de80:	fba2 2303 	umull	r2, r3, r2, r3
 800de84:	099b      	lsrs	r3, r3, #6
 800de86:	3b01      	subs	r3, #1
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	e038      	b.n	800defe <Motor_SetDuty_Right+0xb6>
	} else if( ABS(duty_r) < MOT_DUTY_MIN ) {
 800de8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de90:	f113 0f1d 	cmn.w	r3, #29
 800de94:	db18      	blt.n	800dec8 <Motor_SetDuty_Right+0x80>
 800de96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800de9a:	2b1d      	cmp	r3, #29
 800de9c:	dc14      	bgt.n	800dec8 <Motor_SetDuty_Right+0x80>
		pulse_r = (uint32_t)((PCLK1*2) / PWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800de9e:	f00b f869 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800dea2:	4603      	mov	r3, r0
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	099b      	lsrs	r3, r3, #6
 800dea8:	4a28      	ldr	r2, [pc, #160]	; (800df4c <Motor_SetDuty_Right+0x104>)
 800deaa:	fba2 2303 	umull	r2, r3, r2, r3
 800deae:	099a      	lsrs	r2, r3, #6
 800deb0:	4613      	mov	r3, r2
 800deb2:	011b      	lsls	r3, r3, #4
 800deb4:	1a9b      	subs	r3, r3, r2
 800deb6:	005b      	lsls	r3, r3, #1
 800deb8:	461a      	mov	r2, r3
 800deba:	4b25      	ldr	r3, [pc, #148]	; (800df50 <Motor_SetDuty_Right+0x108>)
 800debc:	fba3 2302 	umull	r2, r3, r3, r2
 800dec0:	099b      	lsrs	r3, r3, #6
 800dec2:	3b01      	subs	r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]
 800dec6:	e01a      	b.n	800defe <Motor_SetDuty_Right+0xb6>
	} else {
		pulse_r = (uint32_t)((PCLK1*2) / PWMFREQ * ABS(duty_r) / 1000) - 1;
 800dec8:	f00b f854 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 800decc:	4603      	mov	r3, r0
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	099b      	lsrs	r3, r3, #6
 800ded2:	4a1e      	ldr	r2, [pc, #120]	; (800df4c <Motor_SetDuty_Right+0x104>)
 800ded4:	fba2 2303 	umull	r2, r3, r2, r3
 800ded8:	099a      	lsrs	r2, r3, #6
 800deda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	da03      	bge.n	800deea <Motor_SetDuty_Right+0xa2>
 800dee2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dee6:	425b      	negs	r3, r3
 800dee8:	e001      	b.n	800deee <Motor_SetDuty_Right+0xa6>
 800deea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800deee:	fb02 f303 	mul.w	r3, r2, r3
 800def2:	4a17      	ldr	r2, [pc, #92]	; (800df50 <Motor_SetDuty_Right+0x108>)
 800def4:	fba2 2303 	umull	r2, r3, r2, r3
 800def8:	099b      	lsrs	r3, r3, #6
 800defa:	3b01      	subs	r3, #1
 800defc:	60fb      	str	r3, [r7, #12]
	}

	if( duty_r > 0 ) {
 800defe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df02:	2b00      	cmp	r3, #0
 800df04:	dd08      	ble.n	800df18 <Motor_SetDuty_Right+0xd0>
		MOT_SET_COMPARE_R_FORWARD( pulse_r );
 800df06:	4b13      	ldr	r3, [pc, #76]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_R_REVERSE( 0 );
 800df0e:	4b11      	ldr	r3, [pc, #68]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2200      	movs	r2, #0
 800df14:	639a      	str	r2, [r3, #56]	; 0x38
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
	} else {
		MOT_SET_COMPARE_R_FORWARD( 0 );
		MOT_SET_COMPARE_R_REVERSE( 0 );
	}
}
 800df16:	e014      	b.n	800df42 <Motor_SetDuty_Right+0xfa>
	} else if( duty_r < 0 ) {
 800df18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	da08      	bge.n	800df32 <Motor_SetDuty_Right+0xea>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 800df20:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2200      	movs	r2, #0
 800df26:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_R_REVERSE( pulse_r );
 800df28:	4b0a      	ldr	r3, [pc, #40]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800df30:	e007      	b.n	800df42 <Motor_SetDuty_Right+0xfa>
		MOT_SET_COMPARE_R_FORWARD( 0 );
 800df32:	4b08      	ldr	r3, [pc, #32]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2200      	movs	r2, #0
 800df38:	635a      	str	r2, [r3, #52]	; 0x34
		MOT_SET_COMPARE_R_REVERSE( 0 );
 800df3a:	4b06      	ldr	r3, [pc, #24]	; (800df54 <Motor_SetDuty_Right+0x10c>)
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2200      	movs	r2, #0
 800df40:	639a      	str	r2, [r3, #56]	; 0x38
}
 800df42:	bf00      	nop
 800df44:	3710      	adds	r7, #16
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}
 800df4a:	bf00      	nop
 800df4c:	053e2d63 	.word	0x053e2d63
 800df50:	10624dd3 	.word	0x10624dd3
 800df54:	2001bb80 	.word	0x2001bb80

0800df58 <FAN_Motor_SetDuty>:
	FAN_Motor_SetDuty(0);
	HAL_Delay(200);
}

void FAN_Motor_SetDuty(int16_t duty_f)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	4603      	mov	r3, r0
 800df60:	80fb      	strh	r3, [r7, #6]
	uint32_t	pulse_f;

	if( ABS(duty_f) > MOT_DUTY_MAX ) {
 800df62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df66:	2b00      	cmp	r3, #0
 800df68:	bfb8      	it	lt
 800df6a:	425b      	neglt	r3, r3
 800df6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800df70:	4293      	cmp	r3, r2
 800df72:	dd12      	ble.n	800df9a <FAN_Motor_SetDuty+0x42>
		pulse_f = (uint32_t)((PCLK2)/FANPWMFREQ * MOT_DUTY_MAX / 1000) - 1;
 800df74:	f00b f812 	bl	8018f9c <HAL_RCC_GetPCLK2Freq>
 800df78:	4603      	mov	r3, r0
 800df7a:	099b      	lsrs	r3, r3, #6
 800df7c:	4a2a      	ldr	r2, [pc, #168]	; (800e028 <FAN_Motor_SetDuty+0xd0>)
 800df7e:	fba2 2303 	umull	r2, r3, r2, r3
 800df82:	099b      	lsrs	r3, r3, #6
 800df84:	f240 32b6 	movw	r2, #950	; 0x3b6
 800df88:	fb02 f303 	mul.w	r3, r2, r3
 800df8c:	4a27      	ldr	r2, [pc, #156]	; (800e02c <FAN_Motor_SetDuty+0xd4>)
 800df8e:	fba2 2303 	umull	r2, r3, r2, r3
 800df92:	099b      	lsrs	r3, r3, #6
 800df94:	3b01      	subs	r3, #1
 800df96:	60fb      	str	r3, [r7, #12]
 800df98:	e03d      	b.n	800e016 <FAN_Motor_SetDuty+0xbe>
	}else if(duty_f == 0){
 800df9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <FAN_Motor_SetDuty+0x50>
		pulse_f = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	60fb      	str	r3, [r7, #12]
 800dfa6:	e036      	b.n	800e016 <FAN_Motor_SetDuty+0xbe>
	}else if( ABS(duty_f) < MOT_DUTY_MIN ) {
 800dfa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfac:	f113 0f1d 	cmn.w	r3, #29
 800dfb0:	db17      	blt.n	800dfe2 <FAN_Motor_SetDuty+0x8a>
 800dfb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dfb6:	2b1d      	cmp	r3, #29
 800dfb8:	dc13      	bgt.n	800dfe2 <FAN_Motor_SetDuty+0x8a>
		pulse_f = (uint32_t)((PCLK2)/FANPWMFREQ * MOT_DUTY_MIN / 1000) - 1;
 800dfba:	f00a ffef 	bl	8018f9c <HAL_RCC_GetPCLK2Freq>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	099b      	lsrs	r3, r3, #6
 800dfc2:	4a19      	ldr	r2, [pc, #100]	; (800e028 <FAN_Motor_SetDuty+0xd0>)
 800dfc4:	fba2 2303 	umull	r2, r3, r2, r3
 800dfc8:	099a      	lsrs	r2, r3, #6
 800dfca:	4613      	mov	r3, r2
 800dfcc:	011b      	lsls	r3, r3, #4
 800dfce:	1a9b      	subs	r3, r3, r2
 800dfd0:	005b      	lsls	r3, r3, #1
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	4b15      	ldr	r3, [pc, #84]	; (800e02c <FAN_Motor_SetDuty+0xd4>)
 800dfd6:	fba3 2302 	umull	r2, r3, r3, r2
 800dfda:	099b      	lsrs	r3, r3, #6
 800dfdc:	3b01      	subs	r3, #1
 800dfde:	60fb      	str	r3, [r7, #12]
 800dfe0:	e019      	b.n	800e016 <FAN_Motor_SetDuty+0xbe>
	}else {
		pulse_f = (uint32_t)((PCLK2)/FANPWMFREQ * ABS(duty_f) / 1000) - 1;
 800dfe2:	f00a ffdb 	bl	8018f9c <HAL_RCC_GetPCLK2Freq>
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	099b      	lsrs	r3, r3, #6
 800dfea:	4a0f      	ldr	r2, [pc, #60]	; (800e028 <FAN_Motor_SetDuty+0xd0>)
 800dfec:	fba2 2303 	umull	r2, r3, r2, r3
 800dff0:	099a      	lsrs	r2, r3, #6
 800dff2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	da03      	bge.n	800e002 <FAN_Motor_SetDuty+0xaa>
 800dffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dffe:	425b      	negs	r3, r3
 800e000:	e001      	b.n	800e006 <FAN_Motor_SetDuty+0xae>
 800e002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e006:	fb02 f303 	mul.w	r3, r2, r3
 800e00a:	4a08      	ldr	r2, [pc, #32]	; (800e02c <FAN_Motor_SetDuty+0xd4>)
 800e00c:	fba2 2303 	umull	r2, r3, r2, r3
 800e010:	099b      	lsrs	r3, r3, #6
 800e012:	3b01      	subs	r3, #1
 800e014:	60fb      	str	r3, [r7, #12]
	}
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse_f);
 800e016:	4b06      	ldr	r3, [pc, #24]	; (800e030 <FAN_Motor_SetDuty+0xd8>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800e01e:	bf00      	nop
 800e020:	3710      	adds	r7, #16
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	053e2d63 	.word	0x053e2d63
 800e02c:	10624dd3 	.word	0x10624dd3
 800e030:	2001b9e0 	.word	0x2001b9e0

0800e034 <Suction_start>:


void Suction_start(int16_t max_duty)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	4603      	mov	r3, r0
 800e03c:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 800e03e:	2100      	movs	r1, #0
 800e040:	4810      	ldr	r0, [pc, #64]	; (800e084 <Suction_start+0x50>)
 800e042:	f00c f89b 	bl	801a17c <HAL_TIM_PWM_Start>
	for(int i = 0; i < max_duty;i++)
 800e046:	2300      	movs	r3, #0
 800e048:	60fb      	str	r3, [r7, #12]
 800e04a:	e00a      	b.n	800e062 <Suction_start+0x2e>
	{
		FAN_Motor_SetDuty(i);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	b21b      	sxth	r3, r3
 800e050:	4618      	mov	r0, r3
 800e052:	f7ff ff81 	bl	800df58 <FAN_Motor_SetDuty>
		HAL_Delay(1);
 800e056:	2001      	movs	r0, #1
 800e058:	f009 f8d0 	bl	80171fc <HAL_Delay>
	for(int i = 0; i < max_duty;i++)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	3301      	adds	r3, #1
 800e060:	60fb      	str	r3, [r7, #12]
 800e062:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	429a      	cmp	r2, r3
 800e06a:	dbef      	blt.n	800e04c <Suction_start+0x18>
	}
	FAN_Motor_SetDuty(max_duty);
 800e06c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e070:	4618      	mov	r0, r3
 800e072:	f7ff ff71 	bl	800df58 <FAN_Motor_SetDuty>
	HAL_Delay(100);
 800e076:	2064      	movs	r0, #100	; 0x64
 800e078:	f009 f8c0 	bl	80171fc <HAL_Delay>
}
 800e07c:	bf00      	nop
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	2001b9e0 	.word	0x2001b9e0

0800e088 <Suction_Stop>:

void Suction_Stop()
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
	uint32_t pulse_f = __HAL_TIM_GET_COMPARE(&htim8, TIM_CHANNEL_1);
 800e08e:	4b11      	ldr	r3, [pc, #68]	; (800e0d4 <Suction_Stop+0x4c>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e094:	603b      	str	r3, [r7, #0]
	for(int i = pulse_f;i >=0;i--)
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	607b      	str	r3, [r7, #4]
 800e09a:	e00a      	b.n	800e0b2 <Suction_Stop+0x2a>
	{
		FAN_Motor_SetDuty(i);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	b21b      	sxth	r3, r3
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff ff59 	bl	800df58 <FAN_Motor_SetDuty>
		HAL_Delay(0);
 800e0a6:	2000      	movs	r0, #0
 800e0a8:	f009 f8a8 	bl	80171fc <HAL_Delay>
	for(int i = pulse_f;i >=0;i--)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	3b01      	subs	r3, #1
 800e0b0:	607b      	str	r3, [r7, #4]
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	daf1      	bge.n	800e09c <Suction_Stop+0x14>
	}
	FAN_Motor_SetDuty(0);
 800e0b8:	2000      	movs	r0, #0
 800e0ba:	f7ff ff4d 	bl	800df58 <FAN_Motor_SetDuty>
	HAL_Delay(100);
 800e0be:	2064      	movs	r0, #100	; 0x64
 800e0c0:	f009 f89c 	bl	80171fc <HAL_Delay>
	HAL_TIM_PWM_Stop(&htim8,TIM_CHANNEL_1);
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	4803      	ldr	r0, [pc, #12]	; (800e0d4 <Suction_Stop+0x4c>)
 800e0c8:	f00c f896 	bl	801a1f8 <HAL_TIM_PWM_Stop>
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	2001b9e0 	.word	0x2001b9e0

0800e0d8 <slalom_check>:
		 straight(270.0f, 15.0f, 2.0f, 0.0f);
		 log_flag = false;
}

void slalom_check(const t_straight_param* velo_param,const t_param *const *mode,t_run_pattern run_pt)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	71fb      	strb	r3, [r7, #7]
	 log_flag = true;time = 0;
 800e0e6:	4b8b      	ldr	r3, [pc, #556]	; (800e314 <slalom_check+0x23c>)
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	701a      	strb	r2, [r3, #0]
 800e0ec:	4b8a      	ldr	r3, [pc, #552]	; (800e318 <slalom_check+0x240>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	601a      	str	r2, [r3, #0]
	 Sp_Param_Initialize(&machine);
 800e0f2:	488a      	ldr	r0, [pc, #552]	; (800e31c <slalom_check+0x244>)
 800e0f4:	f000 fb3e 	bl	800e774 <Sp_Param_Initialize>
	 Sp_Param_Initialize(&target);
 800e0f8:	4889      	ldr	r0, [pc, #548]	; (800e320 <slalom_check+0x248>)
 800e0fa:	f000 fb3b 	bl	800e774 <Sp_Param_Initialize>
	 Sp_Param_Initialize(&max_set);
 800e0fe:	4889      	ldr	r0, [pc, #548]	; (800e324 <slalom_check+0x24c>)
 800e100:	f000 fb38 	bl	800e774 <Sp_Param_Initialize>
	 Set_Velo_PID_Gain(velo_param->sp_gain->Kp,velo_param->sp_gain->Ki,velo_param->sp_gain->Kd);
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	edd3 7a00 	vldr	s15, [r3]
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	ed93 7a01 	vldr	s14, [r3, #4]
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	edd3 6a02 	vldr	s13, [r3, #8]
 800e11c:	eeb0 1a66 	vmov.f32	s2, s13
 800e120:	eef0 0a47 	vmov.f32	s1, s14
 800e124:	eeb0 0a67 	vmov.f32	s0, s15
 800e128:	f000 fbcc 	bl	800e8c4 <Set_Velo_PID_Gain>
	 Set_Omega_PID_Gain(velo_param->om_gain->Kp,velo_param->om_gain->Ki,velo_param->om_gain->Kd);
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	689b      	ldr	r3, [r3, #8]
 800e130:	edd3 7a00 	vldr	s15, [r3]
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	ed93 7a01 	vldr	s14, [r3, #4]
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	edd3 6a02 	vldr	s13, [r3, #8]
 800e144:	eeb0 1a66 	vmov.f32	s2, s13
 800e148:	eef0 0a47 	vmov.f32	s1, s14
 800e14c:	eeb0 0a67 	vmov.f32	s0, s15
 800e150:	f000 fbd2 	bl	800e8f8 <Set_Omega_PID_Gain>

	 float acc = velo_param->param->acc;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	617b      	str	r3, [r7, #20]
	 float velo = velo_param->param->max_velo;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	613b      	str	r3, [r7, #16]
	 switch(run_pt)
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	3b01      	subs	r3, #1
 800e168:	2b12      	cmp	r3, #18
 800e16a:	f200 80cc 	bhi.w	800e306 <slalom_check+0x22e>
 800e16e:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <slalom_check+0x9c>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e1c1 	.word	0x0800e1c1
 800e178:	0800e1e9 	.word	0x0800e1e9
 800e17c:	0800e213 	.word	0x0800e213
 800e180:	0800e213 	.word	0x0800e213
 800e184:	0800e213 	.word	0x0800e213
 800e188:	0800e213 	.word	0x0800e213
 800e18c:	0800e24f 	.word	0x0800e24f
 800e190:	0800e24f 	.word	0x0800e24f
 800e194:	0800e28d 	.word	0x0800e28d
 800e198:	0800e28d 	.word	0x0800e28d
 800e19c:	0800e24f 	.word	0x0800e24f
 800e1a0:	0800e24f 	.word	0x0800e24f
 800e1a4:	0800e28d 	.word	0x0800e28d
 800e1a8:	0800e28d 	.word	0x0800e28d
 800e1ac:	0800e2cb 	.word	0x0800e2cb
 800e1b0:	0800e2cb 	.word	0x0800e2cb
 800e1b4:	0800e307 	.word	0x0800e307
 800e1b8:	0800e307 	.word	0x0800e307
 800e1bc:	0800e307 	.word	0x0800e307
	 {
	 	 case Straight:
	 		 straight(90.0f, acc, velo, velo);
 800e1c0:	edd7 1a04 	vldr	s3, [r7, #16]
 800e1c4:	ed97 1a04 	vldr	s2, [r7, #16]
 800e1c8:	edd7 0a05 	vldr	s1, [r7, #20]
 800e1cc:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800e328 <slalom_check+0x250>
 800e1d0:	f000 fbc6 	bl	800e960 <straight>
	 		 straight(90.0f, acc, velo, 0.0f);
 800e1d4:	eddf 1a55 	vldr	s3, [pc, #340]	; 800e32c <slalom_check+0x254>
 800e1d8:	ed97 1a04 	vldr	s2, [r7, #16]
 800e1dc:	edd7 0a05 	vldr	s1, [r7, #20]
 800e1e0:	ed9f 0a51 	vldr	s0, [pc, #324]	; 800e328 <slalom_check+0x250>
 800e1e4:	f000 fbbc 	bl	800e960 <straight>
	 	 case Diagonal:
	 		 diagonal(DIAG_SECTION*4, acc, velo, velo);
 800e1e8:	edd7 1a04 	vldr	s3, [r7, #16]
 800e1ec:	ed97 1a04 	vldr	s2, [r7, #16]
 800e1f0:	edd7 0a05 	vldr	s1, [r7, #20]
 800e1f4:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800e330 <slalom_check+0x258>
 800e1f8:	f000 fd22 	bl	800ec40 <diagonal>
	 		 diagonal(DIAG_SECTION*1, acc, velo, 0.0);
 800e1fc:	eddf 1a4b 	vldr	s3, [pc, #300]	; 800e32c <slalom_check+0x254>
 800e200:	ed97 1a04 	vldr	s2, [r7, #16]
 800e204:	edd7 0a05 	vldr	s1, [r7, #20]
 800e208:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e334 <slalom_check+0x25c>
 800e20c:	f000 fd18 	bl	800ec40 <diagonal>
	 	 case Diagonal_L:
	 	 case Diagonal_R:
	 	 case run_pt_none:
	 		 break;
 800e210:	e079      	b.n	800e306 <slalom_check+0x22e>
	 	 case Long_turnL90:
	 	 case Long_turnR90:
	 	 case Long_turnL180:
	 	 case Long_turnR180:
	 		 straight(90.0f, acc, velo, velo);
 800e212:	edd7 1a04 	vldr	s3, [r7, #16]
 800e216:	ed97 1a04 	vldr	s2, [r7, #16]
 800e21a:	edd7 0a05 	vldr	s1, [r7, #20]
 800e21e:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800e328 <slalom_check+0x250>
 800e222:	f000 fb9d 	bl	800e960 <straight>
	 		 long_turn(mode[run_pt],velo_param);
 800e226:	79fb      	ldrb	r3, [r7, #7]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	68ba      	ldr	r2, [r7, #8]
 800e22c:	4413      	add	r3, r2
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68f9      	ldr	r1, [r7, #12]
 800e232:	4618      	mov	r0, r3
 800e234:	f001 f808 	bl	800f248 <long_turn>
	 		 straight(90.0f, acc, velo, 0.0f);
 800e238:	eddf 1a3c 	vldr	s3, [pc, #240]	; 800e32c <slalom_check+0x254>
 800e23c:	ed97 1a04 	vldr	s2, [r7, #16]
 800e240:	edd7 0a05 	vldr	s1, [r7, #20]
 800e244:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800e328 <slalom_check+0x250>
 800e248:	f000 fb8a 	bl	800e960 <straight>
	 		 break;
 800e24c:	e05b      	b.n	800e306 <slalom_check+0x22e>
	 	 case Turn_in_L45:
	 	 case Turn_in_R45:
	 	 case Turn_in_L135:
	 	 case Turn_in_R135:
	 		 straight(90.0f, acc, velo, velo);
 800e24e:	edd7 1a04 	vldr	s3, [r7, #16]
 800e252:	ed97 1a04 	vldr	s2, [r7, #16]
 800e256:	edd7 0a05 	vldr	s1, [r7, #20]
 800e25a:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800e328 <slalom_check+0x250>
 800e25e:	f000 fb7f 	bl	800e960 <straight>
	 		 turn_in(mode[run_pt],velo_param,velo_param);
 800e262:	79fb      	ldrb	r3, [r7, #7]
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	68ba      	ldr	r2, [r7, #8]
 800e268:	4413      	add	r3, r2
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	68f9      	ldr	r1, [r7, #12]
 800e270:	4618      	mov	r0, r3
 800e272:	f001 fb39 	bl	800f8e8 <turn_in>
	 		 diagonal(DIAG_SECTION*2, acc, velo, 0.0);
 800e276:	eddf 1a2d 	vldr	s3, [pc, #180]	; 800e32c <slalom_check+0x254>
 800e27a:	ed97 1a04 	vldr	s2, [r7, #16]
 800e27e:	edd7 0a05 	vldr	s1, [r7, #20]
 800e282:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e338 <slalom_check+0x260>
 800e286:	f000 fcdb 	bl	800ec40 <diagonal>
	 		 break;
 800e28a:	e03c      	b.n	800e306 <slalom_check+0x22e>
	 	 case Turn_out_L45:
	 	 case Turn_out_R45:
	 	 case Turn_out_L135:
	 	 case Turn_out_R135:
	 		 diagonal(DIAG_SECTION*2, acc, velo, velo);
 800e28c:	edd7 1a04 	vldr	s3, [r7, #16]
 800e290:	ed97 1a04 	vldr	s2, [r7, #16]
 800e294:	edd7 0a05 	vldr	s1, [r7, #20]
 800e298:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800e338 <slalom_check+0x260>
 800e29c:	f000 fcd0 	bl	800ec40 <diagonal>
	 		 turn_out(mode[run_pt],velo_param,velo_param);
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	68ba      	ldr	r2, [r7, #8]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68fa      	ldr	r2, [r7, #12]
 800e2ac:	68f9      	ldr	r1, [r7, #12]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f001 fd62 	bl	800fd78 <turn_out>
	 		 straight(90.0f, acc, velo, 0.0f);
 800e2b4:	eddf 1a1d 	vldr	s3, [pc, #116]	; 800e32c <slalom_check+0x254>
 800e2b8:	ed97 1a04 	vldr	s2, [r7, #16]
 800e2bc:	edd7 0a05 	vldr	s1, [r7, #20]
 800e2c0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e328 <slalom_check+0x250>
 800e2c4:	f000 fb4c 	bl	800e960 <straight>
	 		 break;
 800e2c8:	e01d      	b.n	800e306 <slalom_check+0x22e>
	 	 case Turn_LV90:
	 	 case Turn_RV90:
	 		 diagonal(DIAG_SECTION*2, acc, velo, velo);
 800e2ca:	edd7 1a04 	vldr	s3, [r7, #16]
 800e2ce:	ed97 1a04 	vldr	s2, [r7, #16]
 800e2d2:	edd7 0a05 	vldr	s1, [r7, #20]
 800e2d6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800e338 <slalom_check+0x260>
 800e2da:	f000 fcb1 	bl	800ec40 <diagonal>
	 		 turn_v90(mode[run_pt],velo_param);
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	4413      	add	r3, r2
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	68f9      	ldr	r1, [r7, #12]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f001 f946 	bl	800f57c <turn_v90>
	 		 diagonal(DIAG_SECTION*2, acc, velo, 0.0);
 800e2f0:	eddf 1a0e 	vldr	s3, [pc, #56]	; 800e32c <slalom_check+0x254>
 800e2f4:	ed97 1a04 	vldr	s2, [r7, #16]
 800e2f8:	edd7 0a05 	vldr	s1, [r7, #20]
 800e2fc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e338 <slalom_check+0x260>
 800e300:	f000 fc9e 	bl	800ec40 <diagonal>
	 		 break;
 800e304:	bf00      	nop
	 }

 	 //straight(90.0f, acc, velo, 0.0f);
 	 log_flag = false;
 800e306:	4b03      	ldr	r3, [pc, #12]	; (800e314 <slalom_check+0x23c>)
 800e308:	2200      	movs	r2, #0
 800e30a:	701a      	strb	r2, [r3, #0]
}
 800e30c:	bf00      	nop
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	2001b658 	.word	0x2001b658
 800e318:	20009998 	.word	0x20009998
 800e31c:	2001b664 	.word	0x2001b664
 800e320:	2001b6a0 	.word	0x2001b6a0
 800e324:	2001b1b4 	.word	0x2001b1b4
 800e328:	42b40000 	.word	0x42b40000
 800e32c:	00000000 	.word	0x00000000
 800e330:	437e8ef3 	.word	0x437e8ef3
 800e334:	427e8ef3 	.word	0x427e8ef3
 800e338:	42fe8ef3 	.word	0x42fe8ef3

0800e33c <disp_map>:

#include "index.h"
#include "glob_var.h"
#include "macro.h"

void disp_map(){
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
	for( int y = MAZE_SIZE_Y - 1 ; y >= 0 ; y-- ){
 800e342:	231f      	movs	r3, #31
 800e344:	60fb      	str	r3, [r7, #12]
 800e346:	e07a      	b.n	800e43e <disp_map+0x102>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 800e348:	2300      	movs	r3, #0
 800e34a:	60bb      	str	r3, [r7, #8]
 800e34c:	e027      	b.n	800e39e <disp_map+0x62>
			if(wall[x][y].north == WALL || wall[x][y].north == VWALL)	{	printf("+---");	HAL_Delay(10);	}
 800e34e:	4a48      	ldr	r2, [pc, #288]	; (800e470 <disp_map+0x134>)
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	015b      	lsls	r3, r3, #5
 800e354:	441a      	add	r2, r3
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	4413      	add	r3, r2
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e360:	b2db      	uxtb	r3, r3
 800e362:	2b01      	cmp	r3, #1
 800e364:	d00b      	beq.n	800e37e <disp_map+0x42>
 800e366:	4a42      	ldr	r2, [pc, #264]	; (800e470 <disp_map+0x134>)
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	015b      	lsls	r3, r3, #5
 800e36c:	441a      	add	r2, r3
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	4413      	add	r3, r2
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b03      	cmp	r3, #3
 800e37c:	d106      	bne.n	800e38c <disp_map+0x50>
 800e37e:	483d      	ldr	r0, [pc, #244]	; (800e474 <disp_map+0x138>)
 800e380:	f00e f842 	bl	801c408 <iprintf>
 800e384:	200a      	movs	r0, #10
 800e386:	f008 ff39 	bl	80171fc <HAL_Delay>
 800e38a:	e005      	b.n	800e398 <disp_map+0x5c>
			else							{	printf("+   "); HAL_Delay(10);	}
 800e38c:	483a      	ldr	r0, [pc, #232]	; (800e478 <disp_map+0x13c>)
 800e38e:	f00e f83b 	bl	801c408 <iprintf>
 800e392:	200a      	movs	r0, #10
 800e394:	f008 ff32 	bl	80171fc <HAL_Delay>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	3301      	adds	r3, #1
 800e39c:	60bb      	str	r3, [r7, #8]
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	2b1f      	cmp	r3, #31
 800e3a2:	ddd4      	ble.n	800e34e <disp_map+0x12>
			//if(x == MAZE_SIZE_X - 1)		{	printf("+\n");	HAL_Delay(5);	}
		}
		printf("+\n");	HAL_Delay(10);
 800e3a4:	4835      	ldr	r0, [pc, #212]	; (800e47c <disp_map+0x140>)
 800e3a6:	f00e f8a3 	bl	801c4f0 <puts>
 800e3aa:	200a      	movs	r0, #10
 800e3ac:	f008 ff26 	bl	80171fc <HAL_Delay>

		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	607b      	str	r3, [r7, #4]
 800e3b4:	e037      	b.n	800e426 <disp_map+0xea>
			if(wall[x][y].west == WALL || wall[x][y].west == VWALL)		{	printf("|%3x",map[x][y]);	HAL_Delay(10);	}
 800e3b6:	4a2e      	ldr	r2, [pc, #184]	; (800e470 <disp_map+0x134>)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	015b      	lsls	r3, r3, #5
 800e3bc:	441a      	add	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d00b      	beq.n	800e3e6 <disp_map+0xaa>
 800e3ce:	4a28      	ldr	r2, [pc, #160]	; (800e470 <disp_map+0x134>)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	015b      	lsls	r3, r3, #5
 800e3d4:	441a      	add	r2, r3
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	4413      	add	r3, r2
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b03      	cmp	r3, #3
 800e3e4:	d10e      	bne.n	800e404 <disp_map+0xc8>
 800e3e6:	4926      	ldr	r1, [pc, #152]	; (800e480 <disp_map+0x144>)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	015a      	lsls	r2, r3, #5
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	4413      	add	r3, r2
 800e3f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e3f4:	4619      	mov	r1, r3
 800e3f6:	4823      	ldr	r0, [pc, #140]	; (800e484 <disp_map+0x148>)
 800e3f8:	f00e f806 	bl	801c408 <iprintf>
 800e3fc:	200a      	movs	r0, #10
 800e3fe:	f008 fefd 	bl	80171fc <HAL_Delay>
 800e402:	e00d      	b.n	800e420 <disp_map+0xe4>
			else							{	printf(" %3x",map[x][y]);	HAL_Delay(10);	}
 800e404:	491e      	ldr	r1, [pc, #120]	; (800e480 <disp_map+0x144>)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	4413      	add	r3, r2
 800e40e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800e412:	4619      	mov	r1, r3
 800e414:	481c      	ldr	r0, [pc, #112]	; (800e488 <disp_map+0x14c>)
 800e416:	f00d fff7 	bl	801c408 <iprintf>
 800e41a:	200a      	movs	r0, #10
 800e41c:	f008 feee 	bl	80171fc <HAL_Delay>
		for(int x = 0; x < MAZE_SIZE_X ; x++ ){
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	3301      	adds	r3, #1
 800e424:	607b      	str	r3, [r7, #4]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b1f      	cmp	r3, #31
 800e42a:	ddc4      	ble.n	800e3b6 <disp_map+0x7a>
			//if(x == MAZE_SIZE_X - 1)		{	printf("|\n");				HAL_Delay(5);	}
		}
		printf("|\n");				HAL_Delay(5);
 800e42c:	4817      	ldr	r0, [pc, #92]	; (800e48c <disp_map+0x150>)
 800e42e:	f00e f85f 	bl	801c4f0 <puts>
 800e432:	2005      	movs	r0, #5
 800e434:	f008 fee2 	bl	80171fc <HAL_Delay>
	for( int y = MAZE_SIZE_Y - 1 ; y >= 0 ; y-- ){
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	da81      	bge.n	800e348 <disp_map+0xc>
	}
	for(int x = 0; x < MAZE_SIZE_X ; x++)	{	printf("+---"); HAL_Delay(5);	}	printf("+\n");
 800e444:	2300      	movs	r3, #0
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	e008      	b.n	800e45c <disp_map+0x120>
 800e44a:	480a      	ldr	r0, [pc, #40]	; (800e474 <disp_map+0x138>)
 800e44c:	f00d ffdc 	bl	801c408 <iprintf>
 800e450:	2005      	movs	r0, #5
 800e452:	f008 fed3 	bl	80171fc <HAL_Delay>
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	3301      	adds	r3, #1
 800e45a:	603b      	str	r3, [r7, #0]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b1f      	cmp	r3, #31
 800e460:	ddf3      	ble.n	800e44a <disp_map+0x10e>
 800e462:	4806      	ldr	r0, [pc, #24]	; (800e47c <disp_map+0x140>)
 800e464:	f00e f844 	bl	801c4f0 <puts>
}
 800e468:	bf00      	nop
 800e46a:	3710      	adds	r7, #16
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}
 800e470:	2001b1e4 	.word	0x2001b1e4
 800e474:	0801e3d8 	.word	0x0801e3d8
 800e478:	0801e3e0 	.word	0x0801e3e0
 800e47c:	0801e3e8 	.word	0x0801e3e8
 800e480:	200002ac 	.word	0x200002ac
 800e484:	0801e3ec 	.word	0x0801e3ec
 800e488:	0801e3f4 	.word	0x0801e3f4
 800e48c:	0801e3fc 	.word	0x0801e3fc

0800e490 <list_init>:
#include "typedef.h"
#include "index.h"
#include "glob_var.h"
#include "queue.h"

void list_init(t_queue *queue){
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
	queue->tail = -1;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f04f 32ff 	mov.w	r2, #4294967295
 800e49e:	601a      	str	r2, [r3, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <push>:
	queue->tail = queue->tail - 1;
	return pop_data;
}

void push(t_queue *queue,t_MapNode input)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	1d3b      	adds	r3, r7, #4
 800e4b6:	e883 0006 	stmia.w	r3, {r1, r2}
	queue->node[queue->tail + 1] = input;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3301      	adds	r3, #1
 800e4c0:	68fa      	ldr	r2, [r7, #12]
 800e4c2:	00db      	lsls	r3, r3, #3
 800e4c4:	4413      	add	r3, r2
 800e4c6:	3304      	adds	r3, #4
 800e4c8:	1d3a      	adds	r2, r7, #4
 800e4ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4ce:	e883 0003 	stmia.w	r3, {r0, r1}
	queue->tail = queue->tail + 1;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	601a      	str	r2, [r3, #0]
}
 800e4dc:	bf00      	nop
 800e4de:	3714      	adds	r7, #20
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <swap>:

void swap(t_MapNode* a,t_MapNode* b){
 800e4e8:	b480      	push	{r7}
 800e4ea:	b085      	sub	sp, #20
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
	t_MapNode temp;
	temp = *b;
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	6810      	ldr	r0, [r2, #0]
 800e4fa:	6851      	ldr	r1, [r2, #4]
 800e4fc:	c303      	stmia	r3!, {r0, r1}
	*b = *a;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	687a      	ldr	r2, [r7, #4]
 800e502:	6811      	ldr	r1, [r2, #0]
 800e504:	6852      	ldr	r2, [r2, #4]
 800e506:	6019      	str	r1, [r3, #0]
 800e508:	605a      	str	r2, [r3, #4]
	*a = temp;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	461a      	mov	r2, r3
 800e50e:	f107 0308 	add.w	r3, r7, #8
 800e512:	cb03      	ldmia	r3!, {r0, r1}
 800e514:	6010      	str	r0, [r2, #0]
 800e516:	6051      	str	r1, [r2, #4]
}
 800e518:	bf00      	nop
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <min_heapify>:
	}
}
*/


void min_heapify(t_queue *queue,int i){	//iは親ノードの位置
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
	int left_ch = 2*i + 1;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	005b      	lsls	r3, r3, #1
 800e532:	3301      	adds	r3, #1
 800e534:	617b      	str	r3, [r7, #20]
	int right_ch = 2*i + 2;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3301      	adds	r3, #1
 800e53a:	005b      	lsls	r3, r3, #1
 800e53c:	613b      	str	r3, [r7, #16]
	int smallest = i;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	60fb      	str	r3, [r7, #12]

	while(1){
		if(left_ch <= queue->tail && ((queue->node[smallest].cost+queue->node[smallest].cost_h) > (queue->node[left_ch].cost+queue->node[left_ch].cost_h)))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	429a      	cmp	r2, r3
 800e54a:	dc1f      	bgt.n	800e58c <min_heapify+0x68>
 800e54c:	687a      	ldr	r2, [r7, #4]
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	00db      	lsls	r3, r3, #3
 800e552:	4413      	add	r3, r2
 800e554:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e558:	4619      	mov	r1, r3
 800e55a:	687a      	ldr	r2, [r7, #4]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	4413      	add	r3, r2
 800e562:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e566:	18ca      	adds	r2, r1, r3
 800e568:	6879      	ldr	r1, [r7, #4]
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	00db      	lsls	r3, r3, #3
 800e56e:	440b      	add	r3, r1
 800e570:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e574:	4618      	mov	r0, r3
 800e576:	6879      	ldr	r1, [r7, #4]
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	440b      	add	r3, r1
 800e57e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e582:	4403      	add	r3, r0
 800e584:	429a      	cmp	r2, r3
 800e586:	dd01      	ble.n	800e58c <min_heapify+0x68>
			smallest = left_ch;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	60fb      	str	r3, [r7, #12]
		if(right_ch <= queue->tail && ((queue->node[smallest].cost+queue->node[smallest].cost_h) > (queue->node[right_ch].cost+queue->node[right_ch].cost_h)))
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	429a      	cmp	r2, r3
 800e594:	dc1f      	bgt.n	800e5d6 <min_heapify+0xb2>
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	00db      	lsls	r3, r3, #3
 800e59c:	4413      	add	r3, r2
 800e59e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	00db      	lsls	r3, r3, #3
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e5b0:	18ca      	adds	r2, r1, r3
 800e5b2:	6879      	ldr	r1, [r7, #4]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	440b      	add	r3, r1
 800e5ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e5be:	4618      	mov	r0, r3
 800e5c0:	6879      	ldr	r1, [r7, #4]
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	00db      	lsls	r3, r3, #3
 800e5c6:	440b      	add	r3, r1
 800e5c8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800e5cc:	4403      	add	r3, r0
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	dd01      	ble.n	800e5d6 <min_heapify+0xb2>
			smallest = right_ch;
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	60fb      	str	r3, [r7, #12]

		if(smallest != i){
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d017      	beq.n	800e60e <min_heapify+0xea>
			swap(&queue->node[i],&queue->node[smallest]);
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	00db      	lsls	r3, r3, #3
 800e5e2:	687a      	ldr	r2, [r7, #4]
 800e5e4:	4413      	add	r3, r2
 800e5e6:	1d18      	adds	r0, r3, #4
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	00db      	lsls	r3, r3, #3
 800e5ec:	687a      	ldr	r2, [r7, #4]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	4619      	mov	r1, r3
 800e5f4:	f7ff ff78 	bl	800e4e8 <swap>
			left_ch = 2*smallest + 1;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	005b      	lsls	r3, r3, #1
 800e5fc:	3301      	adds	r3, #1
 800e5fe:	617b      	str	r3, [r7, #20]
			right_ch = 2*smallest + 2;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	613b      	str	r3, [r7, #16]
			i = smallest;
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	603b      	str	r3, [r7, #0]
		if(left_ch <= queue->tail && ((queue->node[smallest].cost+queue->node[smallest].cost_h) > (queue->node[left_ch].cost+queue->node[left_ch].cost_h)))
 800e60c:	e799      	b.n	800e542 <min_heapify+0x1e>
		}
		else
		{
			break;
 800e60e:	bf00      	nop
		}
	}
}
 800e610:	bf00      	nop
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <build_heap>:


void build_heap(t_queue *queue){
 800e618:	b580      	push	{r7, lr}
 800e61a:	b084      	sub	sp, #16
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
	for(int i = queue->tail/2; i >= 0;i--){
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	0fda      	lsrs	r2, r3, #31
 800e626:	4413      	add	r3, r2
 800e628:	105b      	asrs	r3, r3, #1
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	e006      	b.n	800e63c <build_heap+0x24>
		min_heapify(queue,i);
 800e62e:	68f9      	ldr	r1, [r7, #12]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f7ff ff77 	bl	800e524 <min_heapify>
	for(int i = queue->tail/2; i >= 0;i--){
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3b01      	subs	r3, #1
 800e63a:	60fb      	str	r3, [r7, #12]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	daf5      	bge.n	800e62e <build_heap+0x16>
	}
}
 800e642:	bf00      	nop
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}

0800e64a <heap_pop>:

t_MapNode heap_pop(t_queue *queue){
 800e64a:	b580      	push	{r7, lr}
 800e64c:	b084      	sub	sp, #16
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
	t_MapNode n;
	n = queue->node[0];
 800e654:	683a      	ldr	r2, [r7, #0]
 800e656:	f107 0308 	add.w	r3, r7, #8
 800e65a:	3204      	adds	r2, #4
 800e65c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e660:	e883 0003 	stmia.w	r3, {r0, r1}
	queue->node[0] = queue->node[queue->tail];
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	683a      	ldr	r2, [r7, #0]
 800e66a:	6839      	ldr	r1, [r7, #0]
 800e66c:	00db      	lsls	r3, r3, #3
 800e66e:	440b      	add	r3, r1
 800e670:	3204      	adds	r2, #4
 800e672:	3304      	adds	r3, #4
 800e674:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e678:	e882 0003 	stmia.w	r2, {r0, r1}
	queue->tail = queue->tail - 1;
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	1e5a      	subs	r2, r3, #1
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	601a      	str	r2, [r3, #0]
	if(queue->tail != -1)
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e68e:	d003      	beq.n	800e698 <heap_pop+0x4e>
		min_heapify(queue,0);
 800e690:	2100      	movs	r1, #0
 800e692:	6838      	ldr	r0, [r7, #0]
 800e694:	f7ff ff46 	bl	800e524 <min_heapify>
	return n;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	461a      	mov	r2, r3
 800e69c:	f107 0308 	add.w	r3, r7, #8
 800e6a0:	cb03      	ldmia	r3!, {r0, r1}
 800e6a2:	6010      	str	r0, [r2, #0]
 800e6a4:	6051      	str	r1, [r2, #4]
}
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	3710      	adds	r7, #16
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <heap_push>:

void heap_push(t_queue *queue,t_MapNode element){
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b084      	sub	sp, #16
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	60f8      	str	r0, [r7, #12]
 800e6b6:	1d3b      	adds	r3, r7, #4
 800e6b8:	e883 0006 	stmia.w	r3, {r1, r2}
	push(queue,element);
 800e6bc:	1d3b      	adds	r3, r7, #4
 800e6be:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e6c2:	68f8      	ldr	r0, [r7, #12]
 800e6c4:	f7ff fef2 	bl	800e4ac <push>
	min_heapify(queue,queue->tail/2);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	0fda      	lsrs	r2, r3, #31
 800e6ce:	4413      	add	r3, r2
 800e6d0:	105b      	asrs	r3, r3, #1
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f7ff ff25 	bl	800e524 <min_heapify>
}
 800e6da:	bf00      	nop
 800e6dc:	3710      	adds	r7, #16
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <node_set>:

t_MapNode node_set(int16_t st_x,int16_t st_y,int16_t cost,int16_t cost_h){
 800e6e2:	b480      	push	{r7}
 800e6e4:	b087      	sub	sp, #28
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	60f8      	str	r0, [r7, #12]
 800e6ea:	4608      	mov	r0, r1
 800e6ec:	4611      	mov	r1, r2
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	817b      	strh	r3, [r7, #10]
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	813b      	strh	r3, [r7, #8]
 800e6f8:	4613      	mov	r3, r2
 800e6fa:	80fb      	strh	r3, [r7, #6]
	t_MapNode n;
	n.st_x = st_x;		n.st_y = st_y;
 800e6fc:	897b      	ldrh	r3, [r7, #10]
 800e6fe:	823b      	strh	r3, [r7, #16]
 800e700:	893b      	ldrh	r3, [r7, #8]
 800e702:	827b      	strh	r3, [r7, #18]
	n.cost = cost;		n.cost_h = cost_h;
 800e704:	88fb      	ldrh	r3, [r7, #6]
 800e706:	82bb      	strh	r3, [r7, #20]
 800e708:	8c3b      	ldrh	r3, [r7, #32]
 800e70a:	82fb      	strh	r3, [r7, #22]
	return n;
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	461a      	mov	r2, r3
 800e710:	f107 0310 	add.w	r3, r7, #16
 800e714:	cb03      	ldmia	r3!, {r0, r1}
 800e716:	6010      	str	r0, [r2, #0]
 800e718:	6051      	str	r1, [r2, #4]
}
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	371c      	adds	r7, #28
 800e71e:	46bd      	mov	sp, r7
 800e720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e724:	4770      	bx	lr
	...

0800e728 <Sp_Param_I_Initialize>:
#include "glob_var.h"
#include "run_param.h"
#include "rad_accel_table.h"


void Sp_Param_I_Initialize(t_sp_param * sp_param){
 800e728:	b480      	push	{r7}
 800e72a:	b083      	sub	sp, #12
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
	sp_param->I_velo 		= 0.0f;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f04f 0200 	mov.w	r2, #0
 800e736:	609a      	str	r2, [r3, #8]
	sp_param->I_rad_velo 	= 0.0f;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f04f 0200 	mov.w	r2, #0
 800e73e:	61da      	str	r2, [r3, #28]
	//sp_param->radian		= 0.0f;
	//sp_param->length        = 0.0f;
	rad_Integral_controller = 0.0f;
 800e740:	4b04      	ldr	r3, [pc, #16]	; (800e754 <Sp_Param_I_Initialize+0x2c>)
 800e742:	f04f 0200 	mov.w	r2, #0
 800e746:	601a      	str	r2, [r3, #0]
}
 800e748:	bf00      	nop
 800e74a:	370c      	adds	r7, #12
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr
 800e754:	20000af8 	.word	0x20000af8

0800e758 <Sp_Param_rad_Initialize>:

void Sp_Param_rad_Initialize(t_sp_param * sp_param){
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
	sp_param->radian = 0.0f;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f04f 0200 	mov.w	r2, #0
 800e766:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <Sp_Param_Initialize>:


void Sp_Param_Initialize(t_sp_param *sp_param){
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
	sp_param->accel			= 0.0f;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f04f 0200 	mov.w	r2, #0
 800e782:	60da      	str	r2, [r3, #12]
	sp_param->velo 			= 0.0f;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f04f 0200 	mov.w	r2, #0
 800e78a:	601a      	str	r2, [r3, #0]
	sp_param->rad_accel 	= 0.0f;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f04f 0200 	mov.w	r2, #0
 800e792:	621a      	str	r2, [r3, #32]
	sp_param->rad_velo 		= 0.0f;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f04f 0200 	mov.w	r2, #0
 800e79a:	615a      	str	r2, [r3, #20]
	sp_param->I_velo		= 0.0f;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f04f 0200 	mov.w	r2, #0
 800e7a2:	609a      	str	r2, [r3, #8]
	sp_param->I_rad_velo	= 0.0f;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f04f 0200 	mov.w	r2, #0
 800e7aa:	61da      	str	r2, [r3, #28]
	sp_param->length 		= 0.0f;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f04f 0200 	mov.w	r2, #0
 800e7b2:	629a      	str	r2, [r3, #40]	; 0x28
	sp_param->radian 		= 0.0f;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f04f 0200 	mov.w	r2, #0
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <Machine_Param_Initialize>:

void Machine_Param_Initialize(){
 800e7c8:	b480      	push	{r7}
 800e7ca:	af00      	add	r7, sp, #0
	machine.accel		= 0.0f;
 800e7cc:	4b12      	ldr	r3, [pc, #72]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7ce:	f04f 0200 	mov.w	r2, #0
 800e7d2:	60da      	str	r2, [r3, #12]
	machine.velo 		= 0.0f;
 800e7d4:	4b10      	ldr	r3, [pc, #64]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7d6:	f04f 0200 	mov.w	r2, #0
 800e7da:	601a      	str	r2, [r3, #0]
    machine.rad_accel 	= 0.0f;
 800e7dc:	4b0e      	ldr	r3, [pc, #56]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7de:	f04f 0200 	mov.w	r2, #0
 800e7e2:	621a      	str	r2, [r3, #32]
    machine.rad_velo 	= 0.0f;
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7e6:	f04f 0200 	mov.w	r2, #0
 800e7ea:	615a      	str	r2, [r3, #20]
    machine.I_velo		= 0.0f;
 800e7ec:	4b0a      	ldr	r3, [pc, #40]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7ee:	f04f 0200 	mov.w	r2, #0
 800e7f2:	609a      	str	r2, [r3, #8]
    machine.I_rad_velo	= 0.0f;
 800e7f4:	4b08      	ldr	r3, [pc, #32]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7f6:	f04f 0200 	mov.w	r2, #0
 800e7fa:	61da      	str	r2, [r3, #28]
    machine.length 		= 0.0f;
 800e7fc:	4b06      	ldr	r3, [pc, #24]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e7fe:	f04f 0200 	mov.w	r2, #0
 800e802:	629a      	str	r2, [r3, #40]	; 0x28
    machine.radian 		= 0.0f;
 800e804:	4b04      	ldr	r3, [pc, #16]	; (800e818 <Machine_Param_Initialize+0x50>)
 800e806:	f04f 0200 	mov.w	r2, #0
 800e80a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e80c:	bf00      	nop
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	2001b664 	.word	0x2001b664

0800e81c <Target_Param_Initialize>:

void Target_Param_Initialize(){
 800e81c:	b480      	push	{r7}
 800e81e:	af00      	add	r7, sp, #0
	target.accel		= 0.0f;
 800e820:	4b12      	ldr	r3, [pc, #72]	; (800e86c <Target_Param_Initialize+0x50>)
 800e822:	f04f 0200 	mov.w	r2, #0
 800e826:	60da      	str	r2, [r3, #12]
	target.velo 		= 0.0f;
 800e828:	4b10      	ldr	r3, [pc, #64]	; (800e86c <Target_Param_Initialize+0x50>)
 800e82a:	f04f 0200 	mov.w	r2, #0
 800e82e:	601a      	str	r2, [r3, #0]
	target.rad_accel 	= 0.0f;
 800e830:	4b0e      	ldr	r3, [pc, #56]	; (800e86c <Target_Param_Initialize+0x50>)
 800e832:	f04f 0200 	mov.w	r2, #0
 800e836:	621a      	str	r2, [r3, #32]
	target.rad_velo 	= 0.0f;
 800e838:	4b0c      	ldr	r3, [pc, #48]	; (800e86c <Target_Param_Initialize+0x50>)
 800e83a:	f04f 0200 	mov.w	r2, #0
 800e83e:	615a      	str	r2, [r3, #20]
    target.I_velo		= 0.0f;
 800e840:	4b0a      	ldr	r3, [pc, #40]	; (800e86c <Target_Param_Initialize+0x50>)
 800e842:	f04f 0200 	mov.w	r2, #0
 800e846:	609a      	str	r2, [r3, #8]
    target.I_rad_velo	= 0.0f;
 800e848:	4b08      	ldr	r3, [pc, #32]	; (800e86c <Target_Param_Initialize+0x50>)
 800e84a:	f04f 0200 	mov.w	r2, #0
 800e84e:	61da      	str	r2, [r3, #28]
	target.length 		= 0.0f;
 800e850:	4b06      	ldr	r3, [pc, #24]	; (800e86c <Target_Param_Initialize+0x50>)
 800e852:	f04f 0200 	mov.w	r2, #0
 800e856:	629a      	str	r2, [r3, #40]	; 0x28
	target.radian 		= 0.0f;
 800e858:	4b04      	ldr	r3, [pc, #16]	; (800e86c <Target_Param_Initialize+0x50>)
 800e85a:	f04f 0200 	mov.w	r2, #0
 800e85e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e860:	bf00      	nop
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr
 800e86a:	bf00      	nop
 800e86c:	2001b6a0 	.word	0x2001b6a0

0800e870 <MAX_Param_Initialize>:

void MAX_Param_Initialize(){
 800e870:	b480      	push	{r7}
 800e872:	af00      	add	r7, sp, #0
	max_set.accel		= 0.0f;
 800e874:	4b12      	ldr	r3, [pc, #72]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e876:	f04f 0200 	mov.w	r2, #0
 800e87a:	60da      	str	r2, [r3, #12]
	max_set.velo 		= 0.0f;
 800e87c:	4b10      	ldr	r3, [pc, #64]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e87e:	f04f 0200 	mov.w	r2, #0
 800e882:	601a      	str	r2, [r3, #0]
	max_set.rad_accel 	= 0.0f;
 800e884:	4b0e      	ldr	r3, [pc, #56]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e886:	f04f 0200 	mov.w	r2, #0
 800e88a:	621a      	str	r2, [r3, #32]
	max_set.rad_velo 	= 0.0f;
 800e88c:	4b0c      	ldr	r3, [pc, #48]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e88e:	f04f 0200 	mov.w	r2, #0
 800e892:	615a      	str	r2, [r3, #20]
    max_set.I_velo		= 0.0f;
 800e894:	4b0a      	ldr	r3, [pc, #40]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e896:	f04f 0200 	mov.w	r2, #0
 800e89a:	609a      	str	r2, [r3, #8]
    max_set.I_rad_velo	= 0.0f;
 800e89c:	4b08      	ldr	r3, [pc, #32]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e89e:	f04f 0200 	mov.w	r2, #0
 800e8a2:	61da      	str	r2, [r3, #28]
	max_set.length 		= 0.0f;
 800e8a4:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e8a6:	f04f 0200 	mov.w	r2, #0
 800e8aa:	629a      	str	r2, [r3, #40]	; 0x28
	max_set.radian 		= 0.0f;
 800e8ac:	4b04      	ldr	r3, [pc, #16]	; (800e8c0 <MAX_Param_Initialize+0x50>)
 800e8ae:	f04f 0200 	mov.w	r2, #0
 800e8b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e8b4:	bf00      	nop
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	2001b1b4 	.word	0x2001b1b4

0800e8c4 <Set_Velo_PID_Gain>:

void Set_Velo_PID_Gain(float Kp,float Ki,float Kd){
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	ed87 0a03 	vstr	s0, [r7, #12]
 800e8ce:	edc7 0a02 	vstr	s1, [r7, #8]
 800e8d2:	ed87 1a01 	vstr	s2, [r7, #4]
	velo_g.Kp = Kp;
 800e8d6:	4a07      	ldr	r2, [pc, #28]	; (800e8f4 <Set_Velo_PID_Gain+0x30>)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6013      	str	r3, [r2, #0]
	velo_g.Ki = Ki;
 800e8dc:	4a05      	ldr	r2, [pc, #20]	; (800e8f4 <Set_Velo_PID_Gain+0x30>)
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	6053      	str	r3, [r2, #4]
	velo_g.Kd = Kd;
 800e8e2:	4a04      	ldr	r2, [pc, #16]	; (800e8f4 <Set_Velo_PID_Gain+0x30>)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6093      	str	r3, [r2, #8]
}
 800e8e8:	bf00      	nop
 800e8ea:	3714      	adds	r7, #20
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr
 800e8f4:	2001b694 	.word	0x2001b694

0800e8f8 <Set_Omega_PID_Gain>:

void Set_Omega_PID_Gain(float Kp,float Ki,float Kd){
 800e8f8:	b480      	push	{r7}
 800e8fa:	b085      	sub	sp, #20
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	ed87 0a03 	vstr	s0, [r7, #12]
 800e902:	edc7 0a02 	vstr	s1, [r7, #8]
 800e906:	ed87 1a01 	vstr	s2, [r7, #4]
	omega_g.Kp = Kp;
 800e90a:	4a07      	ldr	r2, [pc, #28]	; (800e928 <Set_Omega_PID_Gain+0x30>)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	6013      	str	r3, [r2, #0]
	omega_g.Ki = Ki;
 800e910:	4a05      	ldr	r2, [pc, #20]	; (800e928 <Set_Omega_PID_Gain+0x30>)
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	6053      	str	r3, [r2, #4]
	omega_g.Kd = Kd;
 800e916:	4a04      	ldr	r2, [pc, #16]	; (800e928 <Set_Omega_PID_Gain+0x30>)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6093      	str	r3, [r2, #8]
}
 800e91c:	bf00      	nop
 800e91e:	3714      	adds	r7, #20
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	20009890 	.word	0x20009890

0800e92c <Set_PID_Gain>:

void Set_PID_Gain(t_pid_gain *pid_gain,float Kp,float Ki,float Kd)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	ed87 0a02 	vstr	s0, [r7, #8]
 800e938:	edc7 0a01 	vstr	s1, [r7, #4]
 800e93c:	ed87 1a00 	vstr	s2, [r7]
	pid_gain->Kp = Kp;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	68ba      	ldr	r2, [r7, #8]
 800e944:	601a      	str	r2, [r3, #0]
	pid_gain->Ki = Ki;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	605a      	str	r2, [r3, #4]
	pid_gain->Kd = Kd;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	683a      	ldr	r2, [r7, #0]
 800e950:	609a      	str	r2, [r3, #8]
}
 800e952:	bf00      	nop
 800e954:	3714      	adds	r7, #20
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr
	...

0800e960 <straight>:

void straight(float len_target,float acc,float max_sp,float end_sp){
 800e960:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e964:	b086      	sub	sp, #24
 800e966:	af00      	add	r7, sp, #0
 800e968:	ed87 0a03 	vstr	s0, [r7, #12]
 800e96c:	edc7 0a02 	vstr	s1, [r7, #8]
 800e970:	ed87 1a01 	vstr	s2, [r7, #4]
 800e974:	edc7 1a00 	vstr	s3, [r7]
	//Machine_Param_Initialize();
	//Target_Param_Initialize();
	//MAX_Param_Initialize();

	Sp_Param_I_Initialize(&machine);
 800e978:	48a9      	ldr	r0, [pc, #676]	; (800ec20 <straight+0x2c0>)
 800e97a:	f7ff fed5 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&target);
 800e97e:	48a9      	ldr	r0, [pc, #676]	; (800ec24 <straight+0x2c4>)
 800e980:	f7ff fed2 	bl	800e728 <Sp_Param_I_Initialize>
	if(end_sp == 0.0f)
 800e984:	edd7 7a00 	vldr	s15, [r7]
 800e988:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e990:	f040 80a5 	bne.w	800eade <straight+0x17e>
	{
		run_mode = STRAIGHT_MODE;
 800e994:	4ba4      	ldr	r3, [pc, #656]	; (800ec28 <straight+0x2c8>)
 800e996:	2201      	movs	r2, #1
 800e998:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 800e99a:	4aa4      	ldr	r2, [pc, #656]	; (800ec2c <straight+0x2cc>)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6013      	str	r3, [r2, #0]
		int wait_time = (int)(max_sp/3.0*1000.0);
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f7f1 fdf1 	bl	8000588 <__aeabi_f2d>
 800e9a6:	f04f 0200 	mov.w	r2, #0
 800e9aa:	4ba1      	ldr	r3, [pc, #644]	; (800ec30 <straight+0x2d0>)
 800e9ac:	f7f1 ff6e 	bl	800088c <__aeabi_ddiv>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	4621      	mov	r1, r4
 800e9b8:	f04f 0200 	mov.w	r2, #0
 800e9bc:	4b9d      	ldr	r3, [pc, #628]	; (800ec34 <straight+0x2d4>)
 800e9be:	f7f1 fe3b 	bl	8000638 <__aeabi_dmul>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	460c      	mov	r4, r1
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	4621      	mov	r1, r4
 800e9ca:	f7f2 f8e5 	bl	8000b98 <__aeabi_d2iz>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	617b      	str	r3, [r7, #20]
		max_set.accel = acc;
 800e9d2:	4a96      	ldr	r2, [pc, #600]	; (800ec2c <straight+0x2cc>)
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 800e9d8:	4a92      	ldr	r2, [pc, #584]	; (800ec24 <straight+0x2c4>)
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 800e9de:	4a93      	ldr	r2, [pc, #588]	; (800ec2c <straight+0x2cc>)
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length- machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel));
 800e9e4:	bf00      	nop
 800e9e6:	4b91      	ldr	r3, [pc, #580]	; (800ec2c <straight+0x2cc>)
 800e9e8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800e9ec:	4b8c      	ldr	r3, [pc, #560]	; (800ec20 <straight+0x2c0>)
 800e9ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800e9f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9f6:	ee17 0a90 	vmov	r0, s15
 800e9fa:	f7f1 fdc5 	bl	8000588 <__aeabi_f2d>
 800e9fe:	4604      	mov	r4, r0
 800ea00:	460d      	mov	r5, r1
 800ea02:	4b8a      	ldr	r3, [pc, #552]	; (800ec2c <straight+0x2cc>)
 800ea04:	ed93 7a00 	vldr	s14, [r3]
 800ea08:	4b88      	ldr	r3, [pc, #544]	; (800ec2c <straight+0x2cc>)
 800ea0a:	edd3 7a00 	vldr	s15, [r3]
 800ea0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ea12:	edd7 6a00 	vldr	s13, [r7]
 800ea16:	edd7 7a00 	vldr	s15, [r7]
 800ea1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ea1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea22:	ee17 0a90 	vmov	r0, s15
 800ea26:	f7f1 fdaf 	bl	8000588 <__aeabi_f2d>
 800ea2a:	f04f 0200 	mov.w	r2, #0
 800ea2e:	4b81      	ldr	r3, [pc, #516]	; (800ec34 <straight+0x2d4>)
 800ea30:	f7f1 fe02 	bl	8000638 <__aeabi_dmul>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4690      	mov	r8, r2
 800ea3a:	4699      	mov	r9, r3
 800ea3c:	4b7b      	ldr	r3, [pc, #492]	; (800ec2c <straight+0x2cc>)
 800ea3e:	68db      	ldr	r3, [r3, #12]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7f1 fda1 	bl	8000588 <__aeabi_f2d>
 800ea46:	4602      	mov	r2, r0
 800ea48:	460b      	mov	r3, r1
 800ea4a:	f7f1 fc3f 	bl	80002cc <__adddf3>
 800ea4e:	4602      	mov	r2, r0
 800ea50:	460b      	mov	r3, r1
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 ff19 	bl	800088c <__aeabi_ddiv>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4620      	mov	r0, r4
 800ea60:	4629      	mov	r1, r5
 800ea62:	f7f2 f879 	bl	8000b58 <__aeabi_dcmpgt>
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1bc      	bne.n	800e9e6 <straight+0x86>
		target.accel = -acc;
 800ea6c:	edd7 7a02 	vldr	s15, [r7, #8]
 800ea70:	eef1 7a67 	vneg.f32	s15, s15
 800ea74:	4b6b      	ldr	r3, [pc, #428]	; (800ec24 <straight+0x2c4>)
 800ea76:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 800ea7a:	e015      	b.n	800eaa8 <straight+0x148>
			if(target.velo < 0.05){
 800ea7c:	4b69      	ldr	r3, [pc, #420]	; (800ec24 <straight+0x2c4>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4618      	mov	r0, r3
 800ea82:	f7f1 fd81 	bl	8000588 <__aeabi_f2d>
 800ea86:	a364      	add	r3, pc, #400	; (adr r3, 800ec18 <straight+0x2b8>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	f7f2 f846 	bl	8000b1c <__aeabi_dcmplt>
 800ea90:	4603      	mov	r3, r0
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d100      	bne.n	800ea98 <straight+0x138>
 800ea96:	e007      	b.n	800eaa8 <straight+0x148>
				target.accel = 0.0;target.velo = 0.05;
 800ea98:	4b62      	ldr	r3, [pc, #392]	; (800ec24 <straight+0x2c4>)
 800ea9a:	f04f 0200 	mov.w	r2, #0
 800ea9e:	60da      	str	r2, [r3, #12]
 800eaa0:	4b60      	ldr	r3, [pc, #384]	; (800ec24 <straight+0x2c4>)
 800eaa2:	4a65      	ldr	r2, [pc, #404]	; (800ec38 <straight+0x2d8>)
 800eaa4:	601a      	str	r2, [r3, #0]
				break;
 800eaa6:	e00a      	b.n	800eabe <straight+0x15e>
		while(machine.length < max_set.length){
 800eaa8:	4b5d      	ldr	r3, [pc, #372]	; (800ec20 <straight+0x2c0>)
 800eaaa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800eaae:	4b5f      	ldr	r3, [pc, #380]	; (800ec2c <straight+0x2cc>)
 800eab0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800eab4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eabc:	d4de      	bmi.n	800ea7c <straight+0x11c>
			}
		}
		target.accel = 0.0;target.velo = 0.0;
 800eabe:	4b59      	ldr	r3, [pc, #356]	; (800ec24 <straight+0x2c4>)
 800eac0:	f04f 0200 	mov.w	r2, #0
 800eac4:	60da      	str	r2, [r3, #12]
 800eac6:	4b57      	ldr	r3, [pc, #348]	; (800ec24 <straight+0x2c4>)
 800eac8:	f04f 0200 	mov.w	r2, #0
 800eacc:	601a      	str	r2, [r3, #0]
		HAL_Delay(wait_time);
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	4618      	mov	r0, r3
 800ead2:	f008 fb93 	bl	80171fc <HAL_Delay>
		run_mode = NON_CON_MODE;
 800ead6:	4b54      	ldr	r3, [pc, #336]	; (800ec28 <straight+0x2c8>)
 800ead8:	2200      	movs	r2, #0
 800eada:	701a      	strb	r2, [r3, #0]
 800eadc:	e08d      	b.n	800ebfa <straight+0x29a>
	}
	else
	{
		run_mode = STRAIGHT_MODE;
 800eade:	4b52      	ldr	r3, [pc, #328]	; (800ec28 <straight+0x2c8>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 800eae4:	4a51      	ldr	r2, [pc, #324]	; (800ec2c <straight+0x2cc>)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6013      	str	r3, [r2, #0]
		max_set.accel = acc;
 800eaea:	4a50      	ldr	r2, [pc, #320]	; (800ec2c <straight+0x2cc>)
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 800eaf0:	4a4c      	ldr	r2, [pc, #304]	; (800ec24 <straight+0x2c4>)
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 800eaf6:	4a4d      	ldr	r2, [pc, #308]	; (800ec2c <straight+0x2cc>)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length - OFF_SET_LENGTH - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel));
 800eafc:	bf00      	nop
 800eafe:	4b4b      	ldr	r3, [pc, #300]	; (800ec2c <straight+0x2cc>)
 800eb00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7f1 fd40 	bl	8000588 <__aeabi_f2d>
 800eb08:	f04f 0200 	mov.w	r2, #0
 800eb0c:	4b4b      	ldr	r3, [pc, #300]	; (800ec3c <straight+0x2dc>)
 800eb0e:	f7f1 fbdb 	bl	80002c8 <__aeabi_dsub>
 800eb12:	4603      	mov	r3, r0
 800eb14:	460c      	mov	r4, r1
 800eb16:	4625      	mov	r5, r4
 800eb18:	461c      	mov	r4, r3
 800eb1a:	4b41      	ldr	r3, [pc, #260]	; (800ec20 <straight+0x2c0>)
 800eb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f1 fd32 	bl	8000588 <__aeabi_f2d>
 800eb24:	4602      	mov	r2, r0
 800eb26:	460b      	mov	r3, r1
 800eb28:	4620      	mov	r0, r4
 800eb2a:	4629      	mov	r1, r5
 800eb2c:	f7f1 fbcc 	bl	80002c8 <__aeabi_dsub>
 800eb30:	4603      	mov	r3, r0
 800eb32:	460c      	mov	r4, r1
 800eb34:	4625      	mov	r5, r4
 800eb36:	461c      	mov	r4, r3
 800eb38:	4b3c      	ldr	r3, [pc, #240]	; (800ec2c <straight+0x2cc>)
 800eb3a:	ed93 7a00 	vldr	s14, [r3]
 800eb3e:	4b3b      	ldr	r3, [pc, #236]	; (800ec2c <straight+0x2cc>)
 800eb40:	edd3 7a00 	vldr	s15, [r3]
 800eb44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb48:	edd7 6a00 	vldr	s13, [r7]
 800eb4c:	edd7 7a00 	vldr	s15, [r7]
 800eb50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb58:	ee17 0a90 	vmov	r0, s15
 800eb5c:	f7f1 fd14 	bl	8000588 <__aeabi_f2d>
 800eb60:	f04f 0200 	mov.w	r2, #0
 800eb64:	4b33      	ldr	r3, [pc, #204]	; (800ec34 <straight+0x2d4>)
 800eb66:	f7f1 fd67 	bl	8000638 <__aeabi_dmul>
 800eb6a:	4602      	mov	r2, r0
 800eb6c:	460b      	mov	r3, r1
 800eb6e:	4690      	mov	r8, r2
 800eb70:	4699      	mov	r9, r3
 800eb72:	4b2e      	ldr	r3, [pc, #184]	; (800ec2c <straight+0x2cc>)
 800eb74:	68db      	ldr	r3, [r3, #12]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f7f1 fd06 	bl	8000588 <__aeabi_f2d>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	460b      	mov	r3, r1
 800eb80:	f7f1 fba4 	bl	80002cc <__adddf3>
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4640      	mov	r0, r8
 800eb8a:	4649      	mov	r1, r9
 800eb8c:	f7f1 fe7e 	bl	800088c <__aeabi_ddiv>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	4620      	mov	r0, r4
 800eb96:	4629      	mov	r1, r5
 800eb98:	f7f1 ffde 	bl	8000b58 <__aeabi_dcmpgt>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d1ad      	bne.n	800eafe <straight+0x19e>
		target.accel = -acc;
 800eba2:	edd7 7a02 	vldr	s15, [r7, #8]
 800eba6:	eef1 7a67 	vneg.f32	s15, s15
 800ebaa:	4b1e      	ldr	r3, [pc, #120]	; (800ec24 <straight+0x2c4>)
 800ebac:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 800ebb0:	e011      	b.n	800ebd6 <straight+0x276>
			if(target.velo < end_sp){
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <straight+0x2c4>)
 800ebb4:	edd3 7a00 	vldr	s15, [r3]
 800ebb8:	ed97 7a00 	vldr	s14, [r7]
 800ebbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc4:	dc00      	bgt.n	800ebc8 <straight+0x268>
 800ebc6:	e006      	b.n	800ebd6 <straight+0x276>
				target.accel = 0.0;target.velo = end_sp;
 800ebc8:	4b16      	ldr	r3, [pc, #88]	; (800ec24 <straight+0x2c4>)
 800ebca:	f04f 0200 	mov.w	r2, #0
 800ebce:	60da      	str	r2, [r3, #12]
 800ebd0:	4a14      	ldr	r2, [pc, #80]	; (800ec24 <straight+0x2c4>)
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	6013      	str	r3, [r2, #0]
		while(machine.length < max_set.length){
 800ebd6:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <straight+0x2c0>)
 800ebd8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ebdc:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <straight+0x2cc>)
 800ebde:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ebe2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebea:	d4e2      	bmi.n	800ebb2 <straight+0x252>
			}
		}
		target.accel = 0.0;target.velo = end_sp;
 800ebec:	4b0d      	ldr	r3, [pc, #52]	; (800ec24 <straight+0x2c4>)
 800ebee:	f04f 0200 	mov.w	r2, #0
 800ebf2:	60da      	str	r2, [r3, #12]
 800ebf4:	4a0b      	ldr	r2, [pc, #44]	; (800ec24 <straight+0x2c4>)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	6013      	str	r3, [r2, #0]
	}

	machine.length = 0.0;
 800ebfa:	4b09      	ldr	r3, [pc, #36]	; (800ec20 <straight+0x2c0>)
 800ebfc:	f04f 0200 	mov.w	r2, #0
 800ec00:	629a      	str	r2, [r3, #40]	; 0x28
	target.length =  0.0;
 800ec02:	4b08      	ldr	r3, [pc, #32]	; (800ec24 <straight+0x2c4>)
 800ec04:	f04f 0200 	mov.w	r2, #0
 800ec08:	629a      	str	r2, [r3, #40]	; 0x28
	//run_mode = NON_CON_MODE;

}
 800ec0a:	bf00      	nop
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec14:	f3af 8000 	nop.w
 800ec18:	9999999a 	.word	0x9999999a
 800ec1c:	3fa99999 	.word	0x3fa99999
 800ec20:	2001b664 	.word	0x2001b664
 800ec24:	2001b6a0 	.word	0x2001b6a0
 800ec28:	20001708 	.word	0x20001708
 800ec2c:	2001b1b4 	.word	0x2001b1b4
 800ec30:	40080000 	.word	0x40080000
 800ec34:	408f4000 	.word	0x408f4000
 800ec38:	3d4ccccd 	.word	0x3d4ccccd
 800ec3c:	40240000 	.word	0x40240000

0800ec40 <diagonal>:

void diagonal(float len_target,float acc,float max_sp,float end_sp){
 800ec40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ec44:	b086      	sub	sp, #24
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	ed87 0a03 	vstr	s0, [r7, #12]
 800ec4c:	edc7 0a02 	vstr	s1, [r7, #8]
 800ec50:	ed87 1a01 	vstr	s2, [r7, #4]
 800ec54:	edc7 1a00 	vstr	s3, [r7]
	//Machine_Param_Initialize();
	//Target_Param_Initialize();
	//MAX_Param_Initialize();

	Sp_Param_I_Initialize(&machine);
 800ec58:	48a4      	ldr	r0, [pc, #656]	; (800eeec <diagonal+0x2ac>)
 800ec5a:	f7ff fd65 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&target);
 800ec5e:	48a4      	ldr	r0, [pc, #656]	; (800eef0 <diagonal+0x2b0>)
 800ec60:	f7ff fd62 	bl	800e728 <Sp_Param_I_Initialize>
	//Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
	//Set_Velo_PID_Gain(12.0f, 0.1f, 0.0f);
	machine.radian		= 0.0f;
 800ec64:	4ba1      	ldr	r3, [pc, #644]	; (800eeec <diagonal+0x2ac>)
 800ec66:	f04f 0200 	mov.w	r2, #0
 800ec6a:	62da      	str	r2, [r3, #44]	; 0x2c
	target.radian		= 0.0f;
 800ec6c:	4ba0      	ldr	r3, [pc, #640]	; (800eef0 <diagonal+0x2b0>)
 800ec6e:	f04f 0200 	mov.w	r2, #0
 800ec72:	62da      	str	r2, [r3, #44]	; 0x2c
	diag_predict_xr = diag_predict_xl = DIAG_HALF_SECTION;
 800ec74:	4b9f      	ldr	r3, [pc, #636]	; (800eef4 <diagonal+0x2b4>)
 800ec76:	4aa0      	ldr	r2, [pc, #640]	; (800eef8 <diagonal+0x2b8>)
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	4b9e      	ldr	r3, [pc, #632]	; (800eef4 <diagonal+0x2b4>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	4a9f      	ldr	r2, [pc, #636]	; (800eefc <diagonal+0x2bc>)
 800ec80:	6013      	str	r3, [r2, #0]
	if(end_sp == 0.0f)
 800ec82:	edd7 7a00 	vldr	s15, [r7]
 800ec86:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ec8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec8e:	f040 80a1 	bne.w	800edd4 <diagonal+0x194>
	{
		run_mode = DIAG_MODE;
 800ec92:	4b9b      	ldr	r3, [pc, #620]	; (800ef00 <diagonal+0x2c0>)
 800ec94:	2203      	movs	r2, #3
 800ec96:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 800ec98:	4a9a      	ldr	r2, [pc, #616]	; (800ef04 <diagonal+0x2c4>)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6013      	str	r3, [r2, #0]
		int wait_time = (int)(max_sp/3.0*1000.0);
 800ec9e:	6878      	ldr	r0, [r7, #4]
 800eca0:	f7f1 fc72 	bl	8000588 <__aeabi_f2d>
 800eca4:	f04f 0200 	mov.w	r2, #0
 800eca8:	4b97      	ldr	r3, [pc, #604]	; (800ef08 <diagonal+0x2c8>)
 800ecaa:	f7f1 fdef 	bl	800088c <__aeabi_ddiv>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	4621      	mov	r1, r4
 800ecb6:	f04f 0200 	mov.w	r2, #0
 800ecba:	4b94      	ldr	r3, [pc, #592]	; (800ef0c <diagonal+0x2cc>)
 800ecbc:	f7f1 fcbc 	bl	8000638 <__aeabi_dmul>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	f7f1 ff66 	bl	8000b98 <__aeabi_d2iz>
 800eccc:	4603      	mov	r3, r0
 800ecce:	617b      	str	r3, [r7, #20]
		max_set.accel = acc;
 800ecd0:	4a8c      	ldr	r2, [pc, #560]	; (800ef04 <diagonal+0x2c4>)
 800ecd2:	68bb      	ldr	r3, [r7, #8]
 800ecd4:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 800ecd6:	4a86      	ldr	r2, [pc, #536]	; (800eef0 <diagonal+0x2b0>)
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 800ecdc:	4a89      	ldr	r2, [pc, #548]	; (800ef04 <diagonal+0x2c4>)
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel));
 800ece2:	bf00      	nop
 800ece4:	4b87      	ldr	r3, [pc, #540]	; (800ef04 <diagonal+0x2c4>)
 800ece6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ecea:	4b80      	ldr	r3, [pc, #512]	; (800eeec <diagonal+0x2ac>)
 800ecec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ecf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecf4:	ee17 0a90 	vmov	r0, s15
 800ecf8:	f7f1 fc46 	bl	8000588 <__aeabi_f2d>
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	460d      	mov	r5, r1
 800ed00:	4b80      	ldr	r3, [pc, #512]	; (800ef04 <diagonal+0x2c4>)
 800ed02:	ed93 7a00 	vldr	s14, [r3]
 800ed06:	4b7f      	ldr	r3, [pc, #508]	; (800ef04 <diagonal+0x2c4>)
 800ed08:	edd3 7a00 	vldr	s15, [r3]
 800ed0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed10:	edd7 6a00 	vldr	s13, [r7]
 800ed14:	edd7 7a00 	vldr	s15, [r7]
 800ed18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed20:	ee17 0a90 	vmov	r0, s15
 800ed24:	f7f1 fc30 	bl	8000588 <__aeabi_f2d>
 800ed28:	f04f 0200 	mov.w	r2, #0
 800ed2c:	4b77      	ldr	r3, [pc, #476]	; (800ef0c <diagonal+0x2cc>)
 800ed2e:	f7f1 fc83 	bl	8000638 <__aeabi_dmul>
 800ed32:	4602      	mov	r2, r0
 800ed34:	460b      	mov	r3, r1
 800ed36:	4690      	mov	r8, r2
 800ed38:	4699      	mov	r9, r3
 800ed3a:	4b72      	ldr	r3, [pc, #456]	; (800ef04 <diagonal+0x2c4>)
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f7f1 fc22 	bl	8000588 <__aeabi_f2d>
 800ed44:	4602      	mov	r2, r0
 800ed46:	460b      	mov	r3, r1
 800ed48:	f7f1 fac0 	bl	80002cc <__adddf3>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	4640      	mov	r0, r8
 800ed52:	4649      	mov	r1, r9
 800ed54:	f7f1 fd9a 	bl	800088c <__aeabi_ddiv>
 800ed58:	4602      	mov	r2, r0
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	f7f1 fefa 	bl	8000b58 <__aeabi_dcmpgt>
 800ed64:	4603      	mov	r3, r0
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1bc      	bne.n	800ece4 <diagonal+0xa4>
		target.accel = -acc;
 800ed6a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed6e:	eef1 7a67 	vneg.f32	s15, s15
 800ed72:	4b5f      	ldr	r3, [pc, #380]	; (800eef0 <diagonal+0x2b0>)
 800ed74:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 800ed78:	e011      	b.n	800ed9e <diagonal+0x15e>
			if(target.velo < 0.0){
 800ed7a:	4b5d      	ldr	r3, [pc, #372]	; (800eef0 <diagonal+0x2b0>)
 800ed7c:	edd3 7a00 	vldr	s15, [r3]
 800ed80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed88:	d400      	bmi.n	800ed8c <diagonal+0x14c>
 800ed8a:	e008      	b.n	800ed9e <diagonal+0x15e>
				target.accel = 0.0;target.velo = 0.0;
 800ed8c:	4b58      	ldr	r3, [pc, #352]	; (800eef0 <diagonal+0x2b0>)
 800ed8e:	f04f 0200 	mov.w	r2, #0
 800ed92:	60da      	str	r2, [r3, #12]
 800ed94:	4b56      	ldr	r3, [pc, #344]	; (800eef0 <diagonal+0x2b0>)
 800ed96:	f04f 0200 	mov.w	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]
				break;
 800ed9c:	e00a      	b.n	800edb4 <diagonal+0x174>
		while(machine.length < max_set.length){
 800ed9e:	4b53      	ldr	r3, [pc, #332]	; (800eeec <diagonal+0x2ac>)
 800eda0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800eda4:	4b57      	ldr	r3, [pc, #348]	; (800ef04 <diagonal+0x2c4>)
 800eda6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800edaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800edae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edb2:	d4e2      	bmi.n	800ed7a <diagonal+0x13a>
			}
		}
		target.accel = 0.0;target.velo = 0.0;
 800edb4:	4b4e      	ldr	r3, [pc, #312]	; (800eef0 <diagonal+0x2b0>)
 800edb6:	f04f 0200 	mov.w	r2, #0
 800edba:	60da      	str	r2, [r3, #12]
 800edbc:	4b4c      	ldr	r3, [pc, #304]	; (800eef0 <diagonal+0x2b0>)
 800edbe:	f04f 0200 	mov.w	r2, #0
 800edc2:	601a      	str	r2, [r3, #0]
		HAL_Delay(wait_time);
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f008 fa18 	bl	80171fc <HAL_Delay>
		run_mode = NON_CON_MODE;
 800edcc:	4b4c      	ldr	r3, [pc, #304]	; (800ef00 <diagonal+0x2c0>)
 800edce:	2200      	movs	r2, #0
 800edd0:	701a      	strb	r2, [r3, #0]
 800edd2:	e07e      	b.n	800eed2 <diagonal+0x292>
	}
	else
	{
		run_mode = DIAG_MODE;
 800edd4:	4b4a      	ldr	r3, [pc, #296]	; (800ef00 <diagonal+0x2c0>)
 800edd6:	2203      	movs	r2, #3
 800edd8:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 800edda:	4a4a      	ldr	r2, [pc, #296]	; (800ef04 <diagonal+0x2c4>)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6013      	str	r3, [r2, #0]
		max_set.accel = acc;
 800ede0:	4a48      	ldr	r2, [pc, #288]	; (800ef04 <diagonal+0x2c4>)
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 800ede6:	4a42      	ldr	r2, [pc, #264]	; (800eef0 <diagonal+0x2b0>)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 800edec:	4a45      	ldr	r2, [pc, #276]	; (800ef04 <diagonal+0x2c4>)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel));
 800edf2:	bf00      	nop
 800edf4:	4b43      	ldr	r3, [pc, #268]	; (800ef04 <diagonal+0x2c4>)
 800edf6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800edfa:	4b3c      	ldr	r3, [pc, #240]	; (800eeec <diagonal+0x2ac>)
 800edfc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ee00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee04:	ee17 0a90 	vmov	r0, s15
 800ee08:	f7f1 fbbe 	bl	8000588 <__aeabi_f2d>
 800ee0c:	4604      	mov	r4, r0
 800ee0e:	460d      	mov	r5, r1
 800ee10:	4b3c      	ldr	r3, [pc, #240]	; (800ef04 <diagonal+0x2c4>)
 800ee12:	ed93 7a00 	vldr	s14, [r3]
 800ee16:	4b3b      	ldr	r3, [pc, #236]	; (800ef04 <diagonal+0x2c4>)
 800ee18:	edd3 7a00 	vldr	s15, [r3]
 800ee1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee20:	edd7 6a00 	vldr	s13, [r7]
 800ee24:	edd7 7a00 	vldr	s15, [r7]
 800ee28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee30:	ee17 0a90 	vmov	r0, s15
 800ee34:	f7f1 fba8 	bl	8000588 <__aeabi_f2d>
 800ee38:	f04f 0200 	mov.w	r2, #0
 800ee3c:	4b33      	ldr	r3, [pc, #204]	; (800ef0c <diagonal+0x2cc>)
 800ee3e:	f7f1 fbfb 	bl	8000638 <__aeabi_dmul>
 800ee42:	4602      	mov	r2, r0
 800ee44:	460b      	mov	r3, r1
 800ee46:	4690      	mov	r8, r2
 800ee48:	4699      	mov	r9, r3
 800ee4a:	4b2e      	ldr	r3, [pc, #184]	; (800ef04 <diagonal+0x2c4>)
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7f1 fb9a 	bl	8000588 <__aeabi_f2d>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	f7f1 fa38 	bl	80002cc <__adddf3>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	460b      	mov	r3, r1
 800ee60:	4640      	mov	r0, r8
 800ee62:	4649      	mov	r1, r9
 800ee64:	f7f1 fd12 	bl	800088c <__aeabi_ddiv>
 800ee68:	4602      	mov	r2, r0
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	4620      	mov	r0, r4
 800ee6e:	4629      	mov	r1, r5
 800ee70:	f7f1 fe72 	bl	8000b58 <__aeabi_dcmpgt>
 800ee74:	4603      	mov	r3, r0
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1bc      	bne.n	800edf4 <diagonal+0x1b4>
		target.accel = -acc;
 800ee7a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ee7e:	eef1 7a67 	vneg.f32	s15, s15
 800ee82:	4b1b      	ldr	r3, [pc, #108]	; (800eef0 <diagonal+0x2b0>)
 800ee84:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 800ee88:	e011      	b.n	800eeae <diagonal+0x26e>
			if(target.velo < end_sp){
 800ee8a:	4b19      	ldr	r3, [pc, #100]	; (800eef0 <diagonal+0x2b0>)
 800ee8c:	edd3 7a00 	vldr	s15, [r3]
 800ee90:	ed97 7a00 	vldr	s14, [r7]
 800ee94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ee98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9c:	dc00      	bgt.n	800eea0 <diagonal+0x260>
 800ee9e:	e006      	b.n	800eeae <diagonal+0x26e>
				target.accel = 0.0;target.velo = end_sp;
 800eea0:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <diagonal+0x2b0>)
 800eea2:	f04f 0200 	mov.w	r2, #0
 800eea6:	60da      	str	r2, [r3, #12]
 800eea8:	4a11      	ldr	r2, [pc, #68]	; (800eef0 <diagonal+0x2b0>)
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	6013      	str	r3, [r2, #0]
		while(machine.length < max_set.length){
 800eeae:	4b0f      	ldr	r3, [pc, #60]	; (800eeec <diagonal+0x2ac>)
 800eeb0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800eeb4:	4b13      	ldr	r3, [pc, #76]	; (800ef04 <diagonal+0x2c4>)
 800eeb6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800eeba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec2:	d4e2      	bmi.n	800ee8a <diagonal+0x24a>
			}
		}
		target.accel = 0.0;target.velo = end_sp;
 800eec4:	4b0a      	ldr	r3, [pc, #40]	; (800eef0 <diagonal+0x2b0>)
 800eec6:	f04f 0200 	mov.w	r2, #0
 800eeca:	60da      	str	r2, [r3, #12]
 800eecc:	4a08      	ldr	r2, [pc, #32]	; (800eef0 <diagonal+0x2b0>)
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	6013      	str	r3, [r2, #0]
	}

	machine.length = 0.0;
 800eed2:	4b06      	ldr	r3, [pc, #24]	; (800eeec <diagonal+0x2ac>)
 800eed4:	f04f 0200 	mov.w	r2, #0
 800eed8:	629a      	str	r2, [r3, #40]	; 0x28
	target.length =  0.0;
 800eeda:	4b05      	ldr	r3, [pc, #20]	; (800eef0 <diagonal+0x2b0>)
 800eedc:	f04f 0200 	mov.w	r2, #0
 800eee0:	629a      	str	r2, [r3, #40]	; 0x28
	//run_mode = NON_CON_MODE;

}
 800eee2:	bf00      	nop
 800eee4:	3718      	adds	r7, #24
 800eee6:	46bd      	mov	sp, r7
 800eee8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800eeec:	2001b664 	.word	0x2001b664
 800eef0:	2001b6a0 	.word	0x2001b6a0
 800eef4:	2001b660 	.word	0x2001b660
 800eef8:	41fe8ef3 	.word	0x41fe8ef3
 800eefc:	20009484 	.word	0x20009484
 800ef00:	20001708 	.word	0x20001708
 800ef04:	2001b1b4 	.word	0x2001b1b4
 800ef08:	40080000 	.word	0x40080000
 800ef0c:	408f4000 	.word	0x408f4000

0800ef10 <Spin_turn>:
	target.length =  0.0;
	//run_mode = NON_CON_MODE;

}

void Spin_turn(float rad_target,float rad_acc,float max_rad_velo,t_turn_dir turn_dir){
 800ef10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ef14:	b084      	sub	sp, #16
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	ed87 0a03 	vstr	s0, [r7, #12]
 800ef1c:	edc7 0a02 	vstr	s1, [r7, #8]
 800ef20:	ed87 1a01 	vstr	s2, [r7, #4]
 800ef24:	4603      	mov	r3, r0
 800ef26:	70fb      	strb	r3, [r7, #3]

	Machine_Param_Initialize();
 800ef28:	f7ff fc4e 	bl	800e7c8 <Machine_Param_Initialize>
	Target_Param_Initialize();
 800ef2c:	f7ff fc76 	bl	800e81c <Target_Param_Initialize>
	MAX_Param_Initialize();
 800ef30:	f7ff fc9e 	bl	800e870 <MAX_Param_Initialize>

	if(turn_dir == turn_left)
 800ef34:	78fb      	ldrb	r3, [r7, #3]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d10f      	bne.n	800ef5a <Spin_turn+0x4a>
	{
		run_mode = TURN_MODE;
 800ef3a:	4bbf      	ldr	r3, [pc, #764]	; (800f238 <Spin_turn+0x328>)
 800ef3c:	2202      	movs	r2, #2
 800ef3e:	701a      	strb	r2, [r3, #0]
		max_set.rad_velo = max_rad_velo;
 800ef40:	4abe      	ldr	r2, [pc, #760]	; (800f23c <Spin_turn+0x32c>)
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	6153      	str	r3, [r2, #20]
		target.rad_accel = rad_acc;
 800ef46:	4abe      	ldr	r2, [pc, #760]	; (800f240 <Spin_turn+0x330>)
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	6213      	str	r3, [r2, #32]
		max_set.rad_accel= rad_acc;
 800ef4c:	4abb      	ldr	r2, [pc, #748]	; (800f23c <Spin_turn+0x32c>)
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	6213      	str	r3, [r2, #32]
		max_set.radian   = rad_target;
 800ef52:	4aba      	ldr	r2, [pc, #744]	; (800f23c <Spin_turn+0x32c>)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ef58:	e021      	b.n	800ef9e <Spin_turn+0x8e>
	}
	else if(turn_dir == turn_right)
 800ef5a:	78fb      	ldrb	r3, [r7, #3]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d11e      	bne.n	800ef9e <Spin_turn+0x8e>
	{
		run_mode = TURN_MODE;
 800ef60:	4bb5      	ldr	r3, [pc, #724]	; (800f238 <Spin_turn+0x328>)
 800ef62:	2202      	movs	r2, #2
 800ef64:	701a      	strb	r2, [r3, #0]
		max_set.rad_velo = -max_rad_velo;
 800ef66:	edd7 7a01 	vldr	s15, [r7, #4]
 800ef6a:	eef1 7a67 	vneg.f32	s15, s15
 800ef6e:	4bb3      	ldr	r3, [pc, #716]	; (800f23c <Spin_turn+0x32c>)
 800ef70:	edc3 7a05 	vstr	s15, [r3, #20]
		target.rad_accel = -rad_acc;
 800ef74:	edd7 7a02 	vldr	s15, [r7, #8]
 800ef78:	eef1 7a67 	vneg.f32	s15, s15
 800ef7c:	4bb0      	ldr	r3, [pc, #704]	; (800f240 <Spin_turn+0x330>)
 800ef7e:	edc3 7a08 	vstr	s15, [r3, #32]
		max_set.rad_accel= -rad_acc;
 800ef82:	edd7 7a02 	vldr	s15, [r7, #8]
 800ef86:	eef1 7a67 	vneg.f32	s15, s15
 800ef8a:	4bac      	ldr	r3, [pc, #688]	; (800f23c <Spin_turn+0x32c>)
 800ef8c:	edc3 7a08 	vstr	s15, [r3, #32]
		max_set.radian   = -rad_target;
 800ef90:	edd7 7a03 	vldr	s15, [r7, #12]
 800ef94:	eef1 7a67 	vneg.f32	s15, s15
 800ef98:	4ba8      	ldr	r3, [pc, #672]	; (800f23c <Spin_turn+0x32c>)
 800ef9a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	}

	while(ABS(max_set.radian) - ABS(machine.radian) > ABS((max_set.rad_velo*max_set.rad_velo)/(2.0*max_set.rad_accel)));
 800ef9e:	bf00      	nop
 800efa0:	4ba6      	ldr	r3, [pc, #664]	; (800f23c <Spin_turn+0x32c>)
 800efa2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800efa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800efaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efae:	d505      	bpl.n	800efbc <Spin_turn+0xac>
 800efb0:	4ba2      	ldr	r3, [pc, #648]	; (800f23c <Spin_turn+0x32c>)
 800efb2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800efb6:	eeb1 7a67 	vneg.f32	s14, s15
 800efba:	e002      	b.n	800efc2 <Spin_turn+0xb2>
 800efbc:	4b9f      	ldr	r3, [pc, #636]	; (800f23c <Spin_turn+0x32c>)
 800efbe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800efc2:	4ba0      	ldr	r3, [pc, #640]	; (800f244 <Spin_turn+0x334>)
 800efc4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800efc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800efcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd0:	d505      	bpl.n	800efde <Spin_turn+0xce>
 800efd2:	4b9c      	ldr	r3, [pc, #624]	; (800f244 <Spin_turn+0x334>)
 800efd4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800efd8:	eef1 7a67 	vneg.f32	s15, s15
 800efdc:	e002      	b.n	800efe4 <Spin_turn+0xd4>
 800efde:	4b99      	ldr	r3, [pc, #612]	; (800f244 <Spin_turn+0x334>)
 800efe0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800efe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe8:	ee17 0a90 	vmov	r0, s15
 800efec:	f7f1 facc 	bl	8000588 <__aeabi_f2d>
 800eff0:	4680      	mov	r8, r0
 800eff2:	4689      	mov	r9, r1
 800eff4:	4b91      	ldr	r3, [pc, #580]	; (800f23c <Spin_turn+0x32c>)
 800eff6:	ed93 7a05 	vldr	s14, [r3, #20]
 800effa:	4b90      	ldr	r3, [pc, #576]	; (800f23c <Spin_turn+0x32c>)
 800effc:	edd3 7a05 	vldr	s15, [r3, #20]
 800f000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f004:	ee17 0a90 	vmov	r0, s15
 800f008:	f7f1 fabe 	bl	8000588 <__aeabi_f2d>
 800f00c:	4682      	mov	sl, r0
 800f00e:	468b      	mov	fp, r1
 800f010:	4b8a      	ldr	r3, [pc, #552]	; (800f23c <Spin_turn+0x32c>)
 800f012:	6a1b      	ldr	r3, [r3, #32]
 800f014:	4618      	mov	r0, r3
 800f016:	f7f1 fab7 	bl	8000588 <__aeabi_f2d>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	f7f1 f955 	bl	80002cc <__adddf3>
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	4650      	mov	r0, sl
 800f028:	4659      	mov	r1, fp
 800f02a:	f7f1 fc2f 	bl	800088c <__aeabi_ddiv>
 800f02e:	4602      	mov	r2, r0
 800f030:	460b      	mov	r3, r1
 800f032:	4610      	mov	r0, r2
 800f034:	4619      	mov	r1, r3
 800f036:	f04f 0200 	mov.w	r2, #0
 800f03a:	f04f 0300 	mov.w	r3, #0
 800f03e:	f7f1 fd6d 	bl	8000b1c <__aeabi_dcmplt>
 800f042:	4603      	mov	r3, r0
 800f044:	2b00      	cmp	r3, #0
 800f046:	d022      	beq.n	800f08e <Spin_turn+0x17e>
 800f048:	4b7c      	ldr	r3, [pc, #496]	; (800f23c <Spin_turn+0x32c>)
 800f04a:	ed93 7a05 	vldr	s14, [r3, #20]
 800f04e:	4b7b      	ldr	r3, [pc, #492]	; (800f23c <Spin_turn+0x32c>)
 800f050:	edd3 7a05 	vldr	s15, [r3, #20]
 800f054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f058:	ee17 0a90 	vmov	r0, s15
 800f05c:	f7f1 fa94 	bl	8000588 <__aeabi_f2d>
 800f060:	4682      	mov	sl, r0
 800f062:	468b      	mov	fp, r1
 800f064:	4b75      	ldr	r3, [pc, #468]	; (800f23c <Spin_turn+0x32c>)
 800f066:	6a1b      	ldr	r3, [r3, #32]
 800f068:	4618      	mov	r0, r3
 800f06a:	f7f1 fa8d 	bl	8000588 <__aeabi_f2d>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	f7f1 f92b 	bl	80002cc <__adddf3>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4650      	mov	r0, sl
 800f07c:	4659      	mov	r1, fp
 800f07e:	f7f1 fc05 	bl	800088c <__aeabi_ddiv>
 800f082:	4602      	mov	r2, r0
 800f084:	460b      	mov	r3, r1
 800f086:	4614      	mov	r4, r2
 800f088:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800f08c:	e020      	b.n	800f0d0 <Spin_turn+0x1c0>
 800f08e:	4b6b      	ldr	r3, [pc, #428]	; (800f23c <Spin_turn+0x32c>)
 800f090:	ed93 7a05 	vldr	s14, [r3, #20]
 800f094:	4b69      	ldr	r3, [pc, #420]	; (800f23c <Spin_turn+0x32c>)
 800f096:	edd3 7a05 	vldr	s15, [r3, #20]
 800f09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f09e:	ee17 0a90 	vmov	r0, s15
 800f0a2:	f7f1 fa71 	bl	8000588 <__aeabi_f2d>
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	460d      	mov	r5, r1
 800f0aa:	4b64      	ldr	r3, [pc, #400]	; (800f23c <Spin_turn+0x32c>)
 800f0ac:	6a1b      	ldr	r3, [r3, #32]
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f1 fa6a 	bl	8000588 <__aeabi_f2d>
 800f0b4:	4602      	mov	r2, r0
 800f0b6:	460b      	mov	r3, r1
 800f0b8:	f7f1 f908 	bl	80002cc <__adddf3>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	f7f1 fbe2 	bl	800088c <__aeabi_ddiv>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	4625      	mov	r5, r4
 800f0ce:	461c      	mov	r4, r3
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	464b      	mov	r3, r9
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4629      	mov	r1, r5
 800f0d8:	f7f1 fd20 	bl	8000b1c <__aeabi_dcmplt>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f47f af5e 	bne.w	800efa0 <Spin_turn+0x90>

	if(turn_dir == turn_left)
 800f0e4:	78fb      	ldrb	r3, [r7, #3]
 800f0e6:	2b01      	cmp	r3, #1
 800f0e8:	d149      	bne.n	800f17e <Spin_turn+0x26e>
	{
		target.rad_accel = -rad_acc;
 800f0ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800f0ee:	eef1 7a67 	vneg.f32	s15, s15
 800f0f2:	4b53      	ldr	r3, [pc, #332]	; (800f240 <Spin_turn+0x330>)
 800f0f4:	edc3 7a08 	vstr	s15, [r3, #32]
		while(ABS(max_set.radian) > ABS(machine.radian))
 800f0f8:	e011      	b.n	800f11e <Spin_turn+0x20e>
		{
			if(target.rad_velo <= 0.0 ){
 800f0fa:	4b51      	ldr	r3, [pc, #324]	; (800f240 <Spin_turn+0x330>)
 800f0fc:	edd3 7a05 	vldr	s15, [r3, #20]
 800f100:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f108:	d900      	bls.n	800f10c <Spin_turn+0x1fc>
 800f10a:	e008      	b.n	800f11e <Spin_turn+0x20e>
				max_set.rad_velo = 0.0f;
 800f10c:	4b4b      	ldr	r3, [pc, #300]	; (800f23c <Spin_turn+0x32c>)
 800f10e:	f04f 0200 	mov.w	r2, #0
 800f112:	615a      	str	r2, [r3, #20]
				target.rad_accel = 0.0f;
 800f114:	4b4a      	ldr	r3, [pc, #296]	; (800f240 <Spin_turn+0x330>)
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	621a      	str	r2, [r3, #32]
				break;
 800f11c:	e026      	b.n	800f16c <Spin_turn+0x25c>
		while(ABS(max_set.radian) > ABS(machine.radian))
 800f11e:	4b47      	ldr	r3, [pc, #284]	; (800f23c <Spin_turn+0x32c>)
 800f120:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f12c:	d505      	bpl.n	800f13a <Spin_turn+0x22a>
 800f12e:	4b43      	ldr	r3, [pc, #268]	; (800f23c <Spin_turn+0x32c>)
 800f130:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f134:	eeb1 7a67 	vneg.f32	s14, s15
 800f138:	e002      	b.n	800f140 <Spin_turn+0x230>
 800f13a:	4b40      	ldr	r3, [pc, #256]	; (800f23c <Spin_turn+0x32c>)
 800f13c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f140:	4b40      	ldr	r3, [pc, #256]	; (800f244 <Spin_turn+0x334>)
 800f142:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14e:	d505      	bpl.n	800f15c <Spin_turn+0x24c>
 800f150:	4b3c      	ldr	r3, [pc, #240]	; (800f244 <Spin_turn+0x334>)
 800f152:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f156:	eef1 7a67 	vneg.f32	s15, s15
 800f15a:	e002      	b.n	800f162 <Spin_turn+0x252>
 800f15c:	4b39      	ldr	r3, [pc, #228]	; (800f244 <Spin_turn+0x334>)
 800f15e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f16a:	dcc6      	bgt.n	800f0fa <Spin_turn+0x1ea>
			}
		}
		max_set.rad_velo = 0.0f;
 800f16c:	4b33      	ldr	r3, [pc, #204]	; (800f23c <Spin_turn+0x32c>)
 800f16e:	f04f 0200 	mov.w	r2, #0
 800f172:	615a      	str	r2, [r3, #20]
		target.rad_accel = 0.0f;
 800f174:	4b32      	ldr	r3, [pc, #200]	; (800f240 <Spin_turn+0x330>)
 800f176:	f04f 0200 	mov.w	r2, #0
 800f17a:	621a      	str	r2, [r3, #32]
 800f17c:	e047      	b.n	800f20e <Spin_turn+0x2fe>
	}
	else if(turn_dir == turn_right)
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d144      	bne.n	800f20e <Spin_turn+0x2fe>
	{
		target.rad_accel = rad_acc;
 800f184:	4a2e      	ldr	r2, [pc, #184]	; (800f240 <Spin_turn+0x330>)
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	6213      	str	r3, [r2, #32]
		while(ABS(max_set.radian) > ABS(machine.radian))
 800f18a:	e011      	b.n	800f1b0 <Spin_turn+0x2a0>
		{
			if(target.rad_velo >= 0.0 ){
 800f18c:	4b2c      	ldr	r3, [pc, #176]	; (800f240 <Spin_turn+0x330>)
 800f18e:	edd3 7a05 	vldr	s15, [r3, #20]
 800f192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f19a:	da00      	bge.n	800f19e <Spin_turn+0x28e>
 800f19c:	e008      	b.n	800f1b0 <Spin_turn+0x2a0>
				max_set.rad_velo = 0.0f;
 800f19e:	4b27      	ldr	r3, [pc, #156]	; (800f23c <Spin_turn+0x32c>)
 800f1a0:	f04f 0200 	mov.w	r2, #0
 800f1a4:	615a      	str	r2, [r3, #20]
				target.rad_accel = 0.0f;
 800f1a6:	4b26      	ldr	r3, [pc, #152]	; (800f240 <Spin_turn+0x330>)
 800f1a8:	f04f 0200 	mov.w	r2, #0
 800f1ac:	621a      	str	r2, [r3, #32]
				break;
 800f1ae:	e026      	b.n	800f1fe <Spin_turn+0x2ee>
		while(ABS(max_set.radian) > ABS(machine.radian))
 800f1b0:	4b22      	ldr	r3, [pc, #136]	; (800f23c <Spin_turn+0x32c>)
 800f1b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	d505      	bpl.n	800f1cc <Spin_turn+0x2bc>
 800f1c0:	4b1e      	ldr	r3, [pc, #120]	; (800f23c <Spin_turn+0x32c>)
 800f1c2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1c6:	eeb1 7a67 	vneg.f32	s14, s15
 800f1ca:	e002      	b.n	800f1d2 <Spin_turn+0x2c2>
 800f1cc:	4b1b      	ldr	r3, [pc, #108]	; (800f23c <Spin_turn+0x32c>)
 800f1ce:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800f1d2:	4b1c      	ldr	r3, [pc, #112]	; (800f244 <Spin_turn+0x334>)
 800f1d4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e0:	d505      	bpl.n	800f1ee <Spin_turn+0x2de>
 800f1e2:	4b18      	ldr	r3, [pc, #96]	; (800f244 <Spin_turn+0x334>)
 800f1e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1e8:	eef1 7a67 	vneg.f32	s15, s15
 800f1ec:	e002      	b.n	800f1f4 <Spin_turn+0x2e4>
 800f1ee:	4b15      	ldr	r3, [pc, #84]	; (800f244 <Spin_turn+0x334>)
 800f1f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f1f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1fc:	dcc6      	bgt.n	800f18c <Spin_turn+0x27c>
			}
		}
		max_set.rad_velo = 0.0f;
 800f1fe:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <Spin_turn+0x32c>)
 800f200:	f04f 0200 	mov.w	r2, #0
 800f204:	615a      	str	r2, [r3, #20]
		target.rad_accel = 0.0f;
 800f206:	4b0e      	ldr	r3, [pc, #56]	; (800f240 <Spin_turn+0x330>)
 800f208:	f04f 0200 	mov.w	r2, #0
 800f20c:	621a      	str	r2, [r3, #32]
	}

	HAL_Delay(100);
 800f20e:	2064      	movs	r0, #100	; 0x64
 800f210:	f007 fff4 	bl	80171fc <HAL_Delay>
	Machine_Param_Initialize();
 800f214:	f7ff fad8 	bl	800e7c8 <Machine_Param_Initialize>
	Target_Param_Initialize();
 800f218:	f7ff fb00 	bl	800e81c <Target_Param_Initialize>
	MAX_Param_Initialize();
 800f21c:	f7ff fb28 	bl	800e870 <MAX_Param_Initialize>
	machine.radian = 0.0f;
 800f220:	4b08      	ldr	r3, [pc, #32]	; (800f244 <Spin_turn+0x334>)
 800f222:	f04f 0200 	mov.w	r2, #0
 800f226:	62da      	str	r2, [r3, #44]	; 0x2c
	run_mode = NON_CON_MODE;
 800f228:	4b03      	ldr	r3, [pc, #12]	; (800f238 <Spin_turn+0x328>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]

}
 800f22e:	bf00      	nop
 800f230:	3710      	adds	r7, #16
 800f232:	46bd      	mov	sp, r7
 800f234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f238:	20001708 	.word	0x20001708
 800f23c:	2001b1b4 	.word	0x2001b1b4
 800f240:	2001b6a0 	.word	0x2001b6a0
 800f244:	2001b664 	.word	0x2001b664

0800f248 <long_turn>:
	wall_controll.is_controll = true;

}

void long_turn(const t_param* parameter,const t_straight_param* st_param)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]

	Sp_Param_I_Initialize(&target);
 800f252:	489d      	ldr	r0, [pc, #628]	; (800f4c8 <long_turn+0x280>)
 800f254:	f7ff fa68 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 800f258:	489c      	ldr	r0, [pc, #624]	; (800f4cc <long_turn+0x284>)
 800f25a:	f7ff fa65 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 800f25e:	489a      	ldr	r0, [pc, #616]	; (800f4c8 <long_turn+0x280>)
 800f260:	f7ff fa7a 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f264:	4899      	ldr	r0, [pc, #612]	; (800f4cc <long_turn+0x284>)
 800f266:	f7ff fa77 	bl	800e758 <Sp_Param_rad_Initialize>
	init_W_parameters();
 800f26a:	f7fb fc37 	bl	800aadc <init_W_parameters>
	Set_Omega_PID_Gain(st_param->om_gain->Kp, st_param->om_gain->Ki, st_param->om_gain->Kd);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	689b      	ldr	r3, [r3, #8]
 800f272:	edd3 7a00 	vldr	s15, [r3]
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	689b      	ldr	r3, [r3, #8]
 800f27a:	ed93 7a01 	vldr	s14, [r3, #4]
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	689b      	ldr	r3, [r3, #8]
 800f282:	edd3 6a02 	vldr	s13, [r3, #8]
 800f286:	eeb0 1a66 	vmov.f32	s2, s13
 800f28a:	eef0 0a47 	vmov.f32	s1, s14
 800f28e:	eeb0 0a67 	vmov.f32	s0, s15
 800f292:	f7ff fb31 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(st_param->sp_gain->Kp, st_param->sp_gain->Ki, st_param->sp_gain->Kd);
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	edd3 7a00 	vldr	s15, [r3]
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	ed93 7a01 	vldr	s14, [r3, #4]
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	edd3 6a02 	vldr	s13, [r3, #8]
 800f2ae:	eeb0 1a66 	vmov.f32	s2, s13
 800f2b2:	eef0 0a47 	vmov.f32	s1, s14
 800f2b6:	eeb0 0a67 	vmov.f32	s0, s15
 800f2ba:	f7ff fb03 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = STRAIGHT_MODE;
 800f2be:	4b84      	ldr	r3, [pc, #528]	; (800f4d0 <long_turn+0x288>)
 800f2c0:	2201      	movs	r2, #1
 800f2c2:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	4a82      	ldr	r2, [pc, #520]	; (800f4d4 <long_turn+0x28c>)
 800f2cc:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	4a7c      	ldr	r2, [pc, #496]	; (800f4c8 <long_turn+0x280>)
 800f2d6:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	689b      	ldr	r3, [r3, #8]
 800f2de:	4a7d      	ldr	r2, [pc, #500]	; (800f4d4 <long_turn+0x28c>)
 800f2e0:	6293      	str	r3, [r2, #40]	; 0x28
	t_bool hosei_flag = false;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	73fb      	strb	r3, [r7, #15]
	t_bool r_wall = sen_r.is_wall;
	t_bool l_wall = sen_r.is_wall;
	uint16_t r_wall_cnt = 0;
	uint16_t l_wall_cnt = 0;
	*/
	while(machine.length < parameter->param->Lstart ){
 800f2e6:	e017      	b.n	800f318 <long_turn+0xd0>
			}
		}
		r_wall = sen_r.is_wall;
		l_wall = sen_l.is_wall;
		*/
		if(hosei_flag == false && st_r_hosei_check == true)
 800f2e8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d108      	bne.n	800f300 <long_turn+0xb8>
 800f2ee:	4b7a      	ldr	r3, [pc, #488]	; (800f4d8 <long_turn+0x290>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d104      	bne.n	800f300 <long_turn+0xb8>
		{
			machine.length = SEARCH_HOSEI-45.0;;
 800f2f6:	4b75      	ldr	r3, [pc, #468]	; (800f4cc <long_turn+0x284>)
 800f2f8:	4a78      	ldr	r2, [pc, #480]	; (800f4dc <long_turn+0x294>)
 800f2fa:	629a      	str	r2, [r3, #40]	; 0x28
			hosei_flag = true;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	73fb      	strb	r3, [r7, #15]
		}
		if(hosei_flag == false && st_l_hosei_check == true)
 800f300:	7bfb      	ldrb	r3, [r7, #15]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d108      	bne.n	800f318 <long_turn+0xd0>
 800f306:	4b76      	ldr	r3, [pc, #472]	; (800f4e0 <long_turn+0x298>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	2b01      	cmp	r3, #1
 800f30c:	d104      	bne.n	800f318 <long_turn+0xd0>
		{
			machine.length = SEARCH_HOSEI-45.0;;
 800f30e:	4b6f      	ldr	r3, [pc, #444]	; (800f4cc <long_turn+0x284>)
 800f310:	4a72      	ldr	r2, [pc, #456]	; (800f4dc <long_turn+0x294>)
 800f312:	629a      	str	r2, [r3, #40]	; 0x28
			hosei_flag = true;
 800f314:	2301      	movs	r3, #1
 800f316:	73fb      	strb	r3, [r7, #15]
	while(machine.length < parameter->param->Lstart ){
 800f318:	4b6c      	ldr	r3, [pc, #432]	; (800f4cc <long_turn+0x284>)
 800f31a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	edd3 7a02 	vldr	s15, [r3, #8]
 800f326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32e:	d4db      	bmi.n	800f2e8 <long_turn+0xa0>
		}
	}

	Sp_Param_I_Initialize(&target);
 800f330:	4865      	ldr	r0, [pc, #404]	; (800f4c8 <long_turn+0x280>)
 800f332:	f7ff f9f9 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 800f336:	4865      	ldr	r0, [pc, #404]	; (800f4cc <long_turn+0x284>)
 800f338:	f7ff f9f6 	bl	800e728 <Sp_Param_I_Initialize>

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	edd3 7a00 	vldr	s15, [r3]
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	685b      	ldr	r3, [r3, #4]
 800f348:	ed93 7a01 	vldr	s14, [r3, #4]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	edd3 6a02 	vldr	s13, [r3, #8]
 800f354:	eeb0 1a66 	vmov.f32	s2, s13
 800f358:	eef0 0a47 	vmov.f32	s1, s14
 800f35c:	eeb0 0a67 	vmov.f32	s0, s15
 800f360:	4860      	ldr	r0, [pc, #384]	; (800f4e4 <long_turn+0x29c>)
 800f362:	f7ff fae3 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	689b      	ldr	r3, [r3, #8]
 800f36a:	edd3 7a00 	vldr	s15, [r3]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	689b      	ldr	r3, [r3, #8]
 800f372:	ed93 7a01 	vldr	s14, [r3, #4]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	edd3 6a02 	vldr	s13, [r3, #8]
 800f37e:	eeb0 1a66 	vmov.f32	s2, s13
 800f382:	eef0 0a47 	vmov.f32	s1, s14
 800f386:	eeb0 0a67 	vmov.f32	s0, s15
 800f38a:	4857      	ldr	r0, [pc, #348]	; (800f4e8 <long_turn+0x2a0>)
 800f38c:	f7ff face 	bl	800e92c <Set_PID_Gain>
	run_mode = TURN_MODE_TABLE;
 800f390:	4b4f      	ldr	r3, [pc, #316]	; (800f4d0 <long_turn+0x288>)
 800f392:	2204      	movs	r2, #4
 800f394:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	edd3 6a00 	vldr	s13, [r3]
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3a6:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800f4ec <long_turn+0x2a4>
 800f3aa:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800f3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3b2:	4b48      	ldr	r3, [pc, #288]	; (800f4d4 <long_turn+0x28c>)
 800f3b4:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	ed93 7a04 	vldr	s14, [r3, #16]
 800f3c0:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800f4f0 <long_turn+0x2a8>
 800f3c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f3c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f4f4 <long_turn+0x2ac>
 800f3cc:	ee67 6a87 	vmul.f32	s13, s15, s14
 800f3d0:	4b40      	ldr	r3, [pc, #256]	; (800f4d4 <long_turn+0x28c>)
 800f3d2:	edd3 7a05 	vldr	s15, [r3, #20]
 800f3d6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f4f8 <long_turn+0x2b0>
 800f3da:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3e2:	4b46      	ldr	r3, [pc, #280]	; (800f4fc <long_turn+0x2b4>)
 800f3e4:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 800f3e8:	4837      	ldr	r0, [pc, #220]	; (800f4c8 <long_turn+0x280>)
 800f3ea:	f7ff f9b5 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f3ee:	4837      	ldr	r0, [pc, #220]	; (800f4cc <long_turn+0x284>)
 800f3f0:	f7ff f9b2 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 800f3f4:	4b42      	ldr	r3, [pc, #264]	; (800f500 <long_turn+0x2b8>)
 800f3f6:	f04f 0200 	mov.w	r2, #0
 800f3fa:	601a      	str	r2, [r3, #0]

	while((float)turn_time < set_turn_time * 1000);
 800f3fc:	bf00      	nop
 800f3fe:	4b3f      	ldr	r3, [pc, #252]	; (800f4fc <long_turn+0x2b4>)
 800f400:	edd3 7a00 	vldr	s15, [r3]
 800f404:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800f4ec <long_turn+0x2a4>
 800f408:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f40c:	4b3c      	ldr	r3, [pc, #240]	; (800f500 <long_turn+0x2b8>)
 800f40e:	edd3 7a00 	vldr	s15, [r3]
 800f412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41a:	dcf0      	bgt.n	800f3fe <long_turn+0x1b6>

	Sp_Param_rad_Initialize(&target);
 800f41c:	482a      	ldr	r0, [pc, #168]	; (800f4c8 <long_turn+0x280>)
 800f41e:	f7ff f99b 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f422:	482a      	ldr	r0, [pc, #168]	; (800f4cc <long_turn+0x284>)
 800f424:	f7ff f998 	bl	800e758 <Sp_Param_rad_Initialize>
	max_set.rad_velo = 0.0f;
 800f428:	4b2a      	ldr	r3, [pc, #168]	; (800f4d4 <long_turn+0x28c>)
 800f42a:	f04f 0200 	mov.w	r2, #0
 800f42e:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 800f430:	4b25      	ldr	r3, [pc, #148]	; (800f4c8 <long_turn+0x280>)
 800f432:	f04f 0200 	mov.w	r2, #0
 800f436:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 800f438:	4b23      	ldr	r3, [pc, #140]	; (800f4c8 <long_turn+0x280>)
 800f43a:	f04f 0200 	mov.w	r2, #0
 800f43e:	621a      	str	r2, [r3, #32]
	Set_Omega_PID_Gain(st_param->om_gain->Kp, st_param->om_gain->Ki, st_param->om_gain->Kd);
 800f440:	683b      	ldr	r3, [r7, #0]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	edd3 7a00 	vldr	s15, [r3]
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	689b      	ldr	r3, [r3, #8]
 800f44c:	ed93 7a01 	vldr	s14, [r3, #4]
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	689b      	ldr	r3, [r3, #8]
 800f454:	edd3 6a02 	vldr	s13, [r3, #8]
 800f458:	eeb0 1a66 	vmov.f32	s2, s13
 800f45c:	eef0 0a47 	vmov.f32	s1, s14
 800f460:	eeb0 0a67 	vmov.f32	s0, s15
 800f464:	f7ff fa48 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(st_param->sp_gain->Kp, st_param->sp_gain->Ki, st_param->sp_gain->Kd);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	edd3 7a00 	vldr	s15, [r3]
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	ed93 7a01 	vldr	s14, [r3, #4]
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	edd3 6a02 	vldr	s13, [r3, #8]
 800f480:	eeb0 1a66 	vmov.f32	s2, s13
 800f484:	eef0 0a47 	vmov.f32	s1, s14
 800f488:	eeb0 0a67 	vmov.f32	s0, s15
 800f48c:	f7ff fa1a 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = STRAIGHT_MODE;
 800f490:	4b0f      	ldr	r3, [pc, #60]	; (800f4d0 <long_turn+0x288>)
 800f492:	2201      	movs	r2, #1
 800f494:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 800f496:	4b0c      	ldr	r3, [pc, #48]	; (800f4c8 <long_turn+0x280>)
 800f498:	f04f 0200 	mov.w	r2, #0
 800f49c:	629a      	str	r2, [r3, #40]	; 0x28
 800f49e:	4b0a      	ldr	r3, [pc, #40]	; (800f4c8 <long_turn+0x280>)
 800f4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a2:	4a0a      	ldr	r2, [pc, #40]	; (800f4cc <long_turn+0x284>)
 800f4a4:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	4a06      	ldr	r2, [pc, #24]	; (800f4c8 <long_turn+0x280>)
 800f4ae:	6013      	str	r3, [r2, #0]
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <long_turn+0x280>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	4a07      	ldr	r2, [pc, #28]	; (800f4d4 <long_turn+0x28c>)
 800f4b6:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	4a05      	ldr	r2, [pc, #20]	; (800f4d4 <long_turn+0x28c>)
 800f4c0:	6293      	str	r3, [r2, #40]	; 0x28
	hosei_flag = false;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	73fb      	strb	r3, [r7, #15]
	while(machine.length < max_set.length ){
 800f4c6:	e037      	b.n	800f538 <long_turn+0x2f0>
 800f4c8:	2001b6a0 	.word	0x2001b6a0
 800f4cc:	2001b664 	.word	0x2001b664
 800f4d0:	20001708 	.word	0x20001708
 800f4d4:	2001b1b4 	.word	0x2001b1b4
 800f4d8:	200099a0 	.word	0x200099a0
 800f4dc:	40400000 	.word	0x40400000
 800f4e0:	20009488 	.word	0x20009488
 800f4e4:	2001b694 	.word	0x2001b694
 800f4e8:	20009890 	.word	0x20009890
 800f4ec:	447a0000 	.word	0x447a0000
 800f4f0:	43340000 	.word	0x43340000
 800f4f4:	40490fda 	.word	0x40490fda
 800f4f8:	3f344d01 	.word	0x3f344d01
 800f4fc:	2001b6e4 	.word	0x2001b6e4
 800f500:	2001b6e0 	.word	0x2001b6e0
		if(hosei_flag == false && st_r_hosei_check == true)
 800f504:	7bfb      	ldrb	r3, [r7, #15]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d109      	bne.n	800f51e <long_turn+0x2d6>
 800f50a:	4b17      	ldr	r3, [pc, #92]	; (800f568 <long_turn+0x320>)
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d105      	bne.n	800f51e <long_turn+0x2d6>
		{
			machine.length = max_set.length;
 800f512:	4b16      	ldr	r3, [pc, #88]	; (800f56c <long_turn+0x324>)
 800f514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f516:	4a16      	ldr	r2, [pc, #88]	; (800f570 <long_turn+0x328>)
 800f518:	6293      	str	r3, [r2, #40]	; 0x28
			hosei_flag = true;
 800f51a:	2301      	movs	r3, #1
 800f51c:	73fb      	strb	r3, [r7, #15]
		}
		if(hosei_flag == false && st_l_hosei_check == true)
 800f51e:	7bfb      	ldrb	r3, [r7, #15]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d109      	bne.n	800f538 <long_turn+0x2f0>
 800f524:	4b13      	ldr	r3, [pc, #76]	; (800f574 <long_turn+0x32c>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d105      	bne.n	800f538 <long_turn+0x2f0>
		{
			machine.length = max_set.length;
 800f52c:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <long_turn+0x324>)
 800f52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f530:	4a0f      	ldr	r2, [pc, #60]	; (800f570 <long_turn+0x328>)
 800f532:	6293      	str	r3, [r2, #40]	; 0x28
			hosei_flag = true;
 800f534:	2301      	movs	r3, #1
 800f536:	73fb      	strb	r3, [r7, #15]
	while(machine.length < max_set.length ){
 800f538:	4b0d      	ldr	r3, [pc, #52]	; (800f570 <long_turn+0x328>)
 800f53a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f53e:	4b0b      	ldr	r3, [pc, #44]	; (800f56c <long_turn+0x324>)
 800f540:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f544:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54c:	d4da      	bmi.n	800f504 <long_turn+0x2bc>
		}
	}

	machine.length = target.length  = 0.0f;
 800f54e:	4b0a      	ldr	r3, [pc, #40]	; (800f578 <long_turn+0x330>)
 800f550:	f04f 0200 	mov.w	r2, #0
 800f554:	629a      	str	r2, [r3, #40]	; 0x28
 800f556:	4b08      	ldr	r3, [pc, #32]	; (800f578 <long_turn+0x330>)
 800f558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f55a:	4a05      	ldr	r2, [pc, #20]	; (800f570 <long_turn+0x328>)
 800f55c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800f55e:	bf00      	nop
 800f560:	3710      	adds	r7, #16
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	200099a0 	.word	0x200099a0
 800f56c:	2001b1b4 	.word	0x2001b1b4
 800f570:	2001b664 	.word	0x2001b664
 800f574:	20009488 	.word	0x20009488
 800f578:	2001b6a0 	.word	0x2001b6a0

0800f57c <turn_v90>:


void turn_v90(const t_param* parameter,const t_straight_param* di_param)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	6039      	str	r1, [r7, #0]

	Sp_Param_I_Initialize(&target);
 800f586:	48a1      	ldr	r0, [pc, #644]	; (800f80c <turn_v90+0x290>)
 800f588:	f7ff f8ce 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 800f58c:	48a0      	ldr	r0, [pc, #640]	; (800f810 <turn_v90+0x294>)
 800f58e:	f7ff f8cb 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 800f592:	489e      	ldr	r0, [pc, #632]	; (800f80c <turn_v90+0x290>)
 800f594:	f7ff f8e0 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f598:	489d      	ldr	r0, [pc, #628]	; (800f810 <turn_v90+0x294>)
 800f59a:	f7ff f8dd 	bl	800e758 <Sp_Param_rad_Initialize>
	init_W_parameters();
 800f59e:	f7fb fa9d 	bl	800aadc <init_W_parameters>
	Set_Omega_PID_Gain(di_param->om_gain->Kp, di_param->om_gain->Ki, di_param->om_gain->Kd);
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	689b      	ldr	r3, [r3, #8]
 800f5a6:	edd3 7a00 	vldr	s15, [r3]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	689b      	ldr	r3, [r3, #8]
 800f5ae:	ed93 7a01 	vldr	s14, [r3, #4]
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	689b      	ldr	r3, [r3, #8]
 800f5b6:	edd3 6a02 	vldr	s13, [r3, #8]
 800f5ba:	eeb0 1a66 	vmov.f32	s2, s13
 800f5be:	eef0 0a47 	vmov.f32	s1, s14
 800f5c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f5c6:	f7ff f997 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(di_param->sp_gain->Kp, di_param->sp_gain->Ki, di_param->sp_gain->Kd);
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	685b      	ldr	r3, [r3, #4]
 800f5ce:	edd3 7a00 	vldr	s15, [r3]
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	685b      	ldr	r3, [r3, #4]
 800f5d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	edd3 6a02 	vldr	s13, [r3, #8]
 800f5e2:	eeb0 1a66 	vmov.f32	s2, s13
 800f5e6:	eef0 0a47 	vmov.f32	s1, s14
 800f5ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f5ee:	f7ff f969 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = DIAG_MODE;
 800f5f2:	4b88      	ldr	r3, [pc, #544]	; (800f814 <turn_v90+0x298>)
 800f5f4:	2203      	movs	r2, #3
 800f5f6:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	4a86      	ldr	r2, [pc, #536]	; (800f818 <turn_v90+0x29c>)
 800f600:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	4a80      	ldr	r2, [pc, #512]	; (800f80c <turn_v90+0x290>)
 800f60a:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	689b      	ldr	r3, [r3, #8]
 800f612:	4a81      	ldr	r2, [pc, #516]	; (800f818 <turn_v90+0x29c>)
 800f614:	6293      	str	r3, [r2, #40]	; 0x28
	t_bool hosei_flag = false;
 800f616:	2300      	movs	r3, #0
 800f618:	73fb      	strb	r3, [r7, #15]
	while(machine.length < parameter->param->Lstart )
 800f61a:	e023      	b.n	800f664 <turn_v90+0xe8>
	{
		if(parameter->param->turn_dir == LEFT)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	7d1b      	ldrb	r3, [r3, #20]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d10c      	bne.n	800f640 <turn_v90+0xc4>
		{
			if(hosei_flag == false && diag_l_hosei_check == true)
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d109      	bne.n	800f640 <turn_v90+0xc4>
 800f62c:	4b7b      	ldr	r3, [pc, #492]	; (800f81c <turn_v90+0x2a0>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d105      	bne.n	800f640 <turn_v90+0xc4>
			{
				machine.length = -2.0;
 800f634:	4b76      	ldr	r3, [pc, #472]	; (800f810 <turn_v90+0x294>)
 800f636:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800f63a:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800f63c:	2301      	movs	r3, #1
 800f63e:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(parameter->param->turn_dir == RIGHT)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	7d1b      	ldrb	r3, [r3, #20]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d10c      	bne.n	800f664 <turn_v90+0xe8>
		{
			if(hosei_flag == false && diag_r_hosei_check == true)
 800f64a:	7bfb      	ldrb	r3, [r7, #15]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d109      	bne.n	800f664 <turn_v90+0xe8>
 800f650:	4b73      	ldr	r3, [pc, #460]	; (800f820 <turn_v90+0x2a4>)
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b01      	cmp	r3, #1
 800f656:	d105      	bne.n	800f664 <turn_v90+0xe8>
			{
				machine.length = -2.0;
 800f658:	4b6d      	ldr	r3, [pc, #436]	; (800f810 <turn_v90+0x294>)
 800f65a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800f65e:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800f660:	2301      	movs	r3, #1
 800f662:	73fb      	strb	r3, [r7, #15]
	while(machine.length < parameter->param->Lstart )
 800f664:	4b6a      	ldr	r3, [pc, #424]	; (800f810 <turn_v90+0x294>)
 800f666:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67a:	d4cf      	bmi.n	800f61c <turn_v90+0xa0>
			}
		}
	}

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	685b      	ldr	r3, [r3, #4]
 800f680:	edd3 7a00 	vldr	s15, [r3]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	685b      	ldr	r3, [r3, #4]
 800f688:	ed93 7a01 	vldr	s14, [r3, #4]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	edd3 6a02 	vldr	s13, [r3, #8]
 800f694:	eeb0 1a66 	vmov.f32	s2, s13
 800f698:	eef0 0a47 	vmov.f32	s1, s14
 800f69c:	eeb0 0a67 	vmov.f32	s0, s15
 800f6a0:	4860      	ldr	r0, [pc, #384]	; (800f824 <turn_v90+0x2a8>)
 800f6a2:	f7ff f943 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	689b      	ldr	r3, [r3, #8]
 800f6aa:	edd3 7a00 	vldr	s15, [r3]
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	ed93 7a01 	vldr	s14, [r3, #4]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	edd3 6a02 	vldr	s13, [r3, #8]
 800f6be:	eeb0 1a66 	vmov.f32	s2, s13
 800f6c2:	eef0 0a47 	vmov.f32	s1, s14
 800f6c6:	eeb0 0a67 	vmov.f32	s0, s15
 800f6ca:	4857      	ldr	r0, [pc, #348]	; (800f828 <turn_v90+0x2ac>)
 800f6cc:	f7ff f92e 	bl	800e92c <Set_PID_Gain>
	run_mode = TURN_MODE_TABLE;
 800f6d0:	4b50      	ldr	r3, [pc, #320]	; (800f814 <turn_v90+0x298>)
 800f6d2:	2204      	movs	r2, #4
 800f6d4:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	edd3 6a00 	vldr	s13, [r3]
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800f6e6:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800f82c <turn_v90+0x2b0>
 800f6ea:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800f6ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6f2:	4b49      	ldr	r3, [pc, #292]	; (800f818 <turn_v90+0x29c>)
 800f6f4:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	ed93 7a04 	vldr	s14, [r3, #16]
 800f700:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800f830 <turn_v90+0x2b4>
 800f704:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f708:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800f834 <turn_v90+0x2b8>
 800f70c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800f710:	4b41      	ldr	r3, [pc, #260]	; (800f818 <turn_v90+0x29c>)
 800f712:	edd3 7a05 	vldr	s15, [r3, #20]
 800f716:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800f838 <turn_v90+0x2bc>
 800f71a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f722:	4b46      	ldr	r3, [pc, #280]	; (800f83c <turn_v90+0x2c0>)
 800f724:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 800f728:	4838      	ldr	r0, [pc, #224]	; (800f80c <turn_v90+0x290>)
 800f72a:	f7ff f815 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f72e:	4838      	ldr	r0, [pc, #224]	; (800f810 <turn_v90+0x294>)
 800f730:	f7ff f812 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 800f734:	4b42      	ldr	r3, [pc, #264]	; (800f840 <turn_v90+0x2c4>)
 800f736:	f04f 0200 	mov.w	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]

	while((float)turn_time < set_turn_time * 1000);
 800f73c:	bf00      	nop
 800f73e:	4b3f      	ldr	r3, [pc, #252]	; (800f83c <turn_v90+0x2c0>)
 800f740:	edd3 7a00 	vldr	s15, [r3]
 800f744:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800f82c <turn_v90+0x2b0>
 800f748:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f74c:	4b3c      	ldr	r3, [pc, #240]	; (800f840 <turn_v90+0x2c4>)
 800f74e:	edd3 7a00 	vldr	s15, [r3]
 800f752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f75a:	dcf0      	bgt.n	800f73e <turn_v90+0x1c2>
	Sp_Param_rad_Initialize(&target);
 800f75c:	482b      	ldr	r0, [pc, #172]	; (800f80c <turn_v90+0x290>)
 800f75e:	f7fe fffb 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f762:	482b      	ldr	r0, [pc, #172]	; (800f810 <turn_v90+0x294>)
 800f764:	f7fe fff8 	bl	800e758 <Sp_Param_rad_Initialize>
	init_W_parameters();
 800f768:	f7fb f9b8 	bl	800aadc <init_W_parameters>
	max_set.rad_velo = 0.0f;
 800f76c:	4b2a      	ldr	r3, [pc, #168]	; (800f818 <turn_v90+0x29c>)
 800f76e:	f04f 0200 	mov.w	r2, #0
 800f772:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 800f774:	4b25      	ldr	r3, [pc, #148]	; (800f80c <turn_v90+0x290>)
 800f776:	f04f 0200 	mov.w	r2, #0
 800f77a:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 800f77c:	4b23      	ldr	r3, [pc, #140]	; (800f80c <turn_v90+0x290>)
 800f77e:	f04f 0200 	mov.w	r2, #0
 800f782:	621a      	str	r2, [r3, #32]
	Set_Omega_PID_Gain(di_param->om_gain->Kp, di_param->om_gain->Ki, di_param->om_gain->Kd);
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	edd3 7a00 	vldr	s15, [r3]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	689b      	ldr	r3, [r3, #8]
 800f790:	ed93 7a01 	vldr	s14, [r3, #4]
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	689b      	ldr	r3, [r3, #8]
 800f798:	edd3 6a02 	vldr	s13, [r3, #8]
 800f79c:	eeb0 1a66 	vmov.f32	s2, s13
 800f7a0:	eef0 0a47 	vmov.f32	s1, s14
 800f7a4:	eeb0 0a67 	vmov.f32	s0, s15
 800f7a8:	f7ff f8a6 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(di_param->sp_gain->Kp, di_param->sp_gain->Ki, di_param->sp_gain->Kd);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	edd3 7a00 	vldr	s15, [r3]
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	ed93 7a01 	vldr	s14, [r3, #4]
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	edd3 6a02 	vldr	s13, [r3, #8]
 800f7c4:	eeb0 1a66 	vmov.f32	s2, s13
 800f7c8:	eef0 0a47 	vmov.f32	s1, s14
 800f7cc:	eeb0 0a67 	vmov.f32	s0, s15
 800f7d0:	f7ff f878 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = DIAG_MODE;
 800f7d4:	4b0f      	ldr	r3, [pc, #60]	; (800f814 <turn_v90+0x298>)
 800f7d6:	2203      	movs	r2, #3
 800f7d8:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 800f7da:	4b0c      	ldr	r3, [pc, #48]	; (800f80c <turn_v90+0x290>)
 800f7dc:	f04f 0200 	mov.w	r2, #0
 800f7e0:	629a      	str	r2, [r3, #40]	; 0x28
 800f7e2:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <turn_v90+0x290>)
 800f7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e6:	4a0a      	ldr	r2, [pc, #40]	; (800f810 <turn_v90+0x294>)
 800f7e8:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	4a06      	ldr	r2, [pc, #24]	; (800f80c <turn_v90+0x290>)
 800f7f2:	6013      	str	r3, [r2, #0]
 800f7f4:	4b05      	ldr	r3, [pc, #20]	; (800f80c <turn_v90+0x290>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	4a07      	ldr	r2, [pc, #28]	; (800f818 <turn_v90+0x29c>)
 800f7fa:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	4a05      	ldr	r2, [pc, #20]	; (800f818 <turn_v90+0x29c>)
 800f804:	6293      	str	r3, [r2, #40]	; 0x28
	hosei_flag = false;
 800f806:	2300      	movs	r3, #0
 800f808:	73fb      	strb	r3, [r7, #15]
	while(machine.length < max_set.length ){
 800f80a:	e04b      	b.n	800f8a4 <turn_v90+0x328>
 800f80c:	2001b6a0 	.word	0x2001b6a0
 800f810:	2001b664 	.word	0x2001b664
 800f814:	20001708 	.word	0x20001708
 800f818:	2001b1b4 	.word	0x2001b1b4
 800f81c:	2000989c 	.word	0x2000989c
 800f820:	2000989d 	.word	0x2000989d
 800f824:	2001b694 	.word	0x2001b694
 800f828:	20009890 	.word	0x20009890
 800f82c:	447a0000 	.word	0x447a0000
 800f830:	43340000 	.word	0x43340000
 800f834:	40490fda 	.word	0x40490fda
 800f838:	3f344d01 	.word	0x3f344d01
 800f83c:	2001b6e4 	.word	0x2001b6e4
 800f840:	2001b6e0 	.word	0x2001b6e0
		if(parameter->param->turn_dir == LEFT)
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	7d1b      	ldrb	r3, [r3, #20]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	d112      	bne.n	800f874 <turn_v90+0x2f8>
		{
			if(hosei_flag == false && diag_r_hosei_check == true)
 800f84e:	7bfb      	ldrb	r3, [r7, #15]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d10f      	bne.n	800f874 <turn_v90+0x2f8>
 800f854:	4b1f      	ldr	r3, [pc, #124]	; (800f8d4 <turn_v90+0x358>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d10b      	bne.n	800f874 <turn_v90+0x2f8>
			{
				machine.length = max_set.length-1.0;
 800f85c:	4b1e      	ldr	r3, [pc, #120]	; (800f8d8 <turn_v90+0x35c>)
 800f85e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f86a:	4b1c      	ldr	r3, [pc, #112]	; (800f8dc <turn_v90+0x360>)
 800f86c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				hosei_flag = true;
 800f870:	2301      	movs	r3, #1
 800f872:	73fb      	strb	r3, [r7, #15]
			}
		}
		if(parameter->param->turn_dir == RIGHT)
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	7d1b      	ldrb	r3, [r3, #20]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d112      	bne.n	800f8a4 <turn_v90+0x328>
		{
			if(hosei_flag == false && diag_l_hosei_check == true)
 800f87e:	7bfb      	ldrb	r3, [r7, #15]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10f      	bne.n	800f8a4 <turn_v90+0x328>
 800f884:	4b16      	ldr	r3, [pc, #88]	; (800f8e0 <turn_v90+0x364>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d10b      	bne.n	800f8a4 <turn_v90+0x328>
			{
				machine.length = max_set.length-1.0;
 800f88c:	4b12      	ldr	r3, [pc, #72]	; (800f8d8 <turn_v90+0x35c>)
 800f88e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f896:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f89a:	4b10      	ldr	r3, [pc, #64]	; (800f8dc <turn_v90+0x360>)
 800f89c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				hosei_flag = true;
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	73fb      	strb	r3, [r7, #15]
	while(machine.length < max_set.length ){
 800f8a4:	4b0d      	ldr	r3, [pc, #52]	; (800f8dc <turn_v90+0x360>)
 800f8a6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f8aa:	4b0b      	ldr	r3, [pc, #44]	; (800f8d8 <turn_v90+0x35c>)
 800f8ac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f8b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8b8:	d4c4      	bmi.n	800f844 <turn_v90+0x2c8>
			}
		}
	}

	machine.length = target.length  = 0.0f;
 800f8ba:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <turn_v90+0x368>)
 800f8bc:	f04f 0200 	mov.w	r2, #0
 800f8c0:	629a      	str	r2, [r3, #40]	; 0x28
 800f8c2:	4b08      	ldr	r3, [pc, #32]	; (800f8e4 <turn_v90+0x368>)
 800f8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c6:	4a05      	ldr	r2, [pc, #20]	; (800f8dc <turn_v90+0x360>)
 800f8c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	2000989d 	.word	0x2000989d
 800f8d8:	2001b1b4 	.word	0x2001b1b4
 800f8dc:	2001b664 	.word	0x2001b664
 800f8e0:	2000989c 	.word	0x2000989c
 800f8e4:	2001b6a0 	.word	0x2001b6a0

0800f8e8 <turn_in>:

void turn_in(const t_param* parameter,const t_straight_param* st_param,const t_straight_param* di_param)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b086      	sub	sp, #24
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]

	Sp_Param_I_Initialize(&target);
 800f8f4:	4858      	ldr	r0, [pc, #352]	; (800fa58 <turn_in+0x170>)
 800f8f6:	f7fe ff17 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 800f8fa:	4858      	ldr	r0, [pc, #352]	; (800fa5c <turn_in+0x174>)
 800f8fc:	f7fe ff14 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 800f900:	4855      	ldr	r0, [pc, #340]	; (800fa58 <turn_in+0x170>)
 800f902:	f7fe ff29 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800f906:	4855      	ldr	r0, [pc, #340]	; (800fa5c <turn_in+0x174>)
 800f908:	f7fe ff26 	bl	800e758 <Sp_Param_rad_Initialize>
	init_W_parameters();
 800f90c:	f7fb f8e6 	bl	800aadc <init_W_parameters>
	Set_Omega_PID_Gain(st_param->om_gain->Kp, st_param->om_gain->Ki, st_param->om_gain->Kd);
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	689b      	ldr	r3, [r3, #8]
 800f914:	edd3 7a00 	vldr	s15, [r3]
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	689b      	ldr	r3, [r3, #8]
 800f91c:	ed93 7a01 	vldr	s14, [r3, #4]
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	edd3 6a02 	vldr	s13, [r3, #8]
 800f928:	eeb0 1a66 	vmov.f32	s2, s13
 800f92c:	eef0 0a47 	vmov.f32	s1, s14
 800f930:	eeb0 0a67 	vmov.f32	s0, s15
 800f934:	f7fe ffe0 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(st_param->sp_gain->Kp, st_param->sp_gain->Ki, st_param->sp_gain->Kd);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	edd3 7a00 	vldr	s15, [r3]
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	ed93 7a01 	vldr	s14, [r3, #4]
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	685b      	ldr	r3, [r3, #4]
 800f94c:	edd3 6a02 	vldr	s13, [r3, #8]
 800f950:	eeb0 1a66 	vmov.f32	s2, s13
 800f954:	eef0 0a47 	vmov.f32	s1, s14
 800f958:	eeb0 0a67 	vmov.f32	s0, s15
 800f95c:	f7fe ffb2 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = STRAIGHT_MODE;
 800f960:	4b3f      	ldr	r3, [pc, #252]	; (800fa60 <turn_in+0x178>)
 800f962:	2201      	movs	r2, #1
 800f964:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a3d      	ldr	r2, [pc, #244]	; (800fa64 <turn_in+0x17c>)
 800f96e:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	4a38      	ldr	r2, [pc, #224]	; (800fa58 <turn_in+0x170>)
 800f978:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	689b      	ldr	r3, [r3, #8]
 800f980:	4a38      	ldr	r2, [pc, #224]	; (800fa64 <turn_in+0x17c>)
 800f982:	6293      	str	r3, [r2, #40]	; 0x28

	t_bool hosei_flag = false;
 800f984:	2300      	movs	r3, #0
 800f986:	75fb      	strb	r3, [r7, #23]
	while(machine.length < parameter->param->Lstart ){
 800f988:	e017      	b.n	800f9ba <turn_in+0xd2>
		if(hosei_flag == false && st_r_hosei_check == true)
 800f98a:	7dfb      	ldrb	r3, [r7, #23]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d108      	bne.n	800f9a2 <turn_in+0xba>
 800f990:	4b35      	ldr	r3, [pc, #212]	; (800fa68 <turn_in+0x180>)
 800f992:	781b      	ldrb	r3, [r3, #0]
 800f994:	2b01      	cmp	r3, #1
 800f996:	d104      	bne.n	800f9a2 <turn_in+0xba>
		{
			machine.length = SEARCH_HOSEI-45.0;;
 800f998:	4b30      	ldr	r3, [pc, #192]	; (800fa5c <turn_in+0x174>)
 800f99a:	4a34      	ldr	r2, [pc, #208]	; (800fa6c <turn_in+0x184>)
 800f99c:	629a      	str	r2, [r3, #40]	; 0x28
			hosei_flag = true;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	75fb      	strb	r3, [r7, #23]
		}
		if(hosei_flag == false && st_l_hosei_check == true)
 800f9a2:	7dfb      	ldrb	r3, [r7, #23]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d108      	bne.n	800f9ba <turn_in+0xd2>
 800f9a8:	4b31      	ldr	r3, [pc, #196]	; (800fa70 <turn_in+0x188>)
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d104      	bne.n	800f9ba <turn_in+0xd2>
		{
			machine.length = SEARCH_HOSEI-45.0;;
 800f9b0:	4b2a      	ldr	r3, [pc, #168]	; (800fa5c <turn_in+0x174>)
 800f9b2:	4a2e      	ldr	r2, [pc, #184]	; (800fa6c <turn_in+0x184>)
 800f9b4:	629a      	str	r2, [r3, #40]	; 0x28
			hosei_flag = true;
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	75fb      	strb	r3, [r7, #23]
	while(machine.length < parameter->param->Lstart ){
 800f9ba:	4b28      	ldr	r3, [pc, #160]	; (800fa5c <turn_in+0x174>)
 800f9bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	edd3 7a02 	vldr	s15, [r3, #8]
 800f9c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9d0:	d4db      	bmi.n	800f98a <turn_in+0xa2>
		}
	}

	if(parameter->param->turn_dir == LEFT && sen_l.is_wall == true)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	7d1b      	ldrb	r3, [r3, #20]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d128      	bne.n	800fa2e <turn_in+0x146>
 800f9dc:	4b25      	ldr	r3, [pc, #148]	; (800fa74 <turn_in+0x18c>)
 800f9de:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800f9e2:	2b01      	cmp	r3, #1
 800f9e4:	d123      	bne.n	800fa2e <turn_in+0x146>
	{
		machine.length	= target.length	= 0.0f;
 800f9e6:	4b1c      	ldr	r3, [pc, #112]	; (800fa58 <turn_in+0x170>)
 800f9e8:	f04f 0200 	mov.w	r2, #0
 800f9ec:	629a      	str	r2, [r3, #40]	; 0x28
 800f9ee:	4b1a      	ldr	r3, [pc, #104]	; (800fa58 <turn_in+0x170>)
 800f9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9f2:	4a1a      	ldr	r2, [pc, #104]	; (800fa5c <turn_in+0x174>)
 800f9f4:	6293      	str	r3, [r2, #40]	; 0x28
		hosei_flag = false;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	75fb      	strb	r3, [r7, #23]
		while(machine.length < parameter->param->Lstart){
 800f9fa:	e00b      	b.n	800fa14 <turn_in+0x12c>
			if(hosei_flag == false && st_l_hosei_check == true)
 800f9fc:	7dfb      	ldrb	r3, [r7, #23]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d108      	bne.n	800fa14 <turn_in+0x12c>
 800fa02:	4b1b      	ldr	r3, [pc, #108]	; (800fa70 <turn_in+0x188>)
 800fa04:	781b      	ldrb	r3, [r3, #0]
 800fa06:	2b01      	cmp	r3, #1
 800fa08:	d104      	bne.n	800fa14 <turn_in+0x12c>
			{
				machine.length = SEARCH_HOSEI-45.0;;
 800fa0a:	4b14      	ldr	r3, [pc, #80]	; (800fa5c <turn_in+0x174>)
 800fa0c:	4a17      	ldr	r2, [pc, #92]	; (800fa6c <turn_in+0x184>)
 800fa0e:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800fa10:	2301      	movs	r3, #1
 800fa12:	75fb      	strb	r3, [r7, #23]
		while(machine.length < parameter->param->Lstart){
 800fa14:	4b11      	ldr	r3, [pc, #68]	; (800fa5c <turn_in+0x174>)
 800fa16:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	edd3 7a02 	vldr	s15, [r3, #8]
 800fa22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2a:	d4e7      	bmi.n	800f9fc <turn_in+0x114>
	if(parameter->param->turn_dir == LEFT && sen_l.is_wall == true)
 800fa2c:	e03e      	b.n	800faac <turn_in+0x1c4>
			}
		}
	}
	else if(parameter->param->turn_dir == RIGHT && sen_r.is_wall == true)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	7d1b      	ldrb	r3, [r3, #20]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d139      	bne.n	800faac <turn_in+0x1c4>
 800fa38:	4b0f      	ldr	r3, [pc, #60]	; (800fa78 <turn_in+0x190>)
 800fa3a:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	d134      	bne.n	800faac <turn_in+0x1c4>
	{
		machine.length	= target.length	= 0.0f;
 800fa42:	4b05      	ldr	r3, [pc, #20]	; (800fa58 <turn_in+0x170>)
 800fa44:	f04f 0200 	mov.w	r2, #0
 800fa48:	629a      	str	r2, [r3, #40]	; 0x28
 800fa4a:	4b03      	ldr	r3, [pc, #12]	; (800fa58 <turn_in+0x170>)
 800fa4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa4e:	4a03      	ldr	r2, [pc, #12]	; (800fa5c <turn_in+0x174>)
 800fa50:	6293      	str	r3, [r2, #40]	; 0x28
		hosei_flag = false;
 800fa52:	2300      	movs	r3, #0
 800fa54:	75fb      	strb	r3, [r7, #23]
		while(machine.length < parameter->param->Lstart){
 800fa56:	e01d      	b.n	800fa94 <turn_in+0x1ac>
 800fa58:	2001b6a0 	.word	0x2001b6a0
 800fa5c:	2001b664 	.word	0x2001b664
 800fa60:	20001708 	.word	0x20001708
 800fa64:	2001b1b4 	.word	0x2001b1b4
 800fa68:	200099a0 	.word	0x200099a0
 800fa6c:	40400000 	.word	0x40400000
 800fa70:	20009488 	.word	0x20009488
 800fa74:	20009410 	.word	0x20009410
 800fa78:	2001b5e4 	.word	0x2001b5e4
			if(hosei_flag == false && st_r_hosei_check == true)
 800fa7c:	7dfb      	ldrb	r3, [r7, #23]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d108      	bne.n	800fa94 <turn_in+0x1ac>
 800fa82:	4baa      	ldr	r3, [pc, #680]	; (800fd2c <turn_in+0x444>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d104      	bne.n	800fa94 <turn_in+0x1ac>
			{
				machine.length = SEARCH_HOSEI-45.0;;
 800fa8a:	4ba9      	ldr	r3, [pc, #676]	; (800fd30 <turn_in+0x448>)
 800fa8c:	4aa9      	ldr	r2, [pc, #676]	; (800fd34 <turn_in+0x44c>)
 800fa8e:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800fa90:	2301      	movs	r3, #1
 800fa92:	75fb      	strb	r3, [r7, #23]
		while(machine.length < parameter->param->Lstart){
 800fa94:	4ba6      	ldr	r3, [pc, #664]	; (800fd30 <turn_in+0x448>)
 800fa96:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	edd3 7a02 	vldr	s15, [r3, #8]
 800faa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800faa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faaa:	d4e7      	bmi.n	800fa7c <turn_in+0x194>
			}
		}
	}

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	edd3 7a00 	vldr	s15, [r3]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	685b      	ldr	r3, [r3, #4]
 800fab8:	ed93 7a01 	vldr	s14, [r3, #4]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	edd3 6a02 	vldr	s13, [r3, #8]
 800fac4:	eeb0 1a66 	vmov.f32	s2, s13
 800fac8:	eef0 0a47 	vmov.f32	s1, s14
 800facc:	eeb0 0a67 	vmov.f32	s0, s15
 800fad0:	4899      	ldr	r0, [pc, #612]	; (800fd38 <turn_in+0x450>)
 800fad2:	f7fe ff2b 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	689b      	ldr	r3, [r3, #8]
 800fada:	edd3 7a00 	vldr	s15, [r3]
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	689b      	ldr	r3, [r3, #8]
 800fae2:	ed93 7a01 	vldr	s14, [r3, #4]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	edd3 6a02 	vldr	s13, [r3, #8]
 800faee:	eeb0 1a66 	vmov.f32	s2, s13
 800faf2:	eef0 0a47 	vmov.f32	s1, s14
 800faf6:	eeb0 0a67 	vmov.f32	s0, s15
 800fafa:	4890      	ldr	r0, [pc, #576]	; (800fd3c <turn_in+0x454>)
 800fafc:	f7fe ff16 	bl	800e92c <Set_PID_Gain>
	run_mode = TURN_MODE_TABLE;
 800fb00:	4b8f      	ldr	r3, [pc, #572]	; (800fd40 <turn_in+0x458>)
 800fb02:	2204      	movs	r2, #4
 800fb04:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	edd3 6a00 	vldr	s13, [r3]
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb16:	ed9f 6a8b 	vldr	s12, [pc, #556]	; 800fd44 <turn_in+0x45c>
 800fb1a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800fb1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb22:	4b89      	ldr	r3, [pc, #548]	; (800fd48 <turn_in+0x460>)
 800fb24:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	ed93 7a04 	vldr	s14, [r3, #16]
 800fb30:	eddf 6a86 	vldr	s13, [pc, #536]	; 800fd4c <turn_in+0x464>
 800fb34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fb38:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800fd50 <turn_in+0x468>
 800fb3c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800fb40:	4b81      	ldr	r3, [pc, #516]	; (800fd48 <turn_in+0x460>)
 800fb42:	edd3 7a05 	vldr	s15, [r3, #20]
 800fb46:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800fd54 <turn_in+0x46c>
 800fb4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fb4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb52:	4b81      	ldr	r3, [pc, #516]	; (800fd58 <turn_in+0x470>)
 800fb54:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 800fb58:	4880      	ldr	r0, [pc, #512]	; (800fd5c <turn_in+0x474>)
 800fb5a:	f7fe fdfd 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800fb5e:	4874      	ldr	r0, [pc, #464]	; (800fd30 <turn_in+0x448>)
 800fb60:	f7fe fdfa 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 800fb64:	4b7e      	ldr	r3, [pc, #504]	; (800fd60 <turn_in+0x478>)
 800fb66:	f04f 0200 	mov.w	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]
	if(parameter->param->degree == 45.0f || parameter->param->degree == -45.0f) enable_lsm = false;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb74:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800fd64 <turn_in+0x47c>
 800fb78:	eef4 7a47 	vcmp.f32	s15, s14
 800fb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb80:	d00a      	beq.n	800fb98 <turn_in+0x2b0>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	edd3 7a04 	vldr	s15, [r3, #16]
 800fb8a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800fd68 <turn_in+0x480>
 800fb8e:	eef4 7a47 	vcmp.f32	s15, s14
 800fb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb96:	d102      	bne.n	800fb9e <turn_in+0x2b6>
 800fb98:	4b74      	ldr	r3, [pc, #464]	; (800fd6c <turn_in+0x484>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	601a      	str	r2, [r3, #0]
	while((float)turn_time < set_turn_time * 1000);
 800fb9e:	bf00      	nop
 800fba0:	4b6d      	ldr	r3, [pc, #436]	; (800fd58 <turn_in+0x470>)
 800fba2:	edd3 7a00 	vldr	s15, [r3]
 800fba6:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800fd44 <turn_in+0x45c>
 800fbaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fbae:	4b6c      	ldr	r3, [pc, #432]	; (800fd60 <turn_in+0x478>)
 800fbb0:	edd3 7a00 	vldr	s15, [r3]
 800fbb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbbc:	dcf0      	bgt.n	800fba0 <turn_in+0x2b8>
	max_set.rad_velo = 0.0f;
 800fbbe:	4b62      	ldr	r3, [pc, #392]	; (800fd48 <turn_in+0x460>)
 800fbc0:	f04f 0200 	mov.w	r2, #0
 800fbc4:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 800fbc6:	4b65      	ldr	r3, [pc, #404]	; (800fd5c <turn_in+0x474>)
 800fbc8:	f04f 0200 	mov.w	r2, #0
 800fbcc:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 800fbce:	4b63      	ldr	r3, [pc, #396]	; (800fd5c <turn_in+0x474>)
 800fbd0:	f04f 0200 	mov.w	r2, #0
 800fbd4:	621a      	str	r2, [r3, #32]
	Sp_Param_rad_Initialize(&target);
 800fbd6:	4861      	ldr	r0, [pc, #388]	; (800fd5c <turn_in+0x474>)
 800fbd8:	f7fe fdbe 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800fbdc:	4854      	ldr	r0, [pc, #336]	; (800fd30 <turn_in+0x448>)
 800fbde:	f7fe fdbb 	bl	800e758 <Sp_Param_rad_Initialize>
	Set_Omega_PID_Gain(di_param->om_gain->Kp, di_param->om_gain->Ki, di_param->om_gain->Kd);
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	689b      	ldr	r3, [r3, #8]
 800fbe6:	edd3 7a00 	vldr	s15, [r3]
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	ed93 7a01 	vldr	s14, [r3, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	689b      	ldr	r3, [r3, #8]
 800fbf6:	edd3 6a02 	vldr	s13, [r3, #8]
 800fbfa:	eeb0 1a66 	vmov.f32	s2, s13
 800fbfe:	eef0 0a47 	vmov.f32	s1, s14
 800fc02:	eeb0 0a67 	vmov.f32	s0, s15
 800fc06:	f7fe fe77 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(di_param->sp_gain->Kp, di_param->sp_gain->Ki, di_param->sp_gain->Kd);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	edd3 7a00 	vldr	s15, [r3]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	685b      	ldr	r3, [r3, #4]
 800fc16:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	685b      	ldr	r3, [r3, #4]
 800fc1e:	edd3 6a02 	vldr	s13, [r3, #8]
 800fc22:	eeb0 1a66 	vmov.f32	s2, s13
 800fc26:	eef0 0a47 	vmov.f32	s1, s14
 800fc2a:	eeb0 0a67 	vmov.f32	s0, s15
 800fc2e:	f7fe fe49 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = DIAG_MODE;
 800fc32:	4b43      	ldr	r3, [pc, #268]	; (800fd40 <turn_in+0x458>)
 800fc34:	2203      	movs	r2, #3
 800fc36:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 800fc38:	4b48      	ldr	r3, [pc, #288]	; (800fd5c <turn_in+0x474>)
 800fc3a:	f04f 0200 	mov.w	r2, #0
 800fc3e:	629a      	str	r2, [r3, #40]	; 0x28
 800fc40:	4b46      	ldr	r3, [pc, #280]	; (800fd5c <turn_in+0x474>)
 800fc42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc44:	4a3a      	ldr	r2, [pc, #232]	; (800fd30 <turn_in+0x448>)
 800fc46:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4a43      	ldr	r2, [pc, #268]	; (800fd5c <turn_in+0x474>)
 800fc50:	6013      	str	r3, [r2, #0]
 800fc52:	4b42      	ldr	r3, [pc, #264]	; (800fd5c <turn_in+0x474>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	4a3c      	ldr	r2, [pc, #240]	; (800fd48 <turn_in+0x460>)
 800fc58:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	68db      	ldr	r3, [r3, #12]
 800fc60:	4a39      	ldr	r2, [pc, #228]	; (800fd48 <turn_in+0x460>)
 800fc62:	6293      	str	r3, [r2, #40]	; 0x28
	hosei_flag = false;
 800fc64:	2300      	movs	r3, #0
 800fc66:	75fb      	strb	r3, [r7, #23]
	while(machine.length < max_set.length ){
 800fc68:	e02f      	b.n	800fcca <turn_in+0x3e2>
		if(parameter->param->turn_dir == LEFT)
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	7d1b      	ldrb	r3, [r3, #20]
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	d112      	bne.n	800fc9a <turn_in+0x3b2>
		{
			if(hosei_flag == false && diag_r_hosei_check == true)
 800fc74:	7dfb      	ldrb	r3, [r7, #23]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d10f      	bne.n	800fc9a <turn_in+0x3b2>
 800fc7a:	4b3d      	ldr	r3, [pc, #244]	; (800fd70 <turn_in+0x488>)
 800fc7c:	781b      	ldrb	r3, [r3, #0]
 800fc7e:	2b01      	cmp	r3, #1
 800fc80:	d10b      	bne.n	800fc9a <turn_in+0x3b2>
			{
				machine.length = max_set.length-1.0;
 800fc82:	4b31      	ldr	r3, [pc, #196]	; (800fd48 <turn_in+0x460>)
 800fc84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fc88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc90:	4b27      	ldr	r3, [pc, #156]	; (800fd30 <turn_in+0x448>)
 800fc92:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				hosei_flag = true;
 800fc96:	2301      	movs	r3, #1
 800fc98:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(parameter->param->turn_dir == RIGHT)
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	7d1b      	ldrb	r3, [r3, #20]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d112      	bne.n	800fcca <turn_in+0x3e2>
		{
			if(hosei_flag == false && diag_l_hosei_check == true)
 800fca4:	7dfb      	ldrb	r3, [r7, #23]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d10f      	bne.n	800fcca <turn_in+0x3e2>
 800fcaa:	4b32      	ldr	r3, [pc, #200]	; (800fd74 <turn_in+0x48c>)
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d10b      	bne.n	800fcca <turn_in+0x3e2>
			{
				machine.length = max_set.length-1.0;
 800fcb2:	4b25      	ldr	r3, [pc, #148]	; (800fd48 <turn_in+0x460>)
 800fcb4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fcb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fcc0:	4b1b      	ldr	r3, [pc, #108]	; (800fd30 <turn_in+0x448>)
 800fcc2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				hosei_flag = true;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	75fb      	strb	r3, [r7, #23]
	while(machine.length < max_set.length ){
 800fcca:	4b19      	ldr	r3, [pc, #100]	; (800fd30 <turn_in+0x448>)
 800fccc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fcd0:	4b1d      	ldr	r3, [pc, #116]	; (800fd48 <turn_in+0x460>)
 800fcd2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800fcd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcde:	d4c4      	bmi.n	800fc6a <turn_in+0x382>
			}
		}
	}

	machine.length = target.length  = 0.0f;
 800fce0:	4b1e      	ldr	r3, [pc, #120]	; (800fd5c <turn_in+0x474>)
 800fce2:	f04f 0200 	mov.w	r2, #0
 800fce6:	629a      	str	r2, [r3, #40]	; 0x28
 800fce8:	4b1c      	ldr	r3, [pc, #112]	; (800fd5c <turn_in+0x474>)
 800fcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcec:	4a10      	ldr	r2, [pc, #64]	; (800fd30 <turn_in+0x448>)
 800fcee:	6293      	str	r3, [r2, #40]	; 0x28
	if(parameter->param->degree == 45.0f || parameter->param->degree == -45.0f) enable_lsm = true;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	edd3 7a04 	vldr	s15, [r3, #16]
 800fcf8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800fd64 <turn_in+0x47c>
 800fcfc:	eef4 7a47 	vcmp.f32	s15, s14
 800fd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd04:	d00a      	beq.n	800fd1c <turn_in+0x434>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	edd3 7a04 	vldr	s15, [r3, #16]
 800fd0e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800fd68 <turn_in+0x480>
 800fd12:	eef4 7a47 	vcmp.f32	s15, s14
 800fd16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd1a:	d102      	bne.n	800fd22 <turn_in+0x43a>
 800fd1c:	4b13      	ldr	r3, [pc, #76]	; (800fd6c <turn_in+0x484>)
 800fd1e:	2201      	movs	r2, #1
 800fd20:	601a      	str	r2, [r3, #0]
}
 800fd22:	bf00      	nop
 800fd24:	3718      	adds	r7, #24
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	200099a0 	.word	0x200099a0
 800fd30:	2001b664 	.word	0x2001b664
 800fd34:	40400000 	.word	0x40400000
 800fd38:	2001b694 	.word	0x2001b694
 800fd3c:	20009890 	.word	0x20009890
 800fd40:	20001708 	.word	0x20001708
 800fd44:	447a0000 	.word	0x447a0000
 800fd48:	2001b1b4 	.word	0x2001b1b4
 800fd4c:	43340000 	.word	0x43340000
 800fd50:	40490fda 	.word	0x40490fda
 800fd54:	3f344d01 	.word	0x3f344d01
 800fd58:	2001b6e4 	.word	0x2001b6e4
 800fd5c:	2001b6a0 	.word	0x2001b6a0
 800fd60:	2001b6e0 	.word	0x2001b6e0
 800fd64:	42340000 	.word	0x42340000
 800fd68:	c2340000 	.word	0xc2340000
 800fd6c:	20000af0 	.word	0x20000af0
 800fd70:	2000989d 	.word	0x2000989d
 800fd74:	2000989c 	.word	0x2000989c

0800fd78 <turn_out>:

void turn_out(const t_param* parameter,const t_straight_param* st_param,const t_straight_param* di_param)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]

	Sp_Param_I_Initialize(&target);
 800fd84:	48a0      	ldr	r0, [pc, #640]	; (8010008 <turn_out+0x290>)
 800fd86:	f7fe fccf 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 800fd8a:	48a0      	ldr	r0, [pc, #640]	; (801000c <turn_out+0x294>)
 800fd8c:	f7fe fccc 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 800fd90:	489d      	ldr	r0, [pc, #628]	; (8010008 <turn_out+0x290>)
 800fd92:	f7fe fce1 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800fd96:	489d      	ldr	r0, [pc, #628]	; (801000c <turn_out+0x294>)
 800fd98:	f7fe fcde 	bl	800e758 <Sp_Param_rad_Initialize>
	init_W_parameters();
 800fd9c:	f7fa fe9e 	bl	800aadc <init_W_parameters>
	Set_Omega_PID_Gain(di_param->om_gain->Kp, di_param->om_gain->Ki, di_param->om_gain->Kd);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	689b      	ldr	r3, [r3, #8]
 800fda4:	edd3 7a00 	vldr	s15, [r3]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	ed93 7a01 	vldr	s14, [r3, #4]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	edd3 6a02 	vldr	s13, [r3, #8]
 800fdb8:	eeb0 1a66 	vmov.f32	s2, s13
 800fdbc:	eef0 0a47 	vmov.f32	s1, s14
 800fdc0:	eeb0 0a67 	vmov.f32	s0, s15
 800fdc4:	f7fe fd98 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(di_param->sp_gain->Kp, di_param->sp_gain->Ki, di_param->sp_gain->Kd);
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	edd3 7a00 	vldr	s15, [r3]
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	ed93 7a01 	vldr	s14, [r3, #4]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	685b      	ldr	r3, [r3, #4]
 800fddc:	edd3 6a02 	vldr	s13, [r3, #8]
 800fde0:	eeb0 1a66 	vmov.f32	s2, s13
 800fde4:	eef0 0a47 	vmov.f32	s1, s14
 800fde8:	eeb0 0a67 	vmov.f32	s0, s15
 800fdec:	f7fe fd6a 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = DIAG_MODE;
 800fdf0:	4b87      	ldr	r3, [pc, #540]	; (8010010 <turn_out+0x298>)
 800fdf2:	2203      	movs	r2, #3
 800fdf4:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a85      	ldr	r2, [pc, #532]	; (8010014 <turn_out+0x29c>)
 800fdfe:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	681b      	ldr	r3, [r3, #0]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a80      	ldr	r2, [pc, #512]	; (8010008 <turn_out+0x290>)
 800fe08:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	4a80      	ldr	r2, [pc, #512]	; (8010014 <turn_out+0x29c>)
 800fe12:	6293      	str	r3, [r2, #40]	; 0x28

	t_bool hosei_flag = false;
 800fe14:	2300      	movs	r3, #0
 800fe16:	75fb      	strb	r3, [r7, #23]
	while(machine.length < parameter->param->Lstart ){
 800fe18:	e023      	b.n	800fe62 <turn_out+0xea>
		if(parameter->param->turn_dir == LEFT)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	7d1b      	ldrb	r3, [r3, #20]
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d10c      	bne.n	800fe3e <turn_out+0xc6>
		{
			if(hosei_flag == false && diag_l_hosei_check == true)
 800fe24:	7dfb      	ldrb	r3, [r7, #23]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d109      	bne.n	800fe3e <turn_out+0xc6>
 800fe2a:	4b7b      	ldr	r3, [pc, #492]	; (8010018 <turn_out+0x2a0>)
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d105      	bne.n	800fe3e <turn_out+0xc6>
			{
				machine.length = -2.0;
 800fe32:	4b76      	ldr	r3, [pc, #472]	; (801000c <turn_out+0x294>)
 800fe34:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800fe38:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	75fb      	strb	r3, [r7, #23]
			}
		}
		if(parameter->param->turn_dir == RIGHT)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	7d1b      	ldrb	r3, [r3, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d10c      	bne.n	800fe62 <turn_out+0xea>
		{
			if(hosei_flag == false && diag_r_hosei_check == true)
 800fe48:	7dfb      	ldrb	r3, [r7, #23]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d109      	bne.n	800fe62 <turn_out+0xea>
 800fe4e:	4b73      	ldr	r3, [pc, #460]	; (801001c <turn_out+0x2a4>)
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d105      	bne.n	800fe62 <turn_out+0xea>
			{
				machine.length = -2.0;
 800fe56:	4b6d      	ldr	r3, [pc, #436]	; (801000c <turn_out+0x294>)
 800fe58:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800fe5c:	629a      	str	r2, [r3, #40]	; 0x28
				hosei_flag = true;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	75fb      	strb	r3, [r7, #23]
	while(machine.length < parameter->param->Lstart ){
 800fe62:	4b6a      	ldr	r3, [pc, #424]	; (801000c <turn_out+0x294>)
 800fe64:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe78:	d4cf      	bmi.n	800fe1a <turn_out+0xa2>
			}
		}
	}

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	edd3 7a00 	vldr	s15, [r3]
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	edd3 6a02 	vldr	s13, [r3, #8]
 800fe92:	eeb0 1a66 	vmov.f32	s2, s13
 800fe96:	eef0 0a47 	vmov.f32	s1, s14
 800fe9a:	eeb0 0a67 	vmov.f32	s0, s15
 800fe9e:	4860      	ldr	r0, [pc, #384]	; (8010020 <turn_out+0x2a8>)
 800fea0:	f7fe fd44 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	689b      	ldr	r3, [r3, #8]
 800fea8:	edd3 7a00 	vldr	s15, [r3]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	689b      	ldr	r3, [r3, #8]
 800feb0:	ed93 7a01 	vldr	s14, [r3, #4]
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	689b      	ldr	r3, [r3, #8]
 800feb8:	edd3 6a02 	vldr	s13, [r3, #8]
 800febc:	eeb0 1a66 	vmov.f32	s2, s13
 800fec0:	eef0 0a47 	vmov.f32	s1, s14
 800fec4:	eeb0 0a67 	vmov.f32	s0, s15
 800fec8:	4856      	ldr	r0, [pc, #344]	; (8010024 <turn_out+0x2ac>)
 800feca:	f7fe fd2f 	bl	800e92c <Set_PID_Gain>
	run_mode = TURN_MODE_TABLE;
 800fece:	4b50      	ldr	r3, [pc, #320]	; (8010010 <turn_out+0x298>)
 800fed0:	2204      	movs	r2, #4
 800fed2:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	edd3 6a00 	vldr	s13, [r3]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	edd3 7a01 	vldr	s15, [r3, #4]
 800fee4:	ed9f 6a50 	vldr	s12, [pc, #320]	; 8010028 <turn_out+0x2b0>
 800fee8:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800feec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fef0:	4b48      	ldr	r3, [pc, #288]	; (8010014 <turn_out+0x29c>)
 800fef2:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	ed93 7a04 	vldr	s14, [r3, #16]
 800fefe:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801002c <turn_out+0x2b4>
 800ff02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ff06:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8010030 <turn_out+0x2b8>
 800ff0a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ff0e:	4b41      	ldr	r3, [pc, #260]	; (8010014 <turn_out+0x29c>)
 800ff10:	edd3 7a05 	vldr	s15, [r3, #20]
 800ff14:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8010034 <turn_out+0x2bc>
 800ff18:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff20:	4b45      	ldr	r3, [pc, #276]	; (8010038 <turn_out+0x2c0>)
 800ff22:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 800ff26:	4838      	ldr	r0, [pc, #224]	; (8010008 <turn_out+0x290>)
 800ff28:	f7fe fc16 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800ff2c:	4837      	ldr	r0, [pc, #220]	; (801000c <turn_out+0x294>)
 800ff2e:	f7fe fc13 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 800ff32:	4b42      	ldr	r3, [pc, #264]	; (801003c <turn_out+0x2c4>)
 800ff34:	f04f 0200 	mov.w	r2, #0
 800ff38:	601a      	str	r2, [r3, #0]

	while((float)turn_time < set_turn_time * 1000);
 800ff3a:	bf00      	nop
 800ff3c:	4b3e      	ldr	r3, [pc, #248]	; (8010038 <turn_out+0x2c0>)
 800ff3e:	edd3 7a00 	vldr	s15, [r3]
 800ff42:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010028 <turn_out+0x2b0>
 800ff46:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff4a:	4b3c      	ldr	r3, [pc, #240]	; (801003c <turn_out+0x2c4>)
 800ff4c:	edd3 7a00 	vldr	s15, [r3]
 800ff50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ff54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff58:	dcf0      	bgt.n	800ff3c <turn_out+0x1c4>
	Sp_Param_rad_Initialize(&target);
 800ff5a:	482b      	ldr	r0, [pc, #172]	; (8010008 <turn_out+0x290>)
 800ff5c:	f7fe fbfc 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 800ff60:	482a      	ldr	r0, [pc, #168]	; (801000c <turn_out+0x294>)
 800ff62:	f7fe fbf9 	bl	800e758 <Sp_Param_rad_Initialize>
	max_set.rad_velo = 0.0f;
 800ff66:	4b2b      	ldr	r3, [pc, #172]	; (8010014 <turn_out+0x29c>)
 800ff68:	f04f 0200 	mov.w	r2, #0
 800ff6c:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 800ff6e:	4b26      	ldr	r3, [pc, #152]	; (8010008 <turn_out+0x290>)
 800ff70:	f04f 0200 	mov.w	r2, #0
 800ff74:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 800ff76:	4b24      	ldr	r3, [pc, #144]	; (8010008 <turn_out+0x290>)
 800ff78:	f04f 0200 	mov.w	r2, #0
 800ff7c:	621a      	str	r2, [r3, #32]
	Set_Omega_PID_Gain(di_param->om_gain->Kp, di_param->om_gain->Ki, di_param->om_gain->Kd);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	edd3 7a00 	vldr	s15, [r3]
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	edd3 6a02 	vldr	s13, [r3, #8]
 800ff96:	eeb0 1a66 	vmov.f32	s2, s13
 800ff9a:	eef0 0a47 	vmov.f32	s1, s14
 800ff9e:	eeb0 0a67 	vmov.f32	s0, s15
 800ffa2:	f7fe fca9 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(di_param->sp_gain->Kp, di_param->sp_gain->Ki, di_param->sp_gain->Kd);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685b      	ldr	r3, [r3, #4]
 800ffaa:	edd3 7a00 	vldr	s15, [r3]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	ed93 7a01 	vldr	s14, [r3, #4]
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	685b      	ldr	r3, [r3, #4]
 800ffba:	edd3 6a02 	vldr	s13, [r3, #8]
 800ffbe:	eeb0 1a66 	vmov.f32	s2, s13
 800ffc2:	eef0 0a47 	vmov.f32	s1, s14
 800ffc6:	eeb0 0a67 	vmov.f32	s0, s15
 800ffca:	f7fe fc7b 	bl	800e8c4 <Set_Velo_PID_Gain>
	run_mode = STRAIGHT_MODE;
 800ffce:	4b10      	ldr	r3, [pc, #64]	; (8010010 <turn_out+0x298>)
 800ffd0:	2201      	movs	r2, #1
 800ffd2:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 800ffd4:	4b0c      	ldr	r3, [pc, #48]	; (8010008 <turn_out+0x290>)
 800ffd6:	f04f 0200 	mov.w	r2, #0
 800ffda:	629a      	str	r2, [r3, #40]	; 0x28
 800ffdc:	4b0a      	ldr	r3, [pc, #40]	; (8010008 <turn_out+0x290>)
 800ffde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe0:	4a0a      	ldr	r2, [pc, #40]	; (801000c <turn_out+0x294>)
 800ffe2:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a07      	ldr	r2, [pc, #28]	; (8010008 <turn_out+0x290>)
 800ffec:	6013      	str	r3, [r2, #0]
 800ffee:	4b06      	ldr	r3, [pc, #24]	; (8010008 <turn_out+0x290>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a08      	ldr	r2, [pc, #32]	; (8010014 <turn_out+0x29c>)
 800fff4:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	68db      	ldr	r3, [r3, #12]
 800fffc:	4a05      	ldr	r2, [pc, #20]	; (8010014 <turn_out+0x29c>)
 800fffe:	6293      	str	r3, [r2, #40]	; 0x28
	hosei_flag = false;
 8010000:	2300      	movs	r3, #0
 8010002:	75fb      	strb	r3, [r7, #23]
	while(machine.length < max_set.length )
 8010004:	e036      	b.n	8010074 <turn_out+0x2fc>
 8010006:	bf00      	nop
 8010008:	2001b6a0 	.word	0x2001b6a0
 801000c:	2001b664 	.word	0x2001b664
 8010010:	20001708 	.word	0x20001708
 8010014:	2001b1b4 	.word	0x2001b1b4
 8010018:	2000989c 	.word	0x2000989c
 801001c:	2000989d 	.word	0x2000989d
 8010020:	2001b694 	.word	0x2001b694
 8010024:	20009890 	.word	0x20009890
 8010028:	447a0000 	.word	0x447a0000
 801002c:	43340000 	.word	0x43340000
 8010030:	40490fda 	.word	0x40490fda
 8010034:	3f344d01 	.word	0x3f344d01
 8010038:	2001b6e4 	.word	0x2001b6e4
 801003c:	2001b6e0 	.word	0x2001b6e0
	{
		if(hosei_flag == false && st_r_hosei_check == true)
 8010040:	7dfb      	ldrb	r3, [r7, #23]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d109      	bne.n	801005a <turn_out+0x2e2>
 8010046:	4b17      	ldr	r3, [pc, #92]	; (80100a4 <turn_out+0x32c>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d105      	bne.n	801005a <turn_out+0x2e2>
		{
			machine.length = max_set.length;
 801004e:	4b16      	ldr	r3, [pc, #88]	; (80100a8 <turn_out+0x330>)
 8010050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010052:	4a16      	ldr	r2, [pc, #88]	; (80100ac <turn_out+0x334>)
 8010054:	6293      	str	r3, [r2, #40]	; 0x28
			hosei_flag = true;
 8010056:	2301      	movs	r3, #1
 8010058:	75fb      	strb	r3, [r7, #23]
		}
		if(hosei_flag == false && st_l_hosei_check == true)
 801005a:	7dfb      	ldrb	r3, [r7, #23]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d109      	bne.n	8010074 <turn_out+0x2fc>
 8010060:	4b13      	ldr	r3, [pc, #76]	; (80100b0 <turn_out+0x338>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d105      	bne.n	8010074 <turn_out+0x2fc>
		{
			machine.length = max_set.length;
 8010068:	4b0f      	ldr	r3, [pc, #60]	; (80100a8 <turn_out+0x330>)
 801006a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801006c:	4a0f      	ldr	r2, [pc, #60]	; (80100ac <turn_out+0x334>)
 801006e:	6293      	str	r3, [r2, #40]	; 0x28
			hosei_flag = true;
 8010070:	2301      	movs	r3, #1
 8010072:	75fb      	strb	r3, [r7, #23]
	while(machine.length < max_set.length )
 8010074:	4b0d      	ldr	r3, [pc, #52]	; (80100ac <turn_out+0x334>)
 8010076:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801007a:	4b0b      	ldr	r3, [pc, #44]	; (80100a8 <turn_out+0x330>)
 801007c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010080:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010088:	d4da      	bmi.n	8010040 <turn_out+0x2c8>
		}
	}

	machine.length = target.length  = 0.0f;
 801008a:	4b0a      	ldr	r3, [pc, #40]	; (80100b4 <turn_out+0x33c>)
 801008c:	f04f 0200 	mov.w	r2, #0
 8010090:	629a      	str	r2, [r3, #40]	; 0x28
 8010092:	4b08      	ldr	r3, [pc, #32]	; (80100b4 <turn_out+0x33c>)
 8010094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010096:	4a05      	ldr	r2, [pc, #20]	; (80100ac <turn_out+0x334>)
 8010098:	6293      	str	r3, [r2, #40]	; 0x28
}
 801009a:	bf00      	nop
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	200099a0 	.word	0x200099a0
 80100a8:	2001b1b4 	.word	0x2001b1b4
 80100ac:	2001b664 	.word	0x2001b664
 80100b0:	20009488 	.word	0x20009488
 80100b4:	2001b6a0 	.word	0x2001b6a0

080100b8 <set_stop_wall>:

void set_stop_wall(int millis)
{
 80100b8:	b5b0      	push	{r4, r5, r7, lr}
 80100ba:	b086      	sub	sp, #24
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
	Sp_Param_I_Initialize(&target);
 80100c0:	48b7      	ldr	r0, [pc, #732]	; (80103a0 <set_stop_wall+0x2e8>)
 80100c2:	f7fe fb31 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 80100c6:	48b7      	ldr	r0, [pc, #732]	; (80103a4 <set_stop_wall+0x2ec>)
 80100c8:	f7fe fb2e 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 80100cc:	48b4      	ldr	r0, [pc, #720]	; (80103a0 <set_stop_wall+0x2e8>)
 80100ce:	f7fe fb43 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 80100d2:	48b4      	ldr	r0, [pc, #720]	; (80103a4 <set_stop_wall+0x2ec>)
 80100d4:	f7fe fb40 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_Initialize(&target);
 80100d8:	48b1      	ldr	r0, [pc, #708]	; (80103a0 <set_stop_wall+0x2e8>)
 80100da:	f7fe fb4b 	bl	800e774 <Sp_Param_Initialize>
	Sp_Param_Initialize(&machine);
 80100de:	48b1      	ldr	r0, [pc, #708]	; (80103a4 <set_stop_wall+0x2ec>)
 80100e0:	f7fe fb48 	bl	800e774 <Sp_Param_Initialize>
	run_mode = TURN_MODE;
 80100e4:	4bb0      	ldr	r3, [pc, #704]	; (80103a8 <set_stop_wall+0x2f0>)
 80100e6:	2202      	movs	r2, #2
 80100e8:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < millis;i++)
 80100ea:	2300      	movs	r3, #0
 80100ec:	617b      	str	r3, [r7, #20]
 80100ee:	e138      	b.n	8010362 <set_stop_wall+0x2aa>
	{
		if(sen_fr.distance < 70.0 && sen_fl.distance < 70.0)
 80100f0:	4bae      	ldr	r3, [pc, #696]	; (80103ac <set_stop_wall+0x2f4>)
 80100f2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80100f6:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80103b0 <set_stop_wall+0x2f8>
 80100fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80100fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010102:	f140 8110 	bpl.w	8010326 <set_stop_wall+0x26e>
 8010106:	4bab      	ldr	r3, [pc, #684]	; (80103b4 <set_stop_wall+0x2fc>)
 8010108:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801010c:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 80103b0 <set_stop_wall+0x2f8>
 8010110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010118:	f140 8105 	bpl.w	8010326 <set_stop_wall+0x26e>
		{
			float sp_err = ((sen_fr.distance - 45.0) + (sen_fl.distance - 45.0))/2.0f;
 801011c:	4ba3      	ldr	r3, [pc, #652]	; (80103ac <set_stop_wall+0x2f4>)
 801011e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010120:	4618      	mov	r0, r3
 8010122:	f7f0 fa31 	bl	8000588 <__aeabi_f2d>
 8010126:	f04f 0200 	mov.w	r2, #0
 801012a:	4ba3      	ldr	r3, [pc, #652]	; (80103b8 <set_stop_wall+0x300>)
 801012c:	f7f0 f8cc 	bl	80002c8 <__aeabi_dsub>
 8010130:	4603      	mov	r3, r0
 8010132:	460c      	mov	r4, r1
 8010134:	4625      	mov	r5, r4
 8010136:	461c      	mov	r4, r3
 8010138:	4b9e      	ldr	r3, [pc, #632]	; (80103b4 <set_stop_wall+0x2fc>)
 801013a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801013c:	4618      	mov	r0, r3
 801013e:	f7f0 fa23 	bl	8000588 <__aeabi_f2d>
 8010142:	f04f 0200 	mov.w	r2, #0
 8010146:	4b9c      	ldr	r3, [pc, #624]	; (80103b8 <set_stop_wall+0x300>)
 8010148:	f7f0 f8be 	bl	80002c8 <__aeabi_dsub>
 801014c:	4602      	mov	r2, r0
 801014e:	460b      	mov	r3, r1
 8010150:	4620      	mov	r0, r4
 8010152:	4629      	mov	r1, r5
 8010154:	f7f0 f8ba 	bl	80002cc <__adddf3>
 8010158:	4603      	mov	r3, r0
 801015a:	460c      	mov	r4, r1
 801015c:	4618      	mov	r0, r3
 801015e:	4621      	mov	r1, r4
 8010160:	f04f 0200 	mov.w	r2, #0
 8010164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010168:	f7f0 fb90 	bl	800088c <__aeabi_ddiv>
 801016c:	4603      	mov	r3, r0
 801016e:	460c      	mov	r4, r1
 8010170:	4618      	mov	r0, r3
 8010172:	4621      	mov	r1, r4
 8010174:	f7f0 fd58 	bl	8000c28 <__aeabi_d2f>
 8010178:	4603      	mov	r3, r0
 801017a:	613b      	str	r3, [r7, #16]
			float om_err = ((sen_fr.distance - 45.0) - (sen_fl.distance - 45.0))/2.0f;
 801017c:	4b8b      	ldr	r3, [pc, #556]	; (80103ac <set_stop_wall+0x2f4>)
 801017e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010180:	4618      	mov	r0, r3
 8010182:	f7f0 fa01 	bl	8000588 <__aeabi_f2d>
 8010186:	f04f 0200 	mov.w	r2, #0
 801018a:	4b8b      	ldr	r3, [pc, #556]	; (80103b8 <set_stop_wall+0x300>)
 801018c:	f7f0 f89c 	bl	80002c8 <__aeabi_dsub>
 8010190:	4603      	mov	r3, r0
 8010192:	460c      	mov	r4, r1
 8010194:	4625      	mov	r5, r4
 8010196:	461c      	mov	r4, r3
 8010198:	4b86      	ldr	r3, [pc, #536]	; (80103b4 <set_stop_wall+0x2fc>)
 801019a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801019c:	4618      	mov	r0, r3
 801019e:	f7f0 f9f3 	bl	8000588 <__aeabi_f2d>
 80101a2:	f04f 0200 	mov.w	r2, #0
 80101a6:	4b84      	ldr	r3, [pc, #528]	; (80103b8 <set_stop_wall+0x300>)
 80101a8:	f7f0 f88e 	bl	80002c8 <__aeabi_dsub>
 80101ac:	4602      	mov	r2, r0
 80101ae:	460b      	mov	r3, r1
 80101b0:	4620      	mov	r0, r4
 80101b2:	4629      	mov	r1, r5
 80101b4:	f7f0 f888 	bl	80002c8 <__aeabi_dsub>
 80101b8:	4603      	mov	r3, r0
 80101ba:	460c      	mov	r4, r1
 80101bc:	4618      	mov	r0, r3
 80101be:	4621      	mov	r1, r4
 80101c0:	f04f 0200 	mov.w	r2, #0
 80101c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80101c8:	f7f0 fb60 	bl	800088c <__aeabi_ddiv>
 80101cc:	4603      	mov	r3, r0
 80101ce:	460c      	mov	r4, r1
 80101d0:	4618      	mov	r0, r3
 80101d2:	4621      	mov	r1, r4
 80101d4:	f7f0 fd28 	bl	8000c28 <__aeabi_d2f>
 80101d8:	4603      	mov	r3, r0
 80101da:	60fb      	str	r3, [r7, #12]

			target.accel = (1.0 * sp_err - 100.0*target.velo);
 80101dc:	6938      	ldr	r0, [r7, #16]
 80101de:	f7f0 f9d3 	bl	8000588 <__aeabi_f2d>
 80101e2:	4604      	mov	r4, r0
 80101e4:	460d      	mov	r5, r1
 80101e6:	4b6e      	ldr	r3, [pc, #440]	; (80103a0 <set_stop_wall+0x2e8>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7f0 f9cc 	bl	8000588 <__aeabi_f2d>
 80101f0:	f04f 0200 	mov.w	r2, #0
 80101f4:	4b71      	ldr	r3, [pc, #452]	; (80103bc <set_stop_wall+0x304>)
 80101f6:	f7f0 fa1f 	bl	8000638 <__aeabi_dmul>
 80101fa:	4602      	mov	r2, r0
 80101fc:	460b      	mov	r3, r1
 80101fe:	4620      	mov	r0, r4
 8010200:	4629      	mov	r1, r5
 8010202:	f7f0 f861 	bl	80002c8 <__aeabi_dsub>
 8010206:	4603      	mov	r3, r0
 8010208:	460c      	mov	r4, r1
 801020a:	4618      	mov	r0, r3
 801020c:	4621      	mov	r1, r4
 801020e:	f7f0 fd0b 	bl	8000c28 <__aeabi_d2f>
 8010212:	4602      	mov	r2, r0
 8010214:	4b62      	ldr	r3, [pc, #392]	; (80103a0 <set_stop_wall+0x2e8>)
 8010216:	60da      	str	r2, [r3, #12]
			//target.velo = 0.05 * sp_err;//veloだったら0.05
			max_set.velo = 0.3;
 8010218:	4b69      	ldr	r3, [pc, #420]	; (80103c0 <set_stop_wall+0x308>)
 801021a:	4a6a      	ldr	r2, [pc, #424]	; (80103c4 <set_stop_wall+0x30c>)
 801021c:	601a      	str	r2, [r3, #0]
			if(target.velo >=  max_set.velo)
 801021e:	4b60      	ldr	r3, [pc, #384]	; (80103a0 <set_stop_wall+0x2e8>)
 8010220:	ed93 7a00 	vldr	s14, [r3]
 8010224:	4b66      	ldr	r3, [pc, #408]	; (80103c0 <set_stop_wall+0x308>)
 8010226:	edd3 7a00 	vldr	s15, [r3]
 801022a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010232:	db08      	blt.n	8010246 <set_stop_wall+0x18e>
			{
				target.accel = 0.0;
 8010234:	4b5a      	ldr	r3, [pc, #360]	; (80103a0 <set_stop_wall+0x2e8>)
 8010236:	f04f 0200 	mov.w	r2, #0
 801023a:	60da      	str	r2, [r3, #12]
				target.velo = max_set.velo;
 801023c:	4b60      	ldr	r3, [pc, #384]	; (80103c0 <set_stop_wall+0x308>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4a57      	ldr	r2, [pc, #348]	; (80103a0 <set_stop_wall+0x2e8>)
 8010242:	6013      	str	r3, [r2, #0]
 8010244:	e018      	b.n	8010278 <set_stop_wall+0x1c0>
			}
			else if(target.velo <= -max_set.velo){
 8010246:	4b56      	ldr	r3, [pc, #344]	; (80103a0 <set_stop_wall+0x2e8>)
 8010248:	ed93 7a00 	vldr	s14, [r3]
 801024c:	4b5c      	ldr	r3, [pc, #368]	; (80103c0 <set_stop_wall+0x308>)
 801024e:	edd3 7a00 	vldr	s15, [r3]
 8010252:	eef1 7a67 	vneg.f32	s15, s15
 8010256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	d80b      	bhi.n	8010278 <set_stop_wall+0x1c0>
				target.accel = 0.0;
 8010260:	4b4f      	ldr	r3, [pc, #316]	; (80103a0 <set_stop_wall+0x2e8>)
 8010262:	f04f 0200 	mov.w	r2, #0
 8010266:	60da      	str	r2, [r3, #12]
				target.velo = -max_set.velo;
 8010268:	4b55      	ldr	r3, [pc, #340]	; (80103c0 <set_stop_wall+0x308>)
 801026a:	edd3 7a00 	vldr	s15, [r3]
 801026e:	eef1 7a67 	vneg.f32	s15, s15
 8010272:	4b4b      	ldr	r3, [pc, #300]	; (80103a0 <set_stop_wall+0x2e8>)
 8010274:	edc3 7a00 	vstr	s15, [r3]
			}

			target.rad_accel = (5.0*om_err - 20.0*target.rad_velo);
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f7f0 f985 	bl	8000588 <__aeabi_f2d>
 801027e:	f04f 0200 	mov.w	r2, #0
 8010282:	4b51      	ldr	r3, [pc, #324]	; (80103c8 <set_stop_wall+0x310>)
 8010284:	f7f0 f9d8 	bl	8000638 <__aeabi_dmul>
 8010288:	4603      	mov	r3, r0
 801028a:	460c      	mov	r4, r1
 801028c:	4625      	mov	r5, r4
 801028e:	461c      	mov	r4, r3
 8010290:	4b43      	ldr	r3, [pc, #268]	; (80103a0 <set_stop_wall+0x2e8>)
 8010292:	695b      	ldr	r3, [r3, #20]
 8010294:	4618      	mov	r0, r3
 8010296:	f7f0 f977 	bl	8000588 <__aeabi_f2d>
 801029a:	f04f 0200 	mov.w	r2, #0
 801029e:	4b4b      	ldr	r3, [pc, #300]	; (80103cc <set_stop_wall+0x314>)
 80102a0:	f7f0 f9ca 	bl	8000638 <__aeabi_dmul>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	4620      	mov	r0, r4
 80102aa:	4629      	mov	r1, r5
 80102ac:	f7f0 f80c 	bl	80002c8 <__aeabi_dsub>
 80102b0:	4603      	mov	r3, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	4618      	mov	r0, r3
 80102b6:	4621      	mov	r1, r4
 80102b8:	f7f0 fcb6 	bl	8000c28 <__aeabi_d2f>
 80102bc:	4602      	mov	r2, r0
 80102be:	4b38      	ldr	r3, [pc, #224]	; (80103a0 <set_stop_wall+0x2e8>)
 80102c0:	621a      	str	r2, [r3, #32]
			//target.rad_velo = 0.1*om_err;////veloだったら0.5
			max_set.rad_velo = 10.0;
 80102c2:	4b3f      	ldr	r3, [pc, #252]	; (80103c0 <set_stop_wall+0x308>)
 80102c4:	4a42      	ldr	r2, [pc, #264]	; (80103d0 <set_stop_wall+0x318>)
 80102c6:	615a      	str	r2, [r3, #20]
			if(target.rad_velo >= max_set.rad_velo)
 80102c8:	4b35      	ldr	r3, [pc, #212]	; (80103a0 <set_stop_wall+0x2e8>)
 80102ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80102ce:	4b3c      	ldr	r3, [pc, #240]	; (80103c0 <set_stop_wall+0x308>)
 80102d0:	edd3 7a05 	vldr	s15, [r3, #20]
 80102d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	db08      	blt.n	80102f0 <set_stop_wall+0x238>
			{
				target.rad_accel = 0.0;
 80102de:	4b30      	ldr	r3, [pc, #192]	; (80103a0 <set_stop_wall+0x2e8>)
 80102e0:	f04f 0200 	mov.w	r2, #0
 80102e4:	621a      	str	r2, [r3, #32]
				target.rad_velo = max_set.velo;
 80102e6:	4b36      	ldr	r3, [pc, #216]	; (80103c0 <set_stop_wall+0x308>)
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	4a2d      	ldr	r2, [pc, #180]	; (80103a0 <set_stop_wall+0x2e8>)
 80102ec:	6153      	str	r3, [r2, #20]
		{
 80102ee:	e032      	b.n	8010356 <set_stop_wall+0x29e>
			}
			else if(target.rad_velo <= -max_set.rad_velo)
 80102f0:	4b2b      	ldr	r3, [pc, #172]	; (80103a0 <set_stop_wall+0x2e8>)
 80102f2:	ed93 7a05 	vldr	s14, [r3, #20]
 80102f6:	4b32      	ldr	r3, [pc, #200]	; (80103c0 <set_stop_wall+0x308>)
 80102f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80102fc:	eef1 7a67 	vneg.f32	s15, s15
 8010300:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010308:	d900      	bls.n	801030c <set_stop_wall+0x254>
		{
 801030a:	e024      	b.n	8010356 <set_stop_wall+0x29e>
			{
				target.rad_accel = 0.0;
 801030c:	4b24      	ldr	r3, [pc, #144]	; (80103a0 <set_stop_wall+0x2e8>)
 801030e:	f04f 0200 	mov.w	r2, #0
 8010312:	621a      	str	r2, [r3, #32]
				target.rad_velo = -max_set.velo;
 8010314:	4b2a      	ldr	r3, [pc, #168]	; (80103c0 <set_stop_wall+0x308>)
 8010316:	edd3 7a00 	vldr	s15, [r3]
 801031a:	eef1 7a67 	vneg.f32	s15, s15
 801031e:	4b20      	ldr	r3, [pc, #128]	; (80103a0 <set_stop_wall+0x2e8>)
 8010320:	edc3 7a05 	vstr	s15, [r3, #20]
		{
 8010324:	e017      	b.n	8010356 <set_stop_wall+0x29e>
			}

		}
		else
		{
			target.accel = 0.0f;
 8010326:	4b1e      	ldr	r3, [pc, #120]	; (80103a0 <set_stop_wall+0x2e8>)
 8010328:	f04f 0200 	mov.w	r2, #0
 801032c:	60da      	str	r2, [r3, #12]
			target.velo = 0.0f;
 801032e:	4b1c      	ldr	r3, [pc, #112]	; (80103a0 <set_stop_wall+0x2e8>)
 8010330:	f04f 0200 	mov.w	r2, #0
 8010334:	601a      	str	r2, [r3, #0]
			max_set.velo = 0.0f;
 8010336:	4b22      	ldr	r3, [pc, #136]	; (80103c0 <set_stop_wall+0x308>)
 8010338:	f04f 0200 	mov.w	r2, #0
 801033c:	601a      	str	r2, [r3, #0]

			target.rad_velo = 0.0f;
 801033e:	4b18      	ldr	r3, [pc, #96]	; (80103a0 <set_stop_wall+0x2e8>)
 8010340:	f04f 0200 	mov.w	r2, #0
 8010344:	615a      	str	r2, [r3, #20]
			target.rad_accel = 0.0f;
 8010346:	4b16      	ldr	r3, [pc, #88]	; (80103a0 <set_stop_wall+0x2e8>)
 8010348:	f04f 0200 	mov.w	r2, #0
 801034c:	621a      	str	r2, [r3, #32]
			max_set.rad_velo = 0.0f;
 801034e:	4b1c      	ldr	r3, [pc, #112]	; (80103c0 <set_stop_wall+0x308>)
 8010350:	f04f 0200 	mov.w	r2, #0
 8010354:	615a      	str	r2, [r3, #20]
		}
		HAL_Delay(1);
 8010356:	2001      	movs	r0, #1
 8010358:	f006 ff50 	bl	80171fc <HAL_Delay>
	for(int i = 0; i < millis;i++)
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	3301      	adds	r3, #1
 8010360:	617b      	str	r3, [r7, #20]
 8010362:	697a      	ldr	r2, [r7, #20]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	429a      	cmp	r2, r3
 8010368:	f6ff aec2 	blt.w	80100f0 <set_stop_wall+0x38>
	}
	Sp_Param_rad_Initialize(&target);
 801036c:	480c      	ldr	r0, [pc, #48]	; (80103a0 <set_stop_wall+0x2e8>)
 801036e:	f7fe f9f3 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 8010372:	480c      	ldr	r0, [pc, #48]	; (80103a4 <set_stop_wall+0x2ec>)
 8010374:	f7fe f9f0 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_Initialize(&target);
 8010378:	4809      	ldr	r0, [pc, #36]	; (80103a0 <set_stop_wall+0x2e8>)
 801037a:	f7fe f9fb 	bl	800e774 <Sp_Param_Initialize>
	Sp_Param_Initialize(&machine);
 801037e:	4809      	ldr	r0, [pc, #36]	; (80103a4 <set_stop_wall+0x2ec>)
 8010380:	f7fe f9f8 	bl	800e774 <Sp_Param_Initialize>
	Sp_Param_Initialize(&max_set);
 8010384:	480e      	ldr	r0, [pc, #56]	; (80103c0 <set_stop_wall+0x308>)
 8010386:	f7fe f9f5 	bl	800e774 <Sp_Param_Initialize>

	HAL_Delay(100);
 801038a:	2064      	movs	r0, #100	; 0x64
 801038c:	f006 ff36 	bl	80171fc <HAL_Delay>
	run_mode = NON_CON_MODE;
 8010390:	4b05      	ldr	r3, [pc, #20]	; (80103a8 <set_stop_wall+0x2f0>)
 8010392:	2200      	movs	r2, #0
 8010394:	701a      	strb	r2, [r3, #0]
}
 8010396:	bf00      	nop
 8010398:	3718      	adds	r7, #24
 801039a:	46bd      	mov	sp, r7
 801039c:	bdb0      	pop	{r4, r5, r7, pc}
 801039e:	bf00      	nop
 80103a0:	2001b6a0 	.word	0x2001b6a0
 80103a4:	2001b664 	.word	0x2001b664
 80103a8:	20001708 	.word	0x20001708
 80103ac:	200098a0 	.word	0x200098a0
 80103b0:	428c0000 	.word	0x428c0000
 80103b4:	20009914 	.word	0x20009914
 80103b8:	40468000 	.word	0x40468000
 80103bc:	40590000 	.word	0x40590000
 80103c0:	2001b1b4 	.word	0x2001b1b4
 80103c4:	3e99999a 	.word	0x3e99999a
 80103c8:	40140000 	.word	0x40140000
 80103cc:	40340000 	.word	0x40340000
 80103d0:	41200000 	.word	0x41200000

080103d4 <init_maze>:
int get_nextdir_zenmen(int *x, int *y,int goal_size ,int mask, t_direction *dir);			//次に行く方向の取得
//void search_adachi(int gx,int gy,int size);		//足立法
int end_search = 0;

//迷路の初期化
void init_maze(){
 80103d4:	b480      	push	{r7}
 80103d6:	b085      	sub	sp, #20
 80103d8:	af00      	add	r7, sp, #0
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 80103da:	2300      	movs	r3, #0
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	e052      	b.n	8010486 <init_maze+0xb2>
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 80103e0:	2300      	movs	r3, #0
 80103e2:	60bb      	str	r3, [r7, #8]
 80103e4:	e049      	b.n	801047a <init_maze+0xa6>
			wall[i][j].north = wall[i][j].east = wall[i][j].south = wall[i][j].west = UNKNOWN;
 80103e6:	4a52      	ldr	r2, [pc, #328]	; (8010530 <init_maze+0x15c>)
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	015b      	lsls	r3, r3, #5
 80103ec:	441a      	add	r2, r3
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	441a      	add	r2, r3
 80103f2:	7813      	ldrb	r3, [r2, #0]
 80103f4:	2102      	movs	r1, #2
 80103f6:	f361 1387 	bfi	r3, r1, #6, #2
 80103fa:	7013      	strb	r3, [r2, #0]
 80103fc:	4a4c      	ldr	r2, [pc, #304]	; (8010530 <init_maze+0x15c>)
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	015b      	lsls	r3, r3, #5
 8010402:	441a      	add	r2, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	4413      	add	r3, r2
 8010408:	781b      	ldrb	r3, [r3, #0]
 801040a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801040e:	b2d9      	uxtb	r1, r3
 8010410:	4a47      	ldr	r2, [pc, #284]	; (8010530 <init_maze+0x15c>)
 8010412:	68fb      	ldr	r3, [r7, #12]
 8010414:	015b      	lsls	r3, r3, #5
 8010416:	441a      	add	r2, r3
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	441a      	add	r2, r3
 801041c:	7813      	ldrb	r3, [r2, #0]
 801041e:	f361 1305 	bfi	r3, r1, #4, #2
 8010422:	7013      	strb	r3, [r2, #0]
 8010424:	4a42      	ldr	r2, [pc, #264]	; (8010530 <init_maze+0x15c>)
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	015b      	lsls	r3, r3, #5
 801042a:	441a      	add	r2, r3
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	4413      	add	r3, r2
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8010436:	b2d9      	uxtb	r1, r3
 8010438:	4a3d      	ldr	r2, [pc, #244]	; (8010530 <init_maze+0x15c>)
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	015b      	lsls	r3, r3, #5
 801043e:	441a      	add	r2, r3
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	441a      	add	r2, r3
 8010444:	7813      	ldrb	r3, [r2, #0]
 8010446:	f361 0383 	bfi	r3, r1, #2, #2
 801044a:	7013      	strb	r3, [r2, #0]
 801044c:	4a38      	ldr	r2, [pc, #224]	; (8010530 <init_maze+0x15c>)
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	015b      	lsls	r3, r3, #5
 8010452:	441a      	add	r2, r3
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	4413      	add	r3, r2
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801045e:	b2d9      	uxtb	r1, r3
 8010460:	4a33      	ldr	r2, [pc, #204]	; (8010530 <init_maze+0x15c>)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	015b      	lsls	r3, r3, #5
 8010466:	441a      	add	r2, r3
 8010468:	68bb      	ldr	r3, [r7, #8]
 801046a:	441a      	add	r2, r3
 801046c:	7813      	ldrb	r3, [r2, #0]
 801046e:	f361 0301 	bfi	r3, r1, #0, #2
 8010472:	7013      	strb	r3, [r2, #0]
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8010474:	68bb      	ldr	r3, [r7, #8]
 8010476:	3301      	adds	r3, #1
 8010478:	60bb      	str	r3, [r7, #8]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	2b1f      	cmp	r3, #31
 801047e:	ddb2      	ble.n	80103e6 <init_maze+0x12>
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	3301      	adds	r3, #1
 8010484:	60fb      	str	r3, [r7, #12]
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	2b1f      	cmp	r3, #31
 801048a:	dda9      	ble.n	80103e0 <init_maze+0xc>
		}
	}

	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 801048c:	2300      	movs	r3, #0
 801048e:	607b      	str	r3, [r7, #4]
 8010490:	e016      	b.n	80104c0 <init_maze+0xec>
		wall[i][0].south = WALL;				//南側の壁を追加する
 8010492:	4a27      	ldr	r2, [pc, #156]	; (8010530 <init_maze+0x15c>)
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	015b      	lsls	r3, r3, #5
 8010498:	441a      	add	r2, r3
 801049a:	7813      	ldrb	r3, [r2, #0]
 801049c:	2101      	movs	r1, #1
 801049e:	f361 1305 	bfi	r3, r1, #4, #2
 80104a2:	7013      	strb	r3, [r2, #0]
		wall[i][MAZE_SIZE_Y - 1].north = WALL;	//北側の壁を追加する
 80104a4:	4a22      	ldr	r2, [pc, #136]	; (8010530 <init_maze+0x15c>)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	015b      	lsls	r3, r3, #5
 80104aa:	4413      	add	r3, r2
 80104ac:	f103 021f 	add.w	r2, r3, #31
 80104b0:	7813      	ldrb	r3, [r2, #0]
 80104b2:	2101      	movs	r1, #1
 80104b4:	f361 0301 	bfi	r3, r1, #0, #2
 80104b8:	7013      	strb	r3, [r2, #0]
	for( int i = 0 ; i < MAZE_SIZE_X ; i++ ){
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	3301      	adds	r3, #1
 80104be:	607b      	str	r3, [r7, #4]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2b1f      	cmp	r3, #31
 80104c4:	dde5      	ble.n	8010492 <init_maze+0xbe>
	}

	for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 80104c6:	2300      	movs	r3, #0
 80104c8:	603b      	str	r3, [r7, #0]
 80104ca:	e014      	b.n	80104f6 <init_maze+0x122>
		wall[0][j].west = WALL;					//西側の壁を追加する
 80104cc:	4a18      	ldr	r2, [pc, #96]	; (8010530 <init_maze+0x15c>)
 80104ce:	683b      	ldr	r3, [r7, #0]
 80104d0:	441a      	add	r2, r3
 80104d2:	7813      	ldrb	r3, [r2, #0]
 80104d4:	2101      	movs	r1, #1
 80104d6:	f361 1387 	bfi	r3, r1, #6, #2
 80104da:	7013      	strb	r3, [r2, #0]
		wall[MAZE_SIZE_X - 1][j].east = WALL;	//東側の壁を追加する
 80104dc:	4a14      	ldr	r2, [pc, #80]	; (8010530 <init_maze+0x15c>)
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	4413      	add	r3, r2
 80104e2:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 80104e6:	7813      	ldrb	r3, [r2, #0]
 80104e8:	2101      	movs	r1, #1
 80104ea:	f361 0383 	bfi	r3, r1, #2, #2
 80104ee:	7013      	strb	r3, [r2, #0]
	for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	3301      	adds	r3, #1
 80104f4:	603b      	str	r3, [r7, #0]
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	2b1f      	cmp	r3, #31
 80104fa:	dde7      	ble.n	80104cc <init_maze+0xf8>
	}

	wall[0][0].east = wall[1][0].west = WALL;				//スタートの東側の壁を追加
 80104fc:	4a0c      	ldr	r2, [pc, #48]	; (8010530 <init_maze+0x15c>)
 80104fe:	f892 3020 	ldrb.w	r3, [r2, #32]
 8010502:	2101      	movs	r1, #1
 8010504:	f361 1387 	bfi	r3, r1, #6, #2
 8010508:	f882 3020 	strb.w	r3, [r2, #32]
 801050c:	4b08      	ldr	r3, [pc, #32]	; (8010530 <init_maze+0x15c>)
 801050e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010512:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8010516:	b2d9      	uxtb	r1, r3
 8010518:	4a05      	ldr	r2, [pc, #20]	; (8010530 <init_maze+0x15c>)
 801051a:	7813      	ldrb	r3, [r2, #0]
 801051c:	f361 0383 	bfi	r3, r1, #2, #2
 8010520:	7013      	strb	r3, [r2, #0]

}
 8010522:	bf00      	nop
 8010524:	3714      	adds	r7, #20
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	2001b1e4 	.word	0x2001b1e4

08010534 <init_map>:

void init_map(int *x, int *y,int goal_size){
 8010534:	b480      	push	{r7}
 8010536:	b089      	sub	sp, #36	; 0x24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
	for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 8010540:	2300      	movs	r3, #0
 8010542:	61fb      	str	r3, [r7, #28]
 8010544:	e014      	b.n	8010570 <init_map+0x3c>
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 8010546:	2300      	movs	r3, #0
 8010548:	61bb      	str	r3, [r7, #24]
 801054a:	e00b      	b.n	8010564 <init_map+0x30>
			map[i][j] = MAZE_SIZE;
 801054c:	491f      	ldr	r1, [pc, #124]	; (80105cc <init_map+0x98>)
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	015a      	lsls	r2, r3, #5
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	4413      	add	r3, r2
 8010556:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801055a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for( int j = 0 ; j < MAZE_SIZE_Y ; j++ ){
 801055e:	69bb      	ldr	r3, [r7, #24]
 8010560:	3301      	adds	r3, #1
 8010562:	61bb      	str	r3, [r7, #24]
 8010564:	69bb      	ldr	r3, [r7, #24]
 8010566:	2b1f      	cmp	r3, #31
 8010568:	ddf0      	ble.n	801054c <init_map+0x18>
	for( int i = 0; i < MAZE_SIZE_X ; i++ ){
 801056a:	69fb      	ldr	r3, [r7, #28]
 801056c:	3301      	adds	r3, #1
 801056e:	61fb      	str	r3, [r7, #28]
 8010570:	69fb      	ldr	r3, [r7, #28]
 8010572:	2b1f      	cmp	r3, #31
 8010574:	dde7      	ble.n	8010546 <init_map+0x12>
		}
	}

	for(int i = 0;i < goal_size;i++){
 8010576:	2300      	movs	r3, #0
 8010578:	617b      	str	r3, [r7, #20]
 801057a:	e01c      	b.n	80105b6 <init_map+0x82>
		for(int j = 0;j < goal_size;j++){
 801057c:	2300      	movs	r3, #0
 801057e:	613b      	str	r3, [r7, #16]
 8010580:	e012      	b.n	80105a8 <init_map+0x74>
			map[x[i]][y[j]] = 0;
 8010582:	697b      	ldr	r3, [r7, #20]
 8010584:	009b      	lsls	r3, r3, #2
 8010586:	68fa      	ldr	r2, [r7, #12]
 8010588:	4413      	add	r3, r2
 801058a:	681a      	ldr	r2, [r3, #0]
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	009b      	lsls	r3, r3, #2
 8010590:	68b9      	ldr	r1, [r7, #8]
 8010592:	440b      	add	r3, r1
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	490d      	ldr	r1, [pc, #52]	; (80105cc <init_map+0x98>)
 8010598:	0152      	lsls	r2, r2, #5
 801059a:	4413      	add	r3, r2
 801059c:	2200      	movs	r2, #0
 801059e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0;j < goal_size;j++){
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	3301      	adds	r3, #1
 80105a6:	613b      	str	r3, [r7, #16]
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	429a      	cmp	r2, r3
 80105ae:	dbe8      	blt.n	8010582 <init_map+0x4e>
	for(int i = 0;i < goal_size;i++){
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	3301      	adds	r3, #1
 80105b4:	617b      	str	r3, [r7, #20]
 80105b6:	697a      	ldr	r2, [r7, #20]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	429a      	cmp	r2, r3
 80105bc:	dbde      	blt.n	801057c <init_map+0x48>
		}
	}

}
 80105be:	bf00      	nop
 80105c0:	3724      	adds	r7, #36	; 0x24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop
 80105cc:	200002ac 	.word	0x200002ac

080105d0 <goal_set_vwall>:

void goal_set_vwall(int *gx,int *gy,int goal_size){
 80105d0:	b4b0      	push	{r4, r5, r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	607a      	str	r2, [r7, #4]
	if(goal_size == 3)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2b03      	cmp	r3, #3
 80105e0:	f040 809e 	bne.w	8010720 <goal_set_vwall+0x150>
	{
		wall[gx[1]][gy[1]].north = wall[gx[1]][gy[1]].east = wall[gx[1]][gy[1]].south = wall[gx[1]][gy[1]].west = VWALL;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3304      	adds	r3, #4
 80105e8:	6819      	ldr	r1, [r3, #0]
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	3304      	adds	r3, #4
 80105ee:	681a      	ldr	r2, [r3, #0]
 80105f0:	484e      	ldr	r0, [pc, #312]	; (801072c <goal_set_vwall+0x15c>)
 80105f2:	014b      	lsls	r3, r1, #5
 80105f4:	4403      	add	r3, r0
 80105f6:	1898      	adds	r0, r3, r2
 80105f8:	7803      	ldrb	r3, [r0, #0]
 80105fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80105fe:	7003      	strb	r3, [r0, #0]
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3304      	adds	r3, #4
 8010604:	681c      	ldr	r4, [r3, #0]
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	3304      	adds	r3, #4
 801060a:	6818      	ldr	r0, [r3, #0]
 801060c:	4d47      	ldr	r5, [pc, #284]	; (801072c <goal_set_vwall+0x15c>)
 801060e:	014b      	lsls	r3, r1, #5
 8010610:	442b      	add	r3, r5
 8010612:	4413      	add	r3, r2
 8010614:	781b      	ldrb	r3, [r3, #0]
 8010616:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801061a:	b2d9      	uxtb	r1, r3
 801061c:	4a43      	ldr	r2, [pc, #268]	; (801072c <goal_set_vwall+0x15c>)
 801061e:	0163      	lsls	r3, r4, #5
 8010620:	4413      	add	r3, r2
 8010622:	181a      	adds	r2, r3, r0
 8010624:	7813      	ldrb	r3, [r2, #0]
 8010626:	f361 1305 	bfi	r3, r1, #4, #2
 801062a:	7013      	strb	r3, [r2, #0]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	3304      	adds	r3, #4
 8010630:	6819      	ldr	r1, [r3, #0]
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	3304      	adds	r3, #4
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	4d3c      	ldr	r5, [pc, #240]	; (801072c <goal_set_vwall+0x15c>)
 801063a:	0163      	lsls	r3, r4, #5
 801063c:	442b      	add	r3, r5
 801063e:	4403      	add	r3, r0
 8010640:	781b      	ldrb	r3, [r3, #0]
 8010642:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8010646:	b2dc      	uxtb	r4, r3
 8010648:	4838      	ldr	r0, [pc, #224]	; (801072c <goal_set_vwall+0x15c>)
 801064a:	014b      	lsls	r3, r1, #5
 801064c:	4403      	add	r3, r0
 801064e:	1898      	adds	r0, r3, r2
 8010650:	7803      	ldrb	r3, [r0, #0]
 8010652:	f364 0383 	bfi	r3, r4, #2, #2
 8010656:	7003      	strb	r3, [r0, #0]
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	3304      	adds	r3, #4
 801065c:	6818      	ldr	r0, [r3, #0]
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	3304      	adds	r3, #4
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4c31      	ldr	r4, [pc, #196]	; (801072c <goal_set_vwall+0x15c>)
 8010666:	0149      	lsls	r1, r1, #5
 8010668:	4421      	add	r1, r4
 801066a:	440a      	add	r2, r1
 801066c:	7812      	ldrb	r2, [r2, #0]
 801066e:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8010672:	b2d1      	uxtb	r1, r2
 8010674:	4c2d      	ldr	r4, [pc, #180]	; (801072c <goal_set_vwall+0x15c>)
 8010676:	0142      	lsls	r2, r0, #5
 8010678:	4422      	add	r2, r4
 801067a:	441a      	add	r2, r3
 801067c:	7813      	ldrb	r3, [r2, #0]
 801067e:	f361 0301 	bfi	r3, r1, #0, #2
 8010682:	7013      	strb	r3, [r2, #0]
		wall[gx[1]][gy[2]].south = wall[gx[2]][gy[1]].west = wall[gx[1]][gy[0]].north = wall[gx[0]][gy[1]].east = VWALL;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	6819      	ldr	r1, [r3, #0]
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	3304      	adds	r3, #4
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	4827      	ldr	r0, [pc, #156]	; (801072c <goal_set_vwall+0x15c>)
 8010690:	014b      	lsls	r3, r1, #5
 8010692:	4403      	add	r3, r0
 8010694:	1898      	adds	r0, r3, r2
 8010696:	7803      	ldrb	r3, [r0, #0]
 8010698:	f043 030c 	orr.w	r3, r3, #12
 801069c:	7003      	strb	r3, [r0, #0]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	3304      	adds	r3, #4
 80106a2:	681c      	ldr	r4, [r3, #0]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	6818      	ldr	r0, [r3, #0]
 80106a8:	4d20      	ldr	r5, [pc, #128]	; (801072c <goal_set_vwall+0x15c>)
 80106aa:	014b      	lsls	r3, r1, #5
 80106ac:	442b      	add	r3, r5
 80106ae:	4413      	add	r3, r2
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80106b6:	b2d9      	uxtb	r1, r3
 80106b8:	4a1c      	ldr	r2, [pc, #112]	; (801072c <goal_set_vwall+0x15c>)
 80106ba:	0163      	lsls	r3, r4, #5
 80106bc:	4413      	add	r3, r2
 80106be:	181a      	adds	r2, r3, r0
 80106c0:	7813      	ldrb	r3, [r2, #0]
 80106c2:	f361 0301 	bfi	r3, r1, #0, #2
 80106c6:	7013      	strb	r3, [r2, #0]
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	3308      	adds	r3, #8
 80106cc:	6819      	ldr	r1, [r3, #0]
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	3304      	adds	r3, #4
 80106d2:	681a      	ldr	r2, [r3, #0]
 80106d4:	4d15      	ldr	r5, [pc, #84]	; (801072c <goal_set_vwall+0x15c>)
 80106d6:	0163      	lsls	r3, r4, #5
 80106d8:	442b      	add	r3, r5
 80106da:	4403      	add	r3, r0
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80106e2:	b2dc      	uxtb	r4, r3
 80106e4:	4811      	ldr	r0, [pc, #68]	; (801072c <goal_set_vwall+0x15c>)
 80106e6:	014b      	lsls	r3, r1, #5
 80106e8:	4403      	add	r3, r0
 80106ea:	1898      	adds	r0, r3, r2
 80106ec:	7803      	ldrb	r3, [r0, #0]
 80106ee:	f364 1387 	bfi	r3, r4, #6, #2
 80106f2:	7003      	strb	r3, [r0, #0]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	6818      	ldr	r0, [r3, #0]
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	3308      	adds	r3, #8
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4c0a      	ldr	r4, [pc, #40]	; (801072c <goal_set_vwall+0x15c>)
 8010702:	0149      	lsls	r1, r1, #5
 8010704:	4421      	add	r1, r4
 8010706:	440a      	add	r2, r1
 8010708:	7812      	ldrb	r2, [r2, #0]
 801070a:	f3c2 1281 	ubfx	r2, r2, #6, #2
 801070e:	b2d1      	uxtb	r1, r2
 8010710:	4c06      	ldr	r4, [pc, #24]	; (801072c <goal_set_vwall+0x15c>)
 8010712:	0142      	lsls	r2, r0, #5
 8010714:	4422      	add	r2, r4
 8010716:	441a      	add	r2, r3
 8010718:	7813      	ldrb	r3, [r2, #0]
 801071a:	f361 1305 	bfi	r3, r1, #4, #2
 801071e:	7013      	strb	r3, [r2, #0]
	}

}
 8010720:	bf00      	nop
 8010722:	3714      	adds	r7, #20
 8010724:	46bd      	mov	sp, r7
 8010726:	bcb0      	pop	{r4, r5, r7}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	2001b1e4 	.word	0x2001b1e4

08010730 <goal_clear_vwall>:

void goal_clear_vwall(int *gx,int *gy,int goal_size){
 8010730:	b4b0      	push	{r4, r5, r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	607a      	str	r2, [r7, #4]
	if(goal_size == 3)
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2b03      	cmp	r3, #3
 8010740:	f040 809e 	bne.w	8010880 <goal_clear_vwall+0x150>
	{
		wall[gx[1]][gy[1]].north = wall[gx[1]][gy[1]].east = wall[gx[1]][gy[1]].south = wall[gx[1]][gy[1]].west = NOWALL;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	3304      	adds	r3, #4
 8010748:	6819      	ldr	r1, [r3, #0]
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	3304      	adds	r3, #4
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	484e      	ldr	r0, [pc, #312]	; (801088c <goal_clear_vwall+0x15c>)
 8010752:	014b      	lsls	r3, r1, #5
 8010754:	4403      	add	r3, r0
 8010756:	1898      	adds	r0, r3, r2
 8010758:	7803      	ldrb	r3, [r0, #0]
 801075a:	f36f 1387 	bfc	r3, #6, #2
 801075e:	7003      	strb	r3, [r0, #0]
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	3304      	adds	r3, #4
 8010764:	681c      	ldr	r4, [r3, #0]
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	3304      	adds	r3, #4
 801076a:	6818      	ldr	r0, [r3, #0]
 801076c:	4d47      	ldr	r5, [pc, #284]	; (801088c <goal_clear_vwall+0x15c>)
 801076e:	014b      	lsls	r3, r1, #5
 8010770:	442b      	add	r3, r5
 8010772:	4413      	add	r3, r2
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801077a:	b2d9      	uxtb	r1, r3
 801077c:	4a43      	ldr	r2, [pc, #268]	; (801088c <goal_clear_vwall+0x15c>)
 801077e:	0163      	lsls	r3, r4, #5
 8010780:	4413      	add	r3, r2
 8010782:	181a      	adds	r2, r3, r0
 8010784:	7813      	ldrb	r3, [r2, #0]
 8010786:	f361 1305 	bfi	r3, r1, #4, #2
 801078a:	7013      	strb	r3, [r2, #0]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	3304      	adds	r3, #4
 8010790:	6819      	ldr	r1, [r3, #0]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	3304      	adds	r3, #4
 8010796:	681a      	ldr	r2, [r3, #0]
 8010798:	4d3c      	ldr	r5, [pc, #240]	; (801088c <goal_clear_vwall+0x15c>)
 801079a:	0163      	lsls	r3, r4, #5
 801079c:	442b      	add	r3, r5
 801079e:	4403      	add	r3, r0
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80107a6:	b2dc      	uxtb	r4, r3
 80107a8:	4838      	ldr	r0, [pc, #224]	; (801088c <goal_clear_vwall+0x15c>)
 80107aa:	014b      	lsls	r3, r1, #5
 80107ac:	4403      	add	r3, r0
 80107ae:	1898      	adds	r0, r3, r2
 80107b0:	7803      	ldrb	r3, [r0, #0]
 80107b2:	f364 0383 	bfi	r3, r4, #2, #2
 80107b6:	7003      	strb	r3, [r0, #0]
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	3304      	adds	r3, #4
 80107bc:	6818      	ldr	r0, [r3, #0]
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	3304      	adds	r3, #4
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	4c31      	ldr	r4, [pc, #196]	; (801088c <goal_clear_vwall+0x15c>)
 80107c6:	0149      	lsls	r1, r1, #5
 80107c8:	4421      	add	r1, r4
 80107ca:	440a      	add	r2, r1
 80107cc:	7812      	ldrb	r2, [r2, #0]
 80107ce:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80107d2:	b2d1      	uxtb	r1, r2
 80107d4:	4c2d      	ldr	r4, [pc, #180]	; (801088c <goal_clear_vwall+0x15c>)
 80107d6:	0142      	lsls	r2, r0, #5
 80107d8:	4422      	add	r2, r4
 80107da:	441a      	add	r2, r3
 80107dc:	7813      	ldrb	r3, [r2, #0]
 80107de:	f361 0301 	bfi	r3, r1, #0, #2
 80107e2:	7013      	strb	r3, [r2, #0]
		wall[gx[1]][gy[2]].south = wall[gx[2]][gy[1]].west = wall[gx[1]][gy[0]].north = wall[gx[0]][gy[1]].east = NOWALL;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6819      	ldr	r1, [r3, #0]
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	3304      	adds	r3, #4
 80107ec:	681a      	ldr	r2, [r3, #0]
 80107ee:	4827      	ldr	r0, [pc, #156]	; (801088c <goal_clear_vwall+0x15c>)
 80107f0:	014b      	lsls	r3, r1, #5
 80107f2:	4403      	add	r3, r0
 80107f4:	1898      	adds	r0, r3, r2
 80107f6:	7803      	ldrb	r3, [r0, #0]
 80107f8:	f36f 0383 	bfc	r3, #2, #2
 80107fc:	7003      	strb	r3, [r0, #0]
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	3304      	adds	r3, #4
 8010802:	681c      	ldr	r4, [r3, #0]
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	6818      	ldr	r0, [r3, #0]
 8010808:	4d20      	ldr	r5, [pc, #128]	; (801088c <goal_clear_vwall+0x15c>)
 801080a:	014b      	lsls	r3, r1, #5
 801080c:	442b      	add	r3, r5
 801080e:	4413      	add	r3, r2
 8010810:	781b      	ldrb	r3, [r3, #0]
 8010812:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8010816:	b2d9      	uxtb	r1, r3
 8010818:	4a1c      	ldr	r2, [pc, #112]	; (801088c <goal_clear_vwall+0x15c>)
 801081a:	0163      	lsls	r3, r4, #5
 801081c:	4413      	add	r3, r2
 801081e:	181a      	adds	r2, r3, r0
 8010820:	7813      	ldrb	r3, [r2, #0]
 8010822:	f361 0301 	bfi	r3, r1, #0, #2
 8010826:	7013      	strb	r3, [r2, #0]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	3308      	adds	r3, #8
 801082c:	6819      	ldr	r1, [r3, #0]
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	3304      	adds	r3, #4
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	4d15      	ldr	r5, [pc, #84]	; (801088c <goal_clear_vwall+0x15c>)
 8010836:	0163      	lsls	r3, r4, #5
 8010838:	442b      	add	r3, r5
 801083a:	4403      	add	r3, r0
 801083c:	781b      	ldrb	r3, [r3, #0]
 801083e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8010842:	b2dc      	uxtb	r4, r3
 8010844:	4811      	ldr	r0, [pc, #68]	; (801088c <goal_clear_vwall+0x15c>)
 8010846:	014b      	lsls	r3, r1, #5
 8010848:	4403      	add	r3, r0
 801084a:	1898      	adds	r0, r3, r2
 801084c:	7803      	ldrb	r3, [r0, #0]
 801084e:	f364 1387 	bfi	r3, r4, #6, #2
 8010852:	7003      	strb	r3, [r0, #0]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	3304      	adds	r3, #4
 8010858:	6818      	ldr	r0, [r3, #0]
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	3308      	adds	r3, #8
 801085e:	681b      	ldr	r3, [r3, #0]
 8010860:	4c0a      	ldr	r4, [pc, #40]	; (801088c <goal_clear_vwall+0x15c>)
 8010862:	0149      	lsls	r1, r1, #5
 8010864:	4421      	add	r1, r4
 8010866:	440a      	add	r2, r1
 8010868:	7812      	ldrb	r2, [r2, #0]
 801086a:	f3c2 1281 	ubfx	r2, r2, #6, #2
 801086e:	b2d1      	uxtb	r1, r2
 8010870:	4c06      	ldr	r4, [pc, #24]	; (801088c <goal_clear_vwall+0x15c>)
 8010872:	0142      	lsls	r2, r0, #5
 8010874:	4422      	add	r2, r4
 8010876:	441a      	add	r2, r3
 8010878:	7813      	ldrb	r3, [r2, #0]
 801087a:	f361 1305 	bfi	r3, r1, #4, #2
 801087e:	7013      	strb	r3, [r2, #0]
	}
}
 8010880:	bf00      	nop
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	bcb0      	pop	{r4, r5, r7}
 8010888:	4770      	bx	lr
 801088a:	bf00      	nop
 801088c:	2001b1e4 	.word	0x2001b1e4

08010890 <i_am_goal>:


t_bool i_am_goal(int x,int y,int *gx,int *gy,int goal_size){
 8010890:	b480      	push	{r7}
 8010892:	b089      	sub	sp, #36	; 0x24
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	603b      	str	r3, [r7, #0]
	t_bool flag = false;
 801089e:	2300      	movs	r3, #0
 80108a0:	77fb      	strb	r3, [r7, #31]
	for (int i = 0; i < goal_size;i++){
 80108a2:	2300      	movs	r3, #0
 80108a4:	61bb      	str	r3, [r7, #24]
 80108a6:	e01e      	b.n	80108e6 <i_am_goal+0x56>
		for(int j = 0; j < goal_size;j++){
 80108a8:	2300      	movs	r3, #0
 80108aa:	617b      	str	r3, [r7, #20]
 80108ac:	e014      	b.n	80108d8 <i_am_goal+0x48>
			if(x == gx[i] && y == gy[j]) flag = true;
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	009b      	lsls	r3, r3, #2
 80108b2:	687a      	ldr	r2, [r7, #4]
 80108b4:	4413      	add	r3, r2
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	68fa      	ldr	r2, [r7, #12]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d109      	bne.n	80108d2 <i_am_goal+0x42>
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	009b      	lsls	r3, r3, #2
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	4413      	add	r3, r2
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68ba      	ldr	r2, [r7, #8]
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d101      	bne.n	80108d2 <i_am_goal+0x42>
 80108ce:	2301      	movs	r3, #1
 80108d0:	77fb      	strb	r3, [r7, #31]
		for(int j = 0; j < goal_size;j++){
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	3301      	adds	r3, #1
 80108d6:	617b      	str	r3, [r7, #20]
 80108d8:	697a      	ldr	r2, [r7, #20]
 80108da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108dc:	429a      	cmp	r2, r3
 80108de:	dbe6      	blt.n	80108ae <i_am_goal+0x1e>
	for (int i = 0; i < goal_size;i++){
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	3301      	adds	r3, #1
 80108e4:	61bb      	str	r3, [r7, #24]
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ea:	429a      	cmp	r2, r3
 80108ec:	dbdc      	blt.n	80108a8 <i_am_goal+0x18>
		}
	}
	return flag;
 80108ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3724      	adds	r7, #36	; 0x24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr

080108fc <expand>:

	}while(change_flag == true);	//全体を作り終わるまで待つ

}

void expand(t_queue *queue,t_MapNode n,int mask){
 80108fc:	b5b0      	push	{r4, r5, r7, lr}
 80108fe:	b08e      	sub	sp, #56	; 0x38
 8010900:	af02      	add	r7, sp, #8
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	1d38      	adds	r0, r7, #4
 8010906:	e880 0006 	stmia.w	r0, {r1, r2}
 801090a:	603b      	str	r3, [r7, #0]
	if(n.st_y < MAZE_SIZE_Y-1)					//範囲チェック
 801090c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010910:	2b1e      	cmp	r3, #30
 8010912:	dc54      	bgt.n	80109be <expand+0xc2>
	{
		if( (wall[n.st_x][n.st_y].north & mask) == NOWALL)	//壁がなければ(maskの意味はstatic_parametersを参照)
 8010914:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010918:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801091c:	4611      	mov	r1, r2
 801091e:	4aad      	ldr	r2, [pc, #692]	; (8010bd4 <expand+0x2d8>)
 8010920:	015b      	lsls	r3, r3, #5
 8010922:	4413      	add	r3, r2
 8010924:	440b      	add	r3, r1
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801092c:	b2db      	uxtb	r3, r3
 801092e:	461a      	mov	r2, r3
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	4013      	ands	r3, r2
 8010934:	2b00      	cmp	r3, #0
 8010936:	d142      	bne.n	80109be <expand+0xc2>
		{
			if(map[n.st_x][n.st_y+1] == MAZE_SIZE)			//まだ値が入っていなければ
 8010938:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801093c:	461a      	mov	r2, r3
 801093e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010942:	3301      	adds	r3, #1
 8010944:	49a4      	ldr	r1, [pc, #656]	; (8010bd8 <expand+0x2dc>)
 8010946:	0152      	lsls	r2, r2, #5
 8010948:	4413      	add	r3, r2
 801094a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801094e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010952:	d134      	bne.n	80109be <expand+0xc2>
			{
				map[n.st_x][n.st_y+1] = n.cost + 1;	//値を代入
 8010954:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010958:	b29a      	uxth	r2, r3
 801095a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801095e:	461c      	mov	r4, r3
 8010960:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010964:	3301      	adds	r3, #1
 8010966:	3201      	adds	r2, #1
 8010968:	b290      	uxth	r0, r2
 801096a:	499b      	ldr	r1, [pc, #620]	; (8010bd8 <expand+0x2dc>)
 801096c:	0162      	lsls	r2, r4, #5
 801096e:	4413      	add	r3, r2
 8010970:	4602      	mov	r2, r0
 8010972:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				heap_push(queue,node_set(n.st_x,n.st_y+1,map[n.st_x][n.st_y+1],0));
 8010976:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 801097a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801097e:	b29b      	uxth	r3, r3
 8010980:	3301      	adds	r3, #1
 8010982:	b29b      	uxth	r3, r3
 8010984:	b21d      	sxth	r5, r3
 8010986:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801098a:	461a      	mov	r2, r3
 801098c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010990:	3301      	adds	r3, #1
 8010992:	4991      	ldr	r1, [pc, #580]	; (8010bd8 <expand+0x2dc>)
 8010994:	0152      	lsls	r2, r2, #5
 8010996:	4413      	add	r3, r2
 8010998:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801099c:	b21a      	sxth	r2, r3
 801099e:	f107 0010 	add.w	r0, r7, #16
 80109a2:	2300      	movs	r3, #0
 80109a4:	9300      	str	r3, [sp, #0]
 80109a6:	4613      	mov	r3, r2
 80109a8:	462a      	mov	r2, r5
 80109aa:	4621      	mov	r1, r4
 80109ac:	f7fd fe99 	bl	800e6e2 <node_set>
 80109b0:	f107 0310 	add.w	r3, r7, #16
 80109b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80109b8:	68f8      	ldr	r0, [r7, #12]
 80109ba:	f7fd fe78 	bl	800e6ae <heap_push>
			}
		}
	}

	if(n.st_x < MAZE_SIZE_X-1)					//範囲チェック
 80109be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109c2:	2b1e      	cmp	r3, #30
 80109c4:	dc52      	bgt.n	8010a6c <expand+0x170>
	{
		if( (wall[n.st_x][n.st_y].east & mask) == NOWALL)		//壁がなければ
 80109c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109ce:	4611      	mov	r1, r2
 80109d0:	4a80      	ldr	r2, [pc, #512]	; (8010bd4 <expand+0x2d8>)
 80109d2:	015b      	lsls	r3, r3, #5
 80109d4:	4413      	add	r3, r2
 80109d6:	440b      	add	r3, r1
 80109d8:	781b      	ldrb	r3, [r3, #0]
 80109da:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80109de:	b2db      	uxtb	r3, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	4013      	ands	r3, r2
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d140      	bne.n	8010a6c <expand+0x170>
		{
			if(map[n.st_x+1][n.st_y] == MAZE_SIZE)			//値が入っていなければ
 80109ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80109ee:	3301      	adds	r3, #1
 80109f0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80109f4:	4611      	mov	r1, r2
 80109f6:	4a78      	ldr	r2, [pc, #480]	; (8010bd8 <expand+0x2dc>)
 80109f8:	015b      	lsls	r3, r3, #5
 80109fa:	440b      	add	r3, r1
 80109fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a04:	d132      	bne.n	8010a6c <expand+0x170>
			{
				map[n.st_x+1][n.st_y] = n.cost + 1;	//値を代入
 8010a06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010a10:	3301      	adds	r3, #1
 8010a12:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8010a16:	4608      	mov	r0, r1
 8010a18:	3201      	adds	r2, #1
 8010a1a:	b291      	uxth	r1, r2
 8010a1c:	4a6e      	ldr	r2, [pc, #440]	; (8010bd8 <expand+0x2dc>)
 8010a1e:	015b      	lsls	r3, r3, #5
 8010a20:	4403      	add	r3, r0
 8010a22:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				heap_push(queue,node_set(n.st_x+1,n.st_y,map[n.st_x+1][n.st_y],0));
 8010a26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	3301      	adds	r3, #1
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	b219      	sxth	r1, r3
 8010a32:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8010a36:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a40:	4610      	mov	r0, r2
 8010a42:	4a65      	ldr	r2, [pc, #404]	; (8010bd8 <expand+0x2dc>)
 8010a44:	015b      	lsls	r3, r3, #5
 8010a46:	4403      	add	r3, r0
 8010a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a4c:	b21a      	sxth	r2, r3
 8010a4e:	f107 0018 	add.w	r0, r7, #24
 8010a52:	2300      	movs	r3, #0
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	4613      	mov	r3, r2
 8010a58:	4622      	mov	r2, r4
 8010a5a:	f7fd fe42 	bl	800e6e2 <node_set>
 8010a5e:	f107 0318 	add.w	r3, r7, #24
 8010a62:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010a66:	68f8      	ldr	r0, [r7, #12]
 8010a68:	f7fd fe21 	bl	800e6ae <heap_push>
			}
		}
	}

	if(n.st_y > 0)						//範囲チェック
 8010a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	dd54      	ble.n	8010b1e <expand+0x222>
	{
		if( (wall[n.st_x][n.st_y].south & mask) == NOWALL)	//壁がなければ
 8010a74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010a78:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	4a55      	ldr	r2, [pc, #340]	; (8010bd4 <expand+0x2d8>)
 8010a80:	015b      	lsls	r3, r3, #5
 8010a82:	4413      	add	r3, r2
 8010a84:	440b      	add	r3, r1
 8010a86:	781b      	ldrb	r3, [r3, #0]
 8010a88:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8010a8c:	b2db      	uxtb	r3, r3
 8010a8e:	461a      	mov	r2, r3
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	4013      	ands	r3, r2
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d142      	bne.n	8010b1e <expand+0x222>
		{
			if(map[n.st_x][n.st_y-1] == MAZE_SIZE)			//値が入っていなければ
 8010a98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	494c      	ldr	r1, [pc, #304]	; (8010bd8 <expand+0x2dc>)
 8010aa6:	0152      	lsls	r2, r2, #5
 8010aa8:	4413      	add	r3, r2
 8010aaa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010ab2:	d134      	bne.n	8010b1e <expand+0x222>
			{
				map[n.st_x][n.st_y-1] = n.cost + 1;	//値を代入
 8010ab4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010ab8:	b29a      	uxth	r2, r3
 8010aba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010abe:	461c      	mov	r4, r3
 8010ac0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	3201      	adds	r2, #1
 8010ac8:	b290      	uxth	r0, r2
 8010aca:	4943      	ldr	r1, [pc, #268]	; (8010bd8 <expand+0x2dc>)
 8010acc:	0162      	lsls	r2, r4, #5
 8010ace:	4413      	add	r3, r2
 8010ad0:	4602      	mov	r2, r0
 8010ad2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				heap_push(queue,node_set(n.st_x,n.st_y-1,map[n.st_x][n.st_y-1],0));
 8010ad6:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8010ada:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	3b01      	subs	r3, #1
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	b21d      	sxth	r5, r3
 8010ae6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010aea:	461a      	mov	r2, r3
 8010aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010af0:	3b01      	subs	r3, #1
 8010af2:	4939      	ldr	r1, [pc, #228]	; (8010bd8 <expand+0x2dc>)
 8010af4:	0152      	lsls	r2, r2, #5
 8010af6:	4413      	add	r3, r2
 8010af8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010afc:	b21a      	sxth	r2, r3
 8010afe:	f107 0020 	add.w	r0, r7, #32
 8010b02:	2300      	movs	r3, #0
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	4613      	mov	r3, r2
 8010b08:	462a      	mov	r2, r5
 8010b0a:	4621      	mov	r1, r4
 8010b0c:	f7fd fde9 	bl	800e6e2 <node_set>
 8010b10:	f107 0320 	add.w	r3, r7, #32
 8010b14:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7fd fdc8 	bl	800e6ae <heap_push>
			}
		}
	}

	if(n.st_x > 0)						//範囲チェック
 8010b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	dd52      	ble.n	8010bcc <expand+0x2d0>
	{
		if( (wall[n.st_x][n.st_y].west & mask) == NOWALL)		//壁がなければ
 8010b26:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b2e:	4611      	mov	r1, r2
 8010b30:	4a28      	ldr	r2, [pc, #160]	; (8010bd4 <expand+0x2d8>)
 8010b32:	015b      	lsls	r3, r3, #5
 8010b34:	4413      	add	r3, r2
 8010b36:	440b      	add	r3, r1
 8010b38:	781b      	ldrb	r3, [r3, #0]
 8010b3a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8010b3e:	b2db      	uxtb	r3, r3
 8010b40:	461a      	mov	r2, r3
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	4013      	ands	r3, r2
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d140      	bne.n	8010bcc <expand+0x2d0>
		{
			if(map[n.st_x-1][n.st_y] == MAZE_SIZE)			//値が入っていなければ
 8010b4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010b54:	4611      	mov	r1, r2
 8010b56:	4a20      	ldr	r2, [pc, #128]	; (8010bd8 <expand+0x2dc>)
 8010b58:	015b      	lsls	r3, r3, #5
 8010b5a:	440b      	add	r3, r1
 8010b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b64:	d132      	bne.n	8010bcc <expand+0x2d0>
			{
				map[n.st_x-1][n.st_y] = n.cost + 1;	//値を代入
 8010b66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b70:	3b01      	subs	r3, #1
 8010b72:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8010b76:	4608      	mov	r0, r1
 8010b78:	3201      	adds	r2, #1
 8010b7a:	b291      	uxth	r1, r2
 8010b7c:	4a16      	ldr	r2, [pc, #88]	; (8010bd8 <expand+0x2dc>)
 8010b7e:	015b      	lsls	r3, r3, #5
 8010b80:	4403      	add	r3, r0
 8010b82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				heap_push(queue,node_set(n.st_x-1,n.st_y,map[n.st_x-1][n.st_y],0));
 8010b86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b8a:	b29b      	uxth	r3, r3
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	b219      	sxth	r1, r3
 8010b92:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 8010b96:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010b9a:	3b01      	subs	r3, #1
 8010b9c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010ba0:	4610      	mov	r0, r2
 8010ba2:	4a0d      	ldr	r2, [pc, #52]	; (8010bd8 <expand+0x2dc>)
 8010ba4:	015b      	lsls	r3, r3, #5
 8010ba6:	4403      	add	r3, r0
 8010ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bac:	b21a      	sxth	r2, r3
 8010bae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	9300      	str	r3, [sp, #0]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	4622      	mov	r2, r4
 8010bba:	f7fd fd92 	bl	800e6e2 <node_set>
 8010bbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010bc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8010bc6:	68f8      	ldr	r0, [r7, #12]
 8010bc8:	f7fd fd71 	bl	800e6ae <heap_push>
			}

		}
	}

}
 8010bcc:	bf00      	nop
 8010bce:	3730      	adds	r7, #48	; 0x30
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8010bd4:	2001b1e4 	.word	0x2001b1e4
 8010bd8:	200002ac 	.word	0x200002ac

08010bdc <make_map_queue>:



void make_map_queue(int *x, int *y,int size,int mask)
{
 8010bdc:	b590      	push	{r4, r7, lr}
 8010bde:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8010be2:	b08f      	sub	sp, #60	; 0x3c
 8010be4:	af02      	add	r7, sp, #8
 8010be6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8010bea:	3c24      	subs	r4, #36	; 0x24
 8010bec:	6020      	str	r0, [r4, #0]
 8010bee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010bf2:	3828      	subs	r0, #40	; 0x28
 8010bf4:	6001      	str	r1, [r0, #0]
 8010bf6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010bfa:	392c      	subs	r1, #44	; 0x2c
 8010bfc:	600a      	str	r2, [r1, #0]
 8010bfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c02:	3a30      	subs	r2, #48	; 0x30
 8010c04:	6013      	str	r3, [r2, #0]
	//mapの初期化
		init_map(x,y,size);
 8010c06:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010c0a:	3a2c      	subs	r2, #44	; 0x2c
 8010c0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010c10:	3928      	subs	r1, #40	; 0x28
 8010c12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c16:	3b24      	subs	r3, #36	; 0x24
 8010c18:	6812      	ldr	r2, [r2, #0]
 8010c1a:	6809      	ldr	r1, [r1, #0]
 8010c1c:	6818      	ldr	r0, [r3, #0]
 8010c1e:	f7ff fc89 	bl	8010534 <init_map>
	//heapの初期化
		t_queue heapq;
		list_init(&heapq);
 8010c22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c26:	3b14      	subs	r3, #20
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f7fd fc31 	bl	800e490 <list_init>
		for(int i = 0;i < size;i++){
 8010c2e:	2300      	movs	r3, #0
 8010c30:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010c34:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8010c38:	6013      	str	r3, [r2, #0]
 8010c3a:	e055      	b.n	8010ce8 <make_map_queue+0x10c>
			for(int j = 0;j < size;j++){
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010c42:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	e038      	b.n	8010cbc <make_map_queue+0xe0>
				push(&heapq,node_set(x[i],y[j],0,0));
 8010c4a:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010c4e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	009a      	lsls	r2, r3, #2
 8010c56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c5a:	3b24      	subs	r3, #36	; 0x24
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	4413      	add	r3, r2
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	b219      	sxth	r1, r3
 8010c64:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010c68:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	009a      	lsls	r2, r3, #2
 8010c70:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c74:	3b28      	subs	r3, #40	; 0x28
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4413      	add	r3, r2
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	b21a      	sxth	r2, r3
 8010c7e:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010c82:	f100 0020 	add.w	r0, r0, #32
 8010c86:	2300      	movs	r3, #0
 8010c88:	9300      	str	r3, [sp, #0]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	f7fd fd29 	bl	800e6e2 <node_set>
 8010c90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010c94:	3b14      	subs	r3, #20
 8010c96:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010c9a:	f102 0220 	add.w	r2, r2, #32
 8010c9e:	ca06      	ldmia	r2, {r1, r2}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fd fc03 	bl	800e4ac <push>
			for(int j = 0;j < size;j++){
 8010ca6:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010caa:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	3301      	adds	r3, #1
 8010cb2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010cb6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8010cba:	6013      	str	r3, [r2, #0]
 8010cbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010cc0:	3b2c      	subs	r3, #44	; 0x2c
 8010cc2:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010cc6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8010cca:	6812      	ldr	r2, [r2, #0]
 8010ccc:	681b      	ldr	r3, [r3, #0]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	dbbb      	blt.n	8010c4a <make_map_queue+0x6e>
		for(int i = 0;i < size;i++){
 8010cd2:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010cd6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010ce2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8010ce6:	6013      	str	r3, [r2, #0]
 8010ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010cec:	3b2c      	subs	r3, #44	; 0x2c
 8010cee:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010cf2:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 8010cf6:	6812      	ldr	r2, [r2, #0]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	db9e      	blt.n	8010c3c <make_map_queue+0x60>
			}
		}
		build_heap(&heapq);
 8010cfe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d02:	3b14      	subs	r3, #20
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fd fc87 	bl	800e618 <build_heap>

	    t_MapNode n;
		while(heapq.tail != -1){
 8010d0a:	e02a      	b.n	8010d62 <make_map_queue+0x186>
			n = heap_pop(&heapq);
 8010d0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d10:	3b1c      	subs	r3, #28
 8010d12:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010d16:	3a14      	subs	r2, #20
 8010d18:	4611      	mov	r1, r2
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fd fc95 	bl	800e64a <heap_pop>
			expand(&heapq,n,mask);
 8010d20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d24:	3b30      	subs	r3, #48	; 0x30
 8010d26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010d2a:	3a1c      	subs	r2, #28
 8010d2c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8010d30:	3814      	subs	r0, #20
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	ca06      	ldmia	r2, {r1, r2}
 8010d36:	f7ff fde1 	bl	80108fc <expand>
			if(mypos.x == n.st_x && mypos.y == n.st_y)
 8010d3a:	4b11      	ldr	r3, [pc, #68]	; (8010d80 <make_map_queue+0x1a4>)
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d44:	3b1c      	subs	r3, #28
 8010d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010d4a:	429a      	cmp	r2, r3
 8010d4c:	d109      	bne.n	8010d62 <make_map_queue+0x186>
 8010d4e:	4b0c      	ldr	r3, [pc, #48]	; (8010d80 <make_map_queue+0x1a4>)
 8010d50:	785b      	ldrb	r3, [r3, #1]
 8010d52:	461a      	mov	r2, r3
 8010d54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d58:	3b1c      	subs	r3, #28
 8010d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010d5e:	429a      	cmp	r2, r3
 8010d60:	d007      	beq.n	8010d72 <make_map_queue+0x196>
		while(heapq.tail != -1){
 8010d62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010d66:	3b14      	subs	r3, #20
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d6e:	d1cd      	bne.n	8010d0c <make_map_queue+0x130>
				break;

		}
}
 8010d70:	e000      	b.n	8010d74 <make_map_queue+0x198>
				break;
 8010d72:	bf00      	nop
}
 8010d74:	bf00      	nop
 8010d76:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
 8010d7a:	3734      	adds	r7, #52	; 0x34
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	bd90      	pop	{r4, r7, pc}
 8010d80:	20000afc 	.word	0x20000afc

08010d84 <make_map_queue_zenmen>:


void make_map_queue_zenmen(int *x, int *y,int size,int mask){
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	f5ad 5d01 	sub.w	sp, sp, #8256	; 0x2040
 8010d8a:	b085      	sub	sp, #20
 8010d8c:	af02      	add	r7, sp, #8
 8010d8e:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8010d92:	3c34      	subs	r4, #52	; 0x34
 8010d94:	6020      	str	r0, [r4, #0]
 8010d96:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010d9a:	3838      	subs	r0, #56	; 0x38
 8010d9c:	6001      	str	r1, [r0, #0]
 8010d9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010da2:	393c      	subs	r1, #60	; 0x3c
 8010da4:	600a      	str	r2, [r1, #0]
 8010da6:	f107 0208 	add.w	r2, r7, #8
 8010daa:	6013      	str	r3, [r2, #0]

//mapの初期化
//heapの初期化
	t_queue heapq;
	list_init(&heapq);
 8010dac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010db0:	3b24      	subs	r3, #36	; 0x24
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7fd fb6c 	bl	800e490 <list_init>
	for(int i = 0;i < MAZE_SIZE_X;i++){
 8010db8:	2300      	movs	r3, #0
 8010dba:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8010dbe:	f102 0204 	add.w	r2, r2, #4
 8010dc2:	6013      	str	r3, [r2, #0]
 8010dc4:	e064      	b.n	8010e90 <make_map_queue_zenmen+0x10c>
		for(int j = 0;j <  MAZE_SIZE_Y;j++){
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8010dcc:	6013      	str	r3, [r2, #0]
 8010dce:	e04f      	b.n	8010e70 <make_map_queue_zenmen+0xec>
			if( is_unknown(i,j) == true){
 8010dd0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010dd4:	6819      	ldr	r1, [r3, #0]
 8010dd6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010dda:	f103 0304 	add.w	r3, r3, #4
 8010dde:	6818      	ldr	r0, [r3, #0]
 8010de0:	f000 f970 	bl	80110c4 <is_unknown>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d12c      	bne.n	8010e44 <make_map_queue_zenmen+0xc0>
				push(&heapq,node_set(i,j,0,0));
 8010dea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010dee:	f103 0304 	add.w	r3, r3, #4
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	b219      	sxth	r1, r3
 8010df6:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	b21a      	sxth	r2, r3
 8010dfe:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010e02:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8010e06:	2300      	movs	r3, #0
 8010e08:	9300      	str	r3, [sp, #0]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	f7fd fc69 	bl	800e6e2 <node_set>
 8010e10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e14:	3b24      	subs	r3, #36	; 0x24
 8010e16:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010e1a:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8010e1e:	ca06      	ldmia	r2, {r1, r2}
 8010e20:	4618      	mov	r0, r3
 8010e22:	f7fd fb43 	bl	800e4ac <push>
				map[i][j] = 0;
 8010e26:	49a5      	ldr	r1, [pc, #660]	; (80110bc <make_map_queue_zenmen+0x338>)
 8010e28:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e2c:	f103 0304 	add.w	r3, r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	015a      	lsls	r2, r3, #5
 8010e34:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	2200      	movs	r2, #0
 8010e3e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8010e42:	e00e      	b.n	8010e62 <make_map_queue_zenmen+0xde>
			}else{
				map[i][j] = MAZE_SIZE;
 8010e44:	499d      	ldr	r1, [pc, #628]	; (80110bc <make_map_queue_zenmen+0x338>)
 8010e46:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e4a:	f103 0304 	add.w	r3, r3, #4
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	015a      	lsls	r2, r3, #5
 8010e52:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4413      	add	r3, r2
 8010e5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e5e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0;j <  MAZE_SIZE_Y;j++){
 8010e62:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	3301      	adds	r3, #1
 8010e6a:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8010e6e:	6013      	str	r3, [r2, #0]
 8010e70:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	2b1f      	cmp	r3, #31
 8010e78:	ddaa      	ble.n	8010dd0 <make_map_queue_zenmen+0x4c>
	for(int i = 0;i < MAZE_SIZE_X;i++){
 8010e7a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e7e:	f103 0304 	add.w	r3, r3, #4
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	3301      	adds	r3, #1
 8010e86:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8010e8a:	f102 0204 	add.w	r2, r2, #4
 8010e8e:	6013      	str	r3, [r2, #0]
 8010e90:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8010e94:	f103 0304 	add.w	r3, r3, #4
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b1f      	cmp	r3, #31
 8010e9c:	dd93      	ble.n	8010dc6 <make_map_queue_zenmen+0x42>
			}
		}
	}
	build_heap(&heapq);
 8010e9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ea2:	3b24      	subs	r3, #36	; 0x24
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fd fbb7 	bl	800e618 <build_heap>
	//print_heap(&heapq);

    t_MapNode n;
	while(heapq.tail != -1){
 8010eaa:	e029      	b.n	8010f00 <make_map_queue_zenmen+0x17c>
		n = heap_pop(&heapq);
 8010eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010eb0:	3b2c      	subs	r3, #44	; 0x2c
 8010eb2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010eb6:	3a24      	subs	r2, #36	; 0x24
 8010eb8:	4611      	mov	r1, r2
 8010eba:	4618      	mov	r0, r3
 8010ebc:	f7fd fbc5 	bl	800e64a <heap_pop>
		expand(&heapq,n,mask);
 8010ec0:	f107 0308 	add.w	r3, r7, #8
 8010ec4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010ec8:	3a2c      	subs	r2, #44	; 0x2c
 8010eca:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8010ece:	3824      	subs	r0, #36	; 0x24
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	ca06      	ldmia	r2, {r1, r2}
 8010ed4:	f7ff fd12 	bl	80108fc <expand>

		if(mypos.x == n.st_x && mypos.y == n.st_y)
 8010ed8:	4b79      	ldr	r3, [pc, #484]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	461a      	mov	r2, r3
 8010ede:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ee2:	3b2c      	subs	r3, #44	; 0x2c
 8010ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ee8:	429a      	cmp	r2, r3
 8010eea:	d109      	bne.n	8010f00 <make_map_queue_zenmen+0x17c>
 8010eec:	4b74      	ldr	r3, [pc, #464]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 8010eee:	785b      	ldrb	r3, [r3, #1]
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ef6:	3b2c      	subs	r3, #44	; 0x2c
 8010ef8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d007      	beq.n	8010f10 <make_map_queue_zenmen+0x18c>
	while(heapq.tail != -1){
 8010f00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f04:	3b24      	subs	r3, #36	; 0x24
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f0c:	d1ce      	bne.n	8010eac <make_map_queue_zenmen+0x128>
 8010f0e:	e000      	b.n	8010f12 <make_map_queue_zenmen+0x18e>
			break;
 8010f10:	bf00      	nop

	}

	if(map[mypos.x][mypos.y] == MAZE_SIZE){
 8010f12:	4b6b      	ldr	r3, [pc, #428]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 8010f14:	781b      	ldrb	r3, [r3, #0]
 8010f16:	4618      	mov	r0, r3
 8010f18:	4b69      	ldr	r3, [pc, #420]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 8010f1a:	785b      	ldrb	r3, [r3, #1]
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	4a67      	ldr	r2, [pc, #412]	; (80110bc <make_map_queue_zenmen+0x338>)
 8010f20:	0143      	lsls	r3, r0, #5
 8010f22:	440b      	add	r3, r1
 8010f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f2c:	f040 80c0 	bne.w	80110b0 <make_map_queue_zenmen+0x32c>
		init_map(x,y,size);
 8010f30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8010f34:	3a3c      	subs	r2, #60	; 0x3c
 8010f36:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8010f3a:	3938      	subs	r1, #56	; 0x38
 8010f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f40:	3b34      	subs	r3, #52	; 0x34
 8010f42:	6812      	ldr	r2, [r2, #0]
 8010f44:	6809      	ldr	r1, [r1, #0]
 8010f46:	6818      	ldr	r0, [r3, #0]
 8010f48:	f7ff faf4 	bl	8010534 <init_map>
		//heapの初期化
		list_init(&heapq);
 8010f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f50:	3b24      	subs	r3, #36	; 0x24
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fd fa9c 	bl	800e490 <list_init>
		for(int i = 0;i < size;i++){
 8010f58:	2300      	movs	r3, #0
 8010f5a:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010f5e:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8010f62:	6013      	str	r3, [r2, #0]
 8010f64:	e055      	b.n	8011012 <make_map_queue_zenmen+0x28e>
			for(int j = 0;j < size;j++){
 8010f66:	2300      	movs	r3, #0
 8010f68:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010f6c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8010f70:	6013      	str	r3, [r2, #0]
 8010f72:	e038      	b.n	8010fe6 <make_map_queue_zenmen+0x262>
				push(&heapq,node_set(x[i],y[j],0,0));
 8010f74:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010f78:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	009a      	lsls	r2, r3, #2
 8010f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f84:	3b34      	subs	r3, #52	; 0x34
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	4413      	add	r3, r2
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	b219      	sxth	r1, r3
 8010f8e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010f92:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	009a      	lsls	r2, r3, #2
 8010f9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010f9e:	3b38      	subs	r3, #56	; 0x38
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	4413      	add	r3, r2
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	b21a      	sxth	r2, r3
 8010fa8:	f507 5000 	add.w	r0, r7, #8192	; 0x2000
 8010fac:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9300      	str	r3, [sp, #0]
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	f7fd fb94 	bl	800e6e2 <node_set>
 8010fba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fbe:	3b24      	subs	r3, #36	; 0x24
 8010fc0:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010fc4:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8010fc8:	ca06      	ldmia	r2, {r1, r2}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f7fd fa6e 	bl	800e4ac <push>
			for(int j = 0;j < size;j++){
 8010fd0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8010fd4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010fe0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010fea:	3b3c      	subs	r3, #60	; 0x3c
 8010fec:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8010ff0:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8010ff4:	6812      	ldr	r2, [r2, #0]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	dbbb      	blt.n	8010f74 <make_map_queue_zenmen+0x1f0>
		for(int i = 0;i < size;i++){
 8010ffc:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8011000:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	3301      	adds	r3, #1
 8011008:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801100c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011016:	3b3c      	subs	r3, #60	; 0x3c
 8011018:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 801101c:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8011020:	6812      	ldr	r2, [r2, #0]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	429a      	cmp	r2, r3
 8011026:	db9e      	blt.n	8010f66 <make_map_queue_zenmen+0x1e2>
			}
		}
		build_heap(&heapq);
 8011028:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801102c:	3b24      	subs	r3, #36	; 0x24
 801102e:	4618      	mov	r0, r3
 8011030:	f7fd faf2 	bl	800e618 <build_heap>
		while(heapq.tail != -1){
 8011034:	e033      	b.n	801109e <make_map_queue_zenmen+0x31a>
			n = heap_pop(&heapq);
 8011036:	f107 0448 	add.w	r4, r7, #72	; 0x48
 801103a:	3c2c      	subs	r4, #44	; 0x2c
 801103c:	f107 0308 	add.w	r3, r7, #8
 8011040:	3b08      	subs	r3, #8
 8011042:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011046:	3a24      	subs	r2, #36	; 0x24
 8011048:	4611      	mov	r1, r2
 801104a:	4618      	mov	r0, r3
 801104c:	f7fd fafd 	bl	800e64a <heap_pop>
 8011050:	f107 0208 	add.w	r2, r7, #8
 8011054:	3a08      	subs	r2, #8
 8011056:	4623      	mov	r3, r4
 8011058:	6810      	ldr	r0, [r2, #0]
 801105a:	6851      	ldr	r1, [r2, #4]
 801105c:	c303      	stmia	r3!, {r0, r1}
			expand(&heapq,n,mask);
 801105e:	f107 0308 	add.w	r3, r7, #8
 8011062:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8011066:	3a2c      	subs	r2, #44	; 0x2c
 8011068:	f107 0048 	add.w	r0, r7, #72	; 0x48
 801106c:	3824      	subs	r0, #36	; 0x24
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	ca06      	ldmia	r2, {r1, r2}
 8011072:	f7ff fc43 	bl	80108fc <expand>

			if(mypos.x == n.st_x && mypos.y == n.st_y)
 8011076:	4b12      	ldr	r3, [pc, #72]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	461a      	mov	r2, r3
 801107c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011080:	3b2c      	subs	r3, #44	; 0x2c
 8011082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011086:	429a      	cmp	r2, r3
 8011088:	d109      	bne.n	801109e <make_map_queue_zenmen+0x31a>
 801108a:	4b0d      	ldr	r3, [pc, #52]	; (80110c0 <make_map_queue_zenmen+0x33c>)
 801108c:	785b      	ldrb	r3, [r3, #1]
 801108e:	461a      	mov	r2, r3
 8011090:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011094:	3b2c      	subs	r3, #44	; 0x2c
 8011096:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801109a:	429a      	cmp	r2, r3
 801109c:	d007      	beq.n	80110ae <make_map_queue_zenmen+0x32a>
		while(heapq.tail != -1){
 801109e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80110a2:	3b24      	subs	r3, #36	; 0x24
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110aa:	d1c4      	bne.n	8011036 <make_map_queue_zenmen+0x2b2>
				break;

		}
	}
}
 80110ac:	e000      	b.n	80110b0 <make_map_queue_zenmen+0x32c>
				break;
 80110ae:	bf00      	nop
}
 80110b0:	bf00      	nop
 80110b2:	f507 5701 	add.w	r7, r7, #8256	; 0x2040
 80110b6:	370c      	adds	r7, #12
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd90      	pop	{r4, r7, pc}
 80110bc:	200002ac 	.word	0x200002ac
 80110c0:	20000afc 	.word	0x20000afc

080110c4 <is_unknown>:

t_bool is_unknown(int x, int y)	//指定された区画が未探索か否かを判断する関数 未探索:true　探索済:false
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
 80110cc:	6039      	str	r1, [r7, #0]
	//座標x,yが未探索区間か否かを調べる

	if((wall[x][y].north == UNKNOWN) || (wall[x][y].east == UNKNOWN) || (wall[x][y].south == UNKNOWN) || (wall[x][y].west == UNKNOWN))
 80110ce:	4a1c      	ldr	r2, [pc, #112]	; (8011140 <is_unknown+0x7c>)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	015b      	lsls	r3, r3, #5
 80110d4:	441a      	add	r2, r3
 80110d6:	683b      	ldr	r3, [r7, #0]
 80110d8:	4413      	add	r3, r2
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	2b02      	cmp	r3, #2
 80110e4:	d023      	beq.n	801112e <is_unknown+0x6a>
 80110e6:	4a16      	ldr	r2, [pc, #88]	; (8011140 <is_unknown+0x7c>)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	015b      	lsls	r3, r3, #5
 80110ec:	441a      	add	r2, r3
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	4413      	add	r3, r2
 80110f2:	781b      	ldrb	r3, [r3, #0]
 80110f4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80110f8:	b2db      	uxtb	r3, r3
 80110fa:	2b02      	cmp	r3, #2
 80110fc:	d017      	beq.n	801112e <is_unknown+0x6a>
 80110fe:	4a10      	ldr	r2, [pc, #64]	; (8011140 <is_unknown+0x7c>)
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	015b      	lsls	r3, r3, #5
 8011104:	441a      	add	r2, r3
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	4413      	add	r3, r2
 801110a:	781b      	ldrb	r3, [r3, #0]
 801110c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011110:	b2db      	uxtb	r3, r3
 8011112:	2b02      	cmp	r3, #2
 8011114:	d00b      	beq.n	801112e <is_unknown+0x6a>
 8011116:	4a0a      	ldr	r2, [pc, #40]	; (8011140 <is_unknown+0x7c>)
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	015b      	lsls	r3, r3, #5
 801111c:	441a      	add	r2, r3
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	4413      	add	r3, r2
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8011128:	b2db      	uxtb	r3, r3
 801112a:	2b02      	cmp	r3, #2
 801112c:	d101      	bne.n	8011132 <is_unknown+0x6e>
	{			//どこかの壁情報が不明のままであれば
		return true;	//未探索
 801112e:	2301      	movs	r3, #1
 8011130:	e000      	b.n	8011134 <is_unknown+0x70>
	}
	else
	{
		return false;	//探索済
 8011132:	2300      	movs	r3, #0
	}
}
 8011134:	4618      	mov	r0, r3
 8011136:	370c      	adds	r7, #12
 8011138:	46bd      	mov	sp, r7
 801113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113e:	4770      	bx	lr
 8011140:	2001b1e4 	.word	0x2001b1e4

08011144 <set_wall>:

void set_wall(int x, int y)	//壁情報を記録
{
 8011144:	b480      	push	{r7}
 8011146:	b087      	sub	sp, #28
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
//引数の座標x,yに壁情報を書き込む
	int n_write,s_write,e_write,w_write;
	n_write = 0;
 801114e:	2300      	movs	r3, #0
 8011150:	617b      	str	r3, [r7, #20]
	s_write = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	613b      	str	r3, [r7, #16]
    e_write = 0;
 8011156:	2300      	movs	r3, #0
 8011158:	60fb      	str	r3, [r7, #12]
    w_write = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	60bb      	str	r3, [r7, #8]
	//自分の方向に応じて書き込むデータを生成
	//CONV_SEN2WALL()はmacro.hを参照
	switch(mypos.dir){
 801115e:	4b99      	ldr	r3, [pc, #612]	; (80113c4 <set_wall+0x280>)
 8011160:	789b      	ldrb	r3, [r3, #2]
 8011162:	2b04      	cmp	r3, #4
 8011164:	f200 809a 	bhi.w	801129c <set_wall+0x158>
 8011168:	a201      	add	r2, pc, #4	; (adr r2, 8011170 <set_wall+0x2c>)
 801116a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801116e:	bf00      	nop
 8011170:	08011185 	.word	0x08011185
 8011174:	080111cb 	.word	0x080111cb
 8011178:	08011211 	.word	0x08011211
 801117c:	08011257 	.word	0x08011257
 8011180:	0801129d 	.word	0x0801129d
		case north:	//北を向いている時

			n_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//　前壁の有無を判断
 8011184:	4b90      	ldr	r3, [pc, #576]	; (80113c8 <set_wall+0x284>)
 8011186:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801118a:	2b00      	cmp	r3, #0
 801118c:	d104      	bne.n	8011198 <set_wall+0x54>
 801118e:	4b8f      	ldr	r3, [pc, #572]	; (80113cc <set_wall+0x288>)
 8011190:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011194:	2b00      	cmp	r3, #0
 8011196:	d001      	beq.n	801119c <set_wall+0x58>
 8011198:	2301      	movs	r3, #1
 801119a:	e000      	b.n	801119e <set_wall+0x5a>
 801119c:	2300      	movs	r3, #0
 801119e:	617b      	str	r3, [r7, #20]
			e_write = CONV_SEN2WALL(sen_r.is_wall);				//右の有無を判断
 80111a0:	4b8b      	ldr	r3, [pc, #556]	; (80113d0 <set_wall+0x28c>)
 80111a2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	bf14      	ite	ne
 80111aa:	2301      	movne	r3, #1
 80111ac:	2300      	moveq	r3, #0
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	60fb      	str	r3, [r7, #12]
			w_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 80111b2:	4b88      	ldr	r3, [pc, #544]	; (80113d4 <set_wall+0x290>)
 80111b4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	bf14      	ite	ne
 80111bc:	2301      	movne	r3, #1
 80111be:	2300      	moveq	r3, #0
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	60bb      	str	r3, [r7, #8]
			s_write = NOWALL;						//後ろは必ず壁がない
 80111c4:	2300      	movs	r3, #0
 80111c6:	613b      	str	r3, [r7, #16]

			break;
 80111c8:	e068      	b.n	801129c <set_wall+0x158>

		case east:	//東を向いているとき

			e_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 80111ca:	4b7f      	ldr	r3, [pc, #508]	; (80113c8 <set_wall+0x284>)
 80111cc:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d104      	bne.n	80111de <set_wall+0x9a>
 80111d4:	4b7d      	ldr	r3, [pc, #500]	; (80113cc <set_wall+0x288>)
 80111d6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d001      	beq.n	80111e2 <set_wall+0x9e>
 80111de:	2301      	movs	r3, #1
 80111e0:	e000      	b.n	80111e4 <set_wall+0xa0>
 80111e2:	2300      	movs	r3, #0
 80111e4:	60fb      	str	r3, [r7, #12]
			s_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 80111e6:	4b7a      	ldr	r3, [pc, #488]	; (80113d0 <set_wall+0x28c>)
 80111e8:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	bf14      	ite	ne
 80111f0:	2301      	movne	r3, #1
 80111f2:	2300      	moveq	r3, #0
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	613b      	str	r3, [r7, #16]
			n_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 80111f8:	4b76      	ldr	r3, [pc, #472]	; (80113d4 <set_wall+0x290>)
 80111fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80111fe:	2b00      	cmp	r3, #0
 8011200:	bf14      	ite	ne
 8011202:	2301      	movne	r3, #1
 8011204:	2300      	moveq	r3, #0
 8011206:	b2db      	uxtb	r3, r3
 8011208:	617b      	str	r3, [r7, #20]
			w_write = NOWALL;						//後ろは必ず壁がない
 801120a:	2300      	movs	r3, #0
 801120c:	60bb      	str	r3, [r7, #8]

			break;
 801120e:	e045      	b.n	801129c <set_wall+0x158>

		case south:	//南を向いているとき

			s_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 8011210:	4b6d      	ldr	r3, [pc, #436]	; (80113c8 <set_wall+0x284>)
 8011212:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011216:	2b00      	cmp	r3, #0
 8011218:	d104      	bne.n	8011224 <set_wall+0xe0>
 801121a:	4b6c      	ldr	r3, [pc, #432]	; (80113cc <set_wall+0x288>)
 801121c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <set_wall+0xe4>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <set_wall+0xe6>
 8011228:	2300      	movs	r3, #0
 801122a:	613b      	str	r3, [r7, #16]
			w_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 801122c:	4b68      	ldr	r3, [pc, #416]	; (80113d0 <set_wall+0x28c>)
 801122e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011232:	2b00      	cmp	r3, #0
 8011234:	bf14      	ite	ne
 8011236:	2301      	movne	r3, #1
 8011238:	2300      	moveq	r3, #0
 801123a:	b2db      	uxtb	r3, r3
 801123c:	60bb      	str	r3, [r7, #8]
			e_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 801123e:	4b65      	ldr	r3, [pc, #404]	; (80113d4 <set_wall+0x290>)
 8011240:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011244:	2b00      	cmp	r3, #0
 8011246:	bf14      	ite	ne
 8011248:	2301      	movne	r3, #1
 801124a:	2300      	moveq	r3, #0
 801124c:	b2db      	uxtb	r3, r3
 801124e:	60fb      	str	r3, [r7, #12]
			n_write = NOWALL;						//後ろは必ず壁がない
 8011250:	2300      	movs	r3, #0
 8011252:	617b      	str	r3, [r7, #20]

			break;
 8011254:	e022      	b.n	801129c <set_wall+0x158>

		case west:	//西を向いているとき

			w_write = CONV_SEN2WALL(sen_fr.is_wall || sen_fl.is_wall);	//前壁の有無を判断
 8011256:	4b5c      	ldr	r3, [pc, #368]	; (80113c8 <set_wall+0x284>)
 8011258:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801125c:	2b00      	cmp	r3, #0
 801125e:	d104      	bne.n	801126a <set_wall+0x126>
 8011260:	4b5a      	ldr	r3, [pc, #360]	; (80113cc <set_wall+0x288>)
 8011262:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <set_wall+0x12a>
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <set_wall+0x12c>
 801126e:	2300      	movs	r3, #0
 8011270:	60bb      	str	r3, [r7, #8]
			n_write = CONV_SEN2WALL(sen_r.is_wall);				//右壁の有無を判断
 8011272:	4b57      	ldr	r3, [pc, #348]	; (80113d0 <set_wall+0x28c>)
 8011274:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8011278:	2b00      	cmp	r3, #0
 801127a:	bf14      	ite	ne
 801127c:	2301      	movne	r3, #1
 801127e:	2300      	moveq	r3, #0
 8011280:	b2db      	uxtb	r3, r3
 8011282:	617b      	str	r3, [r7, #20]
			s_write = CONV_SEN2WALL(sen_l.is_wall);				//左壁の有無を判断
 8011284:	4b53      	ldr	r3, [pc, #332]	; (80113d4 <set_wall+0x290>)
 8011286:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801128a:	2b00      	cmp	r3, #0
 801128c:	bf14      	ite	ne
 801128e:	2301      	movne	r3, #1
 8011290:	2300      	moveq	r3, #0
 8011292:	b2db      	uxtb	r3, r3
 8011294:	613b      	str	r3, [r7, #16]
			e_write = NOWALL;						//後ろは必ず壁がない
 8011296:	2300      	movs	r3, #0
 8011298:	60fb      	str	r3, [r7, #12]

			break;
 801129a:	bf00      	nop
			break;


	}

	if(wall[x][y].north == UNKNOWN || wall[x][y].north == n_write){
 801129c:	4a4e      	ldr	r2, [pc, #312]	; (80113d8 <set_wall+0x294>)
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	015b      	lsls	r3, r3, #5
 80112a2:	441a      	add	r2, r3
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	4413      	add	r3, r2
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80112ae:	b2db      	uxtb	r3, r3
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	d00d      	beq.n	80112d0 <set_wall+0x18c>
 80112b4:	4a48      	ldr	r2, [pc, #288]	; (80113d8 <set_wall+0x294>)
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	015b      	lsls	r3, r3, #5
 80112ba:	441a      	add	r2, r3
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	4413      	add	r3, r2
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	461a      	mov	r2, r3
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d10e      	bne.n	80112ee <set_wall+0x1aa>
		wall[x][y].north = n_write;	//実際に壁情報を書き込み
 80112d0:	697b      	ldr	r3, [r7, #20]
 80112d2:	f003 0303 	and.w	r3, r3, #3
 80112d6:	b2d9      	uxtb	r1, r3
 80112d8:	4a3f      	ldr	r2, [pc, #252]	; (80113d8 <set_wall+0x294>)
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	015b      	lsls	r3, r3, #5
 80112de:	441a      	add	r2, r3
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	441a      	add	r2, r3
 80112e4:	7813      	ldrb	r3, [r2, #0]
 80112e6:	f361 0301 	bfi	r3, r1, #0, #2
 80112ea:	7013      	strb	r3, [r2, #0]
 80112ec:	e00b      	b.n	8011306 <set_wall+0x1c2>
	}
	else
	{
		wall[x][y].north = VWALL;	//実際に壁情報を書き込み
 80112ee:	4a3a      	ldr	r2, [pc, #232]	; (80113d8 <set_wall+0x294>)
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	015b      	lsls	r3, r3, #5
 80112f4:	441a      	add	r2, r3
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	441a      	add	r2, r3
 80112fa:	7813      	ldrb	r3, [r2, #0]
 80112fc:	f043 0303 	orr.w	r3, r3, #3
 8011300:	7013      	strb	r3, [r2, #0]
		n_write			 = VWALL;
 8011302:	2303      	movs	r3, #3
 8011304:	617b      	str	r3, [r7, #20]
	}


	if(wall[x][y].south == UNKNOWN || wall[x][y].south == s_write){
 8011306:	4a34      	ldr	r2, [pc, #208]	; (80113d8 <set_wall+0x294>)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	015b      	lsls	r3, r3, #5
 801130c:	441a      	add	r2, r3
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	4413      	add	r3, r2
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011318:	b2db      	uxtb	r3, r3
 801131a:	2b02      	cmp	r3, #2
 801131c:	d00d      	beq.n	801133a <set_wall+0x1f6>
 801131e:	4a2e      	ldr	r2, [pc, #184]	; (80113d8 <set_wall+0x294>)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	015b      	lsls	r3, r3, #5
 8011324:	441a      	add	r2, r3
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	4413      	add	r3, r2
 801132a:	781b      	ldrb	r3, [r3, #0]
 801132c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011330:	b2db      	uxtb	r3, r3
 8011332:	461a      	mov	r2, r3
 8011334:	693b      	ldr	r3, [r7, #16]
 8011336:	4293      	cmp	r3, r2
 8011338:	d10e      	bne.n	8011358 <set_wall+0x214>
		wall[x][y].south = s_write;	//実際に壁情報を書き込み
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	f003 0303 	and.w	r3, r3, #3
 8011340:	b2d9      	uxtb	r1, r3
 8011342:	4a25      	ldr	r2, [pc, #148]	; (80113d8 <set_wall+0x294>)
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	015b      	lsls	r3, r3, #5
 8011348:	441a      	add	r2, r3
 801134a:	683b      	ldr	r3, [r7, #0]
 801134c:	441a      	add	r2, r3
 801134e:	7813      	ldrb	r3, [r2, #0]
 8011350:	f361 1305 	bfi	r3, r1, #4, #2
 8011354:	7013      	strb	r3, [r2, #0]
 8011356:	e00b      	b.n	8011370 <set_wall+0x22c>
	}
	else
	{
		wall[x][y].south = VWALL;	//実際に壁情報を書き込み
 8011358:	4a1f      	ldr	r2, [pc, #124]	; (80113d8 <set_wall+0x294>)
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	015b      	lsls	r3, r3, #5
 801135e:	441a      	add	r2, r3
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	441a      	add	r2, r3
 8011364:	7813      	ldrb	r3, [r2, #0]
 8011366:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 801136a:	7013      	strb	r3, [r2, #0]
		s_write			 = VWALL;
 801136c:	2303      	movs	r3, #3
 801136e:	613b      	str	r3, [r7, #16]
	}

	if(wall[x][y].east == UNKNOWN || wall[x][y].east == e_write){
 8011370:	4a19      	ldr	r2, [pc, #100]	; (80113d8 <set_wall+0x294>)
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	015b      	lsls	r3, r3, #5
 8011376:	441a      	add	r2, r3
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	4413      	add	r3, r2
 801137c:	781b      	ldrb	r3, [r3, #0]
 801137e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011382:	b2db      	uxtb	r3, r3
 8011384:	2b02      	cmp	r3, #2
 8011386:	d00d      	beq.n	80113a4 <set_wall+0x260>
 8011388:	4a13      	ldr	r2, [pc, #76]	; (80113d8 <set_wall+0x294>)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	015b      	lsls	r3, r3, #5
 801138e:	441a      	add	r2, r3
 8011390:	683b      	ldr	r3, [r7, #0]
 8011392:	4413      	add	r3, r2
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801139a:	b2db      	uxtb	r3, r3
 801139c:	461a      	mov	r2, r3
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d11b      	bne.n	80113dc <set_wall+0x298>
		wall[x][y].east = e_write;	//実際に壁情報を書き込み
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	f003 0303 	and.w	r3, r3, #3
 80113aa:	b2d9      	uxtb	r1, r3
 80113ac:	4a0a      	ldr	r2, [pc, #40]	; (80113d8 <set_wall+0x294>)
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	015b      	lsls	r3, r3, #5
 80113b2:	441a      	add	r2, r3
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	441a      	add	r2, r3
 80113b8:	7813      	ldrb	r3, [r2, #0]
 80113ba:	f361 0383 	bfi	r3, r1, #2, #2
 80113be:	7013      	strb	r3, [r2, #0]
 80113c0:	e018      	b.n	80113f4 <set_wall+0x2b0>
 80113c2:	bf00      	nop
 80113c4:	20000afc 	.word	0x20000afc
 80113c8:	200098a0 	.word	0x200098a0
 80113cc:	20009914 	.word	0x20009914
 80113d0:	2001b5e4 	.word	0x2001b5e4
 80113d4:	20009410 	.word	0x20009410
 80113d8:	2001b1e4 	.word	0x2001b1e4
	}
	else
	{
		wall[x][y].east  = VWALL;	//実際に壁情報を書き込み
 80113dc:	4a47      	ldr	r2, [pc, #284]	; (80114fc <set_wall+0x3b8>)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	015b      	lsls	r3, r3, #5
 80113e2:	441a      	add	r2, r3
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	441a      	add	r2, r3
 80113e8:	7813      	ldrb	r3, [r2, #0]
 80113ea:	f043 030c 	orr.w	r3, r3, #12
 80113ee:	7013      	strb	r3, [r2, #0]
		e_write			 = VWALL;
 80113f0:	2303      	movs	r3, #3
 80113f2:	60fb      	str	r3, [r7, #12]
	}

	if(wall[x][y].west == UNKNOWN || wall[x][y].west == w_write){
 80113f4:	4a41      	ldr	r2, [pc, #260]	; (80114fc <set_wall+0x3b8>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	015b      	lsls	r3, r3, #5
 80113fa:	441a      	add	r2, r3
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	4413      	add	r3, r2
 8011400:	781b      	ldrb	r3, [r3, #0]
 8011402:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8011406:	b2db      	uxtb	r3, r3
 8011408:	2b02      	cmp	r3, #2
 801140a:	d00d      	beq.n	8011428 <set_wall+0x2e4>
 801140c:	4a3b      	ldr	r2, [pc, #236]	; (80114fc <set_wall+0x3b8>)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	015b      	lsls	r3, r3, #5
 8011412:	441a      	add	r2, r3
 8011414:	683b      	ldr	r3, [r7, #0]
 8011416:	4413      	add	r3, r2
 8011418:	781b      	ldrb	r3, [r3, #0]
 801141a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801141e:	b2db      	uxtb	r3, r3
 8011420:	461a      	mov	r2, r3
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	4293      	cmp	r3, r2
 8011426:	d10e      	bne.n	8011446 <set_wall+0x302>
		wall[x][y].west = w_write;	//実際に壁情報を書き込み
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	f003 0303 	and.w	r3, r3, #3
 801142e:	b2d9      	uxtb	r1, r3
 8011430:	4a32      	ldr	r2, [pc, #200]	; (80114fc <set_wall+0x3b8>)
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	015b      	lsls	r3, r3, #5
 8011436:	441a      	add	r2, r3
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	441a      	add	r2, r3
 801143c:	7813      	ldrb	r3, [r2, #0]
 801143e:	f361 1387 	bfi	r3, r1, #6, #2
 8011442:	7013      	strb	r3, [r2, #0]
 8011444:	e00b      	b.n	801145e <set_wall+0x31a>
	}
	else
	{
		wall[x][y].west  = VWALL;	//実際に壁情報を書き込み
 8011446:	4a2d      	ldr	r2, [pc, #180]	; (80114fc <set_wall+0x3b8>)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	015b      	lsls	r3, r3, #5
 801144c:	441a      	add	r2, r3
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	441a      	add	r2, r3
 8011452:	7813      	ldrb	r3, [r2, #0]
 8011454:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011458:	7013      	strb	r3, [r2, #0]
		w_write			 = VWALL;
 801145a:	2303      	movs	r3, #3
 801145c:	60bb      	str	r3, [r7, #8]
	wall[x][y].north = n_write;
	wall[x][y].south = s_write;	//実際に壁情報を書き込み
	wall[x][y].east  = e_write;	//実際に壁情報を書き込み
	wall[x][y].west  = w_write;	//実際に壁情報を書き込み
	*/
	if(y < MAZE_SIZE_Y-1)	//範囲チェック
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	2b1e      	cmp	r3, #30
 8011462:	dc0e      	bgt.n	8011482 <set_wall+0x33e>
	{
		wall[x][y+1].south = n_write;	//反対側から見た壁を書き込み
 8011464:	683b      	ldr	r3, [r7, #0]
 8011466:	3301      	adds	r3, #1
 8011468:	697a      	ldr	r2, [r7, #20]
 801146a:	f002 0203 	and.w	r2, r2, #3
 801146e:	b2d1      	uxtb	r1, r2
 8011470:	4822      	ldr	r0, [pc, #136]	; (80114fc <set_wall+0x3b8>)
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	0152      	lsls	r2, r2, #5
 8011476:	4402      	add	r2, r0
 8011478:	441a      	add	r2, r3
 801147a:	7813      	ldrb	r3, [r2, #0]
 801147c:	f361 1305 	bfi	r3, r1, #4, #2
 8011480:	7013      	strb	r3, [r2, #0]
	}

	if(x < MAZE_SIZE_X-1)	//範囲チェック
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b1e      	cmp	r3, #30
 8011486:	dc0e      	bgt.n	80114a6 <set_wall+0x362>
	{
		wall[x+1][y].west = e_write;	//反対側から見た壁を書き込み
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	3301      	adds	r3, #1
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	f002 0203 	and.w	r2, r2, #3
 8011492:	b2d1      	uxtb	r1, r2
 8011494:	4a19      	ldr	r2, [pc, #100]	; (80114fc <set_wall+0x3b8>)
 8011496:	015b      	lsls	r3, r3, #5
 8011498:	441a      	add	r2, r3
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	441a      	add	r2, r3
 801149e:	7813      	ldrb	r3, [r2, #0]
 80114a0:	f361 1387 	bfi	r3, r1, #6, #2
 80114a4:	7013      	strb	r3, [r2, #0]
	}

	if(y > 0)	//範囲チェック
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	dd0e      	ble.n	80114ca <set_wall+0x386>
	{
        wall[x][y-1].north = s_write;	//反対側から見た壁を書き込み
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	3b01      	subs	r3, #1
 80114b0:	693a      	ldr	r2, [r7, #16]
 80114b2:	f002 0203 	and.w	r2, r2, #3
 80114b6:	b2d1      	uxtb	r1, r2
 80114b8:	4810      	ldr	r0, [pc, #64]	; (80114fc <set_wall+0x3b8>)
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	0152      	lsls	r2, r2, #5
 80114be:	4402      	add	r2, r0
 80114c0:	441a      	add	r2, r3
 80114c2:	7813      	ldrb	r3, [r2, #0]
 80114c4:	f361 0301 	bfi	r3, r1, #0, #2
 80114c8:	7013      	strb	r3, [r2, #0]
	}

	if(x > 0)	//範囲チェック
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dd0e      	ble.n	80114ee <set_wall+0x3aa>
	{
		wall[x-1][y].east = w_write;	//反対側から見た壁を書き込み
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	3b01      	subs	r3, #1
 80114d4:	68ba      	ldr	r2, [r7, #8]
 80114d6:	f002 0203 	and.w	r2, r2, #3
 80114da:	b2d1      	uxtb	r1, r2
 80114dc:	4a07      	ldr	r2, [pc, #28]	; (80114fc <set_wall+0x3b8>)
 80114de:	015b      	lsls	r3, r3, #5
 80114e0:	441a      	add	r2, r3
 80114e2:	683b      	ldr	r3, [r7, #0]
 80114e4:	441a      	add	r2, r3
 80114e6:	7813      	ldrb	r3, [r2, #0]
 80114e8:	f361 0383 	bfi	r3, r1, #2, #2
 80114ec:	7013      	strb	r3, [r2, #0]
	}

}
 80114ee:	bf00      	nop
 80114f0:	371c      	adds	r7, #28
 80114f2:	46bd      	mov	sp, r7
 80114f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f8:	4770      	bx	lr
 80114fa:	bf00      	nop
 80114fc:	2001b1e4 	.word	0x2001b1e4

08011500 <get_priority2>:

	return priority;				//優先度を返す

}

int get_priority2(int *x,int *y,int nx, int ny, t_direction dir ,unsigned char distance_priority){	//そのマスの情報から、優先度を算出する
 8011500:	b580      	push	{r7, lr}
 8011502:	b086      	sub	sp, #24
 8011504:	af00      	add	r7, sp, #0
 8011506:	60f8      	str	r0, [r7, #12]
 8011508:	60b9      	str	r1, [r7, #8]
 801150a:	607a      	str	r2, [r7, #4]
 801150c:	603b      	str	r3, [r7, #0]

	int priority;	//優先度を記録する変数
	priority = 0;
 801150e:	2300      	movs	r3, #0
 8011510:	617b      	str	r3, [r7, #20]

	if(mypos.dir == dir){				//行きたい方向が現在の進行方向と同じ場合
 8011512:	4b2e      	ldr	r3, [pc, #184]	; (80115cc <get_priority2+0xcc>)
 8011514:	789b      	ldrb	r3, [r3, #2]
 8011516:	f897 2020 	ldrb.w	r2, [r7, #32]
 801151a:	429a      	cmp	r2, r3
 801151c:	d102      	bne.n	8011524 <get_priority2+0x24>
		priority = 2;
 801151e:	2302      	movs	r3, #2
 8011520:	617b      	str	r3, [r7, #20]
 8011522:	e013      	b.n	801154c <get_priority2+0x4c>
	}else if( ((4+mypos.dir-dir)%4) == 2){		//行きたい方向が現在の進行方向と逆の場合
 8011524:	4b29      	ldr	r3, [pc, #164]	; (80115cc <get_priority2+0xcc>)
 8011526:	789b      	ldrb	r3, [r3, #2]
 8011528:	1d1a      	adds	r2, r3, #4
 801152a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	425a      	negs	r2, r3
 8011532:	f003 0303 	and.w	r3, r3, #3
 8011536:	f002 0203 	and.w	r2, r2, #3
 801153a:	bf58      	it	pl
 801153c:	4253      	negpl	r3, r2
 801153e:	2b02      	cmp	r3, #2
 8011540:	d102      	bne.n	8011548 <get_priority2+0x48>
		priority = 0;
 8011542:	2300      	movs	r3, #0
 8011544:	617b      	str	r3, [r7, #20]
 8011546:	e001      	b.n	801154c <get_priority2+0x4c>
	}else{						//それ以外(左右どちらか)の場合
		priority = 1;
 8011548:	2301      	movs	r3, #1
 801154a:	617b      	str	r3, [r7, #20]
	}


	if(is_unknown(nx,ny) == true){
 801154c:	6839      	ldr	r1, [r7, #0]
 801154e:	6878      	ldr	r0, [r7, #4]
 8011550:	f7ff fdb8 	bl	80110c4 <is_unknown>
 8011554:	4603      	mov	r3, r0
 8011556:	2b01      	cmp	r3, #1
 8011558:	d132      	bne.n	80115c0 <get_priority2+0xc0>
		if(distance_priority == FAR_PRIORITY) priority = ((x[0]-nx)*(x[0]-nx)+(y[0]-ny)*(y[0]-ny));				//未探索の場合優先度をさらに付加
 801155a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801155e:	2b01      	cmp	r3, #1
 8011560:	d116      	bne.n	8011590 <get_priority2+0x90>
 8011562:	68fb      	ldr	r3, [r7, #12]
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	6811      	ldr	r1, [r2, #0]
 801156e:	687a      	ldr	r2, [r7, #4]
 8011570:	1a8a      	subs	r2, r1, r2
 8011572:	fb02 f203 	mul.w	r2, r2, r3
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	6819      	ldr	r1, [r3, #0]
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	1acb      	subs	r3, r1, r3
 801157e:	68b9      	ldr	r1, [r7, #8]
 8011580:	6808      	ldr	r0, [r1, #0]
 8011582:	6839      	ldr	r1, [r7, #0]
 8011584:	1a41      	subs	r1, r0, r1
 8011586:	fb01 f303 	mul.w	r3, r1, r3
 801158a:	4413      	add	r3, r2
 801158c:	617b      	str	r3, [r7, #20]
 801158e:	e017      	b.n	80115c0 <get_priority2+0xc0>
		else								  priority = 2*MAZE_SIZE - ((x[0]-nx)*(x[0]-nx)+(y[0]-ny)*(y[0]-ny));
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	68fa      	ldr	r2, [r7, #12]
 801159a:	6811      	ldr	r1, [r2, #0]
 801159c:	687a      	ldr	r2, [r7, #4]
 801159e:	1a8a      	subs	r2, r1, r2
 80115a0:	fb02 f203 	mul.w	r2, r2, r3
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	6819      	ldr	r1, [r3, #0]
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	1acb      	subs	r3, r1, r3
 80115ac:	68b9      	ldr	r1, [r7, #8]
 80115ae:	6808      	ldr	r0, [r1, #0]
 80115b0:	6839      	ldr	r1, [r7, #0]
 80115b2:	1a41      	subs	r1, r0, r1
 80115b4:	fb01 f303 	mul.w	r3, r1, r3
 80115b8:	4413      	add	r3, r2
 80115ba:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80115be:	617b      	str	r3, [r7, #20]
	}

	return priority;				//優先度を返す
 80115c0:	697b      	ldr	r3, [r7, #20]

}
 80115c2:	4618      	mov	r0, r3
 80115c4:	3718      	adds	r7, #24
 80115c6:	46bd      	mov	sp, r7
 80115c8:	bd80      	pop	{r7, pc}
 80115ca:	bf00      	nop
 80115cc:	20000afc 	.word	0x20000afc

080115d0 <get_tmp_nextdir>:
    }

    return ((int)((4+*dir - mypos.dir)%4));
}

int get_tmp_nextdir(int *x, int *y,int goal_size ,int mask,t_position tmp_pos, t_direction *dir,unsigned char distance_priority){
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b08a      	sub	sp, #40	; 0x28
 80115d4:	af02      	add	r7, sp, #8
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
 80115dc:	603b      	str	r3, [r7, #0]
    int little,priority,tmp_priority;

    //make_map_queue(x,y,goal_size,mask);

    little = MAP_MAX_VALUE;
 80115de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80115e2:	61fb      	str	r3, [r7, #28]

    priority = -1;
 80115e4:	f04f 33ff 	mov.w	r3, #4294967295
 80115e8:	61bb      	str	r3, [r7, #24]

    if((wall[tmp_pos.x][tmp_pos.y].north & mask) == NOWALL){
 80115ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115ee:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80115f2:	4611      	mov	r1, r2
 80115f4:	4abe      	ldr	r2, [pc, #760]	; (80118f0 <get_tmp_nextdir+0x320>)
 80115f6:	015b      	lsls	r3, r3, #5
 80115f8:	4413      	add	r3, r2
 80115fa:	440b      	add	r3, r1
 80115fc:	781b      	ldrb	r3, [r3, #0]
 80115fe:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8011602:	b2db      	uxtb	r3, r3
 8011604:	461a      	mov	r2, r3
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	4013      	ands	r3, r2
 801160a:	2b00      	cmp	r3, #0
 801160c:	d14a      	bne.n	80116a4 <get_tmp_nextdir+0xd4>
        tmp_priority = get_priority2(x,y,tmp_pos.x,tmp_pos.y + 1,north,distance_priority);
 801160e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011612:	4619      	mov	r1, r3
 8011614:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011618:	1c5a      	adds	r2, r3, #1
 801161a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801161e:	9301      	str	r3, [sp, #4]
 8011620:	2300      	movs	r3, #0
 8011622:	9300      	str	r3, [sp, #0]
 8011624:	4613      	mov	r3, r2
 8011626:	460a      	mov	r2, r1
 8011628:	68b9      	ldr	r1, [r7, #8]
 801162a:	68f8      	ldr	r0, [r7, #12]
 801162c:	f7ff ff68 	bl	8011500 <get_priority2>
 8011630:	6178      	str	r0, [r7, #20]
        if(map[tmp_pos.x][tmp_pos.y+1] < little){
 8011632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011636:	461a      	mov	r2, r3
 8011638:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801163c:	3301      	adds	r3, #1
 801163e:	49ad      	ldr	r1, [pc, #692]	; (80118f4 <get_tmp_nextdir+0x324>)
 8011640:	0152      	lsls	r2, r2, #5
 8011642:	4413      	add	r3, r2
 8011644:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011648:	461a      	mov	r2, r3
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	4293      	cmp	r3, r2
 801164e:	dd11      	ble.n	8011674 <get_tmp_nextdir+0xa4>
            little = map[tmp_pos.x][tmp_pos.y+1];
 8011650:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011654:	461a      	mov	r2, r3
 8011656:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801165a:	3301      	adds	r3, #1
 801165c:	49a5      	ldr	r1, [pc, #660]	; (80118f4 <get_tmp_nextdir+0x324>)
 801165e:	0152      	lsls	r2, r2, #5
 8011660:	4413      	add	r3, r2
 8011662:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011666:	61fb      	str	r3, [r7, #28]
            *dir = north;
 8011668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166a:	2200      	movs	r2, #0
 801166c:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	61bb      	str	r3, [r7, #24]
 8011672:	e017      	b.n	80116a4 <get_tmp_nextdir+0xd4>
        }else if(map[tmp_pos.x][tmp_pos.y+1] == little){
 8011674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011678:	461a      	mov	r2, r3
 801167a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801167e:	3301      	adds	r3, #1
 8011680:	499c      	ldr	r1, [pc, #624]	; (80118f4 <get_tmp_nextdir+0x324>)
 8011682:	0152      	lsls	r2, r2, #5
 8011684:	4413      	add	r3, r2
 8011686:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801168a:	461a      	mov	r2, r3
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	4293      	cmp	r3, r2
 8011690:	d108      	bne.n	80116a4 <get_tmp_nextdir+0xd4>
            if(priority < tmp_priority){
 8011692:	69ba      	ldr	r2, [r7, #24]
 8011694:	697b      	ldr	r3, [r7, #20]
 8011696:	429a      	cmp	r2, r3
 8011698:	da04      	bge.n	80116a4 <get_tmp_nextdir+0xd4>
                *dir = north;
 801169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[tmp_pos.x][tmp_pos.y].east & mask) == NOWALL){
 80116a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116a8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80116ac:	4611      	mov	r1, r2
 80116ae:	4a90      	ldr	r2, [pc, #576]	; (80118f0 <get_tmp_nextdir+0x320>)
 80116b0:	015b      	lsls	r3, r3, #5
 80116b2:	4413      	add	r3, r2
 80116b4:	440b      	add	r3, r1
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	461a      	mov	r2, r3
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	4013      	ands	r3, r2
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d149      	bne.n	801175c <get_tmp_nextdir+0x18c>
        tmp_priority = get_priority2(x,y,tmp_pos.x + 1,tmp_pos.y,east,distance_priority);
 80116c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116cc:	1c5a      	adds	r2, r3, #1
 80116ce:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80116d2:	4619      	mov	r1, r3
 80116d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80116d8:	9301      	str	r3, [sp, #4]
 80116da:	2301      	movs	r3, #1
 80116dc:	9300      	str	r3, [sp, #0]
 80116de:	460b      	mov	r3, r1
 80116e0:	68b9      	ldr	r1, [r7, #8]
 80116e2:	68f8      	ldr	r0, [r7, #12]
 80116e4:	f7ff ff0c 	bl	8011500 <get_priority2>
 80116e8:	6178      	str	r0, [r7, #20]
        if(map[tmp_pos.x + 1][tmp_pos.y] < little){
 80116ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80116ee:	3301      	adds	r3, #1
 80116f0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80116f4:	4611      	mov	r1, r2
 80116f6:	4a7f      	ldr	r2, [pc, #508]	; (80118f4 <get_tmp_nextdir+0x324>)
 80116f8:	015b      	lsls	r3, r3, #5
 80116fa:	440b      	add	r3, r1
 80116fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011700:	461a      	mov	r2, r3
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	4293      	cmp	r3, r2
 8011706:	dd11      	ble.n	801172c <get_tmp_nextdir+0x15c>
            little = map[tmp_pos.x+1][tmp_pos.y];
 8011708:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801170c:	3301      	adds	r3, #1
 801170e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8011712:	4611      	mov	r1, r2
 8011714:	4a77      	ldr	r2, [pc, #476]	; (80118f4 <get_tmp_nextdir+0x324>)
 8011716:	015b      	lsls	r3, r3, #5
 8011718:	440b      	add	r3, r1
 801171a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801171e:	61fb      	str	r3, [r7, #28]
            *dir = east;
 8011720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011722:	2201      	movs	r2, #1
 8011724:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	61bb      	str	r3, [r7, #24]
 801172a:	e017      	b.n	801175c <get_tmp_nextdir+0x18c>
        }else if(map[tmp_pos.x + 1][tmp_pos.y] == little){
 801172c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011730:	3301      	adds	r3, #1
 8011732:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8011736:	4611      	mov	r1, r2
 8011738:	4a6e      	ldr	r2, [pc, #440]	; (80118f4 <get_tmp_nextdir+0x324>)
 801173a:	015b      	lsls	r3, r3, #5
 801173c:	440b      	add	r3, r1
 801173e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011742:	461a      	mov	r2, r3
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	4293      	cmp	r3, r2
 8011748:	d108      	bne.n	801175c <get_tmp_nextdir+0x18c>
            if(priority < tmp_priority){
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	429a      	cmp	r2, r3
 8011750:	da04      	bge.n	801175c <get_tmp_nextdir+0x18c>
                *dir = east;
 8011752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011754:	2201      	movs	r2, #1
 8011756:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[tmp_pos.x][tmp_pos.y].south & mask) == NOWALL){
 801175c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011760:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8011764:	4611      	mov	r1, r2
 8011766:	4a62      	ldr	r2, [pc, #392]	; (80118f0 <get_tmp_nextdir+0x320>)
 8011768:	015b      	lsls	r3, r3, #5
 801176a:	4413      	add	r3, r2
 801176c:	440b      	add	r3, r1
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011774:	b2db      	uxtb	r3, r3
 8011776:	461a      	mov	r2, r3
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	4013      	ands	r3, r2
 801177c:	2b00      	cmp	r3, #0
 801177e:	d14a      	bne.n	8011816 <get_tmp_nextdir+0x246>
        tmp_priority = get_priority2(x,y,tmp_pos.x,tmp_pos.y-1,south,distance_priority);
 8011780:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011784:	4619      	mov	r1, r3
 8011786:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801178a:	1e5a      	subs	r2, r3, #1
 801178c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8011790:	9301      	str	r3, [sp, #4]
 8011792:	2302      	movs	r3, #2
 8011794:	9300      	str	r3, [sp, #0]
 8011796:	4613      	mov	r3, r2
 8011798:	460a      	mov	r2, r1
 801179a:	68b9      	ldr	r1, [r7, #8]
 801179c:	68f8      	ldr	r0, [r7, #12]
 801179e:	f7ff feaf 	bl	8011500 <get_priority2>
 80117a2:	6178      	str	r0, [r7, #20]
        if(map[tmp_pos.x][tmp_pos.y-1] < little){
 80117a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117a8:	461a      	mov	r2, r3
 80117aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80117ae:	3b01      	subs	r3, #1
 80117b0:	4950      	ldr	r1, [pc, #320]	; (80118f4 <get_tmp_nextdir+0x324>)
 80117b2:	0152      	lsls	r2, r2, #5
 80117b4:	4413      	add	r3, r2
 80117b6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80117ba:	461a      	mov	r2, r3
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	4293      	cmp	r3, r2
 80117c0:	dd11      	ble.n	80117e6 <get_tmp_nextdir+0x216>
            little = map[tmp_pos.x][tmp_pos.y-1];
 80117c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117c6:	461a      	mov	r2, r3
 80117c8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80117cc:	3b01      	subs	r3, #1
 80117ce:	4949      	ldr	r1, [pc, #292]	; (80118f4 <get_tmp_nextdir+0x324>)
 80117d0:	0152      	lsls	r2, r2, #5
 80117d2:	4413      	add	r3, r2
 80117d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80117d8:	61fb      	str	r3, [r7, #28]
            *dir = south;
 80117da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117dc:	2202      	movs	r2, #2
 80117de:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	61bb      	str	r3, [r7, #24]
 80117e4:	e017      	b.n	8011816 <get_tmp_nextdir+0x246>
        }else if(map[tmp_pos.x][tmp_pos.y-1] == little){
 80117e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80117ea:	461a      	mov	r2, r3
 80117ec:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80117f0:	3b01      	subs	r3, #1
 80117f2:	4940      	ldr	r1, [pc, #256]	; (80118f4 <get_tmp_nextdir+0x324>)
 80117f4:	0152      	lsls	r2, r2, #5
 80117f6:	4413      	add	r3, r2
 80117f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80117fc:	461a      	mov	r2, r3
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	4293      	cmp	r3, r2
 8011802:	d108      	bne.n	8011816 <get_tmp_nextdir+0x246>
            if(priority < tmp_priority){
 8011804:	69ba      	ldr	r2, [r7, #24]
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	429a      	cmp	r2, r3
 801180a:	da04      	bge.n	8011816 <get_tmp_nextdir+0x246>
                *dir = south;
 801180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180e:	2202      	movs	r2, #2
 8011810:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    if((wall[tmp_pos.x][tmp_pos.y].west & mask) == NOWALL){
 8011816:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801181a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 801181e:	4611      	mov	r1, r2
 8011820:	4a33      	ldr	r2, [pc, #204]	; (80118f0 <get_tmp_nextdir+0x320>)
 8011822:	015b      	lsls	r3, r3, #5
 8011824:	4413      	add	r3, r2
 8011826:	440b      	add	r3, r1
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 801182e:	b2db      	uxtb	r3, r3
 8011830:	461a      	mov	r2, r3
 8011832:	683b      	ldr	r3, [r7, #0]
 8011834:	4013      	ands	r3, r2
 8011836:	2b00      	cmp	r3, #0
 8011838:	d149      	bne.n	80118ce <get_tmp_nextdir+0x2fe>
        tmp_priority = get_priority2(x,y,tmp_pos.x-1,tmp_pos.y,west,distance_priority);
 801183a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801183e:	1e5a      	subs	r2, r3, #1
 8011840:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8011844:	4619      	mov	r1, r3
 8011846:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801184a:	9301      	str	r3, [sp, #4]
 801184c:	2303      	movs	r3, #3
 801184e:	9300      	str	r3, [sp, #0]
 8011850:	460b      	mov	r3, r1
 8011852:	68b9      	ldr	r1, [r7, #8]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f7ff fe53 	bl	8011500 <get_priority2>
 801185a:	6178      	str	r0, [r7, #20]
        if(map[tmp_pos.x-1][tmp_pos.y] < little){
 801185c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011860:	3b01      	subs	r3, #1
 8011862:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8011866:	4611      	mov	r1, r2
 8011868:	4a22      	ldr	r2, [pc, #136]	; (80118f4 <get_tmp_nextdir+0x324>)
 801186a:	015b      	lsls	r3, r3, #5
 801186c:	440b      	add	r3, r1
 801186e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011872:	461a      	mov	r2, r3
 8011874:	69fb      	ldr	r3, [r7, #28]
 8011876:	4293      	cmp	r3, r2
 8011878:	dd11      	ble.n	801189e <get_tmp_nextdir+0x2ce>
            little = map[tmp_pos.x-1][tmp_pos.y];
 801187a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801187e:	3b01      	subs	r3, #1
 8011880:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8011884:	4611      	mov	r1, r2
 8011886:	4a1b      	ldr	r2, [pc, #108]	; (80118f4 <get_tmp_nextdir+0x324>)
 8011888:	015b      	lsls	r3, r3, #5
 801188a:	440b      	add	r3, r1
 801188c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011890:	61fb      	str	r3, [r7, #28]
            *dir = west;
 8011892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011894:	2203      	movs	r2, #3
 8011896:	701a      	strb	r2, [r3, #0]
            priority = tmp_priority;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	61bb      	str	r3, [r7, #24]
 801189c:	e017      	b.n	80118ce <get_tmp_nextdir+0x2fe>
        }else if(map[tmp_pos.x-1][tmp_pos.y] == little){
 801189e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80118a2:	3b01      	subs	r3, #1
 80118a4:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80118a8:	4611      	mov	r1, r2
 80118aa:	4a12      	ldr	r2, [pc, #72]	; (80118f4 <get_tmp_nextdir+0x324>)
 80118ac:	015b      	lsls	r3, r3, #5
 80118ae:	440b      	add	r3, r1
 80118b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118b4:	461a      	mov	r2, r3
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	4293      	cmp	r3, r2
 80118ba:	d108      	bne.n	80118ce <get_tmp_nextdir+0x2fe>
            if(priority < tmp_priority){
 80118bc:	69ba      	ldr	r2, [r7, #24]
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	da04      	bge.n	80118ce <get_tmp_nextdir+0x2fe>
                *dir = west;
 80118c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c6:	2203      	movs	r2, #3
 80118c8:	701a      	strb	r2, [r3, #0]
                priority = tmp_priority;
 80118ca:	697b      	ldr	r3, [r7, #20]
 80118cc:	61bb      	str	r3, [r7, #24]
            }
        }
    }

    return ((int)((4+*dir - tmp_pos.dir)%4));
 80118ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d0:	781b      	ldrb	r3, [r3, #0]
 80118d2:	3304      	adds	r3, #4
 80118d4:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80118d8:	1a9b      	subs	r3, r3, r2
 80118da:	425a      	negs	r2, r3
 80118dc:	f003 0303 	and.w	r3, r3, #3
 80118e0:	f002 0203 	and.w	r2, r2, #3
 80118e4:	bf58      	it	pl
 80118e6:	4253      	negpl	r3, r2
}
 80118e8:	4618      	mov	r0, r3
 80118ea:	3720      	adds	r7, #32
 80118ec:	46bd      	mov	sp, r7
 80118ee:	bd80      	pop	{r7, pc}
 80118f0:	2001b1e4 	.word	0x2001b1e4
 80118f4:	200002ac 	.word	0x200002ac

080118f8 <is_wall_dir>:

t_bool is_wall_dir(int x,int y,t_direction dir)
{
 80118f8:	b480      	push	{r7}
 80118fa:	b087      	sub	sp, #28
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	4613      	mov	r3, r2
 8011904:	71fb      	strb	r3, [r7, #7]
	t_bool is_wall = false;
 8011906:	2300      	movs	r3, #0
 8011908:	75fb      	strb	r3, [r7, #23]
	switch(dir)
 801190a:	79fb      	ldrb	r3, [r7, #7]
 801190c:	2b04      	cmp	r3, #4
 801190e:	d858      	bhi.n	80119c2 <is_wall_dir+0xca>
 8011910:	a201      	add	r2, pc, #4	; (adr r2, 8011918 <is_wall_dir+0x20>)
 8011912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011916:	bf00      	nop
 8011918:	0801192d 	.word	0x0801192d
 801191c:	08011951 	.word	0x08011951
 8011920:	08011975 	.word	0x08011975
 8011924:	08011999 	.word	0x08011999
 8011928:	080119bd 	.word	0x080119bd
	{
	case north:
		if( wall[x][y].north == WALL) is_wall = true;
 801192c:	4a28      	ldr	r2, [pc, #160]	; (80119d0 <is_wall_dir+0xd8>)
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	015b      	lsls	r3, r3, #5
 8011932:	441a      	add	r2, r3
 8011934:	68bb      	ldr	r3, [r7, #8]
 8011936:	4413      	add	r3, r2
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801193e:	b2db      	uxtb	r3, r3
 8011940:	2b01      	cmp	r3, #1
 8011942:	d102      	bne.n	801194a <is_wall_dir+0x52>
 8011944:	2301      	movs	r3, #1
 8011946:	75fb      	strb	r3, [r7, #23]
		else 								is_wall = false;
		break;
 8011948:	e03b      	b.n	80119c2 <is_wall_dir+0xca>
		else 								is_wall = false;
 801194a:	2300      	movs	r3, #0
 801194c:	75fb      	strb	r3, [r7, #23]
		break;
 801194e:	e038      	b.n	80119c2 <is_wall_dir+0xca>
	case east:
		if(wall[x][y].east == WALL) is_wall = true;
 8011950:	4a1f      	ldr	r2, [pc, #124]	; (80119d0 <is_wall_dir+0xd8>)
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	015b      	lsls	r3, r3, #5
 8011956:	441a      	add	r2, r3
 8011958:	68bb      	ldr	r3, [r7, #8]
 801195a:	4413      	add	r3, r2
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8011962:	b2db      	uxtb	r3, r3
 8011964:	2b01      	cmp	r3, #1
 8011966:	d102      	bne.n	801196e <is_wall_dir+0x76>
 8011968:	2301      	movs	r3, #1
 801196a:	75fb      	strb	r3, [r7, #23]
		else 								is_wall = false;
		break;
 801196c:	e029      	b.n	80119c2 <is_wall_dir+0xca>
		else 								is_wall = false;
 801196e:	2300      	movs	r3, #0
 8011970:	75fb      	strb	r3, [r7, #23]
		break;
 8011972:	e026      	b.n	80119c2 <is_wall_dir+0xca>
	case south:
		if(wall[x][y].south == WALL) is_wall = true;
 8011974:	4a16      	ldr	r2, [pc, #88]	; (80119d0 <is_wall_dir+0xd8>)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	015b      	lsls	r3, r3, #5
 801197a:	441a      	add	r2, r3
 801197c:	68bb      	ldr	r3, [r7, #8]
 801197e:	4413      	add	r3, r2
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b01      	cmp	r3, #1
 801198a:	d102      	bne.n	8011992 <is_wall_dir+0x9a>
 801198c:	2301      	movs	r3, #1
 801198e:	75fb      	strb	r3, [r7, #23]
		else 								is_wall = false;
		break;
 8011990:	e017      	b.n	80119c2 <is_wall_dir+0xca>
		else 								is_wall = false;
 8011992:	2300      	movs	r3, #0
 8011994:	75fb      	strb	r3, [r7, #23]
		break;
 8011996:	e014      	b.n	80119c2 <is_wall_dir+0xca>
	case west:
		if(wall[x][y].west  == WALL) is_wall = true;
 8011998:	4a0d      	ldr	r2, [pc, #52]	; (80119d0 <is_wall_dir+0xd8>)
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	015b      	lsls	r3, r3, #5
 801199e:	441a      	add	r2, r3
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	4413      	add	r3, r2
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d102      	bne.n	80119b6 <is_wall_dir+0xbe>
 80119b0:	2301      	movs	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
		else 								is_wall = false;
		break;
 80119b4:	e005      	b.n	80119c2 <is_wall_dir+0xca>
		else 								is_wall = false;
 80119b6:	2300      	movs	r3, #0
 80119b8:	75fb      	strb	r3, [r7, #23]
		break;
 80119ba:	e002      	b.n	80119c2 <is_wall_dir+0xca>
	case center:
		is_wall = false;
 80119bc:	2300      	movs	r3, #0
 80119be:	75fb      	strb	r3, [r7, #23]
		break;
 80119c0:	bf00      	nop
	}
	return is_wall;
 80119c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80119c4:	4618      	mov	r0, r3
 80119c6:	371c      	adds	r7, #28
 80119c8:	46bd      	mov	sp, r7
 80119ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ce:	4770      	bx	lr
 80119d0:	2001b1e4 	.word	0x2001b1e4

080119d4 <search_adachi4>:


void search_adachi4(int *gx,int *gy,int goal_size,
		            const t_straight_param * base_straight_param,const t_straight_param * accel_straight_param,
					const t_param * turn_l_param				,const t_param * turn_r_param					)
{
 80119d4:	b5b0      	push	{r4, r5, r7, lr}
 80119d6:	b08e      	sub	sp, #56	; 0x38
 80119d8:	af04      	add	r7, sp, #16
 80119da:	60f8      	str	r0, [r7, #12]
 80119dc:	60b9      	str	r1, [r7, #8]
 80119de:	607a      	str	r2, [r7, #4]
 80119e0:	603b      	str	r3, [r7, #0]

    t_direction glob_nextdir;
    int direction = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&glob_nextdir,NEAR_PRIORITY);
 80119e2:	2303      	movs	r3, #3
 80119e4:	9302      	str	r3, [sp, #8]
 80119e6:	f107 0317 	add.w	r3, r7, #23
 80119ea:	9301      	str	r3, [sp, #4]
 80119ec:	4aae      	ldr	r2, [pc, #696]	; (8011ca8 <search_adachi4+0x2d4>)
 80119ee:	466b      	mov	r3, sp
 80119f0:	8811      	ldrh	r1, [r2, #0]
 80119f2:	7892      	ldrb	r2, [r2, #2]
 80119f4:	8019      	strh	r1, [r3, #0]
 80119f6:	709a      	strb	r2, [r3, #2]
 80119f8:	2301      	movs	r3, #1
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	68b9      	ldr	r1, [r7, #8]
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7ff fde6 	bl	80115d0 <get_tmp_nextdir>
 8011a04:	61f8      	str	r0, [r7, #28]
	Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011a06:	683b      	ldr	r3, [r7, #0]
 8011a08:	689b      	ldr	r3, [r3, #8]
 8011a0a:	edd3 7a00 	vldr	s15, [r3]
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	689b      	ldr	r3, [r3, #8]
 8011a1a:	edd3 6a02 	vldr	s13, [r3, #8]
 8011a1e:	eeb0 1a66 	vmov.f32	s2, s13
 8011a22:	eef0 0a47 	vmov.f32	s1, s14
 8011a26:	eeb0 0a67 	vmov.f32	s0, s15
 8011a2a:	f7fc ff65 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	edd3 7a00 	vldr	s15, [r3]
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	edd3 6a02 	vldr	s13, [r3, #8]
 8011a46:	eeb0 1a66 	vmov.f32	s2, s13
 8011a4a:	eef0 0a47 	vmov.f32	s1, s14
 8011a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8011a52:	f7fc ff37 	bl	800e8c4 <Set_Velo_PID_Gain>
	Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.0);
 8011a56:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8011cac <search_adachi4+0x2d8>
 8011a5a:	eddf 0a94 	vldr	s1, [pc, #592]	; 8011cac <search_adachi4+0x2d8>
 8011a5e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8011cb0 <search_adachi4+0x2dc>
 8011a62:	4894      	ldr	r0, [pc, #592]	; (8011cb4 <search_adachi4+0x2e0>)
 8011a64:	f7fc ff62 	bl	800e92c <Set_PID_Gain>

	mypos.dir = glob_nextdir;
 8011a68:	7dfa      	ldrb	r2, [r7, #23]
 8011a6a:	4b8f      	ldr	r3, [pc, #572]	; (8011ca8 <search_adachi4+0x2d4>)
 8011a6c:	709a      	strb	r2, [r3, #2]
    switch(mypos.dir){
 8011a6e:	4b8e      	ldr	r3, [pc, #568]	; (8011ca8 <search_adachi4+0x2d4>)
 8011a70:	789b      	ldrb	r3, [r3, #2]
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d828      	bhi.n	8011ac8 <search_adachi4+0xf4>
 8011a76:	a201      	add	r2, pc, #4	; (adr r2, 8011a7c <search_adachi4+0xa8>)
 8011a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a7c:	08011a91 	.word	0x08011a91
 8011a80:	08011a9f 	.word	0x08011a9f
 8011a84:	08011aad 	.word	0x08011aad
 8011a88:	08011abb 	.word	0x08011abb
 8011a8c:	08011ac9 	.word	0x08011ac9
        case north:
            mypos.y++;
 8011a90:	4b85      	ldr	r3, [pc, #532]	; (8011ca8 <search_adachi4+0x2d4>)
 8011a92:	785b      	ldrb	r3, [r3, #1]
 8011a94:	3301      	adds	r3, #1
 8011a96:	b2da      	uxtb	r2, r3
 8011a98:	4b83      	ldr	r3, [pc, #524]	; (8011ca8 <search_adachi4+0x2d4>)
 8011a9a:	705a      	strb	r2, [r3, #1]
            break;
 8011a9c:	e014      	b.n	8011ac8 <search_adachi4+0xf4>
        case east:
            mypos.x++;
 8011a9e:	4b82      	ldr	r3, [pc, #520]	; (8011ca8 <search_adachi4+0x2d4>)
 8011aa0:	781b      	ldrb	r3, [r3, #0]
 8011aa2:	3301      	adds	r3, #1
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	4b80      	ldr	r3, [pc, #512]	; (8011ca8 <search_adachi4+0x2d4>)
 8011aa8:	701a      	strb	r2, [r3, #0]
            break;
 8011aaa:	e00d      	b.n	8011ac8 <search_adachi4+0xf4>
        case south:
            mypos.y--;
 8011aac:	4b7e      	ldr	r3, [pc, #504]	; (8011ca8 <search_adachi4+0x2d4>)
 8011aae:	785b      	ldrb	r3, [r3, #1]
 8011ab0:	3b01      	subs	r3, #1
 8011ab2:	b2da      	uxtb	r2, r3
 8011ab4:	4b7c      	ldr	r3, [pc, #496]	; (8011ca8 <search_adachi4+0x2d4>)
 8011ab6:	705a      	strb	r2, [r3, #1]
            break;
 8011ab8:	e006      	b.n	8011ac8 <search_adachi4+0xf4>
        case west:
            mypos.x--;
 8011aba:	4b7b      	ldr	r3, [pc, #492]	; (8011ca8 <search_adachi4+0x2d4>)
 8011abc:	781b      	ldrb	r3, [r3, #0]
 8011abe:	3b01      	subs	r3, #1
 8011ac0:	b2da      	uxtb	r2, r3
 8011ac2:	4b79      	ldr	r3, [pc, #484]	; (8011ca8 <search_adachi4+0x2d4>)
 8011ac4:	701a      	strb	r2, [r3, #0]
            break;
 8011ac6:	bf00      	nop
        case center:
        	break;
    }

    switch(direction){
 8011ac8:	69fb      	ldr	r3, [r7, #28]
 8011aca:	2b03      	cmp	r3, #3
 8011acc:	f200 87fe 	bhi.w	8012acc <search_adachi4+0x10f8>
 8011ad0:	a201      	add	r2, pc, #4	; (adr r2, 8011ad8 <search_adachi4+0x104>)
 8011ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ad6:	bf00      	nop
 8011ad8:	08011ae9 	.word	0x08011ae9
 8011adc:	08011b77 	.word	0x08011b77
 8011ae0:	08011ccd 	.word	0x08011ccd
 8011ae4:	08011c0f 	.word	0x08011c0f
        case front:
        	wall_controll.is_controll = true;
 8011ae8:	4b72      	ldr	r3, [pc, #456]	; (8011cb4 <search_adachi4+0x2e0>)
 8011aea:	2201      	movs	r2, #1
 8011aec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011af0:	683b      	ldr	r3, [r7, #0]
 8011af2:	689b      	ldr	r3, [r3, #8]
 8011af4:	edd3 7a00 	vldr	s15, [r3]
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	689b      	ldr	r3, [r3, #8]
 8011afc:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	689b      	ldr	r3, [r3, #8]
 8011b04:	edd3 6a02 	vldr	s13, [r3, #8]
 8011b08:	eeb0 1a66 	vmov.f32	s2, s13
 8011b0c:	eef0 0a47 	vmov.f32	s1, s14
 8011b10:	eeb0 0a67 	vmov.f32	s0, s15
 8011b14:	f7fc fef0 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	edd3 7a00 	vldr	s15, [r3]
 8011b20:	683b      	ldr	r3, [r7, #0]
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b28:	683b      	ldr	r3, [r7, #0]
 8011b2a:	685b      	ldr	r3, [r3, #4]
 8011b2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8011b30:	eeb0 1a66 	vmov.f32	s2, s13
 8011b34:	eef0 0a47 	vmov.f32	s1, s14
 8011b38:	eeb0 0a67 	vmov.f32	s0, s15
 8011b3c:	f7fc fec2 	bl	800e8c4 <Set_Velo_PID_Gain>
  			search_straight_update_maze(HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	edd3 7a01 	vldr	s15, [r3, #4]
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	ed93 7a00 	vldr	s14, [r3]
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	edd3 6a00 	vldr	s13, [r3]
 8011b58:	2301      	movs	r3, #1
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	68b9      	ldr	r1, [r7, #8]
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	eef0 1a66 	vmov.f32	s3, s13
 8011b64:	eeb0 1a47 	vmov.f32	s2, s14
 8011b68:	eef0 0a67 	vmov.f32	s1, s15
 8011b6c:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8011cc8 <search_adachi4+0x2f4>
 8011b70:	f002 f8c4 	bl	8013cfc <search_straight_update_maze>
            break;
 8011b74:	e0f6      	b.n	8011d64 <search_adachi4+0x390>
        case right:
			Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	689b      	ldr	r3, [r3, #8]
 8011b7a:	edd3 7a00 	vldr	s15, [r3]
 8011b7e:	683b      	ldr	r3, [r7, #0]
 8011b80:	689b      	ldr	r3, [r3, #8]
 8011b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8011b8e:	eeb0 1a66 	vmov.f32	s2, s13
 8011b92:	eef0 0a47 	vmov.f32	s1, s14
 8011b96:	eeb0 0a67 	vmov.f32	s0, s15
 8011b9a:	f7fc fead 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	685b      	ldr	r3, [r3, #4]
 8011ba2:	edd3 7a00 	vldr	s15, [r3]
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	685b      	ldr	r3, [r3, #4]
 8011baa:	ed93 7a01 	vldr	s14, [r3, #4]
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	685b      	ldr	r3, [r3, #4]
 8011bb2:	edd3 6a02 	vldr	s13, [r3, #8]
 8011bb6:	eeb0 1a66 	vmov.f32	s2, s13
 8011bba:	eef0 0a47 	vmov.f32	s1, s14
 8011bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8011bc2:	f7fc fe7f 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(90.0), 20.0*PI, 2.0*PI, turn_right);
 8011bc6:	2000      	movs	r0, #0
 8011bc8:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8011cbc <search_adachi4+0x2e8>
 8011bcc:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8011cc0 <search_adachi4+0x2ec>
 8011bd0:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8011cb8 <search_adachi4+0x2e4>
 8011bd4:	f7fd f99c 	bl	800ef10 <Spin_turn>
        	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8011bd8:	683b      	ldr	r3, [r7, #0]
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	edd3 7a01 	vldr	s15, [r3, #4]
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	ed93 7a00 	vldr	s14, [r3]
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	edd3 6a00 	vldr	s13, [r3]
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	68b9      	ldr	r1, [r7, #8]
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	eef0 1a66 	vmov.f32	s3, s13
 8011bfc:	eeb0 1a47 	vmov.f32	s2, s14
 8011c00:	eef0 0a67 	vmov.f32	s1, s15
 8011c04:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8011cc8 <search_adachi4+0x2f4>
 8011c08:	f002 f878 	bl	8013cfc <search_straight_update_maze>
            break;
 8011c0c:	e0aa      	b.n	8011d64 <search_adachi4+0x390>
        case left:
			Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	689b      	ldr	r3, [r3, #8]
 8011c12:	edd3 7a00 	vldr	s15, [r3]
 8011c16:	683b      	ldr	r3, [r7, #0]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8011c1e:	683b      	ldr	r3, [r7, #0]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	edd3 6a02 	vldr	s13, [r3, #8]
 8011c26:	eeb0 1a66 	vmov.f32	s2, s13
 8011c2a:	eef0 0a47 	vmov.f32	s1, s14
 8011c2e:	eeb0 0a67 	vmov.f32	s0, s15
 8011c32:	f7fc fe61 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	685b      	ldr	r3, [r3, #4]
 8011c3a:	edd3 7a00 	vldr	s15, [r3]
 8011c3e:	683b      	ldr	r3, [r7, #0]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	edd3 6a02 	vldr	s13, [r3, #8]
 8011c4e:	eeb0 1a66 	vmov.f32	s2, s13
 8011c52:	eef0 0a47 	vmov.f32	s1, s14
 8011c56:	eeb0 0a67 	vmov.f32	s0, s15
 8011c5a:	f7fc fe33 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(90.0), 20.0*PI, 2.0*PI, turn_left);
 8011c5e:	2001      	movs	r0, #1
 8011c60:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8011cbc <search_adachi4+0x2e8>
 8011c64:	eddf 0a16 	vldr	s1, [pc, #88]	; 8011cc0 <search_adachi4+0x2ec>
 8011c68:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8011cb8 <search_adachi4+0x2e4>
 8011c6c:	f7fd f950 	bl	800ef10 <Spin_turn>
            //straight(HALF_SECTION,4.0,0.3,0.3);
        	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	edd3 7a01 	vldr	s15, [r3, #4]
 8011c78:	683b      	ldr	r3, [r7, #0]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	ed93 7a00 	vldr	s14, [r3]
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	edd3 6a00 	vldr	s13, [r3]
 8011c88:	2301      	movs	r3, #1
 8011c8a:	687a      	ldr	r2, [r7, #4]
 8011c8c:	68b9      	ldr	r1, [r7, #8]
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	eef0 1a66 	vmov.f32	s3, s13
 8011c94:	eeb0 1a47 	vmov.f32	s2, s14
 8011c98:	eef0 0a67 	vmov.f32	s1, s15
 8011c9c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8011cc8 <search_adachi4+0x2f4>
 8011ca0:	f002 f82c 	bl	8013cfc <search_straight_update_maze>
        	break;
 8011ca4:	e05e      	b.n	8011d64 <search_adachi4+0x390>
 8011ca6:	bf00      	nop
 8011ca8:	20000afc 	.word	0x20000afc
 8011cac:	00000000 	.word	0x00000000
 8011cb0:	3e19999a 	.word	0x3e19999a
 8011cb4:	20000aac 	.word	0x20000aac
 8011cb8:	3fc90fda 	.word	0x3fc90fda
 8011cbc:	40c90fda 	.word	0x40c90fda
 8011cc0:	427b53d0 	.word	0x427b53d0
 8011cc4:	40490fda 	.word	0x40490fda
 8011cc8:	42340000 	.word	0x42340000
        case rear:
			Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	edd3 7a00 	vldr	s15, [r3]
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	689b      	ldr	r3, [r3, #8]
 8011cd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	689b      	ldr	r3, [r3, #8]
 8011ce0:	edd3 6a02 	vldr	s13, [r3, #8]
 8011ce4:	eeb0 1a66 	vmov.f32	s2, s13
 8011ce8:	eef0 0a47 	vmov.f32	s1, s14
 8011cec:	eeb0 0a67 	vmov.f32	s0, s15
 8011cf0:	f7fc fe02 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	edd3 7a00 	vldr	s15, [r3]
 8011cfc:	683b      	ldr	r3, [r7, #0]
 8011cfe:	685b      	ldr	r3, [r3, #4]
 8011d00:	ed93 7a01 	vldr	s14, [r3, #4]
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	edd3 6a02 	vldr	s13, [r3, #8]
 8011d0c:	eeb0 1a66 	vmov.f32	s2, s13
 8011d10:	eef0 0a47 	vmov.f32	s1, s14
 8011d14:	eeb0 0a67 	vmov.f32	s0, s15
 8011d18:	f7fc fdd4 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(180.0), 20.0*PI, 2.0*PI, turn_left);
 8011d1c:	2001      	movs	r0, #1
 8011d1e:	ed1f 1a19 	vldr	s2, [pc, #-100]	; 8011cbc <search_adachi4+0x2e8>
 8011d22:	ed5f 0a19 	vldr	s1, [pc, #-100]	; 8011cc0 <search_adachi4+0x2ec>
 8011d26:	ed1f 0a19 	vldr	s0, [pc, #-100]	; 8011cc4 <search_adachi4+0x2f0>
 8011d2a:	f7fd f8f1 	bl	800ef10 <Spin_turn>
            //straight(HALF_SECTION,4.0,0.3,0.3);
        	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	ed93 7a00 	vldr	s14, [r3]
 8011d3e:	683b      	ldr	r3, [r7, #0]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	edd3 6a00 	vldr	s13, [r3]
 8011d46:	2301      	movs	r3, #1
 8011d48:	687a      	ldr	r2, [r7, #4]
 8011d4a:	68b9      	ldr	r1, [r7, #8]
 8011d4c:	68f8      	ldr	r0, [r7, #12]
 8011d4e:	eef0 1a66 	vmov.f32	s3, s13
 8011d52:	eeb0 1a47 	vmov.f32	s2, s14
 8011d56:	eef0 0a67 	vmov.f32	s1, s15
 8011d5a:	ed1f 0a25 	vldr	s0, [pc, #-148]	; 8011cc8 <search_adachi4+0x2f4>
 8011d5e:	f001 ffcd 	bl	8013cfc <search_straight_update_maze>
        	break;
 8011d62:	bf00      	nop
    }

   // int segment_accel_cnt = 0;
    //int prev_run_direction = rear;
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8011d64:	f000 beb2 	b.w	8012acc <search_adachi4+0x10f8>
    	t_position prev_pos = mypos;
 8011d68:	4a9f      	ldr	r2, [pc, #636]	; (8011fe8 <search_adachi4+0x614>)
 8011d6a:	f107 0314 	add.w	r3, r7, #20
 8011d6e:	8811      	ldrh	r1, [r2, #0]
 8011d70:	7892      	ldrb	r2, [r2, #2]
 8011d72:	8019      	strh	r1, [r3, #0]
 8011d74:	709a      	strb	r2, [r3, #2]
    	if(is_unknown(mypos.x, mypos.y)){
 8011d76:	4b9c      	ldr	r3, [pc, #624]	; (8011fe8 <search_adachi4+0x614>)
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	4b9a      	ldr	r3, [pc, #616]	; (8011fe8 <search_adachi4+0x614>)
 8011d7e:	785b      	ldrb	r3, [r3, #1]
 8011d80:	4619      	mov	r1, r3
 8011d82:	4610      	mov	r0, r2
 8011d84:	f7ff f99e 	bl	80110c4 <is_unknown>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d008      	beq.n	8011da0 <search_adachi4+0x3cc>
    		set_wall(mypos.x,mypos.y);
 8011d8e:	4b96      	ldr	r3, [pc, #600]	; (8011fe8 <search_adachi4+0x614>)
 8011d90:	781b      	ldrb	r3, [r3, #0]
 8011d92:	461a      	mov	r2, r3
 8011d94:	4b94      	ldr	r3, [pc, #592]	; (8011fe8 <search_adachi4+0x614>)
 8011d96:	785b      	ldrb	r3, [r3, #1]
 8011d98:	4619      	mov	r1, r3
 8011d9a:	4610      	mov	r0, r2
 8011d9c:	f7ff f9d2 	bl	8011144 <set_wall>
    	}
        direction = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&glob_nextdir,NEAR_PRIORITY);
 8011da0:	2303      	movs	r3, #3
 8011da2:	9302      	str	r3, [sp, #8]
 8011da4:	f107 0317 	add.w	r3, r7, #23
 8011da8:	9301      	str	r3, [sp, #4]
 8011daa:	4a8f      	ldr	r2, [pc, #572]	; (8011fe8 <search_adachi4+0x614>)
 8011dac:	466b      	mov	r3, sp
 8011dae:	8811      	ldrh	r1, [r2, #0]
 8011db0:	7892      	ldrb	r2, [r2, #2]
 8011db2:	8019      	strh	r1, [r3, #0]
 8011db4:	709a      	strb	r2, [r3, #2]
 8011db6:	2301      	movs	r3, #1
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	68b9      	ldr	r1, [r7, #8]
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f7ff fc07 	bl	80115d0 <get_tmp_nextdir>
 8011dc2:	61f8      	str	r0, [r7, #28]

        mypos.dir = glob_nextdir;
 8011dc4:	7dfa      	ldrb	r2, [r7, #23]
 8011dc6:	4b88      	ldr	r3, [pc, #544]	; (8011fe8 <search_adachi4+0x614>)
 8011dc8:	709a      	strb	r2, [r3, #2]

        switch(mypos.dir){
 8011dca:	4b87      	ldr	r3, [pc, #540]	; (8011fe8 <search_adachi4+0x614>)
 8011dcc:	789b      	ldrb	r3, [r3, #2]
 8011dce:	2b04      	cmp	r3, #4
 8011dd0:	d828      	bhi.n	8011e24 <search_adachi4+0x450>
 8011dd2:	a201      	add	r2, pc, #4	; (adr r2, 8011dd8 <search_adachi4+0x404>)
 8011dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dd8:	08011ded 	.word	0x08011ded
 8011ddc:	08011dfb 	.word	0x08011dfb
 8011de0:	08011e09 	.word	0x08011e09
 8011de4:	08011e17 	.word	0x08011e17
 8011de8:	08011e25 	.word	0x08011e25
            case north:
                mypos.y++;
 8011dec:	4b7e      	ldr	r3, [pc, #504]	; (8011fe8 <search_adachi4+0x614>)
 8011dee:	785b      	ldrb	r3, [r3, #1]
 8011df0:	3301      	adds	r3, #1
 8011df2:	b2da      	uxtb	r2, r3
 8011df4:	4b7c      	ldr	r3, [pc, #496]	; (8011fe8 <search_adachi4+0x614>)
 8011df6:	705a      	strb	r2, [r3, #1]
                break;
 8011df8:	e014      	b.n	8011e24 <search_adachi4+0x450>
            case east:
                mypos.x++;
 8011dfa:	4b7b      	ldr	r3, [pc, #492]	; (8011fe8 <search_adachi4+0x614>)
 8011dfc:	781b      	ldrb	r3, [r3, #0]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	b2da      	uxtb	r2, r3
 8011e02:	4b79      	ldr	r3, [pc, #484]	; (8011fe8 <search_adachi4+0x614>)
 8011e04:	701a      	strb	r2, [r3, #0]
                break;
 8011e06:	e00d      	b.n	8011e24 <search_adachi4+0x450>
            case south:
                mypos.y--;
 8011e08:	4b77      	ldr	r3, [pc, #476]	; (8011fe8 <search_adachi4+0x614>)
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	3b01      	subs	r3, #1
 8011e0e:	b2da      	uxtb	r2, r3
 8011e10:	4b75      	ldr	r3, [pc, #468]	; (8011fe8 <search_adachi4+0x614>)
 8011e12:	705a      	strb	r2, [r3, #1]
                break;
 8011e14:	e006      	b.n	8011e24 <search_adachi4+0x450>
            case west:
                mypos.x--;
 8011e16:	4b74      	ldr	r3, [pc, #464]	; (8011fe8 <search_adachi4+0x614>)
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	3b01      	subs	r3, #1
 8011e1c:	b2da      	uxtb	r2, r3
 8011e1e:	4b72      	ldr	r3, [pc, #456]	; (8011fe8 <search_adachi4+0x614>)
 8011e20:	701a      	strb	r2, [r3, #0]
                break;
 8011e22:	bf00      	nop
            case center:
            	break;
        }

        uint8_t next_step_flag = 0x00;
 8011e24:	2300      	movs	r3, #0
 8011e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        t_direction tmp_next_dir = glob_nextdir;
 8011e2a:	7dfb      	ldrb	r3, [r7, #23]
 8011e2c:	74fb      	strb	r3, [r7, #19]

        //predict next_next_pos
        int next_move_known_next = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&tmp_next_dir,NEAR_PRIORITY);
 8011e2e:	2303      	movs	r3, #3
 8011e30:	9302      	str	r3, [sp, #8]
 8011e32:	f107 0313 	add.w	r3, r7, #19
 8011e36:	9301      	str	r3, [sp, #4]
 8011e38:	4a6b      	ldr	r2, [pc, #428]	; (8011fe8 <search_adachi4+0x614>)
 8011e3a:	466b      	mov	r3, sp
 8011e3c:	8811      	ldrh	r1, [r2, #0]
 8011e3e:	7892      	ldrb	r2, [r2, #2]
 8011e40:	8019      	strh	r1, [r3, #0]
 8011e42:	709a      	strb	r2, [r3, #2]
 8011e44:	2301      	movs	r3, #1
 8011e46:	687a      	ldr	r2, [r7, #4]
 8011e48:	68b9      	ldr	r1, [r7, #8]
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f7ff fbc0 	bl	80115d0 <get_tmp_nextdir>
 8011e50:	61b8      	str	r0, [r7, #24]
        int tmp_next_move		 = rear;
 8011e52:	2302      	movs	r3, #2
 8011e54:	623b      	str	r3, [r7, #32]
        t_position next_position = mypos;
 8011e56:	4a64      	ldr	r2, [pc, #400]	; (8011fe8 <search_adachi4+0x614>)
 8011e58:	f107 0310 	add.w	r3, r7, #16
 8011e5c:	8811      	ldrh	r1, [r2, #0]
 8011e5e:	7892      	ldrb	r2, [r2, #2]
 8011e60:	8019      	strh	r1, [r3, #0]
 8011e62:	709a      	strb	r2, [r3, #2]
        next_position.dir = tmp_next_dir;
 8011e64:	7cfb      	ldrb	r3, [r7, #19]
 8011e66:	74bb      	strb	r3, [r7, #18]
        if(is_unknown(mypos.x, mypos.y) == false)
 8011e68:	4b5f      	ldr	r3, [pc, #380]	; (8011fe8 <search_adachi4+0x614>)
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b5e      	ldr	r3, [pc, #376]	; (8011fe8 <search_adachi4+0x614>)
 8011e70:	785b      	ldrb	r3, [r3, #1]
 8011e72:	4619      	mov	r1, r3
 8011e74:	4610      	mov	r0, r2
 8011e76:	f7ff f925 	bl	80110c4 <is_unknown>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d148      	bne.n	8011f12 <search_adachi4+0x53e>
        {
        	next_step_flag = 0x80;
 8011e80:	2380      	movs	r3, #128	; 0x80
 8011e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        	if(i_am_goal(next_position.x,next_position.y,gx,gy,goal_size) == false){
 8011e86:	7c3b      	ldrb	r3, [r7, #16]
 8011e88:	4618      	mov	r0, r3
 8011e8a:	7c7b      	ldrb	r3, [r7, #17]
 8011e8c:	4619      	mov	r1, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	68bb      	ldr	r3, [r7, #8]
 8011e94:	68fa      	ldr	r2, [r7, #12]
 8011e96:	f7fe fcfb 	bl	8010890 <i_am_goal>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d138      	bne.n	8011f12 <search_adachi4+0x53e>
                switch(next_position.dir){
 8011ea0:	7cbb      	ldrb	r3, [r7, #18]
 8011ea2:	2b04      	cmp	r3, #4
 8011ea4:	d820      	bhi.n	8011ee8 <search_adachi4+0x514>
 8011ea6:	a201      	add	r2, pc, #4	; (adr r2, 8011eac <search_adachi4+0x4d8>)
 8011ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eac:	08011ec1 	.word	0x08011ec1
 8011eb0:	08011ecb 	.word	0x08011ecb
 8011eb4:	08011ed5 	.word	0x08011ed5
 8011eb8:	08011edf 	.word	0x08011edf
 8011ebc:	08011ee9 	.word	0x08011ee9
                    case north:
                    	next_position.y++;
 8011ec0:	7c7b      	ldrb	r3, [r7, #17]
 8011ec2:	3301      	adds	r3, #1
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	747b      	strb	r3, [r7, #17]
                        break;
 8011ec8:	e00e      	b.n	8011ee8 <search_adachi4+0x514>
                    case east:
                    	next_position.x++;
 8011eca:	7c3b      	ldrb	r3, [r7, #16]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	b2db      	uxtb	r3, r3
 8011ed0:	743b      	strb	r3, [r7, #16]
                        break;
 8011ed2:	e009      	b.n	8011ee8 <search_adachi4+0x514>
                    case south:
                    	next_position.y--;
 8011ed4:	7c7b      	ldrb	r3, [r7, #17]
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	b2db      	uxtb	r3, r3
 8011eda:	747b      	strb	r3, [r7, #17]
                        break;
 8011edc:	e004      	b.n	8011ee8 <search_adachi4+0x514>
                    case west:
                    	next_position.x--;
 8011ede:	7c3b      	ldrb	r3, [r7, #16]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	b2db      	uxtb	r3, r3
 8011ee4:	743b      	strb	r3, [r7, #16]
                        break;
 8011ee6:	bf00      	nop
                    case center:
                    	break;
                }
                tmp_next_move = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,next_position,&tmp_next_dir,NEAR_PRIORITY);
 8011ee8:	2303      	movs	r3, #3
 8011eea:	9302      	str	r3, [sp, #8]
 8011eec:	f107 0313 	add.w	r3, r7, #19
 8011ef0:	9301      	str	r3, [sp, #4]
 8011ef2:	466b      	mov	r3, sp
 8011ef4:	f107 0210 	add.w	r2, r7, #16
 8011ef8:	6812      	ldr	r2, [r2, #0]
 8011efa:	4611      	mov	r1, r2
 8011efc:	8019      	strh	r1, [r3, #0]
 8011efe:	3302      	adds	r3, #2
 8011f00:	0c12      	lsrs	r2, r2, #16
 8011f02:	701a      	strb	r2, [r3, #0]
 8011f04:	2301      	movs	r3, #1
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	68f8      	ldr	r0, [r7, #12]
 8011f0c:	f7ff fb60 	bl	80115d0 <get_tmp_nextdir>
 8011f10:	6238      	str	r0, [r7, #32]
        	}
        }


        switch(direction|next_step_flag){
 8011f12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	f000 82ee 	beq.w	80124fc <search_adachi4+0xb28>
 8011f20:	2b03      	cmp	r3, #3
 8011f22:	dc09      	bgt.n	8011f38 <search_adachi4+0x564>
 8011f24:	2b01      	cmp	r3, #1
 8011f26:	f000 8102 	beq.w	801212e <search_adachi4+0x75a>
 8011f2a:	2b01      	cmp	r3, #1
 8011f2c:	f300 8504 	bgt.w	8012938 <search_adachi4+0xf64>
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d012      	beq.n	8011f5a <search_adachi4+0x586>
 8011f34:	f000 bdca 	b.w	8012acc <search_adachi4+0x10f8>
 8011f38:	2b81      	cmp	r3, #129	; 0x81
 8011f3a:	f000 80f8 	beq.w	801212e <search_adachi4+0x75a>
 8011f3e:	2b81      	cmp	r3, #129	; 0x81
 8011f40:	dc03      	bgt.n	8011f4a <search_adachi4+0x576>
 8011f42:	2b80      	cmp	r3, #128	; 0x80
 8011f44:	d058      	beq.n	8011ff8 <search_adachi4+0x624>
 8011f46:	f000 bdc1 	b.w	8012acc <search_adachi4+0x10f8>
 8011f4a:	2b82      	cmp	r3, #130	; 0x82
 8011f4c:	f000 84f4 	beq.w	8012938 <search_adachi4+0xf64>
 8011f50:	2b83      	cmp	r3, #131	; 0x83
 8011f52:	f000 82d3 	beq.w	80124fc <search_adachi4+0xb28>
 8011f56:	f000 bdb9 	b.w	8012acc <search_adachi4+0x10f8>
            case front:
 				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	689b      	ldr	r3, [r3, #8]
 8011f5e:	edd3 7a00 	vldr	s15, [r3]
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	689b      	ldr	r3, [r3, #8]
 8011f66:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	689b      	ldr	r3, [r3, #8]
 8011f6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8011f72:	eeb0 1a66 	vmov.f32	s2, s13
 8011f76:	eef0 0a47 	vmov.f32	s1, s14
 8011f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8011f7e:	f7fc fcbb 	bl	800e8f8 <Set_Omega_PID_Gain>
	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	edd3 7a00 	vldr	s15, [r3]
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	edd3 6a02 	vldr	s13, [r3, #8]
 8011f9a:	eeb0 1a66 	vmov.f32	s2, s13
 8011f9e:	eef0 0a47 	vmov.f32	s1, s14
 8011fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8011fa6:	f7fc fc8d 	bl	800e8c4 <Set_Velo_PID_Gain>
	  			wall_controll.is_controll = true;
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <search_adachi4+0x618>)
 8011fac:	2201      	movs	r2, #1
 8011fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  			search_straight_update_maze (SECTION,base_straight_param->param->acc,target.velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fba:	4b0d      	ldr	r3, [pc, #52]	; (8011ff0 <search_adachi4+0x61c>)
 8011fbc:	ed93 7a00 	vldr	s14, [r3]
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	edd3 6a00 	vldr	s13, [r3]
 8011fc8:	2301      	movs	r3, #1
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	68b9      	ldr	r1, [r7, #8]
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	eef0 1a66 	vmov.f32	s3, s13
 8011fd4:	eeb0 1a47 	vmov.f32	s2, s14
 8011fd8:	eef0 0a67 	vmov.f32	s1, s15
 8011fdc:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8011ff4 <search_adachi4+0x620>
 8011fe0:	f001 fe8c 	bl	8013cfc <search_straight_update_maze>
            	break;
 8011fe4:	f000 bd72 	b.w	8012acc <search_adachi4+0x10f8>
 8011fe8:	20000afc 	.word	0x20000afc
 8011fec:	20000aac 	.word	0x20000aac
 8011ff0:	2001b6a0 	.word	0x2001b6a0
 8011ff4:	42b40000 	.word	0x42b40000
            case (front|0x80):
 		 		Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	689b      	ldr	r3, [r3, #8]
 8011ffc:	edd3 7a00 	vldr	s15, [r3]
 8012000:	683b      	ldr	r3, [r7, #0]
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	ed93 7a01 	vldr	s14, [r3, #4]
 8012008:	683b      	ldr	r3, [r7, #0]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012010:	eeb0 1a66 	vmov.f32	s2, s13
 8012014:	eef0 0a47 	vmov.f32	s1, s14
 8012018:	eeb0 0a67 	vmov.f32	s0, s15
 801201c:	f7fc fc6c 	bl	800e8f8 <Set_Omega_PID_Gain>
 			  	Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	685b      	ldr	r3, [r3, #4]
 8012024:	edd3 7a00 	vldr	s15, [r3]
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	685b      	ldr	r3, [r3, #4]
 8012034:	edd3 6a02 	vldr	s13, [r3, #8]
 8012038:	eeb0 1a66 	vmov.f32	s2, s13
 801203c:	eef0 0a47 	vmov.f32	s1, s14
 8012040:	eeb0 0a67 	vmov.f32	s0, s15
 8012044:	f7fc fc3e 	bl	800e8c4 <Set_Velo_PID_Gain>
	  			wall_controll.is_controll = true;
 8012048:	4bc6      	ldr	r3, [pc, #792]	; (8012364 <search_adachi4+0x990>)
 801204a:	2201      	movs	r2, #1
 801204c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  			if(next_move_known_next == front && (tmp_next_move == front && is_unknown(next_position.x, next_position.y) == false))
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d150      	bne.n	80120f8 <search_adachi4+0x724>
 8012056:	6a3b      	ldr	r3, [r7, #32]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d14d      	bne.n	80120f8 <search_adachi4+0x724>
 801205c:	7c3b      	ldrb	r3, [r7, #16]
 801205e:	461a      	mov	r2, r3
 8012060:	7c7b      	ldrb	r3, [r7, #17]
 8012062:	4619      	mov	r1, r3
 8012064:	4610      	mov	r0, r2
 8012066:	f7ff f82d 	bl	80110c4 <is_unknown>
 801206a:	4603      	mov	r3, r0
 801206c:	2b00      	cmp	r3, #0
 801206e:	d143      	bne.n	80120f8 <search_adachi4+0x724>
	  			{
	 				Set_Omega_PID_Gain(accel_straight_param->om_gain->Kp, accel_straight_param->om_gain->Ki, accel_straight_param->om_gain->Kd);
 8012070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012072:	689b      	ldr	r3, [r3, #8]
 8012074:	edd3 7a00 	vldr	s15, [r3]
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	edd3 6a02 	vldr	s13, [r3, #8]
 8012088:	eeb0 1a66 	vmov.f32	s2, s13
 801208c:	eef0 0a47 	vmov.f32	s1, s14
 8012090:	eeb0 0a67 	vmov.f32	s0, s15
 8012094:	f7fc fc30 	bl	800e8f8 <Set_Omega_PID_Gain>
		  			Set_Velo_PID_Gain(accel_straight_param->sp_gain->Kp, accel_straight_param->sp_gain->Ki, accel_straight_param->sp_gain->Kd);
 8012098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209a:	685b      	ldr	r3, [r3, #4]
 801209c:	edd3 7a00 	vldr	s15, [r3]
 80120a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80120a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80120b0:	eeb0 1a66 	vmov.f32	s2, s13
 80120b4:	eef0 0a47 	vmov.f32	s1, s14
 80120b8:	eeb0 0a67 	vmov.f32	s0, s15
 80120bc:	f7fc fc02 	bl	800e8c4 <Set_Velo_PID_Gain>
	  				search_straight_update_maze (SECTION,accel_straight_param->param->acc,accel_straight_param->param->max_velo,accel_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80120c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	ed93 7a00 	vldr	s14, [r3]
 80120d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	edd3 6a00 	vldr	s13, [r3]
 80120d8:	2301      	movs	r3, #1
 80120da:	687a      	ldr	r2, [r7, #4]
 80120dc:	68b9      	ldr	r1, [r7, #8]
 80120de:	68f8      	ldr	r0, [r7, #12]
 80120e0:	eef0 1a66 	vmov.f32	s3, s13
 80120e4:	eeb0 1a47 	vmov.f32	s2, s14
 80120e8:	eef0 0a67 	vmov.f32	s1, s15
 80120ec:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8012368 <search_adachi4+0x994>
 80120f0:	f001 fe04 	bl	8013cfc <search_straight_update_maze>
	  			}
	  			else
	  			{
	  				search_straight_update_maze (SECTION,accel_straight_param->param->acc,target.velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
	  			}
            	break;
 80120f4:	f000 bcea 	b.w	8012acc <search_adachi4+0x10f8>
	  				search_straight_update_maze (SECTION,accel_straight_param->param->acc,target.velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 80120f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8012100:	4b9a      	ldr	r3, [pc, #616]	; (801236c <search_adachi4+0x998>)
 8012102:	ed93 7a00 	vldr	s14, [r3]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	edd3 6a00 	vldr	s13, [r3]
 801210e:	2301      	movs	r3, #1
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	68b9      	ldr	r1, [r7, #8]
 8012114:	68f8      	ldr	r0, [r7, #12]
 8012116:	eef0 1a66 	vmov.f32	s3, s13
 801211a:	eeb0 1a47 	vmov.f32	s2, s14
 801211e:	eef0 0a67 	vmov.f32	s1, s15
 8012122:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8012368 <search_adachi4+0x994>
 8012126:	f001 fde9 	bl	8013cfc <search_straight_update_maze>
            	break;
 801212a:	f000 bccf 	b.w	8012acc <search_adachi4+0x10f8>
            case right:
            case (right|0x80):
 				wall_controll.is_controll = true;
 801212e:	4b8d      	ldr	r3, [pc, #564]	; (8012364 <search_adachi4+0x990>)
 8012130:	2201      	movs	r2, #1
 8012132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	if(90.0 - (sen_fr.distance + sen_fl.distance)/2.0 > slalom_R90_table.Lstart || ((sen_fr.distance + sen_fl.distance)/2.0 < 110.0 && ABS(sen_fr.distance - sen_fl.distance) > 5.0))
 8012136:	4b8e      	ldr	r3, [pc, #568]	; (8012370 <search_adachi4+0x99c>)
 8012138:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801213c:	4b8d      	ldr	r3, [pc, #564]	; (8012374 <search_adachi4+0x9a0>)
 801213e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012142:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012146:	ee17 0a90 	vmov	r0, s15
 801214a:	f7ee fa1d 	bl	8000588 <__aeabi_f2d>
 801214e:	f04f 0200 	mov.w	r2, #0
 8012152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012156:	f7ee fb99 	bl	800088c <__aeabi_ddiv>
 801215a:	4603      	mov	r3, r0
 801215c:	460c      	mov	r4, r1
 801215e:	461a      	mov	r2, r3
 8012160:	4623      	mov	r3, r4
 8012162:	f04f 0000 	mov.w	r0, #0
 8012166:	4984      	ldr	r1, [pc, #528]	; (8012378 <search_adachi4+0x9a4>)
 8012168:	f7ee f8ae 	bl	80002c8 <__aeabi_dsub>
 801216c:	4603      	mov	r3, r0
 801216e:	460c      	mov	r4, r1
 8012170:	4625      	mov	r5, r4
 8012172:	461c      	mov	r4, r3
 8012174:	4b81      	ldr	r3, [pc, #516]	; (801237c <search_adachi4+0x9a8>)
 8012176:	4618      	mov	r0, r3
 8012178:	f7ee fa06 	bl	8000588 <__aeabi_f2d>
 801217c:	4602      	mov	r2, r0
 801217e:	460b      	mov	r3, r1
 8012180:	4620      	mov	r0, r4
 8012182:	4629      	mov	r1, r5
 8012184:	f7ee fce8 	bl	8000b58 <__aeabi_dcmpgt>
 8012188:	4603      	mov	r3, r0
 801218a:	2b00      	cmp	r3, #0
 801218c:	d14a      	bne.n	8012224 <search_adachi4+0x850>
 801218e:	4b78      	ldr	r3, [pc, #480]	; (8012370 <search_adachi4+0x99c>)
 8012190:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012194:	4b77      	ldr	r3, [pc, #476]	; (8012374 <search_adachi4+0x9a0>)
 8012196:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 801219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801219e:	ee17 0a90 	vmov	r0, s15
 80121a2:	f7ee f9f1 	bl	8000588 <__aeabi_f2d>
 80121a6:	f04f 0200 	mov.w	r2, #0
 80121aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80121ae:	f7ee fb6d 	bl	800088c <__aeabi_ddiv>
 80121b2:	4603      	mov	r3, r0
 80121b4:	460c      	mov	r4, r1
 80121b6:	4618      	mov	r0, r3
 80121b8:	4621      	mov	r1, r4
 80121ba:	f04f 0200 	mov.w	r2, #0
 80121be:	4b70      	ldr	r3, [pc, #448]	; (8012380 <search_adachi4+0x9ac>)
 80121c0:	f7ee fcac 	bl	8000b1c <__aeabi_dcmplt>
 80121c4:	4603      	mov	r3, r0
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	f000 8098 	beq.w	80122fc <search_adachi4+0x928>
 80121cc:	4b68      	ldr	r3, [pc, #416]	; (8012370 <search_adachi4+0x99c>)
 80121ce:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80121d2:	4b68      	ldr	r3, [pc, #416]	; (8012374 <search_adachi4+0x9a0>)
 80121d4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80121d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e4:	d50f      	bpl.n	8012206 <search_adachi4+0x832>
 80121e6:	4b62      	ldr	r3, [pc, #392]	; (8012370 <search_adachi4+0x99c>)
 80121e8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80121ec:	4b61      	ldr	r3, [pc, #388]	; (8012374 <search_adachi4+0x9a0>)
 80121ee:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80121f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121f6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80121fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	d40f      	bmi.n	8012224 <search_adachi4+0x850>
 8012204:	e07a      	b.n	80122fc <search_adachi4+0x928>
 8012206:	4b5a      	ldr	r3, [pc, #360]	; (8012370 <search_adachi4+0x99c>)
 8012208:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801220c:	4b59      	ldr	r3, [pc, #356]	; (8012374 <search_adachi4+0x9a0>)
 801220e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012216:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 801221a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801221e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012222:	dd6b      	ble.n	80122fc <search_adachi4+0x928>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012224:	eddf 7a57 	vldr	s15, [pc, #348]	; 8012384 <search_adachi4+0x9b0>
 8012228:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8012388 <search_adachi4+0x9b4>
 801222c:	eddf 6a57 	vldr	s13, [pc, #348]	; 801238c <search_adachi4+0x9b8>
 8012230:	eeb0 1a66 	vmov.f32	s2, s13
 8012234:	eef0 0a47 	vmov.f32	s1, s14
 8012238:	eeb0 0a67 	vmov.f32	s0, s15
 801223c:	f7fc fb5c 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012240:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012244:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8012390 <search_adachi4+0x9bc>
 8012248:	eddf 6a50 	vldr	s13, [pc, #320]	; 801238c <search_adachi4+0x9b8>
 801224c:	eeb0 1a66 	vmov.f32	s2, s13
 8012250:	eef0 0a47 	vmov.f32	s1, s14
 8012254:	eeb0 0a67 	vmov.f32	s0, s15
 8012258:	f7fc fb34 	bl	800e8c4 <Set_Velo_PID_Gain>
            		//straight(HALF_SECTION,4.0,0.3,0.0);
          			search_straight_update_maze(HALF_SECTION - (90.0 - (sen_fr.distance + sen_fl.distance)/2.0) ,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 801225c:	4b44      	ldr	r3, [pc, #272]	; (8012370 <search_adachi4+0x99c>)
 801225e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012262:	4b44      	ldr	r3, [pc, #272]	; (8012374 <search_adachi4+0x9a0>)
 8012264:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801226c:	ee17 0a90 	vmov	r0, s15
 8012270:	f7ee f98a 	bl	8000588 <__aeabi_f2d>
 8012274:	f04f 0200 	mov.w	r2, #0
 8012278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801227c:	f7ee fb06 	bl	800088c <__aeabi_ddiv>
 8012280:	4603      	mov	r3, r0
 8012282:	460c      	mov	r4, r1
 8012284:	461a      	mov	r2, r3
 8012286:	4623      	mov	r3, r4
 8012288:	f04f 0000 	mov.w	r0, #0
 801228c:	493a      	ldr	r1, [pc, #232]	; (8012378 <search_adachi4+0x9a4>)
 801228e:	f7ee f81b 	bl	80002c8 <__aeabi_dsub>
 8012292:	4603      	mov	r3, r0
 8012294:	460c      	mov	r4, r1
 8012296:	461a      	mov	r2, r3
 8012298:	4623      	mov	r3, r4
 801229a:	f04f 0000 	mov.w	r0, #0
 801229e:	493d      	ldr	r1, [pc, #244]	; (8012394 <search_adachi4+0x9c0>)
 80122a0:	f7ee f812 	bl	80002c8 <__aeabi_dsub>
 80122a4:	4603      	mov	r3, r0
 80122a6:	460c      	mov	r4, r1
 80122a8:	4618      	mov	r0, r3
 80122aa:	4621      	mov	r1, r4
 80122ac:	f7ee fcbc 	bl	8000c28 <__aeabi_d2f>
 80122b0:	4604      	mov	r4, r0
 80122b2:	2301      	movs	r3, #1
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	68b9      	ldr	r1, [r7, #8]
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	eddf 1a34 	vldr	s3, [pc, #208]	; 801238c <search_adachi4+0x9b8>
 80122be:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8012390 <search_adachi4+0x9bc>
 80122c2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80122c6:	ee00 4a10 	vmov	s0, r4
 80122ca:	f001 fd17 	bl	8013cfc <search_straight_update_maze>
          			set_stop_wall(100);
 80122ce:	2064      	movs	r0, #100	; 0x64
 80122d0:	f7fd fef2 	bl	80100b8 <set_stop_wall>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 80122d4:	2000      	movs	r0, #0
 80122d6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8012398 <search_adachi4+0x9c4>
 80122da:	eddf 0a30 	vldr	s1, [pc, #192]	; 801239c <search_adachi4+0x9c8>
 80122de:	ed9f 0a30 	vldr	s0, [pc, #192]	; 80123a0 <search_adachi4+0x9cc>
 80122e2:	f7fc fe15 	bl	800ef10 <Spin_turn>
            		straight(HALF_SECTION,4.0,0.3,0.3);
 80122e6:	eddf 1a2a 	vldr	s3, [pc, #168]	; 8012390 <search_adachi4+0x9bc>
 80122ea:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8012390 <search_adachi4+0x9bc>
 80122ee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80122f2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80123a4 <search_adachi4+0x9d0>
 80122f6:	f7fc fb33 	bl	800e960 <straight>
 80122fa:	e0fe      	b.n	80124fa <search_adachi4+0xb26>
            	}
            	else if(sen_l.is_wall == true && ABS(sen_l.distance - 45.0) > 5.0)
 80122fc:	4b2a      	ldr	r3, [pc, #168]	; (80123a8 <search_adachi4+0x9d4>)
 80122fe:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012302:	2b01      	cmp	r3, #1
 8012304:	f040 80c8 	bne.w	8012498 <search_adachi4+0xac4>
 8012308:	4b27      	ldr	r3, [pc, #156]	; (80123a8 <search_adachi4+0x9d4>)
 801230a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801230c:	4618      	mov	r0, r3
 801230e:	f7ee f93b 	bl	8000588 <__aeabi_f2d>
 8012312:	f04f 0200 	mov.w	r2, #0
 8012316:	4b1f      	ldr	r3, [pc, #124]	; (8012394 <search_adachi4+0x9c0>)
 8012318:	f7ed ffd6 	bl	80002c8 <__aeabi_dsub>
 801231c:	4603      	mov	r3, r0
 801231e:	460c      	mov	r4, r1
 8012320:	4618      	mov	r0, r3
 8012322:	4621      	mov	r1, r4
 8012324:	f04f 0200 	mov.w	r2, #0
 8012328:	f04f 0300 	mov.w	r3, #0
 801232c:	f7ee fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8012330:	4603      	mov	r3, r0
 8012332:	2b00      	cmp	r3, #0
 8012334:	d03c      	beq.n	80123b0 <search_adachi4+0x9dc>
 8012336:	4b1c      	ldr	r3, [pc, #112]	; (80123a8 <search_adachi4+0x9d4>)
 8012338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801233a:	4618      	mov	r0, r3
 801233c:	f7ee f924 	bl	8000588 <__aeabi_f2d>
 8012340:	f04f 0200 	mov.w	r2, #0
 8012344:	4b13      	ldr	r3, [pc, #76]	; (8012394 <search_adachi4+0x9c0>)
 8012346:	f7ed ffbf 	bl	80002c8 <__aeabi_dsub>
 801234a:	4603      	mov	r3, r0
 801234c:	460c      	mov	r4, r1
 801234e:	4618      	mov	r0, r3
 8012350:	4621      	mov	r1, r4
 8012352:	f04f 0200 	mov.w	r2, #0
 8012356:	4b15      	ldr	r3, [pc, #84]	; (80123ac <search_adachi4+0x9d8>)
 8012358:	f7ee fbe0 	bl	8000b1c <__aeabi_dcmplt>
 801235c:	4603      	mov	r3, r0
 801235e:	2b00      	cmp	r3, #0
 8012360:	d13c      	bne.n	80123dc <search_adachi4+0xa08>
 8012362:	e099      	b.n	8012498 <search_adachi4+0xac4>
 8012364:	20000aac 	.word	0x20000aac
 8012368:	42b40000 	.word	0x42b40000
 801236c:	2001b6a0 	.word	0x2001b6a0
 8012370:	200098a0 	.word	0x200098a0
 8012374:	20009914 	.word	0x20009914
 8012378:	40568000 	.word	0x40568000
 801237c:	416b851f 	.word	0x416b851f
 8012380:	405b8000 	.word	0x405b8000
 8012384:	3f19999a 	.word	0x3f19999a
 8012388:	3c23d70a 	.word	0x3c23d70a
 801238c:	00000000 	.word	0x00000000
 8012390:	3e99999a 	.word	0x3e99999a
 8012394:	40468000 	.word	0x40468000
 8012398:	41490fda 	.word	0x41490fda
 801239c:	431d1462 	.word	0x431d1462
 80123a0:	3fc90fda 	.word	0x3fc90fda
 80123a4:	42340000 	.word	0x42340000
 80123a8:	20009410 	.word	0x20009410
 80123ac:	c0140000 	.word	0xc0140000
 80123b0:	4b88      	ldr	r3, [pc, #544]	; (80125d4 <search_adachi4+0xc00>)
 80123b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ee f8e7 	bl	8000588 <__aeabi_f2d>
 80123ba:	f04f 0200 	mov.w	r2, #0
 80123be:	4b86      	ldr	r3, [pc, #536]	; (80125d8 <search_adachi4+0xc04>)
 80123c0:	f7ed ff82 	bl	80002c8 <__aeabi_dsub>
 80123c4:	4603      	mov	r3, r0
 80123c6:	460c      	mov	r4, r1
 80123c8:	4618      	mov	r0, r3
 80123ca:	4621      	mov	r1, r4
 80123cc:	f04f 0200 	mov.w	r2, #0
 80123d0:	4b82      	ldr	r3, [pc, #520]	; (80125dc <search_adachi4+0xc08>)
 80123d2:	f7ee fbc1 	bl	8000b58 <__aeabi_dcmpgt>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d05d      	beq.n	8012498 <search_adachi4+0xac4>
            	{
     				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	689b      	ldr	r3, [r3, #8]
 80123e0:	edd3 7a00 	vldr	s15, [r3]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	689b      	ldr	r3, [r3, #8]
 80123e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	689b      	ldr	r3, [r3, #8]
 80123f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80123f4:	eeb0 1a66 	vmov.f32	s2, s13
 80123f8:	eef0 0a47 	vmov.f32	s1, s14
 80123fc:	eeb0 0a67 	vmov.f32	s0, s15
 8012400:	f7fc fa7a 	bl	800e8f8 <Set_Omega_PID_Gain>
    	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	685b      	ldr	r3, [r3, #4]
 8012408:	edd3 7a00 	vldr	s15, [r3]
 801240c:	683b      	ldr	r3, [r7, #0]
 801240e:	685b      	ldr	r3, [r3, #4]
 8012410:	ed93 7a01 	vldr	s14, [r3, #4]
 8012414:	683b      	ldr	r3, [r7, #0]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	edd3 6a02 	vldr	s13, [r3, #8]
 801241c:	eeb0 1a66 	vmov.f32	s2, s13
 8012420:	eef0 0a47 	vmov.f32	s1, s14
 8012424:	eeb0 0a67 	vmov.f32	s0, s15
 8012428:	f7fc fa4c 	bl	800e8c4 <Set_Velo_PID_Gain>
                	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,0.0,gx,gy,goal_size,MASK_SEARCH);
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	edd3 7a01 	vldr	s15, [r3, #4]
 8012434:	683b      	ldr	r3, [r7, #0]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	ed93 7a00 	vldr	s14, [r3]
 801243c:	2301      	movs	r3, #1
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	68b9      	ldr	r1, [r7, #8]
 8012442:	68f8      	ldr	r0, [r7, #12]
 8012444:	eddf 1a66 	vldr	s3, [pc, #408]	; 80125e0 <search_adachi4+0xc0c>
 8012448:	eeb0 1a47 	vmov.f32	s2, s14
 801244c:	eef0 0a67 	vmov.f32	s1, s15
 8012450:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80125e4 <search_adachi4+0xc10>
 8012454:	f001 fc52 	bl	8013cfc <search_straight_update_maze>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8012458:	2001      	movs	r0, #1
 801245a:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80125e8 <search_adachi4+0xc14>
 801245e:	eddf 0a63 	vldr	s1, [pc, #396]	; 80125ec <search_adachi4+0xc18>
 8012462:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80125f0 <search_adachi4+0xc1c>
 8012466:	f7fc fd53 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 801246a:	2064      	movs	r0, #100	; 0x64
 801246c:	f7fd fe24 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_right);
 8012470:	2000      	movs	r0, #0
 8012472:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80125e8 <search_adachi4+0xc14>
 8012476:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80125ec <search_adachi4+0xc18>
 801247a:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80125f4 <search_adachi4+0xc20>
 801247e:	f7fc fd47 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 8012482:	eddf 1a5d 	vldr	s3, [pc, #372]	; 80125f8 <search_adachi4+0xc24>
 8012486:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 80125f8 <search_adachi4+0xc24>
 801248a:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 801248e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80125e4 <search_adachi4+0xc10>
 8012492:	f7fc fa65 	bl	800e960 <straight>
 8012496:	e030      	b.n	80124fa <search_adachi4+0xb26>
            	}
            	else{
            		//search_turn90_table(&param_R90_search);
        			search_turn90_table_update_maze (turn_r_param, gx, gy, goal_size, MASK_SEARCH);
 8012498:	2301      	movs	r3, #1
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	68ba      	ldr	r2, [r7, #8]
 80124a0:	68f9      	ldr	r1, [r7, #12]
 80124a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80124a4:	f001 fe28 	bl	80140f8 <search_turn90_table_update_maze>
     				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 80124a8:	683b      	ldr	r3, [r7, #0]
 80124aa:	689b      	ldr	r3, [r3, #8]
 80124ac:	edd3 7a00 	vldr	s15, [r3]
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	689b      	ldr	r3, [r3, #8]
 80124b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	689b      	ldr	r3, [r3, #8]
 80124bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80124c0:	eeb0 1a66 	vmov.f32	s2, s13
 80124c4:	eef0 0a47 	vmov.f32	s1, s14
 80124c8:	eeb0 0a67 	vmov.f32	s0, s15
 80124cc:	f7fc fa14 	bl	800e8f8 <Set_Omega_PID_Gain>
    	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	685b      	ldr	r3, [r3, #4]
 80124d4:	edd3 7a00 	vldr	s15, [r3]
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80124e0:	683b      	ldr	r3, [r7, #0]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80124e8:	eeb0 1a66 	vmov.f32	s2, s13
 80124ec:	eef0 0a47 	vmov.f32	s1, s14
 80124f0:	eeb0 0a67 	vmov.f32	s0, s15
 80124f4:	f7fc f9e6 	bl	800e8c4 <Set_Velo_PID_Gain>
            	}
            	break;
 80124f8:	e2e8      	b.n	8012acc <search_adachi4+0x10f8>
 80124fa:	e2e7      	b.n	8012acc <search_adachi4+0x10f8>
            case left:
            case (left|0x80):

            	wall_controll.is_controll = true;
 80124fc:	4b3f      	ldr	r3, [pc, #252]	; (80125fc <search_adachi4+0xc28>)
 80124fe:	2201      	movs	r2, #1
 8012500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	if(90.0 - (sen_fr.distance + sen_fl.distance)/2.0 > slalom_R90_table.Lstart || ((sen_fr.distance + sen_fl.distance)/2.0 < 110.0 && ABS(sen_fr.distance - sen_fl.distance) > 5.0))
 8012504:	4b3e      	ldr	r3, [pc, #248]	; (8012600 <search_adachi4+0xc2c>)
 8012506:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801250a:	4b3e      	ldr	r3, [pc, #248]	; (8012604 <search_adachi4+0xc30>)
 801250c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012514:	ee17 0a90 	vmov	r0, s15
 8012518:	f7ee f836 	bl	8000588 <__aeabi_f2d>
 801251c:	f04f 0200 	mov.w	r2, #0
 8012520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012524:	f7ee f9b2 	bl	800088c <__aeabi_ddiv>
 8012528:	4603      	mov	r3, r0
 801252a:	460c      	mov	r4, r1
 801252c:	461a      	mov	r2, r3
 801252e:	4623      	mov	r3, r4
 8012530:	f04f 0000 	mov.w	r0, #0
 8012534:	4934      	ldr	r1, [pc, #208]	; (8012608 <search_adachi4+0xc34>)
 8012536:	f7ed fec7 	bl	80002c8 <__aeabi_dsub>
 801253a:	4603      	mov	r3, r0
 801253c:	460c      	mov	r4, r1
 801253e:	4625      	mov	r5, r4
 8012540:	461c      	mov	r4, r3
 8012542:	4b32      	ldr	r3, [pc, #200]	; (801260c <search_adachi4+0xc38>)
 8012544:	4618      	mov	r0, r3
 8012546:	f7ee f81f 	bl	8000588 <__aeabi_f2d>
 801254a:	4602      	mov	r2, r0
 801254c:	460b      	mov	r3, r1
 801254e:	4620      	mov	r0, r4
 8012550:	4629      	mov	r1, r5
 8012552:	f7ee fb01 	bl	8000b58 <__aeabi_dcmpgt>
 8012556:	4603      	mov	r3, r0
 8012558:	2b00      	cmp	r3, #0
 801255a:	d16b      	bne.n	8012634 <search_adachi4+0xc60>
 801255c:	4b28      	ldr	r3, [pc, #160]	; (8012600 <search_adachi4+0xc2c>)
 801255e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8012562:	4b28      	ldr	r3, [pc, #160]	; (8012604 <search_adachi4+0xc30>)
 8012564:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012568:	ee77 7a27 	vadd.f32	s15, s14, s15
 801256c:	ee17 0a90 	vmov	r0, s15
 8012570:	f7ee f80a 	bl	8000588 <__aeabi_f2d>
 8012574:	f04f 0200 	mov.w	r2, #0
 8012578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801257c:	f7ee f986 	bl	800088c <__aeabi_ddiv>
 8012580:	4603      	mov	r3, r0
 8012582:	460c      	mov	r4, r1
 8012584:	4618      	mov	r0, r3
 8012586:	4621      	mov	r1, r4
 8012588:	f04f 0200 	mov.w	r2, #0
 801258c:	4b20      	ldr	r3, [pc, #128]	; (8012610 <search_adachi4+0xc3c>)
 801258e:	f7ee fac5 	bl	8000b1c <__aeabi_dcmplt>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	f000 80d9 	beq.w	801274c <search_adachi4+0xd78>
 801259a:	4b19      	ldr	r3, [pc, #100]	; (8012600 <search_adachi4+0xc2c>)
 801259c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80125a0:	4b18      	ldr	r3, [pc, #96]	; (8012604 <search_adachi4+0xc30>)
 80125a2:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80125a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80125ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b2:	d52f      	bpl.n	8012614 <search_adachi4+0xc40>
 80125b4:	4b12      	ldr	r3, [pc, #72]	; (8012600 <search_adachi4+0xc2c>)
 80125b6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80125ba:	4b12      	ldr	r3, [pc, #72]	; (8012604 <search_adachi4+0xc30>)
 80125bc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80125c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125c4:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 80125c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80125cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d0:	d430      	bmi.n	8012634 <search_adachi4+0xc60>
 80125d2:	e0bb      	b.n	801274c <search_adachi4+0xd78>
 80125d4:	20009410 	.word	0x20009410
 80125d8:	40468000 	.word	0x40468000
 80125dc:	40140000 	.word	0x40140000
 80125e0:	00000000 	.word	0x00000000
 80125e4:	42340000 	.word	0x42340000
 80125e8:	41490fda 	.word	0x41490fda
 80125ec:	431d1462 	.word	0x431d1462
 80125f0:	3fc90fda 	.word	0x3fc90fda
 80125f4:	40490fda 	.word	0x40490fda
 80125f8:	3e99999a 	.word	0x3e99999a
 80125fc:	20000aac 	.word	0x20000aac
 8012600:	200098a0 	.word	0x200098a0
 8012604:	20009914 	.word	0x20009914
 8012608:	40568000 	.word	0x40568000
 801260c:	416b851f 	.word	0x416b851f
 8012610:	405b8000 	.word	0x405b8000
 8012614:	4bba      	ldr	r3, [pc, #744]	; (8012900 <search_adachi4+0xf2c>)
 8012616:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801261a:	4bba      	ldr	r3, [pc, #744]	; (8012904 <search_adachi4+0xf30>)
 801261c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012624:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8012628:	eef4 7ac7 	vcmpe.f32	s15, s14
 801262c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012630:	f340 808c 	ble.w	801274c <search_adachi4+0xd78>
            	{
     				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8012634:	683b      	ldr	r3, [r7, #0]
 8012636:	689b      	ldr	r3, [r3, #8]
 8012638:	edd3 7a00 	vldr	s15, [r3]
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	ed93 7a01 	vldr	s14, [r3, #4]
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	689b      	ldr	r3, [r3, #8]
 8012648:	edd3 6a02 	vldr	s13, [r3, #8]
 801264c:	eeb0 1a66 	vmov.f32	s2, s13
 8012650:	eef0 0a47 	vmov.f32	s1, s14
 8012654:	eeb0 0a67 	vmov.f32	s0, s15
 8012658:	f7fc f94e 	bl	800e8f8 <Set_Omega_PID_Gain>
    	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	edd3 7a00 	vldr	s15, [r3]
 8012664:	683b      	ldr	r3, [r7, #0]
 8012666:	685b      	ldr	r3, [r3, #4]
 8012668:	ed93 7a01 	vldr	s14, [r3, #4]
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	edd3 6a02 	vldr	s13, [r3, #8]
 8012674:	eeb0 1a66 	vmov.f32	s2, s13
 8012678:	eef0 0a47 	vmov.f32	s1, s14
 801267c:	eeb0 0a67 	vmov.f32	s0, s15
 8012680:	f7fc f920 	bl	800e8c4 <Set_Velo_PID_Gain>
            		//straight(HALF_SECTION,4.0,0.3,0.0);
          			search_straight_update_maze (HALF_SECTION - (90.0 - (sen_fr.distance + sen_fl.distance)/2.0),base_straight_param->param->acc,base_straight_param->param->max_velo,0.0,gx,gy,goal_size,MASK_SEARCH);
 8012684:	4b9e      	ldr	r3, [pc, #632]	; (8012900 <search_adachi4+0xf2c>)
 8012686:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801268a:	4b9e      	ldr	r3, [pc, #632]	; (8012904 <search_adachi4+0xf30>)
 801268c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8012690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012694:	ee17 0a90 	vmov	r0, s15
 8012698:	f7ed ff76 	bl	8000588 <__aeabi_f2d>
 801269c:	f04f 0200 	mov.w	r2, #0
 80126a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80126a4:	f7ee f8f2 	bl	800088c <__aeabi_ddiv>
 80126a8:	4603      	mov	r3, r0
 80126aa:	460c      	mov	r4, r1
 80126ac:	461a      	mov	r2, r3
 80126ae:	4623      	mov	r3, r4
 80126b0:	f04f 0000 	mov.w	r0, #0
 80126b4:	4994      	ldr	r1, [pc, #592]	; (8012908 <search_adachi4+0xf34>)
 80126b6:	f7ed fe07 	bl	80002c8 <__aeabi_dsub>
 80126ba:	4603      	mov	r3, r0
 80126bc:	460c      	mov	r4, r1
 80126be:	461a      	mov	r2, r3
 80126c0:	4623      	mov	r3, r4
 80126c2:	f04f 0000 	mov.w	r0, #0
 80126c6:	4991      	ldr	r1, [pc, #580]	; (801290c <search_adachi4+0xf38>)
 80126c8:	f7ed fdfe 	bl	80002c8 <__aeabi_dsub>
 80126cc:	4603      	mov	r3, r0
 80126ce:	460c      	mov	r4, r1
 80126d0:	4618      	mov	r0, r3
 80126d2:	4621      	mov	r1, r4
 80126d4:	f7ee faa8 	bl	8000c28 <__aeabi_d2f>
 80126d8:	4604      	mov	r4, r0
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	edd3 7a01 	vldr	s15, [r3, #4]
 80126e2:	683b      	ldr	r3, [r7, #0]
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	ed93 7a00 	vldr	s14, [r3]
 80126ea:	2301      	movs	r3, #1
 80126ec:	687a      	ldr	r2, [r7, #4]
 80126ee:	68b9      	ldr	r1, [r7, #8]
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	eddf 1a87 	vldr	s3, [pc, #540]	; 8012910 <search_adachi4+0xf3c>
 80126f6:	eeb0 1a47 	vmov.f32	s2, s14
 80126fa:	eef0 0a67 	vmov.f32	s1, s15
 80126fe:	ee00 4a10 	vmov	s0, r4
 8012702:	f001 fafb 	bl	8013cfc <search_straight_update_maze>
          			set_stop_wall(100);
 8012706:	2064      	movs	r0, #100	; 0x64
 8012708:	f7fd fcd6 	bl	80100b8 <set_stop_wall>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 801270c:	2001      	movs	r0, #1
 801270e:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8012914 <search_adachi4+0xf40>
 8012712:	eddf 0a81 	vldr	s1, [pc, #516]	; 8012918 <search_adachi4+0xf44>
 8012716:	ed9f 0a81 	vldr	s0, [pc, #516]	; 801291c <search_adachi4+0xf48>
 801271a:	f7fc fbf9 	bl	800ef10 <Spin_turn>
          			straight(HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo);
 801271e:	683b      	ldr	r3, [r7, #0]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	edd3 7a01 	vldr	s15, [r3, #4]
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	ed93 7a00 	vldr	s14, [r3]
 801272e:	683b      	ldr	r3, [r7, #0]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	edd3 6a00 	vldr	s13, [r3]
 8012736:	eef0 1a66 	vmov.f32	s3, s13
 801273a:	eeb0 1a47 	vmov.f32	s2, s14
 801273e:	eef0 0a67 	vmov.f32	s1, s15
 8012742:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8012920 <search_adachi4+0xf4c>
 8012746:	f7fc f90b 	bl	800e960 <straight>
 801274a:	e0d8      	b.n	80128fe <search_adachi4+0xf2a>
            	}
            	else if(sen_r.is_wall == true && ABS(sen_r.distance - 45.0) > 10.0)
 801274c:	4b75      	ldr	r3, [pc, #468]	; (8012924 <search_adachi4+0xf50>)
 801274e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8012752:	2b01      	cmp	r3, #1
 8012754:	f040 80a2 	bne.w	801289c <search_adachi4+0xec8>
 8012758:	4b72      	ldr	r3, [pc, #456]	; (8012924 <search_adachi4+0xf50>)
 801275a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801275c:	4618      	mov	r0, r3
 801275e:	f7ed ff13 	bl	8000588 <__aeabi_f2d>
 8012762:	f04f 0200 	mov.w	r2, #0
 8012766:	4b69      	ldr	r3, [pc, #420]	; (801290c <search_adachi4+0xf38>)
 8012768:	f7ed fdae 	bl	80002c8 <__aeabi_dsub>
 801276c:	4603      	mov	r3, r0
 801276e:	460c      	mov	r4, r1
 8012770:	4618      	mov	r0, r3
 8012772:	4621      	mov	r1, r4
 8012774:	f04f 0200 	mov.w	r2, #0
 8012778:	f04f 0300 	mov.w	r3, #0
 801277c:	f7ee f9ce 	bl	8000b1c <__aeabi_dcmplt>
 8012780:	4603      	mov	r3, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d016      	beq.n	80127b4 <search_adachi4+0xde0>
 8012786:	4b67      	ldr	r3, [pc, #412]	; (8012924 <search_adachi4+0xf50>)
 8012788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801278a:	4618      	mov	r0, r3
 801278c:	f7ed fefc 	bl	8000588 <__aeabi_f2d>
 8012790:	f04f 0200 	mov.w	r2, #0
 8012794:	4b5d      	ldr	r3, [pc, #372]	; (801290c <search_adachi4+0xf38>)
 8012796:	f7ed fd97 	bl	80002c8 <__aeabi_dsub>
 801279a:	4603      	mov	r3, r0
 801279c:	460c      	mov	r4, r1
 801279e:	4618      	mov	r0, r3
 80127a0:	4621      	mov	r1, r4
 80127a2:	f04f 0200 	mov.w	r2, #0
 80127a6:	4b60      	ldr	r3, [pc, #384]	; (8012928 <search_adachi4+0xf54>)
 80127a8:	f7ee f9b8 	bl	8000b1c <__aeabi_dcmplt>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d116      	bne.n	80127e0 <search_adachi4+0xe0c>
 80127b2:	e073      	b.n	801289c <search_adachi4+0xec8>
 80127b4:	4b5b      	ldr	r3, [pc, #364]	; (8012924 <search_adachi4+0xf50>)
 80127b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127b8:	4618      	mov	r0, r3
 80127ba:	f7ed fee5 	bl	8000588 <__aeabi_f2d>
 80127be:	f04f 0200 	mov.w	r2, #0
 80127c2:	4b52      	ldr	r3, [pc, #328]	; (801290c <search_adachi4+0xf38>)
 80127c4:	f7ed fd80 	bl	80002c8 <__aeabi_dsub>
 80127c8:	4603      	mov	r3, r0
 80127ca:	460c      	mov	r4, r1
 80127cc:	4618      	mov	r0, r3
 80127ce:	4621      	mov	r1, r4
 80127d0:	f04f 0200 	mov.w	r2, #0
 80127d4:	4b55      	ldr	r3, [pc, #340]	; (801292c <search_adachi4+0xf58>)
 80127d6:	f7ee f9bf 	bl	8000b58 <__aeabi_dcmpgt>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d05d      	beq.n	801289c <search_adachi4+0xec8>
            	{
     				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	689b      	ldr	r3, [r3, #8]
 80127e4:	edd3 7a00 	vldr	s15, [r3]
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	689b      	ldr	r3, [r3, #8]
 80127ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80127f8:	eeb0 1a66 	vmov.f32	s2, s13
 80127fc:	eef0 0a47 	vmov.f32	s1, s14
 8012800:	eeb0 0a67 	vmov.f32	s0, s15
 8012804:	f7fc f878 	bl	800e8f8 <Set_Omega_PID_Gain>
    	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	edd3 7a00 	vldr	s15, [r3]
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	ed93 7a01 	vldr	s14, [r3, #4]
 8012818:	683b      	ldr	r3, [r7, #0]
 801281a:	685b      	ldr	r3, [r3, #4]
 801281c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012820:	eeb0 1a66 	vmov.f32	s2, s13
 8012824:	eef0 0a47 	vmov.f32	s1, s14
 8012828:	eeb0 0a67 	vmov.f32	s0, s15
 801282c:	f7fc f84a 	bl	800e8c4 <Set_Velo_PID_Gain>
                	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,0.0,gx,gy,goal_size,MASK_SEARCH);
 8012830:	683b      	ldr	r3, [r7, #0]
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	edd3 7a01 	vldr	s15, [r3, #4]
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	ed93 7a00 	vldr	s14, [r3]
 8012840:	2301      	movs	r3, #1
 8012842:	687a      	ldr	r2, [r7, #4]
 8012844:	68b9      	ldr	r1, [r7, #8]
 8012846:	68f8      	ldr	r0, [r7, #12]
 8012848:	eddf 1a31 	vldr	s3, [pc, #196]	; 8012910 <search_adachi4+0xf3c>
 801284c:	eeb0 1a47 	vmov.f32	s2, s14
 8012850:	eef0 0a67 	vmov.f32	s1, s15
 8012854:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8012920 <search_adachi4+0xf4c>
 8012858:	f001 fa50 	bl	8013cfc <search_straight_update_maze>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 801285c:	2000      	movs	r0, #0
 801285e:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8012914 <search_adachi4+0xf40>
 8012862:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8012918 <search_adachi4+0xf44>
 8012866:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 801291c <search_adachi4+0xf48>
 801286a:	f7fc fb51 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 801286e:	2064      	movs	r0, #100	; 0x64
 8012870:	f7fd fc22 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_left);
 8012874:	2001      	movs	r0, #1
 8012876:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8012914 <search_adachi4+0xf40>
 801287a:	eddf 0a27 	vldr	s1, [pc, #156]	; 8012918 <search_adachi4+0xf44>
 801287e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8012930 <search_adachi4+0xf5c>
 8012882:	f7fc fb45 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 8012886:	eddf 1a2b 	vldr	s3, [pc, #172]	; 8012934 <search_adachi4+0xf60>
 801288a:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8012934 <search_adachi4+0xf60>
 801288e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012892:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8012920 <search_adachi4+0xf4c>
 8012896:	f7fc f863 	bl	800e960 <straight>
 801289a:	e030      	b.n	80128fe <search_adachi4+0xf2a>
            	}
            	else{
            		//search_turn90_table(&param_L90_search);
        			search_turn90_table_update_maze (turn_l_param, gx, gy, goal_size, MASK_SEARCH);
 801289c:	2301      	movs	r3, #1
 801289e:	9300      	str	r3, [sp, #0]
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68ba      	ldr	r2, [r7, #8]
 80128a4:	68f9      	ldr	r1, [r7, #12]
 80128a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80128a8:	f001 fc26 	bl	80140f8 <search_turn90_table_update_maze>
     				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	689b      	ldr	r3, [r3, #8]
 80128b0:	edd3 7a00 	vldr	s15, [r3]
 80128b4:	683b      	ldr	r3, [r7, #0]
 80128b6:	689b      	ldr	r3, [r3, #8]
 80128b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80128c4:	eeb0 1a66 	vmov.f32	s2, s13
 80128c8:	eef0 0a47 	vmov.f32	s1, s14
 80128cc:	eeb0 0a67 	vmov.f32	s0, s15
 80128d0:	f7fc f812 	bl	800e8f8 <Set_Omega_PID_Gain>
    	  			Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	edd3 7a00 	vldr	s15, [r3]
 80128dc:	683b      	ldr	r3, [r7, #0]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80128ec:	eeb0 1a66 	vmov.f32	s2, s13
 80128f0:	eef0 0a47 	vmov.f32	s1, s14
 80128f4:	eeb0 0a67 	vmov.f32	s0, s15
 80128f8:	f7fb ffe4 	bl	800e8c4 <Set_Velo_PID_Gain>
            	}
            	break;
 80128fc:	e0e6      	b.n	8012acc <search_adachi4+0x10f8>
 80128fe:	e0e5      	b.n	8012acc <search_adachi4+0x10f8>
 8012900:	200098a0 	.word	0x200098a0
 8012904:	20009914 	.word	0x20009914
 8012908:	40568000 	.word	0x40568000
 801290c:	40468000 	.word	0x40468000
 8012910:	00000000 	.word	0x00000000
 8012914:	41490fda 	.word	0x41490fda
 8012918:	431d1462 	.word	0x431d1462
 801291c:	3fc90fda 	.word	0x3fc90fda
 8012920:	42340000 	.word	0x42340000
 8012924:	2001b5e4 	.word	0x2001b5e4
 8012928:	c0240000 	.word	0xc0240000
 801292c:	40240000 	.word	0x40240000
 8012930:	40490fda 	.word	0x40490fda
 8012934:	3e99999a 	.word	0x3e99999a
            case rear:
            case (rear|0x80):
            	wall_controll.is_controll = false;
 8012938:	4b85      	ldr	r3, [pc, #532]	; (8012b50 <search_adachi4+0x117c>)
 801293a:	2200      	movs	r2, #0
 801293c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				Set_Omega_PID_Gain(base_straight_param->om_gain->Kp, base_straight_param->om_gain->Ki, base_straight_param->om_gain->Kd);
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	689b      	ldr	r3, [r3, #8]
 8012944:	edd3 7a00 	vldr	s15, [r3]
 8012948:	683b      	ldr	r3, [r7, #0]
 801294a:	689b      	ldr	r3, [r3, #8]
 801294c:	ed93 7a01 	vldr	s14, [r3, #4]
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	689b      	ldr	r3, [r3, #8]
 8012954:	edd3 6a02 	vldr	s13, [r3, #8]
 8012958:	eeb0 1a66 	vmov.f32	s2, s13
 801295c:	eef0 0a47 	vmov.f32	s1, s14
 8012960:	eeb0 0a67 	vmov.f32	s0, s15
 8012964:	f7fb ffc8 	bl	800e8f8 <Set_Omega_PID_Gain>
				Set_Velo_PID_Gain(base_straight_param->sp_gain->Kp, base_straight_param->sp_gain->Ki, base_straight_param->sp_gain->Kd);
 8012968:	683b      	ldr	r3, [r7, #0]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	edd3 7a00 	vldr	s15, [r3]
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	685b      	ldr	r3, [r3, #4]
 8012974:	ed93 7a01 	vldr	s14, [r3, #4]
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012980:	eeb0 1a66 	vmov.f32	s2, s13
 8012984:	eef0 0a47 	vmov.f32	s1, s14
 8012988:	eeb0 0a67 	vmov.f32	s0, s15
 801298c:	f7fb ff9a 	bl	800e8c4 <Set_Velo_PID_Gain>
                straight(HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,0.0);
 8012990:	683b      	ldr	r3, [r7, #0]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	edd3 7a01 	vldr	s15, [r3, #4]
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	ed93 7a00 	vldr	s14, [r3]
 80129a0:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8012b54 <search_adachi4+0x1180>
 80129a4:	eeb0 1a47 	vmov.f32	s2, s14
 80129a8:	eef0 0a67 	vmov.f32	s1, s15
 80129ac:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8012b58 <search_adachi4+0x1184>
 80129b0:	f7fb ffd6 	bl	800e960 <straight>
                if(is_wall_dir(prev_pos.x, prev_pos.y, prev_pos.dir) == true) set_stop_wall(200);
 80129b4:	7d3b      	ldrb	r3, [r7, #20]
 80129b6:	4618      	mov	r0, r3
 80129b8:	7d7b      	ldrb	r3, [r7, #21]
 80129ba:	4619      	mov	r1, r3
 80129bc:	7dbb      	ldrb	r3, [r7, #22]
 80129be:	461a      	mov	r2, r3
 80129c0:	f7fe ff9a 	bl	80118f8 <is_wall_dir>
 80129c4:	4603      	mov	r3, r0
 80129c6:	2b01      	cmp	r3, #1
 80129c8:	d102      	bne.n	80129d0 <search_adachi4+0xffc>
 80129ca:	20c8      	movs	r0, #200	; 0xc8
 80129cc:	f7fd fb74 	bl	80100b8 <set_stop_wall>
                if(is_wall_dir(prev_pos.x, prev_pos.y, (prev_pos.dir + 1 + 4)%4) == true)
 80129d0:	7d3b      	ldrb	r3, [r7, #20]
 80129d2:	4618      	mov	r0, r3
 80129d4:	7d7b      	ldrb	r3, [r7, #21]
 80129d6:	4619      	mov	r1, r3
 80129d8:	7dbb      	ldrb	r3, [r7, #22]
 80129da:	3305      	adds	r3, #5
 80129dc:	425a      	negs	r2, r3
 80129de:	f003 0303 	and.w	r3, r3, #3
 80129e2:	f002 0203 	and.w	r2, r2, #3
 80129e6:	bf58      	it	pl
 80129e8:	4253      	negpl	r3, r2
 80129ea:	b2db      	uxtb	r3, r3
 80129ec:	461a      	mov	r2, r3
 80129ee:	f7fe ff83 	bl	80118f8 <is_wall_dir>
 80129f2:	4603      	mov	r3, r0
 80129f4:	2b01      	cmp	r3, #1
 80129f6:	d115      	bne.n	8012a24 <search_adachi4+0x1050>
                {
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 80129f8:	2000      	movs	r0, #0
 80129fa:	ed9f 1a58 	vldr	s2, [pc, #352]	; 8012b5c <search_adachi4+0x1188>
 80129fe:	eddf 0a58 	vldr	s1, [pc, #352]	; 8012b60 <search_adachi4+0x118c>
 8012a02:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8012b64 <search_adachi4+0x1190>
 8012a06:	f7fc fa83 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 8012a0a:	2064      	movs	r0, #100	; 0x64
 8012a0c:	f7fd fb54 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 8012a10:	2000      	movs	r0, #0
 8012a12:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8012b5c <search_adachi4+0x1188>
 8012a16:	eddf 0a52 	vldr	s1, [pc, #328]	; 8012b60 <search_adachi4+0x118c>
 8012a1a:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8012b64 <search_adachi4+0x1190>
 8012a1e:	f7fc fa77 	bl	800ef10 <Spin_turn>
 8012a22:	e032      	b.n	8012a8a <search_adachi4+0x10b6>
                }
                else if(is_wall_dir(prev_pos.x, prev_pos.y, (prev_pos.dir - 1 + 4)%4) == true)
 8012a24:	7d3b      	ldrb	r3, [r7, #20]
 8012a26:	4618      	mov	r0, r3
 8012a28:	7d7b      	ldrb	r3, [r7, #21]
 8012a2a:	4619      	mov	r1, r3
 8012a2c:	7dbb      	ldrb	r3, [r7, #22]
 8012a2e:	3303      	adds	r3, #3
 8012a30:	425a      	negs	r2, r3
 8012a32:	f003 0303 	and.w	r3, r3, #3
 8012a36:	f002 0203 	and.w	r2, r2, #3
 8012a3a:	bf58      	it	pl
 8012a3c:	4253      	negpl	r3, r2
 8012a3e:	b2db      	uxtb	r3, r3
 8012a40:	461a      	mov	r2, r3
 8012a42:	f7fe ff59 	bl	80118f8 <is_wall_dir>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d115      	bne.n	8012a78 <search_adachi4+0x10a4>
                {
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8012a4c:	2001      	movs	r0, #1
 8012a4e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8012b5c <search_adachi4+0x1188>
 8012a52:	eddf 0a43 	vldr	s1, [pc, #268]	; 8012b60 <search_adachi4+0x118c>
 8012a56:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8012b64 <search_adachi4+0x1190>
 8012a5a:	f7fc fa59 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 8012a5e:	2064      	movs	r0, #100	; 0x64
 8012a60:	f7fd fb2a 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8012a64:	2001      	movs	r0, #1
 8012a66:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8012b5c <search_adachi4+0x1188>
 8012a6a:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8012b60 <search_adachi4+0x118c>
 8012a6e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8012b64 <search_adachi4+0x1190>
 8012a72:	f7fc fa4d 	bl	800ef10 <Spin_turn>
 8012a76:	e008      	b.n	8012a8a <search_adachi4+0x10b6>
                }
                else
                {
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_left);
 8012a78:	2001      	movs	r0, #1
 8012a7a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8012b5c <search_adachi4+0x1188>
 8012a7e:	eddf 0a38 	vldr	s1, [pc, #224]	; 8012b60 <search_adachi4+0x118c>
 8012a82:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8012b68 <search_adachi4+0x1194>
 8012a86:	f7fc fa43 	bl	800ef10 <Spin_turn>
                }
            	wall_controll.is_controll = false;
 8012a8a:	4b31      	ldr	r3, [pc, #196]	; (8012b50 <search_adachi4+0x117c>)
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	filter_init();
 8012a92:	f7fa ffd9 	bl	800da48 <filter_init>
                //straight(HALF_SECTION,4.0,0.3,0.3);
            	search_straight_update_maze (HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,base_straight_param->param->max_velo,gx,gy,goal_size,MASK_SEARCH);
 8012a96:	683b      	ldr	r3, [r7, #0]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	ed93 7a00 	vldr	s14, [r3]
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	edd3 6a00 	vldr	s13, [r3]
 8012aae:	2301      	movs	r3, #1
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	eef0 1a66 	vmov.f32	s3, s13
 8012aba:	eeb0 1a47 	vmov.f32	s2, s14
 8012abe:	eef0 0a67 	vmov.f32	s1, s15
 8012ac2:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8012b58 <search_adachi4+0x1184>
 8012ac6:	f001 f919 	bl	8013cfc <search_straight_update_maze>
            	break;
 8012aca:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8012acc:	4b27      	ldr	r3, [pc, #156]	; (8012b6c <search_adachi4+0x1198>)
 8012ace:	781b      	ldrb	r3, [r3, #0]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	4b26      	ldr	r3, [pc, #152]	; (8012b6c <search_adachi4+0x1198>)
 8012ad4:	785b      	ldrb	r3, [r3, #1]
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	68fa      	ldr	r2, [r7, #12]
 8012ae0:	f7fd fed6 	bl	8010890 <i_am_goal>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f43f a93e 	beq.w	8011d68 <search_adachi4+0x394>
            	//segment_accel_cnt++;
            	//break;
        }

    }
	if(is_unknown(mypos.x, mypos.y)){
 8012aec:	4b1f      	ldr	r3, [pc, #124]	; (8012b6c <search_adachi4+0x1198>)
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	4b1e      	ldr	r3, [pc, #120]	; (8012b6c <search_adachi4+0x1198>)
 8012af4:	785b      	ldrb	r3, [r3, #1]
 8012af6:	4619      	mov	r1, r3
 8012af8:	4610      	mov	r0, r2
 8012afa:	f7fe fae3 	bl	80110c4 <is_unknown>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d008      	beq.n	8012b16 <search_adachi4+0x1142>
		set_wall(mypos.x,mypos.y);//壁情報セット
 8012b04:	4b19      	ldr	r3, [pc, #100]	; (8012b6c <search_adachi4+0x1198>)
 8012b06:	781b      	ldrb	r3, [r3, #0]
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4b18      	ldr	r3, [pc, #96]	; (8012b6c <search_adachi4+0x1198>)
 8012b0c:	785b      	ldrb	r3, [r3, #1]
 8012b0e:	4619      	mov	r1, r3
 8012b10:	4610      	mov	r0, r2
 8012b12:	f7fe fb17 	bl	8011144 <set_wall>
	}
    wall_controll.is_controll = false;
 8012b16:	4b0e      	ldr	r3, [pc, #56]	; (8012b50 <search_adachi4+0x117c>)
 8012b18:	2200      	movs	r2, #0
 8012b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    straight(HALF_SECTION,base_straight_param->param->acc,base_straight_param->param->max_velo,0.0);
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	ed93 7a00 	vldr	s14, [r3]
 8012b2e:	eddf 1a09 	vldr	s3, [pc, #36]	; 8012b54 <search_adachi4+0x1180>
 8012b32:	eeb0 1a47 	vmov.f32	s2, s14
 8012b36:	eef0 0a67 	vmov.f32	s1, s15
 8012b3a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8012b58 <search_adachi4+0x1184>
 8012b3e:	f7fb ff0f 	bl	800e960 <straight>
    run_mode = NON_CON_MODE;
 8012b42:	4b0b      	ldr	r3, [pc, #44]	; (8012b70 <search_adachi4+0x119c>)
 8012b44:	2200      	movs	r2, #0
 8012b46:	701a      	strb	r2, [r3, #0]


}
 8012b48:	bf00      	nop
 8012b4a:	3728      	adds	r7, #40	; 0x28
 8012b4c:	46bd      	mov	sp, r7
 8012b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8012b50:	20000aac 	.word	0x20000aac
 8012b54:	00000000 	.word	0x00000000
 8012b58:	42340000 	.word	0x42340000
 8012b5c:	41490fda 	.word	0x41490fda
 8012b60:	431d1462 	.word	0x431d1462
 8012b64:	3fc90fda 	.word	0x3fc90fda
 8012b68:	40490fda 	.word	0x40490fda
 8012b6c:	20000afc 	.word	0x20000afc
 8012b70:	20001708 	.word	0x20001708

08012b74 <search_adachi_zenmen3>:
    wall_controll.is_controll = false;
    straight(HALF_SECTION,4.0,0.3,0.0);
    run_mode = NON_CON_MODE;
}

void search_adachi_zenmen3(int *gx,int *gy,int goal_size){
 8012b74:	b5b0      	push	{r4, r5, r7, lr}
 8012b76:	b08e      	sub	sp, #56	; 0x38
 8012b78:	af04      	add	r7, sp, #16
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
    t_direction glob_nextdir;
    int direction = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&glob_nextdir,FAR_PRIORITY);
 8012b80:	2301      	movs	r3, #1
 8012b82:	9302      	str	r3, [sp, #8]
 8012b84:	f107 0317 	add.w	r3, r7, #23
 8012b88:	9301      	str	r3, [sp, #4]
 8012b8a:	4acc      	ldr	r2, [pc, #816]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012b8c:	466b      	mov	r3, sp
 8012b8e:	8811      	ldrh	r1, [r2, #0]
 8012b90:	7892      	ldrb	r2, [r2, #2]
 8012b92:	8019      	strh	r1, [r3, #0]
 8012b94:	709a      	strb	r2, [r3, #2]
 8012b96:	2301      	movs	r3, #1
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	68b9      	ldr	r1, [r7, #8]
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f7fe fd17 	bl	80115d0 <get_tmp_nextdir>
 8012ba2:	61f8      	str	r0, [r7, #28]
	Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012ba4:	eddf 7ac6 	vldr	s15, [pc, #792]	; 8012ec0 <search_adachi_zenmen3+0x34c>
 8012ba8:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8012ec4 <search_adachi_zenmen3+0x350>
 8012bac:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012bb0:	eeb0 1a66 	vmov.f32	s2, s13
 8012bb4:	eef0 0a47 	vmov.f32	s1, s14
 8012bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8012bbc:	f7fb fe9c 	bl	800e8f8 <Set_Omega_PID_Gain>
	Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012bc0:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012bc4:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012bc8:	eddf 6abf 	vldr	s13, [pc, #764]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012bcc:	eeb0 1a66 	vmov.f32	s2, s13
 8012bd0:	eef0 0a47 	vmov.f32	s1, s14
 8012bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8012bd8:	f7fb fe74 	bl	800e8c4 <Set_Velo_PID_Gain>
	Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.0);
 8012bdc:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012be0:	eddf 0ab9 	vldr	s1, [pc, #740]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012be4:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8012ed0 <search_adachi_zenmen3+0x35c>
 8012be8:	48ba      	ldr	r0, [pc, #744]	; (8012ed4 <search_adachi_zenmen3+0x360>)
 8012bea:	f7fb fe9f 	bl	800e92c <Set_PID_Gain>

	mypos.dir = glob_nextdir;
 8012bee:	7dfa      	ldrb	r2, [r7, #23]
 8012bf0:	4bb2      	ldr	r3, [pc, #712]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012bf2:	709a      	strb	r2, [r3, #2]
    switch(mypos.dir){
 8012bf4:	4bb1      	ldr	r3, [pc, #708]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012bf6:	789b      	ldrb	r3, [r3, #2]
 8012bf8:	2b04      	cmp	r3, #4
 8012bfa:	d829      	bhi.n	8012c50 <search_adachi_zenmen3+0xdc>
 8012bfc:	a201      	add	r2, pc, #4	; (adr r2, 8012c04 <search_adachi_zenmen3+0x90>)
 8012bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c02:	bf00      	nop
 8012c04:	08012c19 	.word	0x08012c19
 8012c08:	08012c27 	.word	0x08012c27
 8012c0c:	08012c35 	.word	0x08012c35
 8012c10:	08012c43 	.word	0x08012c43
 8012c14:	08012c51 	.word	0x08012c51
        case north:
            mypos.y++;
 8012c18:	4ba8      	ldr	r3, [pc, #672]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c1a:	785b      	ldrb	r3, [r3, #1]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	b2da      	uxtb	r2, r3
 8012c20:	4ba6      	ldr	r3, [pc, #664]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c22:	705a      	strb	r2, [r3, #1]
            break;
 8012c24:	e014      	b.n	8012c50 <search_adachi_zenmen3+0xdc>
        case east:
            mypos.x++;
 8012c26:	4ba5      	ldr	r3, [pc, #660]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	3301      	adds	r3, #1
 8012c2c:	b2da      	uxtb	r2, r3
 8012c2e:	4ba3      	ldr	r3, [pc, #652]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c30:	701a      	strb	r2, [r3, #0]
            break;
 8012c32:	e00d      	b.n	8012c50 <search_adachi_zenmen3+0xdc>
        case south:
            mypos.y--;
 8012c34:	4ba1      	ldr	r3, [pc, #644]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c36:	785b      	ldrb	r3, [r3, #1]
 8012c38:	3b01      	subs	r3, #1
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	4b9f      	ldr	r3, [pc, #636]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c3e:	705a      	strb	r2, [r3, #1]
            break;
 8012c40:	e006      	b.n	8012c50 <search_adachi_zenmen3+0xdc>
        case west:
            mypos.x--;
 8012c42:	4b9e      	ldr	r3, [pc, #632]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c44:	781b      	ldrb	r3, [r3, #0]
 8012c46:	3b01      	subs	r3, #1
 8012c48:	b2da      	uxtb	r2, r3
 8012c4a:	4b9c      	ldr	r3, [pc, #624]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012c4c:	701a      	strb	r2, [r3, #0]
            break;
 8012c4e:	bf00      	nop
        case center:
        	break;
    }

    switch(direction){
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	2b03      	cmp	r3, #3
 8012c54:	f200 87f6 	bhi.w	8013c44 <search_adachi_zenmen3+0x10d0>
 8012c58:	a201      	add	r2, pc, #4	; (adr r2, 8012c60 <search_adachi_zenmen3+0xec>)
 8012c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c5e:	bf00      	nop
 8012c60:	08012c71 	.word	0x08012c71
 8012c64:	08012ccf 	.word	0x08012ccf
 8012c68:	08012d9f 	.word	0x08012d9f
 8012c6c:	08012d37 	.word	0x08012d37
        case front:
        	wall_controll.is_controll = true;
 8012c70:	4b98      	ldr	r3, [pc, #608]	; (8012ed4 <search_adachi_zenmen3+0x360>)
 8012c72:	2201      	movs	r2, #1
 8012c74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012c78:	eddf 7a91 	vldr	s15, [pc, #580]	; 8012ec0 <search_adachi_zenmen3+0x34c>
 8012c7c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8012ec4 <search_adachi_zenmen3+0x350>
 8012c80:	eddf 6a91 	vldr	s13, [pc, #580]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012c84:	eeb0 1a66 	vmov.f32	s2, s13
 8012c88:	eef0 0a47 	vmov.f32	s1, s14
 8012c8c:	eeb0 0a67 	vmov.f32	s0, s15
 8012c90:	f7fb fe32 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012c94:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012c98:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012c9c:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012ca0:	eeb0 1a66 	vmov.f32	s2, s13
 8012ca4:	eef0 0a47 	vmov.f32	s1, s14
 8012ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8012cac:	f7fb fe0a 	bl	800e8c4 <Set_Velo_PID_Gain>
  			search_straight_update_maze_zenmen(HALF_SECTION,4.0,0.3,0.3,gx,gy,goal_size,MASK_SEARCH);
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	687a      	ldr	r2, [r7, #4]
 8012cb4:	68b9      	ldr	r1, [r7, #8]
 8012cb6:	68f8      	ldr	r0, [r7, #12]
 8012cb8:	eddf 1a84 	vldr	s3, [pc, #528]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012cbc:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012cc0:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012cc4:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8012ed8 <search_adachi_zenmen3+0x364>
 8012cc8:	f001 fb96 	bl	80143f8 <search_straight_update_maze_zenmen>
            break;
 8012ccc:	e09b      	b.n	8012e06 <search_adachi_zenmen3+0x292>
        case right:
			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012cce:	eddf 7a7c 	vldr	s15, [pc, #496]	; 8012ec0 <search_adachi_zenmen3+0x34c>
 8012cd2:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8012ec4 <search_adachi_zenmen3+0x350>
 8012cd6:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012cda:	eeb0 1a66 	vmov.f32	s2, s13
 8012cde:	eef0 0a47 	vmov.f32	s1, s14
 8012ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8012ce6:	f7fb fe07 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012cea:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012cee:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012cf2:	eddf 6a75 	vldr	s13, [pc, #468]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012cf6:	eeb0 1a66 	vmov.f32	s2, s13
 8012cfa:	eef0 0a47 	vmov.f32	s1, s14
 8012cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8012d02:	f7fb fddf 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(90.0), 20.0*PI, 2.0*PI, turn_right);
 8012d06:	2000      	movs	r0, #0
 8012d08:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8012edc <search_adachi_zenmen3+0x368>
 8012d0c:	eddf 0a74 	vldr	s1, [pc, #464]	; 8012ee0 <search_adachi_zenmen3+0x36c>
 8012d10:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8012ee4 <search_adachi_zenmen3+0x370>
 8012d14:	f7fc f8fc 	bl	800ef10 <Spin_turn>
        	search_straight_update_maze_zenmen(HALF_SECTION,4.0,0.3,0.3,gx,gy,goal_size,MASK_SEARCH);
 8012d18:	2301      	movs	r3, #1
 8012d1a:	687a      	ldr	r2, [r7, #4]
 8012d1c:	68b9      	ldr	r1, [r7, #8]
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	eddf 1a6a 	vldr	s3, [pc, #424]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012d24:	ed9f 1a69 	vldr	s2, [pc, #420]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012d28:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012d2c:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8012ed8 <search_adachi_zenmen3+0x364>
 8012d30:	f001 fb62 	bl	80143f8 <search_straight_update_maze_zenmen>
            break;
 8012d34:	e067      	b.n	8012e06 <search_adachi_zenmen3+0x292>
        case left:
			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012d36:	eddf 7a62 	vldr	s15, [pc, #392]	; 8012ec0 <search_adachi_zenmen3+0x34c>
 8012d3a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8012ec4 <search_adachi_zenmen3+0x350>
 8012d3e:	eddf 6a62 	vldr	s13, [pc, #392]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012d42:	eeb0 1a66 	vmov.f32	s2, s13
 8012d46:	eef0 0a47 	vmov.f32	s1, s14
 8012d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8012d4e:	f7fb fdd3 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012d52:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012d56:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012d5a:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012d5e:	eeb0 1a66 	vmov.f32	s2, s13
 8012d62:	eef0 0a47 	vmov.f32	s1, s14
 8012d66:	eeb0 0a67 	vmov.f32	s0, s15
 8012d6a:	f7fb fdab 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(90.0), 20.0*PI, 2.0*PI, turn_left);
 8012d6e:	2001      	movs	r0, #1
 8012d70:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8012edc <search_adachi_zenmen3+0x368>
 8012d74:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8012ee0 <search_adachi_zenmen3+0x36c>
 8012d78:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8012ee4 <search_adachi_zenmen3+0x370>
 8012d7c:	f7fc f8c8 	bl	800ef10 <Spin_turn>
            //straight(HALF_SECTION,4.0,0.3,0.3);
        	search_straight_update_maze_zenmen(HALF_SECTION,4.0,0.3,0.3,gx,gy,goal_size,MASK_SEARCH);
 8012d80:	2301      	movs	r3, #1
 8012d82:	687a      	ldr	r2, [r7, #4]
 8012d84:	68b9      	ldr	r1, [r7, #8]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	eddf 1a50 	vldr	s3, [pc, #320]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012d8c:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012d90:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012d94:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8012ed8 <search_adachi_zenmen3+0x364>
 8012d98:	f001 fb2e 	bl	80143f8 <search_straight_update_maze_zenmen>
        	break;
 8012d9c:	e033      	b.n	8012e06 <search_adachi_zenmen3+0x292>
        case rear:
			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8012d9e:	eddf 7a48 	vldr	s15, [pc, #288]	; 8012ec0 <search_adachi_zenmen3+0x34c>
 8012da2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8012ec4 <search_adachi_zenmen3+0x350>
 8012da6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012daa:	eeb0 1a66 	vmov.f32	s2, s13
 8012dae:	eef0 0a47 	vmov.f32	s1, s14
 8012db2:	eeb0 0a67 	vmov.f32	s0, s15
 8012db6:	f7fb fd9f 	bl	800e8f8 <Set_Omega_PID_Gain>
  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8012dba:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8012dbe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012dc2:	eddf 6a41 	vldr	s13, [pc, #260]	; 8012ec8 <search_adachi_zenmen3+0x354>
 8012dc6:	eeb0 1a66 	vmov.f32	s2, s13
 8012dca:	eef0 0a47 	vmov.f32	s1, s14
 8012dce:	eeb0 0a67 	vmov.f32	s0, s15
 8012dd2:	f7fb fd77 	bl	800e8c4 <Set_Velo_PID_Gain>
        	Spin_turn(DEG2RAD(180.0), 20.0*PI, 2.0*PI, turn_left);
 8012dd6:	2001      	movs	r0, #1
 8012dd8:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8012edc <search_adachi_zenmen3+0x368>
 8012ddc:	eddf 0a40 	vldr	s1, [pc, #256]	; 8012ee0 <search_adachi_zenmen3+0x36c>
 8012de0:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8012ee8 <search_adachi_zenmen3+0x374>
 8012de4:	f7fc f894 	bl	800ef10 <Spin_turn>
            //straight(HALF_SECTION,4.0,0.3,0.3);
        	search_straight_update_maze_zenmen(HALF_SECTION,4.0,0.3,0.3,gx,gy,goal_size,MASK_SEARCH);
 8012de8:	2301      	movs	r3, #1
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	68b9      	ldr	r1, [r7, #8]
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	eddf 1a36 	vldr	s3, [pc, #216]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012df4:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8012ecc <search_adachi_zenmen3+0x358>
 8012df8:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8012dfc:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8012ed8 <search_adachi_zenmen3+0x364>
 8012e00:	f001 fafa 	bl	80143f8 <search_straight_update_maze_zenmen>
        	break;
 8012e04:	bf00      	nop
    }

    //int segment_accel_cnt = 0;
    //int prev_run_direction = rear;
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8012e06:	f000 bf1d 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
    	t_position prev_pos = mypos;
 8012e0a:	4a2c      	ldr	r2, [pc, #176]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e0c:	f107 0314 	add.w	r3, r7, #20
 8012e10:	8811      	ldrh	r1, [r2, #0]
 8012e12:	7892      	ldrb	r2, [r2, #2]
 8012e14:	8019      	strh	r1, [r3, #0]
 8012e16:	709a      	strb	r2, [r3, #2]
    	if(is_unknown(mypos.x, mypos.y)){
 8012e18:	4b28      	ldr	r3, [pc, #160]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	4b27      	ldr	r3, [pc, #156]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e20:	785b      	ldrb	r3, [r3, #1]
 8012e22:	4619      	mov	r1, r3
 8012e24:	4610      	mov	r0, r2
 8012e26:	f7fe f94d 	bl	80110c4 <is_unknown>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d008      	beq.n	8012e42 <search_adachi_zenmen3+0x2ce>
    		set_wall(mypos.x,mypos.y);
 8012e30:	4b22      	ldr	r3, [pc, #136]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e32:	781b      	ldrb	r3, [r3, #0]
 8012e34:	461a      	mov	r2, r3
 8012e36:	4b21      	ldr	r3, [pc, #132]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e38:	785b      	ldrb	r3, [r3, #1]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	4610      	mov	r0, r2
 8012e3e:	f7fe f981 	bl	8011144 <set_wall>
    	}
        direction = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&glob_nextdir,FAR_PRIORITY);
 8012e42:	2301      	movs	r3, #1
 8012e44:	9302      	str	r3, [sp, #8]
 8012e46:	f107 0317 	add.w	r3, r7, #23
 8012e4a:	9301      	str	r3, [sp, #4]
 8012e4c:	4a1b      	ldr	r2, [pc, #108]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e4e:	466b      	mov	r3, sp
 8012e50:	8811      	ldrh	r1, [r2, #0]
 8012e52:	7892      	ldrb	r2, [r2, #2]
 8012e54:	8019      	strh	r1, [r3, #0]
 8012e56:	709a      	strb	r2, [r3, #2]
 8012e58:	2301      	movs	r3, #1
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	68b9      	ldr	r1, [r7, #8]
 8012e5e:	68f8      	ldr	r0, [r7, #12]
 8012e60:	f7fe fbb6 	bl	80115d0 <get_tmp_nextdir>
 8012e64:	61f8      	str	r0, [r7, #28]

        mypos.dir = glob_nextdir;
 8012e66:	7dfa      	ldrb	r2, [r7, #23]
 8012e68:	4b14      	ldr	r3, [pc, #80]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e6a:	709a      	strb	r2, [r3, #2]

        switch(mypos.dir){
 8012e6c:	4b13      	ldr	r3, [pc, #76]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e6e:	789b      	ldrb	r3, [r3, #2]
 8012e70:	2b04      	cmp	r3, #4
 8012e72:	d842      	bhi.n	8012efa <search_adachi_zenmen3+0x386>
 8012e74:	a201      	add	r2, pc, #4	; (adr r2, 8012e7c <search_adachi_zenmen3+0x308>)
 8012e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e7a:	bf00      	nop
 8012e7c:	08012e91 	.word	0x08012e91
 8012e80:	08012e9f 	.word	0x08012e9f
 8012e84:	08012ead 	.word	0x08012ead
 8012e88:	08012eed 	.word	0x08012eed
 8012e8c:	08012efb 	.word	0x08012efb
            case north:
                mypos.y++;
 8012e90:	4b0a      	ldr	r3, [pc, #40]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e92:	785b      	ldrb	r3, [r3, #1]
 8012e94:	3301      	adds	r3, #1
 8012e96:	b2da      	uxtb	r2, r3
 8012e98:	4b08      	ldr	r3, [pc, #32]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012e9a:	705a      	strb	r2, [r3, #1]
                break;
 8012e9c:	e02d      	b.n	8012efa <search_adachi_zenmen3+0x386>
            case east:
                mypos.x++;
 8012e9e:	4b07      	ldr	r3, [pc, #28]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012ea0:	781b      	ldrb	r3, [r3, #0]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	b2da      	uxtb	r2, r3
 8012ea6:	4b05      	ldr	r3, [pc, #20]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012ea8:	701a      	strb	r2, [r3, #0]
                break;
 8012eaa:	e026      	b.n	8012efa <search_adachi_zenmen3+0x386>
            case south:
                mypos.y--;
 8012eac:	4b03      	ldr	r3, [pc, #12]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012eae:	785b      	ldrb	r3, [r3, #1]
 8012eb0:	3b01      	subs	r3, #1
 8012eb2:	b2da      	uxtb	r2, r3
 8012eb4:	4b01      	ldr	r3, [pc, #4]	; (8012ebc <search_adachi_zenmen3+0x348>)
 8012eb6:	705a      	strb	r2, [r3, #1]
                break;
 8012eb8:	e01f      	b.n	8012efa <search_adachi_zenmen3+0x386>
 8012eba:	bf00      	nop
 8012ebc:	20000afc 	.word	0x20000afc
 8012ec0:	3f19999a 	.word	0x3f19999a
 8012ec4:	3c23d70a 	.word	0x3c23d70a
 8012ec8:	00000000 	.word	0x00000000
 8012ecc:	3e99999a 	.word	0x3e99999a
 8012ed0:	3e19999a 	.word	0x3e19999a
 8012ed4:	20000aac 	.word	0x20000aac
 8012ed8:	42340000 	.word	0x42340000
 8012edc:	40c90fda 	.word	0x40c90fda
 8012ee0:	427b53d0 	.word	0x427b53d0
 8012ee4:	3fc90fda 	.word	0x3fc90fda
 8012ee8:	40490fda 	.word	0x40490fda
            case west:
                mypos.x--;
 8012eec:	4bc5      	ldr	r3, [pc, #788]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	b2da      	uxtb	r2, r3
 8012ef4:	4bc3      	ldr	r3, [pc, #780]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012ef6:	701a      	strb	r2, [r3, #0]
                break;
 8012ef8:	bf00      	nop
            case center:
            	break;
        }

        uint8_t next_step_flag = 0x00;
 8012efa:	2300      	movs	r3, #0
 8012efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        t_direction tmp_next_dir = glob_nextdir;
 8012f00:	7dfb      	ldrb	r3, [r7, #23]
 8012f02:	74fb      	strb	r3, [r7, #19]

        //predict next_next_pos
        //int next_move_known_next = get_nextdir_zenmen(gx,gy,goal_size,MASK_SEARCH,&tmp_next_dir);
        int next_move_known_next = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,mypos,&tmp_next_dir,FAR_PRIORITY);
 8012f04:	2301      	movs	r3, #1
 8012f06:	9302      	str	r3, [sp, #8]
 8012f08:	f107 0313 	add.w	r3, r7, #19
 8012f0c:	9301      	str	r3, [sp, #4]
 8012f0e:	4abd      	ldr	r2, [pc, #756]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012f10:	466b      	mov	r3, sp
 8012f12:	8811      	ldrh	r1, [r2, #0]
 8012f14:	7892      	ldrb	r2, [r2, #2]
 8012f16:	8019      	strh	r1, [r3, #0]
 8012f18:	709a      	strb	r2, [r3, #2]
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	687a      	ldr	r2, [r7, #4]
 8012f1e:	68b9      	ldr	r1, [r7, #8]
 8012f20:	68f8      	ldr	r0, [r7, #12]
 8012f22:	f7fe fb55 	bl	80115d0 <get_tmp_nextdir>
 8012f26:	61b8      	str	r0, [r7, #24]
        int tmp_next_move		 = rear;
 8012f28:	2302      	movs	r3, #2
 8012f2a:	623b      	str	r3, [r7, #32]
        t_position next_position = mypos;
 8012f2c:	4ab5      	ldr	r2, [pc, #724]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012f2e:	f107 0310 	add.w	r3, r7, #16
 8012f32:	8811      	ldrh	r1, [r2, #0]
 8012f34:	7892      	ldrb	r2, [r2, #2]
 8012f36:	8019      	strh	r1, [r3, #0]
 8012f38:	709a      	strb	r2, [r3, #2]
        next_position.dir = tmp_next_dir;
 8012f3a:	7cfb      	ldrb	r3, [r7, #19]
 8012f3c:	74bb      	strb	r3, [r7, #18]
        if(is_unknown(mypos.x, mypos.y) == false)
 8012f3e:	4bb1      	ldr	r3, [pc, #708]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	461a      	mov	r2, r3
 8012f44:	4baf      	ldr	r3, [pc, #700]	; (8013204 <search_adachi_zenmen3+0x690>)
 8012f46:	785b      	ldrb	r3, [r3, #1]
 8012f48:	4619      	mov	r1, r3
 8012f4a:	4610      	mov	r0, r2
 8012f4c:	f7fe f8ba 	bl	80110c4 <is_unknown>
 8012f50:	4603      	mov	r3, r0
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d149      	bne.n	8012fea <search_adachi_zenmen3+0x476>
        {
        	next_step_flag = 0x80;
 8012f56:	2380      	movs	r3, #128	; 0x80
 8012f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        	if(i_am_goal(next_position.x,next_position.y,gx,gy,goal_size) == false){
 8012f5c:	7c3b      	ldrb	r3, [r7, #16]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	7c7b      	ldrb	r3, [r7, #17]
 8012f62:	4619      	mov	r1, r3
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	9300      	str	r3, [sp, #0]
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	f7fd fc90 	bl	8010890 <i_am_goal>
 8012f70:	4603      	mov	r3, r0
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d139      	bne.n	8012fea <search_adachi_zenmen3+0x476>
                switch(next_position.dir){
 8012f76:	7cbb      	ldrb	r3, [r7, #18]
 8012f78:	2b04      	cmp	r3, #4
 8012f7a:	d821      	bhi.n	8012fc0 <search_adachi_zenmen3+0x44c>
 8012f7c:	a201      	add	r2, pc, #4	; (adr r2, 8012f84 <search_adachi_zenmen3+0x410>)
 8012f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f82:	bf00      	nop
 8012f84:	08012f99 	.word	0x08012f99
 8012f88:	08012fa3 	.word	0x08012fa3
 8012f8c:	08012fad 	.word	0x08012fad
 8012f90:	08012fb7 	.word	0x08012fb7
 8012f94:	08012fc1 	.word	0x08012fc1
                    case north:
                    	next_position.y++;
 8012f98:	7c7b      	ldrb	r3, [r7, #17]
 8012f9a:	3301      	adds	r3, #1
 8012f9c:	b2db      	uxtb	r3, r3
 8012f9e:	747b      	strb	r3, [r7, #17]
                        break;
 8012fa0:	e00e      	b.n	8012fc0 <search_adachi_zenmen3+0x44c>
                    case east:
                    	next_position.x++;
 8012fa2:	7c3b      	ldrb	r3, [r7, #16]
 8012fa4:	3301      	adds	r3, #1
 8012fa6:	b2db      	uxtb	r3, r3
 8012fa8:	743b      	strb	r3, [r7, #16]
                        break;
 8012faa:	e009      	b.n	8012fc0 <search_adachi_zenmen3+0x44c>
                    case south:
                    	next_position.y--;
 8012fac:	7c7b      	ldrb	r3, [r7, #17]
 8012fae:	3b01      	subs	r3, #1
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	747b      	strb	r3, [r7, #17]
                        break;
 8012fb4:	e004      	b.n	8012fc0 <search_adachi_zenmen3+0x44c>
                    case west:
                    	next_position.x--;
 8012fb6:	7c3b      	ldrb	r3, [r7, #16]
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	b2db      	uxtb	r3, r3
 8012fbc:	743b      	strb	r3, [r7, #16]
                        break;
 8012fbe:	bf00      	nop
                    case center:
                    	break;
                }
                tmp_next_move = get_tmp_nextdir(gx,gy,goal_size,MASK_SEARCH,next_position,&tmp_next_dir,FAR_PRIORITY);
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	9302      	str	r3, [sp, #8]
 8012fc4:	f107 0313 	add.w	r3, r7, #19
 8012fc8:	9301      	str	r3, [sp, #4]
 8012fca:	466b      	mov	r3, sp
 8012fcc:	f107 0210 	add.w	r2, r7, #16
 8012fd0:	6812      	ldr	r2, [r2, #0]
 8012fd2:	4611      	mov	r1, r2
 8012fd4:	8019      	strh	r1, [r3, #0]
 8012fd6:	3302      	adds	r3, #2
 8012fd8:	0c12      	lsrs	r2, r2, #16
 8012fda:	701a      	strb	r2, [r3, #0]
 8012fdc:	2301      	movs	r3, #1
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	68b9      	ldr	r1, [r7, #8]
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f7fe faf4 	bl	80115d0 <get_tmp_nextdir>
 8012fe8:	6238      	str	r0, [r7, #32]
        	}
        }


        switch(direction|next_step_flag){
 8012fea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8012fee:	69fb      	ldr	r3, [r7, #28]
 8012ff0:	4313      	orrs	r3, r2
 8012ff2:	2b03      	cmp	r3, #3
 8012ff4:	f000 83b2 	beq.w	801375c <search_adachi_zenmen3+0xbe8>
 8012ff8:	2b03      	cmp	r3, #3
 8012ffa:	dc09      	bgt.n	8013010 <search_adachi_zenmen3+0x49c>
 8012ffc:	2b01      	cmp	r3, #1
 8012ffe:	f000 81e5 	beq.w	80133cc <search_adachi_zenmen3+0x858>
 8013002:	2b01      	cmp	r3, #1
 8013004:	f300 8574 	bgt.w	8013af0 <search_adachi_zenmen3+0xf7c>
 8013008:	2b00      	cmp	r3, #0
 801300a:	d013      	beq.n	8013034 <search_adachi_zenmen3+0x4c0>
 801300c:	f000 be1a 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
 8013010:	2b81      	cmp	r3, #129	; 0x81
 8013012:	f000 81db 	beq.w	80133cc <search_adachi_zenmen3+0x858>
 8013016:	2b81      	cmp	r3, #129	; 0x81
 8013018:	dc04      	bgt.n	8013024 <search_adachi_zenmen3+0x4b0>
 801301a:	2b80      	cmp	r3, #128	; 0x80
 801301c:	f000 8183 	beq.w	8013326 <search_adachi_zenmen3+0x7b2>
 8013020:	f000 be10 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
 8013024:	2b82      	cmp	r3, #130	; 0x82
 8013026:	f000 8563 	beq.w	8013af0 <search_adachi_zenmen3+0xf7c>
 801302a:	2b83      	cmp	r3, #131	; 0x83
 801302c:	f000 8396 	beq.w	801375c <search_adachi_zenmen3+0xbe8>
 8013030:	f000 be08 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
            case front:
 				Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013034:	eddf 7a74 	vldr	s15, [pc, #464]	; 8013208 <search_adachi_zenmen3+0x694>
 8013038:	ed9f 7a74 	vldr	s14, [pc, #464]	; 801320c <search_adachi_zenmen3+0x698>
 801303c:	eddf 6a74 	vldr	s13, [pc, #464]	; 8013210 <search_adachi_zenmen3+0x69c>
 8013040:	eeb0 1a66 	vmov.f32	s2, s13
 8013044:	eef0 0a47 	vmov.f32	s1, s14
 8013048:	eeb0 0a67 	vmov.f32	s0, s15
 801304c:	f7fb fc54 	bl	800e8f8 <Set_Omega_PID_Gain>
	  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013050:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013054:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8013214 <search_adachi_zenmen3+0x6a0>
 8013058:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8013210 <search_adachi_zenmen3+0x69c>
 801305c:	eeb0 1a66 	vmov.f32	s2, s13
 8013060:	eef0 0a47 	vmov.f32	s1, s14
 8013064:	eeb0 0a67 	vmov.f32	s0, s15
 8013068:	f7fb fc2c 	bl	800e8c4 <Set_Velo_PID_Gain>
	  			wall_controll.is_controll = true;
 801306c:	4b6a      	ldr	r3, [pc, #424]	; (8013218 <search_adachi_zenmen3+0x6a4>)
 801306e:	2201      	movs	r2, #1
 8013070:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	if(sen_r.is_wall == true && ABS(sen_r.distance - 45.0) > 10.0)
 8013074:	4b69      	ldr	r3, [pc, #420]	; (801321c <search_adachi_zenmen3+0x6a8>)
 8013076:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801307a:	2b01      	cmp	r3, #1
 801307c:	f040 808e 	bne.w	801319c <search_adachi_zenmen3+0x628>
 8013080:	4b66      	ldr	r3, [pc, #408]	; (801321c <search_adachi_zenmen3+0x6a8>)
 8013082:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013084:	4618      	mov	r0, r3
 8013086:	f7ed fa7f 	bl	8000588 <__aeabi_f2d>
 801308a:	f04f 0200 	mov.w	r2, #0
 801308e:	4b64      	ldr	r3, [pc, #400]	; (8013220 <search_adachi_zenmen3+0x6ac>)
 8013090:	f7ed f91a 	bl	80002c8 <__aeabi_dsub>
 8013094:	4603      	mov	r3, r0
 8013096:	460c      	mov	r4, r1
 8013098:	4618      	mov	r0, r3
 801309a:	4621      	mov	r1, r4
 801309c:	f04f 0200 	mov.w	r2, #0
 80130a0:	f04f 0300 	mov.w	r3, #0
 80130a4:	f7ed fd3a 	bl	8000b1c <__aeabi_dcmplt>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d016      	beq.n	80130dc <search_adachi_zenmen3+0x568>
 80130ae:	4b5b      	ldr	r3, [pc, #364]	; (801321c <search_adachi_zenmen3+0x6a8>)
 80130b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7ed fa68 	bl	8000588 <__aeabi_f2d>
 80130b8:	f04f 0200 	mov.w	r2, #0
 80130bc:	4b58      	ldr	r3, [pc, #352]	; (8013220 <search_adachi_zenmen3+0x6ac>)
 80130be:	f7ed f903 	bl	80002c8 <__aeabi_dsub>
 80130c2:	4603      	mov	r3, r0
 80130c4:	460c      	mov	r4, r1
 80130c6:	4618      	mov	r0, r3
 80130c8:	4621      	mov	r1, r4
 80130ca:	f04f 0200 	mov.w	r2, #0
 80130ce:	4b55      	ldr	r3, [pc, #340]	; (8013224 <search_adachi_zenmen3+0x6b0>)
 80130d0:	f7ed fd24 	bl	8000b1c <__aeabi_dcmplt>
 80130d4:	4603      	mov	r3, r0
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d116      	bne.n	8013108 <search_adachi_zenmen3+0x594>
 80130da:	e05f      	b.n	801319c <search_adachi_zenmen3+0x628>
 80130dc:	4b4f      	ldr	r3, [pc, #316]	; (801321c <search_adachi_zenmen3+0x6a8>)
 80130de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7ed fa51 	bl	8000588 <__aeabi_f2d>
 80130e6:	f04f 0200 	mov.w	r2, #0
 80130ea:	4b4d      	ldr	r3, [pc, #308]	; (8013220 <search_adachi_zenmen3+0x6ac>)
 80130ec:	f7ed f8ec 	bl	80002c8 <__aeabi_dsub>
 80130f0:	4603      	mov	r3, r0
 80130f2:	460c      	mov	r4, r1
 80130f4:	4618      	mov	r0, r3
 80130f6:	4621      	mov	r1, r4
 80130f8:	f04f 0200 	mov.w	r2, #0
 80130fc:	4b4a      	ldr	r3, [pc, #296]	; (8013228 <search_adachi_zenmen3+0x6b4>)
 80130fe:	f7ed fd2b 	bl	8000b58 <__aeabi_dcmpgt>
 8013102:	4603      	mov	r3, r0
 8013104:	2b00      	cmp	r3, #0
 8013106:	d049      	beq.n	801319c <search_adachi_zenmen3+0x628>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013108:	eddf 7a3f 	vldr	s15, [pc, #252]	; 8013208 <search_adachi_zenmen3+0x694>
 801310c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801320c <search_adachi_zenmen3+0x698>
 8013110:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8013210 <search_adachi_zenmen3+0x69c>
 8013114:	eeb0 1a66 	vmov.f32	s2, s13
 8013118:	eef0 0a47 	vmov.f32	s1, s14
 801311c:	eeb0 0a67 	vmov.f32	s0, s15
 8013120:	f7fb fbea 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013124:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013128:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8013214 <search_adachi_zenmen3+0x6a0>
 801312c:	eddf 6a38 	vldr	s13, [pc, #224]	; 8013210 <search_adachi_zenmen3+0x69c>
 8013130:	eeb0 1a66 	vmov.f32	s2, s13
 8013134:	eef0 0a47 	vmov.f32	s1, s14
 8013138:	eeb0 0a67 	vmov.f32	s0, s15
 801313c:	f7fb fbc2 	bl	800e8c4 <Set_Velo_PID_Gain>
          			search_straight_update_maze_zenmen(HALF_SECTION,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 8013140:	2301      	movs	r3, #1
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	68b9      	ldr	r1, [r7, #8]
 8013146:	68f8      	ldr	r0, [r7, #12]
 8013148:	eddf 1a31 	vldr	s3, [pc, #196]	; 8013210 <search_adachi_zenmen3+0x69c>
 801314c:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8013214 <search_adachi_zenmen3+0x6a0>
 8013150:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8013154:	ed9f 0a35 	vldr	s0, [pc, #212]	; 801322c <search_adachi_zenmen3+0x6b8>
 8013158:	f001 f94e 	bl	80143f8 <search_straight_update_maze_zenmen>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 801315c:	2000      	movs	r0, #0
 801315e:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8013230 <search_adachi_zenmen3+0x6bc>
 8013162:	eddf 0a34 	vldr	s1, [pc, #208]	; 8013234 <search_adachi_zenmen3+0x6c0>
 8013166:	ed9f 0a34 	vldr	s0, [pc, #208]	; 8013238 <search_adachi_zenmen3+0x6c4>
 801316a:	f7fb fed1 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 801316e:	2064      	movs	r0, #100	; 0x64
 8013170:	f7fc ffa2 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8013174:	2001      	movs	r0, #1
 8013176:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8013230 <search_adachi_zenmen3+0x6bc>
 801317a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8013234 <search_adachi_zenmen3+0x6c0>
 801317e:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8013238 <search_adachi_zenmen3+0x6c4>
 8013182:	f7fb fec5 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 8013186:	eddf 1a23 	vldr	s3, [pc, #140]	; 8013214 <search_adachi_zenmen3+0x6a0>
 801318a:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8013214 <search_adachi_zenmen3+0x6a0>
 801318e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013192:	ed9f 0a26 	vldr	s0, [pc, #152]	; 801322c <search_adachi_zenmen3+0x6b8>
 8013196:	f7fb fbe3 	bl	800e960 <straight>
 801319a:	e0c2      	b.n	8013322 <search_adachi_zenmen3+0x7ae>
            	}
            	else if(sen_r.is_wall == true && ABS(sen_r.distance - 45.0) > 10.0)
 801319c:	4b1f      	ldr	r3, [pc, #124]	; (801321c <search_adachi_zenmen3+0x6a8>)
 801319e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80131a2:	2b01      	cmp	r3, #1
 80131a4:	f040 80aa 	bne.w	80132fc <search_adachi_zenmen3+0x788>
 80131a8:	4b1c      	ldr	r3, [pc, #112]	; (801321c <search_adachi_zenmen3+0x6a8>)
 80131aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ed f9eb 	bl	8000588 <__aeabi_f2d>
 80131b2:	f04f 0200 	mov.w	r2, #0
 80131b6:	4b1a      	ldr	r3, [pc, #104]	; (8013220 <search_adachi_zenmen3+0x6ac>)
 80131b8:	f7ed f886 	bl	80002c8 <__aeabi_dsub>
 80131bc:	4603      	mov	r3, r0
 80131be:	460c      	mov	r4, r1
 80131c0:	4618      	mov	r0, r3
 80131c2:	4621      	mov	r1, r4
 80131c4:	f04f 0200 	mov.w	r2, #0
 80131c8:	f04f 0300 	mov.w	r3, #0
 80131cc:	f7ed fca6 	bl	8000b1c <__aeabi_dcmplt>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d032      	beq.n	801323c <search_adachi_zenmen3+0x6c8>
 80131d6:	4b11      	ldr	r3, [pc, #68]	; (801321c <search_adachi_zenmen3+0x6a8>)
 80131d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80131da:	4618      	mov	r0, r3
 80131dc:	f7ed f9d4 	bl	8000588 <__aeabi_f2d>
 80131e0:	f04f 0200 	mov.w	r2, #0
 80131e4:	4b0e      	ldr	r3, [pc, #56]	; (8013220 <search_adachi_zenmen3+0x6ac>)
 80131e6:	f7ed f86f 	bl	80002c8 <__aeabi_dsub>
 80131ea:	4603      	mov	r3, r0
 80131ec:	460c      	mov	r4, r1
 80131ee:	4618      	mov	r0, r3
 80131f0:	4621      	mov	r1, r4
 80131f2:	f04f 0200 	mov.w	r2, #0
 80131f6:	4b0b      	ldr	r3, [pc, #44]	; (8013224 <search_adachi_zenmen3+0x6b0>)
 80131f8:	f7ed fc90 	bl	8000b1c <__aeabi_dcmplt>
 80131fc:	4603      	mov	r3, r0
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d132      	bne.n	8013268 <search_adachi_zenmen3+0x6f4>
 8013202:	e07b      	b.n	80132fc <search_adachi_zenmen3+0x788>
 8013204:	20000afc 	.word	0x20000afc
 8013208:	3f19999a 	.word	0x3f19999a
 801320c:	3c23d70a 	.word	0x3c23d70a
 8013210:	00000000 	.word	0x00000000
 8013214:	3e99999a 	.word	0x3e99999a
 8013218:	20000aac 	.word	0x20000aac
 801321c:	2001b5e4 	.word	0x2001b5e4
 8013220:	40468000 	.word	0x40468000
 8013224:	c0240000 	.word	0xc0240000
 8013228:	40240000 	.word	0x40240000
 801322c:	42340000 	.word	0x42340000
 8013230:	41490fda 	.word	0x41490fda
 8013234:	431d1462 	.word	0x431d1462
 8013238:	3fc90fda 	.word	0x3fc90fda
 801323c:	4bd7      	ldr	r3, [pc, #860]	; (801359c <search_adachi_zenmen3+0xa28>)
 801323e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013240:	4618      	mov	r0, r3
 8013242:	f7ed f9a1 	bl	8000588 <__aeabi_f2d>
 8013246:	f04f 0200 	mov.w	r2, #0
 801324a:	4bd5      	ldr	r3, [pc, #852]	; (80135a0 <search_adachi_zenmen3+0xa2c>)
 801324c:	f7ed f83c 	bl	80002c8 <__aeabi_dsub>
 8013250:	4603      	mov	r3, r0
 8013252:	460c      	mov	r4, r1
 8013254:	4618      	mov	r0, r3
 8013256:	4621      	mov	r1, r4
 8013258:	f04f 0200 	mov.w	r2, #0
 801325c:	4bd1      	ldr	r3, [pc, #836]	; (80135a4 <search_adachi_zenmen3+0xa30>)
 801325e:	f7ed fc7b 	bl	8000b58 <__aeabi_dcmpgt>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d049      	beq.n	80132fc <search_adachi_zenmen3+0x788>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013268:	eddf 7acf 	vldr	s15, [pc, #828]	; 80135a8 <search_adachi_zenmen3+0xa34>
 801326c:	ed9f 7acf 	vldr	s14, [pc, #828]	; 80135ac <search_adachi_zenmen3+0xa38>
 8013270:	eddf 6acf 	vldr	s13, [pc, #828]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 8013274:	eeb0 1a66 	vmov.f32	s2, s13
 8013278:	eef0 0a47 	vmov.f32	s1, s14
 801327c:	eeb0 0a67 	vmov.f32	s0, s15
 8013280:	f7fb fb3a 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013284:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013288:	ed9f 7aca 	vldr	s14, [pc, #808]	; 80135b4 <search_adachi_zenmen3+0xa40>
 801328c:	eddf 6ac8 	vldr	s13, [pc, #800]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 8013290:	eeb0 1a66 	vmov.f32	s2, s13
 8013294:	eef0 0a47 	vmov.f32	s1, s14
 8013298:	eeb0 0a67 	vmov.f32	s0, s15
 801329c:	f7fb fb12 	bl	800e8c4 <Set_Velo_PID_Gain>
          			search_straight_update_maze_zenmen(HALF_SECTION,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 80132a0:	2301      	movs	r3, #1
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	68b9      	ldr	r1, [r7, #8]
 80132a6:	68f8      	ldr	r0, [r7, #12]
 80132a8:	eddf 1ac1 	vldr	s3, [pc, #772]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 80132ac:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 80135b4 <search_adachi_zenmen3+0xa40>
 80132b0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80132b4:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 80135b8 <search_adachi_zenmen3+0xa44>
 80132b8:	f001 f89e 	bl	80143f8 <search_straight_update_maze_zenmen>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 80132bc:	2000      	movs	r0, #0
 80132be:	ed9f 1abf 	vldr	s2, [pc, #764]	; 80135bc <search_adachi_zenmen3+0xa48>
 80132c2:	eddf 0abf 	vldr	s1, [pc, #764]	; 80135c0 <search_adachi_zenmen3+0xa4c>
 80132c6:	ed9f 0abf 	vldr	s0, [pc, #764]	; 80135c4 <search_adachi_zenmen3+0xa50>
 80132ca:	f7fb fe21 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 80132ce:	2064      	movs	r0, #100	; 0x64
 80132d0:	f7fc fef2 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 80132d4:	2001      	movs	r0, #1
 80132d6:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 80135bc <search_adachi_zenmen3+0xa48>
 80132da:	eddf 0ab9 	vldr	s1, [pc, #740]	; 80135c0 <search_adachi_zenmen3+0xa4c>
 80132de:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80135c4 <search_adachi_zenmen3+0xa50>
 80132e2:	f7fb fe15 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 80132e6:	eddf 1ab3 	vldr	s3, [pc, #716]	; 80135b4 <search_adachi_zenmen3+0xa40>
 80132ea:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 80135b4 <search_adachi_zenmen3+0xa40>
 80132ee:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80132f2:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80135b8 <search_adachi_zenmen3+0xa44>
 80132f6:	f7fb fb33 	bl	800e960 <straight>
 80132fa:	e012      	b.n	8013322 <search_adachi_zenmen3+0x7ae>
            	}
            	else
            	{
            		search_straight_update_maze_zenmen(SECTION,5.0,target.velo,0.3,gx,gy,goal_size,MASK_SEARCH);
 80132fc:	4bb2      	ldr	r3, [pc, #712]	; (80135c8 <search_adachi_zenmen3+0xa54>)
 80132fe:	edd3 7a00 	vldr	s15, [r3]
 8013302:	2301      	movs	r3, #1
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	68b9      	ldr	r1, [r7, #8]
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80135b4 <search_adachi_zenmen3+0xa40>
 801330e:	eeb0 1a67 	vmov.f32	s2, s15
 8013312:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8013316:	ed9f 0aad 	vldr	s0, [pc, #692]	; 80135cc <search_adachi_zenmen3+0xa58>
 801331a:	f001 f86d 	bl	80143f8 <search_straight_update_maze_zenmen>
            	}
	  			break;
 801331e:	f000 bc91 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
 8013322:	f000 bc8f 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
            case (front|0x80):
 				Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013326:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80135a8 <search_adachi_zenmen3+0xa34>
 801332a:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 80135ac <search_adachi_zenmen3+0xa38>
 801332e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 8013332:	eeb0 1a66 	vmov.f32	s2, s13
 8013336:	eef0 0a47 	vmov.f32	s1, s14
 801333a:	eeb0 0a67 	vmov.f32	s0, s15
 801333e:	f7fb fadb 	bl	800e8f8 <Set_Omega_PID_Gain>
	  			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013342:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013346:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80135b4 <search_adachi_zenmen3+0xa40>
 801334a:	eddf 6a99 	vldr	s13, [pc, #612]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 801334e:	eeb0 1a66 	vmov.f32	s2, s13
 8013352:	eef0 0a47 	vmov.f32	s1, s14
 8013356:	eeb0 0a67 	vmov.f32	s0, s15
 801335a:	f7fb fab3 	bl	800e8c4 <Set_Velo_PID_Gain>
	  			wall_controll.is_controll = true;
 801335e:	4b9c      	ldr	r3, [pc, #624]	; (80135d0 <search_adachi_zenmen3+0xa5c>)
 8013360:	2201      	movs	r2, #1
 8013362:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  			if(next_move_known_next == front && (tmp_next_move == front && is_unknown(next_position.x, next_position.y) == false)) search_straight_update_maze_zenmen(SECTION,5.0,0.6,0.6,gx,gy,goal_size,MASK_SEARCH);
 8013366:	69bb      	ldr	r3, [r7, #24]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d11c      	bne.n	80133a6 <search_adachi_zenmen3+0x832>
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d119      	bne.n	80133a6 <search_adachi_zenmen3+0x832>
 8013372:	7c3b      	ldrb	r3, [r7, #16]
 8013374:	461a      	mov	r2, r3
 8013376:	7c7b      	ldrb	r3, [r7, #17]
 8013378:	4619      	mov	r1, r3
 801337a:	4610      	mov	r0, r2
 801337c:	f7fd fea2 	bl	80110c4 <is_unknown>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d10f      	bne.n	80133a6 <search_adachi_zenmen3+0x832>
 8013386:	2301      	movs	r3, #1
 8013388:	687a      	ldr	r2, [r7, #4]
 801338a:	68b9      	ldr	r1, [r7, #8]
 801338c:	68f8      	ldr	r0, [r7, #12]
 801338e:	eddf 1a86 	vldr	s3, [pc, #536]	; 80135a8 <search_adachi_zenmen3+0xa34>
 8013392:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80135a8 <search_adachi_zenmen3+0xa34>
 8013396:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 801339a:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80135cc <search_adachi_zenmen3+0xa58>
 801339e:	f001 f82b 	bl	80143f8 <search_straight_update_maze_zenmen>
	  			else							 							search_straight_update_maze_zenmen(SECTION,5.0,target.velo,0.3,gx,gy,goal_size,MASK_SEARCH);
            	break;
 80133a2:	f000 bc4f 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
	  			else							 							search_straight_update_maze_zenmen(SECTION,5.0,target.velo,0.3,gx,gy,goal_size,MASK_SEARCH);
 80133a6:	4b88      	ldr	r3, [pc, #544]	; (80135c8 <search_adachi_zenmen3+0xa54>)
 80133a8:	edd3 7a00 	vldr	s15, [r3]
 80133ac:	2301      	movs	r3, #1
 80133ae:	687a      	ldr	r2, [r7, #4]
 80133b0:	68b9      	ldr	r1, [r7, #8]
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	eddf 1a7f 	vldr	s3, [pc, #508]	; 80135b4 <search_adachi_zenmen3+0xa40>
 80133b8:	eeb0 1a67 	vmov.f32	s2, s15
 80133bc:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80133c0:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80135cc <search_adachi_zenmen3+0xa58>
 80133c4:	f001 f818 	bl	80143f8 <search_straight_update_maze_zenmen>
            	break;
 80133c8:	f000 bc3c 	b.w	8013c44 <search_adachi_zenmen3+0x10d0>
            case right:
            case (right|0x80):
 				wall_controll.is_controll = true;
 80133cc:	4b80      	ldr	r3, [pc, #512]	; (80135d0 <search_adachi_zenmen3+0xa5c>)
 80133ce:	2201      	movs	r2, #1
 80133d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	if(90.0 - (sen_fr.distance + sen_fl.distance)/2.0 > slalom_R90_table.Lstart || ((sen_fr.distance + sen_fl.distance)/2.0 < 110.0 && ABS(sen_fr.distance - sen_fl.distance) > 5.0))
 80133d4:	4b7f      	ldr	r3, [pc, #508]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 80133d6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80133da:	4b7f      	ldr	r3, [pc, #508]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 80133dc:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80133e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133e4:	ee17 0a90 	vmov	r0, s15
 80133e8:	f7ed f8ce 	bl	8000588 <__aeabi_f2d>
 80133ec:	f04f 0200 	mov.w	r2, #0
 80133f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80133f4:	f7ed fa4a 	bl	800088c <__aeabi_ddiv>
 80133f8:	4603      	mov	r3, r0
 80133fa:	460c      	mov	r4, r1
 80133fc:	461a      	mov	r2, r3
 80133fe:	4623      	mov	r3, r4
 8013400:	f04f 0000 	mov.w	r0, #0
 8013404:	4975      	ldr	r1, [pc, #468]	; (80135dc <search_adachi_zenmen3+0xa68>)
 8013406:	f7ec ff5f 	bl	80002c8 <__aeabi_dsub>
 801340a:	4603      	mov	r3, r0
 801340c:	460c      	mov	r4, r1
 801340e:	4625      	mov	r5, r4
 8013410:	461c      	mov	r4, r3
 8013412:	4b73      	ldr	r3, [pc, #460]	; (80135e0 <search_adachi_zenmen3+0xa6c>)
 8013414:	4618      	mov	r0, r3
 8013416:	f7ed f8b7 	bl	8000588 <__aeabi_f2d>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	4620      	mov	r0, r4
 8013420:	4629      	mov	r1, r5
 8013422:	f7ed fb99 	bl	8000b58 <__aeabi_dcmpgt>
 8013426:	4603      	mov	r3, r0
 8013428:	2b00      	cmp	r3, #0
 801342a:	d14b      	bne.n	80134c4 <search_adachi_zenmen3+0x950>
 801342c:	4b69      	ldr	r3, [pc, #420]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 801342e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8013432:	4b69      	ldr	r3, [pc, #420]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 8013434:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013438:	ee77 7a27 	vadd.f32	s15, s14, s15
 801343c:	ee17 0a90 	vmov	r0, s15
 8013440:	f7ed f8a2 	bl	8000588 <__aeabi_f2d>
 8013444:	f04f 0200 	mov.w	r2, #0
 8013448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801344c:	f7ed fa1e 	bl	800088c <__aeabi_ddiv>
 8013450:	4603      	mov	r3, r0
 8013452:	460c      	mov	r4, r1
 8013454:	4618      	mov	r0, r3
 8013456:	4621      	mov	r1, r4
 8013458:	f04f 0200 	mov.w	r2, #0
 801345c:	4b61      	ldr	r3, [pc, #388]	; (80135e4 <search_adachi_zenmen3+0xa70>)
 801345e:	f7ed fb5d 	bl	8000b1c <__aeabi_dcmplt>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	f000 80bf 	beq.w	80135e8 <search_adachi_zenmen3+0xa74>
 801346a:	4b5a      	ldr	r3, [pc, #360]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 801346c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8013470:	4b59      	ldr	r3, [pc, #356]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 8013472:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801347a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801347e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013482:	d50f      	bpl.n	80134a4 <search_adachi_zenmen3+0x930>
 8013484:	4b53      	ldr	r3, [pc, #332]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 8013486:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801348a:	4b53      	ldr	r3, [pc, #332]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 801348c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013494:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8013498:	eef4 7ac7 	vcmpe.f32	s15, s14
 801349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134a0:	d410      	bmi.n	80134c4 <search_adachi_zenmen3+0x950>
 80134a2:	e0a1      	b.n	80135e8 <search_adachi_zenmen3+0xa74>
 80134a4:	4b4b      	ldr	r3, [pc, #300]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 80134a6:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80134aa:	4b4b      	ldr	r3, [pc, #300]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 80134ac:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80134b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134b4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80134b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80134bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c0:	f340 8092 	ble.w	80135e8 <search_adachi_zenmen3+0xa74>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 80134c4:	eddf 7a38 	vldr	s15, [pc, #224]	; 80135a8 <search_adachi_zenmen3+0xa34>
 80134c8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80135ac <search_adachi_zenmen3+0xa38>
 80134cc:	eddf 6a38 	vldr	s13, [pc, #224]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 80134d0:	eeb0 1a66 	vmov.f32	s2, s13
 80134d4:	eef0 0a47 	vmov.f32	s1, s14
 80134d8:	eeb0 0a67 	vmov.f32	s0, s15
 80134dc:	f7fb fa0c 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 80134e0:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80134e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80135b4 <search_adachi_zenmen3+0xa40>
 80134e8:	eddf 6a31 	vldr	s13, [pc, #196]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 80134ec:	eeb0 1a66 	vmov.f32	s2, s13
 80134f0:	eef0 0a47 	vmov.f32	s1, s14
 80134f4:	eeb0 0a67 	vmov.f32	s0, s15
 80134f8:	f7fb f9e4 	bl	800e8c4 <Set_Velo_PID_Gain>
            		//straight(HALF_SECTION,4.0,0.3,0.0);
          			search_straight_update_maze_zenmen(HALF_SECTION - (90.0 - (sen_fr.distance + sen_fl.distance)/2.0) ,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 80134fc:	4b35      	ldr	r3, [pc, #212]	; (80135d4 <search_adachi_zenmen3+0xa60>)
 80134fe:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8013502:	4b35      	ldr	r3, [pc, #212]	; (80135d8 <search_adachi_zenmen3+0xa64>)
 8013504:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013508:	ee77 7a27 	vadd.f32	s15, s14, s15
 801350c:	ee17 0a90 	vmov	r0, s15
 8013510:	f7ed f83a 	bl	8000588 <__aeabi_f2d>
 8013514:	f04f 0200 	mov.w	r2, #0
 8013518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801351c:	f7ed f9b6 	bl	800088c <__aeabi_ddiv>
 8013520:	4603      	mov	r3, r0
 8013522:	460c      	mov	r4, r1
 8013524:	461a      	mov	r2, r3
 8013526:	4623      	mov	r3, r4
 8013528:	f04f 0000 	mov.w	r0, #0
 801352c:	492b      	ldr	r1, [pc, #172]	; (80135dc <search_adachi_zenmen3+0xa68>)
 801352e:	f7ec fecb 	bl	80002c8 <__aeabi_dsub>
 8013532:	4603      	mov	r3, r0
 8013534:	460c      	mov	r4, r1
 8013536:	461a      	mov	r2, r3
 8013538:	4623      	mov	r3, r4
 801353a:	f04f 0000 	mov.w	r0, #0
 801353e:	4918      	ldr	r1, [pc, #96]	; (80135a0 <search_adachi_zenmen3+0xa2c>)
 8013540:	f7ec fec2 	bl	80002c8 <__aeabi_dsub>
 8013544:	4603      	mov	r3, r0
 8013546:	460c      	mov	r4, r1
 8013548:	4618      	mov	r0, r3
 801354a:	4621      	mov	r1, r4
 801354c:	f7ed fb6c 	bl	8000c28 <__aeabi_d2f>
 8013550:	4604      	mov	r4, r0
 8013552:	2301      	movs	r3, #1
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	68b9      	ldr	r1, [r7, #8]
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	eddf 1a15 	vldr	s3, [pc, #84]	; 80135b0 <search_adachi_zenmen3+0xa3c>
 801355e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80135b4 <search_adachi_zenmen3+0xa40>
 8013562:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8013566:	ee00 4a10 	vmov	s0, r4
 801356a:	f000 ff45 	bl	80143f8 <search_straight_update_maze_zenmen>
          			set_stop_wall(100);
 801356e:	2064      	movs	r0, #100	; 0x64
 8013570:	f7fc fda2 	bl	80100b8 <set_stop_wall>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 8013574:	2000      	movs	r0, #0
 8013576:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80135bc <search_adachi_zenmen3+0xa48>
 801357a:	eddf 0a11 	vldr	s1, [pc, #68]	; 80135c0 <search_adachi_zenmen3+0xa4c>
 801357e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80135c4 <search_adachi_zenmen3+0xa50>
 8013582:	f7fb fcc5 	bl	800ef10 <Spin_turn>
            		straight(HALF_SECTION,4.0,0.3,0.3);
 8013586:	eddf 1a0b 	vldr	s3, [pc, #44]	; 80135b4 <search_adachi_zenmen3+0xa40>
 801358a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80135b4 <search_adachi_zenmen3+0xa40>
 801358e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013592:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80135b8 <search_adachi_zenmen3+0xa44>
 8013596:	f7fb f9e3 	bl	800e960 <straight>
 801359a:	e0de      	b.n	801375a <search_adachi_zenmen3+0xbe6>
 801359c:	2001b5e4 	.word	0x2001b5e4
 80135a0:	40468000 	.word	0x40468000
 80135a4:	40240000 	.word	0x40240000
 80135a8:	3f19999a 	.word	0x3f19999a
 80135ac:	3c23d70a 	.word	0x3c23d70a
 80135b0:	00000000 	.word	0x00000000
 80135b4:	3e99999a 	.word	0x3e99999a
 80135b8:	42340000 	.word	0x42340000
 80135bc:	41490fda 	.word	0x41490fda
 80135c0:	431d1462 	.word	0x431d1462
 80135c4:	3fc90fda 	.word	0x3fc90fda
 80135c8:	2001b6a0 	.word	0x2001b6a0
 80135cc:	42b40000 	.word	0x42b40000
 80135d0:	20000aac 	.word	0x20000aac
 80135d4:	200098a0 	.word	0x200098a0
 80135d8:	20009914 	.word	0x20009914
 80135dc:	40568000 	.word	0x40568000
 80135e0:	416b851f 	.word	0x416b851f
 80135e4:	405b8000 	.word	0x405b8000
            	}
            	else if(sen_l.is_wall == true && ABS(sen_l.distance - 45.0) > 10.0)
 80135e8:	4bd0      	ldr	r3, [pc, #832]	; (801392c <search_adachi_zenmen3+0xdb8>)
 80135ea:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80135ee:	2b01      	cmp	r3, #1
 80135f0:	f040 808e 	bne.w	8013710 <search_adachi_zenmen3+0xb9c>
 80135f4:	4bcd      	ldr	r3, [pc, #820]	; (801392c <search_adachi_zenmen3+0xdb8>)
 80135f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7ec ffc5 	bl	8000588 <__aeabi_f2d>
 80135fe:	f04f 0200 	mov.w	r2, #0
 8013602:	4bcb      	ldr	r3, [pc, #812]	; (8013930 <search_adachi_zenmen3+0xdbc>)
 8013604:	f7ec fe60 	bl	80002c8 <__aeabi_dsub>
 8013608:	4603      	mov	r3, r0
 801360a:	460c      	mov	r4, r1
 801360c:	4618      	mov	r0, r3
 801360e:	4621      	mov	r1, r4
 8013610:	f04f 0200 	mov.w	r2, #0
 8013614:	f04f 0300 	mov.w	r3, #0
 8013618:	f7ed fa80 	bl	8000b1c <__aeabi_dcmplt>
 801361c:	4603      	mov	r3, r0
 801361e:	2b00      	cmp	r3, #0
 8013620:	d016      	beq.n	8013650 <search_adachi_zenmen3+0xadc>
 8013622:	4bc2      	ldr	r3, [pc, #776]	; (801392c <search_adachi_zenmen3+0xdb8>)
 8013624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013626:	4618      	mov	r0, r3
 8013628:	f7ec ffae 	bl	8000588 <__aeabi_f2d>
 801362c:	f04f 0200 	mov.w	r2, #0
 8013630:	4bbf      	ldr	r3, [pc, #764]	; (8013930 <search_adachi_zenmen3+0xdbc>)
 8013632:	f7ec fe49 	bl	80002c8 <__aeabi_dsub>
 8013636:	4603      	mov	r3, r0
 8013638:	460c      	mov	r4, r1
 801363a:	4618      	mov	r0, r3
 801363c:	4621      	mov	r1, r4
 801363e:	f04f 0200 	mov.w	r2, #0
 8013642:	4bbc      	ldr	r3, [pc, #752]	; (8013934 <search_adachi_zenmen3+0xdc0>)
 8013644:	f7ed fa6a 	bl	8000b1c <__aeabi_dcmplt>
 8013648:	4603      	mov	r3, r0
 801364a:	2b00      	cmp	r3, #0
 801364c:	d116      	bne.n	801367c <search_adachi_zenmen3+0xb08>
 801364e:	e05f      	b.n	8013710 <search_adachi_zenmen3+0xb9c>
 8013650:	4bb6      	ldr	r3, [pc, #728]	; (801392c <search_adachi_zenmen3+0xdb8>)
 8013652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013654:	4618      	mov	r0, r3
 8013656:	f7ec ff97 	bl	8000588 <__aeabi_f2d>
 801365a:	f04f 0200 	mov.w	r2, #0
 801365e:	4bb4      	ldr	r3, [pc, #720]	; (8013930 <search_adachi_zenmen3+0xdbc>)
 8013660:	f7ec fe32 	bl	80002c8 <__aeabi_dsub>
 8013664:	4603      	mov	r3, r0
 8013666:	460c      	mov	r4, r1
 8013668:	4618      	mov	r0, r3
 801366a:	4621      	mov	r1, r4
 801366c:	f04f 0200 	mov.w	r2, #0
 8013670:	4bb1      	ldr	r3, [pc, #708]	; (8013938 <search_adachi_zenmen3+0xdc4>)
 8013672:	f7ed fa71 	bl	8000b58 <__aeabi_dcmpgt>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d049      	beq.n	8013710 <search_adachi_zenmen3+0xb9c>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 801367c:	eddf 7aaf 	vldr	s15, [pc, #700]	; 801393c <search_adachi_zenmen3+0xdc8>
 8013680:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8013940 <search_adachi_zenmen3+0xdcc>
 8013684:	eddf 6aaf 	vldr	s13, [pc, #700]	; 8013944 <search_adachi_zenmen3+0xdd0>
 8013688:	eeb0 1a66 	vmov.f32	s2, s13
 801368c:	eef0 0a47 	vmov.f32	s1, s14
 8013690:	eeb0 0a67 	vmov.f32	s0, s15
 8013694:	f7fb f930 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013698:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 801369c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8013948 <search_adachi_zenmen3+0xdd4>
 80136a0:	eddf 6aa8 	vldr	s13, [pc, #672]	; 8013944 <search_adachi_zenmen3+0xdd0>
 80136a4:	eeb0 1a66 	vmov.f32	s2, s13
 80136a8:	eef0 0a47 	vmov.f32	s1, s14
 80136ac:	eeb0 0a67 	vmov.f32	s0, s15
 80136b0:	f7fb f908 	bl	800e8c4 <Set_Velo_PID_Gain>
          			search_straight_update_maze_zenmen(HALF_SECTION,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 80136b4:	2301      	movs	r3, #1
 80136b6:	687a      	ldr	r2, [r7, #4]
 80136b8:	68b9      	ldr	r1, [r7, #8]
 80136ba:	68f8      	ldr	r0, [r7, #12]
 80136bc:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8013944 <search_adachi_zenmen3+0xdd0>
 80136c0:	ed9f 1aa1 	vldr	s2, [pc, #644]	; 8013948 <search_adachi_zenmen3+0xdd4>
 80136c4:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80136c8:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 801394c <search_adachi_zenmen3+0xdd8>
 80136cc:	f000 fe94 	bl	80143f8 <search_straight_update_maze_zenmen>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 80136d0:	2001      	movs	r0, #1
 80136d2:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8013950 <search_adachi_zenmen3+0xddc>
 80136d6:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8013954 <search_adachi_zenmen3+0xde0>
 80136da:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8013958 <search_adachi_zenmen3+0xde4>
 80136de:	f7fb fc17 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 80136e2:	2064      	movs	r0, #100	; 0x64
 80136e4:	f7fc fce8 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_right);
 80136e8:	2000      	movs	r0, #0
 80136ea:	ed9f 1a99 	vldr	s2, [pc, #612]	; 8013950 <search_adachi_zenmen3+0xddc>
 80136ee:	eddf 0a99 	vldr	s1, [pc, #612]	; 8013954 <search_adachi_zenmen3+0xde0>
 80136f2:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 801395c <search_adachi_zenmen3+0xde8>
 80136f6:	f7fb fc0b 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 80136fa:	eddf 1a93 	vldr	s3, [pc, #588]	; 8013948 <search_adachi_zenmen3+0xdd4>
 80136fe:	ed9f 1a92 	vldr	s2, [pc, #584]	; 8013948 <search_adachi_zenmen3+0xdd4>
 8013702:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013706:	ed9f 0a91 	vldr	s0, [pc, #580]	; 801394c <search_adachi_zenmen3+0xdd8>
 801370a:	f7fb f929 	bl	800e960 <straight>
 801370e:	e024      	b.n	801375a <search_adachi_zenmen3+0xbe6>
            	}
            	else{
            		//search_turn90_table(&param_R90_search);
        			search_turn90_table_update_maze_zenmen(&param_R90_search, gx, gy, goal_size, MASK_SEARCH);
 8013710:	2301      	movs	r3, #1
 8013712:	9300      	str	r3, [sp, #0]
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	68ba      	ldr	r2, [r7, #8]
 8013718:	68f9      	ldr	r1, [r7, #12]
 801371a:	4891      	ldr	r0, [pc, #580]	; (8013960 <search_adachi_zenmen3+0xdec>)
 801371c:	f001 f86a 	bl	80147f4 <search_turn90_table_update_maze_zenmen>
            		Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013720:	eddf 7a86 	vldr	s15, [pc, #536]	; 801393c <search_adachi_zenmen3+0xdc8>
 8013724:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8013940 <search_adachi_zenmen3+0xdcc>
 8013728:	eddf 6a86 	vldr	s13, [pc, #536]	; 8013944 <search_adachi_zenmen3+0xdd0>
 801372c:	eeb0 1a66 	vmov.f32	s2, s13
 8013730:	eef0 0a47 	vmov.f32	s1, s14
 8013734:	eeb0 0a67 	vmov.f32	s0, s15
 8013738:	f7fb f8de 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 801373c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013740:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8013948 <search_adachi_zenmen3+0xdd4>
 8013744:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8013944 <search_adachi_zenmen3+0xdd0>
 8013748:	eeb0 1a66 	vmov.f32	s2, s13
 801374c:	eef0 0a47 	vmov.f32	s1, s14
 8013750:	eeb0 0a67 	vmov.f32	s0, s15
 8013754:	f7fb f8b6 	bl	800e8c4 <Set_Velo_PID_Gain>
            	}
            	break;
 8013758:	e274      	b.n	8013c44 <search_adachi_zenmen3+0x10d0>
 801375a:	e273      	b.n	8013c44 <search_adachi_zenmen3+0x10d0>
            case left:
            case (left|0x80):

            	wall_controll.is_controll = true;
 801375c:	4b81      	ldr	r3, [pc, #516]	; (8013964 <search_adachi_zenmen3+0xdf0>)
 801375e:	2201      	movs	r2, #1
 8013760:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	if(90.0 - (sen_fr.distance + sen_fl.distance)/2.0 > slalom_L90_table.Lstart  || ((sen_fr.distance + sen_fl.distance)/2.0 < 110.0 && ABS(sen_fr.distance - sen_fl.distance) > 5.0))
 8013764:	4b80      	ldr	r3, [pc, #512]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 8013766:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801376a:	4b80      	ldr	r3, [pc, #512]	; (801396c <search_adachi_zenmen3+0xdf8>)
 801376c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013774:	ee17 0a90 	vmov	r0, s15
 8013778:	f7ec ff06 	bl	8000588 <__aeabi_f2d>
 801377c:	f04f 0200 	mov.w	r2, #0
 8013780:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013784:	f7ed f882 	bl	800088c <__aeabi_ddiv>
 8013788:	4603      	mov	r3, r0
 801378a:	460c      	mov	r4, r1
 801378c:	461a      	mov	r2, r3
 801378e:	4623      	mov	r3, r4
 8013790:	f04f 0000 	mov.w	r0, #0
 8013794:	4976      	ldr	r1, [pc, #472]	; (8013970 <search_adachi_zenmen3+0xdfc>)
 8013796:	f7ec fd97 	bl	80002c8 <__aeabi_dsub>
 801379a:	4603      	mov	r3, r0
 801379c:	460c      	mov	r4, r1
 801379e:	4625      	mov	r5, r4
 80137a0:	461c      	mov	r4, r3
 80137a2:	4b74      	ldr	r3, [pc, #464]	; (8013974 <search_adachi_zenmen3+0xe00>)
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7ec feef 	bl	8000588 <__aeabi_f2d>
 80137aa:	4602      	mov	r2, r0
 80137ac:	460b      	mov	r3, r1
 80137ae:	4620      	mov	r0, r4
 80137b0:	4629      	mov	r1, r5
 80137b2:	f7ed f9d1 	bl	8000b58 <__aeabi_dcmpgt>
 80137b6:	4603      	mov	r3, r0
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d14b      	bne.n	8013854 <search_adachi_zenmen3+0xce0>
 80137bc:	4b6a      	ldr	r3, [pc, #424]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 80137be:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80137c2:	4b6a      	ldr	r3, [pc, #424]	; (801396c <search_adachi_zenmen3+0xdf8>)
 80137c4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80137c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137cc:	ee17 0a90 	vmov	r0, s15
 80137d0:	f7ec feda 	bl	8000588 <__aeabi_f2d>
 80137d4:	f04f 0200 	mov.w	r2, #0
 80137d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80137dc:	f7ed f856 	bl	800088c <__aeabi_ddiv>
 80137e0:	4603      	mov	r3, r0
 80137e2:	460c      	mov	r4, r1
 80137e4:	4618      	mov	r0, r3
 80137e6:	4621      	mov	r1, r4
 80137e8:	f04f 0200 	mov.w	r2, #0
 80137ec:	4b62      	ldr	r3, [pc, #392]	; (8013978 <search_adachi_zenmen3+0xe04>)
 80137ee:	f7ed f995 	bl	8000b1c <__aeabi_dcmplt>
 80137f2:	4603      	mov	r3, r0
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	f000 80c1 	beq.w	801397c <search_adachi_zenmen3+0xe08>
 80137fa:	4b5b      	ldr	r3, [pc, #364]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 80137fc:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8013800:	4b5a      	ldr	r3, [pc, #360]	; (801396c <search_adachi_zenmen3+0xdf8>)
 8013802:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013806:	ee77 7a67 	vsub.f32	s15, s14, s15
 801380a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013812:	d50f      	bpl.n	8013834 <search_adachi_zenmen3+0xcc0>
 8013814:	4b54      	ldr	r3, [pc, #336]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 8013816:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801381a:	4b54      	ldr	r3, [pc, #336]	; (801396c <search_adachi_zenmen3+0xdf8>)
 801381c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013824:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8013828:	eef4 7ac7 	vcmpe.f32	s15, s14
 801382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013830:	d410      	bmi.n	8013854 <search_adachi_zenmen3+0xce0>
 8013832:	e0a3      	b.n	801397c <search_adachi_zenmen3+0xe08>
 8013834:	4b4c      	ldr	r3, [pc, #304]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 8013836:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801383a:	4b4c      	ldr	r3, [pc, #304]	; (801396c <search_adachi_zenmen3+0xdf8>)
 801383c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013844:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8013848:	eef4 7ac7 	vcmpe.f32	s15, s14
 801384c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013850:	f340 8094 	ble.w	801397c <search_adachi_zenmen3+0xe08>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013854:	eddf 7a39 	vldr	s15, [pc, #228]	; 801393c <search_adachi_zenmen3+0xdc8>
 8013858:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8013940 <search_adachi_zenmen3+0xdcc>
 801385c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8013944 <search_adachi_zenmen3+0xdd0>
 8013860:	eeb0 1a66 	vmov.f32	s2, s13
 8013864:	eef0 0a47 	vmov.f32	s1, s14
 8013868:	eeb0 0a67 	vmov.f32	s0, s15
 801386c:	f7fb f844 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013870:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013874:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8013948 <search_adachi_zenmen3+0xdd4>
 8013878:	eddf 6a32 	vldr	s13, [pc, #200]	; 8013944 <search_adachi_zenmen3+0xdd0>
 801387c:	eeb0 1a66 	vmov.f32	s2, s13
 8013880:	eef0 0a47 	vmov.f32	s1, s14
 8013884:	eeb0 0a67 	vmov.f32	s0, s15
 8013888:	f7fb f81c 	bl	800e8c4 <Set_Velo_PID_Gain>
            		//straight(HALF_SECTION,4.0,0.3,0.0);
          			search_straight_update_maze_zenmen(HALF_SECTION - (90.0 - (sen_fr.distance + sen_fl.distance)/2.0),5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 801388c:	4b36      	ldr	r3, [pc, #216]	; (8013968 <search_adachi_zenmen3+0xdf4>)
 801388e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8013892:	4b36      	ldr	r3, [pc, #216]	; (801396c <search_adachi_zenmen3+0xdf8>)
 8013894:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8013898:	ee77 7a27 	vadd.f32	s15, s14, s15
 801389c:	ee17 0a90 	vmov	r0, s15
 80138a0:	f7ec fe72 	bl	8000588 <__aeabi_f2d>
 80138a4:	f04f 0200 	mov.w	r2, #0
 80138a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80138ac:	f7ec ffee 	bl	800088c <__aeabi_ddiv>
 80138b0:	4603      	mov	r3, r0
 80138b2:	460c      	mov	r4, r1
 80138b4:	461a      	mov	r2, r3
 80138b6:	4623      	mov	r3, r4
 80138b8:	f04f 0000 	mov.w	r0, #0
 80138bc:	492c      	ldr	r1, [pc, #176]	; (8013970 <search_adachi_zenmen3+0xdfc>)
 80138be:	f7ec fd03 	bl	80002c8 <__aeabi_dsub>
 80138c2:	4603      	mov	r3, r0
 80138c4:	460c      	mov	r4, r1
 80138c6:	461a      	mov	r2, r3
 80138c8:	4623      	mov	r3, r4
 80138ca:	f04f 0000 	mov.w	r0, #0
 80138ce:	4918      	ldr	r1, [pc, #96]	; (8013930 <search_adachi_zenmen3+0xdbc>)
 80138d0:	f7ec fcfa 	bl	80002c8 <__aeabi_dsub>
 80138d4:	4603      	mov	r3, r0
 80138d6:	460c      	mov	r4, r1
 80138d8:	4618      	mov	r0, r3
 80138da:	4621      	mov	r1, r4
 80138dc:	f7ed f9a4 	bl	8000c28 <__aeabi_d2f>
 80138e0:	4604      	mov	r4, r0
 80138e2:	2301      	movs	r3, #1
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	68b9      	ldr	r1, [r7, #8]
 80138e8:	68f8      	ldr	r0, [r7, #12]
 80138ea:	eddf 1a16 	vldr	s3, [pc, #88]	; 8013944 <search_adachi_zenmen3+0xdd0>
 80138ee:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8013948 <search_adachi_zenmen3+0xdd4>
 80138f2:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 80138f6:	ee00 4a10 	vmov	s0, r4
 80138fa:	f000 fd7d 	bl	80143f8 <search_straight_update_maze_zenmen>
          			set_stop_wall(100);
 80138fe:	2064      	movs	r0, #100	; 0x64
 8013900:	f7fc fbda 	bl	80100b8 <set_stop_wall>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8013904:	2001      	movs	r0, #1
 8013906:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8013950 <search_adachi_zenmen3+0xddc>
 801390a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8013954 <search_adachi_zenmen3+0xde0>
 801390e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8013958 <search_adachi_zenmen3+0xde4>
 8013912:	f7fb fafd 	bl	800ef10 <Spin_turn>
            		straight(HALF_SECTION,4.0,0.3,0.3);
 8013916:	eddf 1a0c 	vldr	s3, [pc, #48]	; 8013948 <search_adachi_zenmen3+0xdd4>
 801391a:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8013948 <search_adachi_zenmen3+0xdd4>
 801391e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013922:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801394c <search_adachi_zenmen3+0xdd8>
 8013926:	f7fb f81b 	bl	800e960 <straight>
 801392a:	e0e0      	b.n	8013aee <search_adachi_zenmen3+0xf7a>
 801392c:	20009410 	.word	0x20009410
 8013930:	40468000 	.word	0x40468000
 8013934:	c0240000 	.word	0xc0240000
 8013938:	40240000 	.word	0x40240000
 801393c:	3f19999a 	.word	0x3f19999a
 8013940:	3c23d70a 	.word	0x3c23d70a
 8013944:	00000000 	.word	0x00000000
 8013948:	3e99999a 	.word	0x3e99999a
 801394c:	42340000 	.word	0x42340000
 8013950:	41490fda 	.word	0x41490fda
 8013954:	431d1462 	.word	0x431d1462
 8013958:	3fc90fda 	.word	0x3fc90fda
 801395c:	40490fda 	.word	0x40490fda
 8013960:	0801f53c 	.word	0x0801f53c
 8013964:	20000aac 	.word	0x20000aac
 8013968:	200098a0 	.word	0x200098a0
 801396c:	20009914 	.word	0x20009914
 8013970:	40568000 	.word	0x40568000
 8013974:	416b851f 	.word	0x416b851f
 8013978:	405b8000 	.word	0x405b8000
            	}
            	else if(sen_r.is_wall == true && ABS(sen_r.distance - 45.0) > 10.0)
 801397c:	4bce      	ldr	r3, [pc, #824]	; (8013cb8 <search_adachi_zenmen3+0x1144>)
 801397e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013982:	2b01      	cmp	r3, #1
 8013984:	f040 808e 	bne.w	8013aa4 <search_adachi_zenmen3+0xf30>
 8013988:	4bcb      	ldr	r3, [pc, #812]	; (8013cb8 <search_adachi_zenmen3+0x1144>)
 801398a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801398c:	4618      	mov	r0, r3
 801398e:	f7ec fdfb 	bl	8000588 <__aeabi_f2d>
 8013992:	f04f 0200 	mov.w	r2, #0
 8013996:	4bc9      	ldr	r3, [pc, #804]	; (8013cbc <search_adachi_zenmen3+0x1148>)
 8013998:	f7ec fc96 	bl	80002c8 <__aeabi_dsub>
 801399c:	4603      	mov	r3, r0
 801399e:	460c      	mov	r4, r1
 80139a0:	4618      	mov	r0, r3
 80139a2:	4621      	mov	r1, r4
 80139a4:	f04f 0200 	mov.w	r2, #0
 80139a8:	f04f 0300 	mov.w	r3, #0
 80139ac:	f7ed f8b6 	bl	8000b1c <__aeabi_dcmplt>
 80139b0:	4603      	mov	r3, r0
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d016      	beq.n	80139e4 <search_adachi_zenmen3+0xe70>
 80139b6:	4bc0      	ldr	r3, [pc, #768]	; (8013cb8 <search_adachi_zenmen3+0x1144>)
 80139b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139ba:	4618      	mov	r0, r3
 80139bc:	f7ec fde4 	bl	8000588 <__aeabi_f2d>
 80139c0:	f04f 0200 	mov.w	r2, #0
 80139c4:	4bbd      	ldr	r3, [pc, #756]	; (8013cbc <search_adachi_zenmen3+0x1148>)
 80139c6:	f7ec fc7f 	bl	80002c8 <__aeabi_dsub>
 80139ca:	4603      	mov	r3, r0
 80139cc:	460c      	mov	r4, r1
 80139ce:	4618      	mov	r0, r3
 80139d0:	4621      	mov	r1, r4
 80139d2:	f04f 0200 	mov.w	r2, #0
 80139d6:	4bba      	ldr	r3, [pc, #744]	; (8013cc0 <search_adachi_zenmen3+0x114c>)
 80139d8:	f7ed f8a0 	bl	8000b1c <__aeabi_dcmplt>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d116      	bne.n	8013a10 <search_adachi_zenmen3+0xe9c>
 80139e2:	e05f      	b.n	8013aa4 <search_adachi_zenmen3+0xf30>
 80139e4:	4bb4      	ldr	r3, [pc, #720]	; (8013cb8 <search_adachi_zenmen3+0x1144>)
 80139e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7ec fdcd 	bl	8000588 <__aeabi_f2d>
 80139ee:	f04f 0200 	mov.w	r2, #0
 80139f2:	4bb2      	ldr	r3, [pc, #712]	; (8013cbc <search_adachi_zenmen3+0x1148>)
 80139f4:	f7ec fc68 	bl	80002c8 <__aeabi_dsub>
 80139f8:	4603      	mov	r3, r0
 80139fa:	460c      	mov	r4, r1
 80139fc:	4618      	mov	r0, r3
 80139fe:	4621      	mov	r1, r4
 8013a00:	f04f 0200 	mov.w	r2, #0
 8013a04:	4baf      	ldr	r3, [pc, #700]	; (8013cc4 <search_adachi_zenmen3+0x1150>)
 8013a06:	f7ed f8a7 	bl	8000b58 <__aeabi_dcmpgt>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d049      	beq.n	8013aa4 <search_adachi_zenmen3+0xf30>
            	{
        			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013a10:	eddf 7aad 	vldr	s15, [pc, #692]	; 8013cc8 <search_adachi_zenmen3+0x1154>
 8013a14:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8013ccc <search_adachi_zenmen3+0x1158>
 8013a18:	eddf 6aad 	vldr	s13, [pc, #692]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013a1c:	eeb0 1a66 	vmov.f32	s2, s13
 8013a20:	eef0 0a47 	vmov.f32	s1, s14
 8013a24:	eeb0 0a67 	vmov.f32	s0, s15
 8013a28:	f7fa ff66 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013a2c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013a30:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013a34:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013a38:	eeb0 1a66 	vmov.f32	s2, s13
 8013a3c:	eef0 0a47 	vmov.f32	s1, s14
 8013a40:	eeb0 0a67 	vmov.f32	s0, s15
 8013a44:	f7fa ff3e 	bl	800e8c4 <Set_Velo_PID_Gain>
          			search_straight_update_maze_zenmen(HALF_SECTION,5.0,0.3,0.0,gx,gy,goal_size,MASK_SEARCH);
 8013a48:	2301      	movs	r3, #1
 8013a4a:	687a      	ldr	r2, [r7, #4]
 8013a4c:	68b9      	ldr	r1, [r7, #8]
 8013a4e:	68f8      	ldr	r0, [r7, #12]
 8013a50:	eddf 1a9f 	vldr	s3, [pc, #636]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013a54:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013a58:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8013a5c:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8013cd8 <search_adachi_zenmen3+0x1164>
 8013a60:	f000 fcca 	bl	80143f8 <search_straight_update_maze_zenmen>
          			Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 8013a64:	2000      	movs	r0, #0
 8013a66:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013a6a:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013a6e:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8013ce4 <search_adachi_zenmen3+0x1170>
 8013a72:	f7fb fa4d 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 8013a76:	2064      	movs	r0, #100	; 0x64
 8013a78:	f7fc fb1e 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_left);
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	ed9f 1a97 	vldr	s2, [pc, #604]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013a82:	eddf 0a97 	vldr	s1, [pc, #604]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013a86:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8013ce8 <search_adachi_zenmen3+0x1174>
 8013a8a:	f7fb fa41 	bl	800ef10 <Spin_turn>
                	straight(HALF_SECTION,4.0,0.3,0.3);
 8013a8e:	eddf 1a91 	vldr	s3, [pc, #580]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013a92:	ed9f 1a90 	vldr	s2, [pc, #576]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013a96:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013a9a:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8013cd8 <search_adachi_zenmen3+0x1164>
 8013a9e:	f7fa ff5f 	bl	800e960 <straight>
 8013aa2:	e024      	b.n	8013aee <search_adachi_zenmen3+0xf7a>
            	}
            	else{
            		//search_turn90_table(&param_L90_search);
        			search_turn90_table_update_maze_zenmen(&param_L90_search, gx, gy, goal_size, MASK_SEARCH);
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	9300      	str	r3, [sp, #0]
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	68ba      	ldr	r2, [r7, #8]
 8013aac:	68f9      	ldr	r1, [r7, #12]
 8013aae:	488f      	ldr	r0, [pc, #572]	; (8013cec <search_adachi_zenmen3+0x1178>)
 8013ab0:	f000 fea0 	bl	80147f4 <search_turn90_table_update_maze_zenmen>
            		Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013ab4:	eddf 7a84 	vldr	s15, [pc, #528]	; 8013cc8 <search_adachi_zenmen3+0x1154>
 8013ab8:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8013ccc <search_adachi_zenmen3+0x1158>
 8013abc:	eddf 6a84 	vldr	s13, [pc, #528]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013ac0:	eeb0 1a66 	vmov.f32	s2, s13
 8013ac4:	eef0 0a47 	vmov.f32	s1, s14
 8013ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8013acc:	f7fa ff14 	bl	800e8f8 <Set_Omega_PID_Gain>
          			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013ad0:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013ad4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013ad8:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013adc:	eeb0 1a66 	vmov.f32	s2, s13
 8013ae0:	eef0 0a47 	vmov.f32	s1, s14
 8013ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8013ae8:	f7fa feec 	bl	800e8c4 <Set_Velo_PID_Gain>
            	}
            	break;
 8013aec:	e0aa      	b.n	8013c44 <search_adachi_zenmen3+0x10d0>
 8013aee:	e0a9      	b.n	8013c44 <search_adachi_zenmen3+0x10d0>
            case rear:
            case (rear|0x80):
            	wall_controll.is_controll = false;
 8013af0:	4b7f      	ldr	r3, [pc, #508]	; (8013cf0 <search_adachi_zenmen3+0x117c>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    			Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 8013af8:	eddf 7a73 	vldr	s15, [pc, #460]	; 8013cc8 <search_adachi_zenmen3+0x1154>
 8013afc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013ccc <search_adachi_zenmen3+0x1158>
 8013b00:	eddf 6a73 	vldr	s13, [pc, #460]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013b04:	eeb0 1a66 	vmov.f32	s2, s13
 8013b08:	eef0 0a47 	vmov.f32	s1, s14
 8013b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8013b10:	f7fa fef2 	bl	800e8f8 <Set_Omega_PID_Gain>
      			Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 8013b14:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 8013b18:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013b1c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013b20:	eeb0 1a66 	vmov.f32	s2, s13
 8013b24:	eef0 0a47 	vmov.f32	s1, s14
 8013b28:	eeb0 0a67 	vmov.f32	s0, s15
 8013b2c:	f7fa feca 	bl	800e8c4 <Set_Velo_PID_Gain>
                straight(HALF_SECTION,4.0,0.3,0.0);
 8013b30:	eddf 1a67 	vldr	s3, [pc, #412]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013b34:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013b38:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013b3c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8013cd8 <search_adachi_zenmen3+0x1164>
 8013b40:	f7fa ff0e 	bl	800e960 <straight>
                if(is_wall_dir(prev_pos.x, prev_pos.y, prev_pos.dir) == true) set_stop_wall(200);
 8013b44:	7d3b      	ldrb	r3, [r7, #20]
 8013b46:	4618      	mov	r0, r3
 8013b48:	7d7b      	ldrb	r3, [r7, #21]
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	7dbb      	ldrb	r3, [r7, #22]
 8013b4e:	461a      	mov	r2, r3
 8013b50:	f7fd fed2 	bl	80118f8 <is_wall_dir>
 8013b54:	4603      	mov	r3, r0
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d102      	bne.n	8013b60 <search_adachi_zenmen3+0xfec>
 8013b5a:	20c8      	movs	r0, #200	; 0xc8
 8013b5c:	f7fc faac 	bl	80100b8 <set_stop_wall>
                if(is_wall_dir(prev_pos.x, prev_pos.y, (prev_pos.dir + 1 + 4)%4) == true)
 8013b60:	7d3b      	ldrb	r3, [r7, #20]
 8013b62:	4618      	mov	r0, r3
 8013b64:	7d7b      	ldrb	r3, [r7, #21]
 8013b66:	4619      	mov	r1, r3
 8013b68:	7dbb      	ldrb	r3, [r7, #22]
 8013b6a:	3305      	adds	r3, #5
 8013b6c:	425a      	negs	r2, r3
 8013b6e:	f003 0303 	and.w	r3, r3, #3
 8013b72:	f002 0203 	and.w	r2, r2, #3
 8013b76:	bf58      	it	pl
 8013b78:	4253      	negpl	r3, r2
 8013b7a:	b2db      	uxtb	r3, r3
 8013b7c:	461a      	mov	r2, r3
 8013b7e:	f7fd febb 	bl	80118f8 <is_wall_dir>
 8013b82:	4603      	mov	r3, r0
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d115      	bne.n	8013bb4 <search_adachi_zenmen3+0x1040>
                {
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 8013b88:	2000      	movs	r0, #0
 8013b8a:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013b8e:	eddf 0a54 	vldr	s1, [pc, #336]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013b92:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8013ce4 <search_adachi_zenmen3+0x1170>
 8013b96:	f7fb f9bb 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 8013b9a:	2064      	movs	r0, #100	; 0x64
 8013b9c:	f7fc fa8c 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_right);
 8013ba0:	2000      	movs	r0, #0
 8013ba2:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013ba6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013baa:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013ce4 <search_adachi_zenmen3+0x1170>
 8013bae:	f7fb f9af 	bl	800ef10 <Spin_turn>
 8013bb2:	e032      	b.n	8013c1a <search_adachi_zenmen3+0x10a6>
                }
                else if(is_wall_dir(prev_pos.x, prev_pos.y, (prev_pos.dir - 1 + 4)%4) == true)
 8013bb4:	7d3b      	ldrb	r3, [r7, #20]
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	7d7b      	ldrb	r3, [r7, #21]
 8013bba:	4619      	mov	r1, r3
 8013bbc:	7dbb      	ldrb	r3, [r7, #22]
 8013bbe:	3303      	adds	r3, #3
 8013bc0:	425a      	negs	r2, r3
 8013bc2:	f003 0303 	and.w	r3, r3, #3
 8013bc6:	f002 0203 	and.w	r2, r2, #3
 8013bca:	bf58      	it	pl
 8013bcc:	4253      	negpl	r3, r2
 8013bce:	b2db      	uxtb	r3, r3
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f7fd fe91 	bl	80118f8 <is_wall_dir>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d115      	bne.n	8013c08 <search_adachi_zenmen3+0x1094>
                {
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8013bdc:	2001      	movs	r0, #1
 8013bde:	ed9f 1a3f 	vldr	s2, [pc, #252]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013be2:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013be6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8013ce4 <search_adachi_zenmen3+0x1170>
 8013bea:	f7fb f991 	bl	800ef10 <Spin_turn>
                	set_stop_wall(100);
 8013bee:	2064      	movs	r0, #100	; 0x64
 8013bf0:	f7fc fa62 	bl	80100b8 <set_stop_wall>
                	Spin_turn(DEG2RAD(90.0), 50.0*PI, 4.0*PI, turn_left);
 8013bf4:	2001      	movs	r0, #1
 8013bf6:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013bfa:	eddf 0a39 	vldr	s1, [pc, #228]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013bfe:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8013ce4 <search_adachi_zenmen3+0x1170>
 8013c02:	f7fb f985 	bl	800ef10 <Spin_turn>
 8013c06:	e008      	b.n	8013c1a <search_adachi_zenmen3+0x10a6>
                }
                else
                {
                	Spin_turn(DEG2RAD(180.0), 50.0*PI, 4.0*PI, turn_left);
 8013c08:	2001      	movs	r0, #1
 8013c0a:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8013cdc <search_adachi_zenmen3+0x1168>
 8013c0e:	eddf 0a34 	vldr	s1, [pc, #208]	; 8013ce0 <search_adachi_zenmen3+0x116c>
 8013c12:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8013ce8 <search_adachi_zenmen3+0x1174>
 8013c16:	f7fb f97b 	bl	800ef10 <Spin_turn>
                }
            	wall_controll.is_controll = false;
 8013c1a:	4b35      	ldr	r3, [pc, #212]	; (8013cf0 <search_adachi_zenmen3+0x117c>)
 8013c1c:	2200      	movs	r2, #0
 8013c1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            	filter_init();
 8013c22:	f7f9 ff11 	bl	800da48 <filter_init>
                //straight(HALF_SECTION,4.0,0.3,0.3);
            	search_straight_update_maze_zenmen(HALF_SECTION,5.0,0.3,0.3,gx,gy,goal_size,MASK_SEARCH);
 8013c26:	2301      	movs	r3, #1
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	68b9      	ldr	r1, [r7, #8]
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	eddf 1a29 	vldr	s3, [pc, #164]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013c32:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013c36:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8013c3a:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8013cd8 <search_adachi_zenmen3+0x1164>
 8013c3e:	f000 fbdb 	bl	80143f8 <search_straight_update_maze_zenmen>
            	break;
 8013c42:	bf00      	nop
    while(i_am_goal(mypos.x,mypos.y,gx,gy,goal_size) == false){
 8013c44:	4b2b      	ldr	r3, [pc, #172]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	4b2a      	ldr	r3, [pc, #168]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c4c:	785b      	ldrb	r3, [r3, #1]
 8013c4e:	4619      	mov	r1, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	9300      	str	r3, [sp, #0]
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	68fa      	ldr	r2, [r7, #12]
 8013c58:	f7fc fe1a 	bl	8010890 <i_am_goal>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f43f a8d3 	beq.w	8012e0a <search_adachi_zenmen3+0x296>
		Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
		wall_controll.is_controll = true;
		search_straight(SECTION,4.0,0.3,0.3);
		segment_accel_cnt = 0;
	}*/
	if(is_unknown(mypos.x, mypos.y)){
 8013c64:	4b23      	ldr	r3, [pc, #140]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c66:	781b      	ldrb	r3, [r3, #0]
 8013c68:	461a      	mov	r2, r3
 8013c6a:	4b22      	ldr	r3, [pc, #136]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c6c:	785b      	ldrb	r3, [r3, #1]
 8013c6e:	4619      	mov	r1, r3
 8013c70:	4610      	mov	r0, r2
 8013c72:	f7fd fa27 	bl	80110c4 <is_unknown>
 8013c76:	4603      	mov	r3, r0
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d008      	beq.n	8013c8e <search_adachi_zenmen3+0x111a>
		set_wall(mypos.x,mypos.y);//壁情報セット
 8013c7c:	4b1d      	ldr	r3, [pc, #116]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c7e:	781b      	ldrb	r3, [r3, #0]
 8013c80:	461a      	mov	r2, r3
 8013c82:	4b1c      	ldr	r3, [pc, #112]	; (8013cf4 <search_adachi_zenmen3+0x1180>)
 8013c84:	785b      	ldrb	r3, [r3, #1]
 8013c86:	4619      	mov	r1, r3
 8013c88:	4610      	mov	r0, r2
 8013c8a:	f7fd fa5b 	bl	8011144 <set_wall>
	}
    wall_controll.is_controll = false;
 8013c8e:	4b18      	ldr	r3, [pc, #96]	; (8013cf0 <search_adachi_zenmen3+0x117c>)
 8013c90:	2200      	movs	r2, #0
 8013c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    straight(HALF_SECTION,4.0,0.3,0.0);
 8013c96:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8013cd0 <search_adachi_zenmen3+0x115c>
 8013c9a:	ed9f 1a0e 	vldr	s2, [pc, #56]	; 8013cd4 <search_adachi_zenmen3+0x1160>
 8013c9e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8013ca2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8013cd8 <search_adachi_zenmen3+0x1164>
 8013ca6:	f7fa fe5b 	bl	800e960 <straight>
    run_mode = NON_CON_MODE;
 8013caa:	4b13      	ldr	r3, [pc, #76]	; (8013cf8 <search_adachi_zenmen3+0x1184>)
 8013cac:	2200      	movs	r2, #0
 8013cae:	701a      	strb	r2, [r3, #0]
}
 8013cb0:	bf00      	nop
 8013cb2:	3728      	adds	r7, #40	; 0x28
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bdb0      	pop	{r4, r5, r7, pc}
 8013cb8:	2001b5e4 	.word	0x2001b5e4
 8013cbc:	40468000 	.word	0x40468000
 8013cc0:	c0240000 	.word	0xc0240000
 8013cc4:	40240000 	.word	0x40240000
 8013cc8:	3f19999a 	.word	0x3f19999a
 8013ccc:	3c23d70a 	.word	0x3c23d70a
 8013cd0:	00000000 	.word	0x00000000
 8013cd4:	3e99999a 	.word	0x3e99999a
 8013cd8:	42340000 	.word	0x42340000
 8013cdc:	41490fda 	.word	0x41490fda
 8013ce0:	431d1462 	.word	0x431d1462
 8013ce4:	3fc90fda 	.word	0x3fc90fda
 8013ce8:	40490fda 	.word	0x40490fda
 8013cec:	0801f530 	.word	0x0801f530
 8013cf0:	20000aac 	.word	0x20000aac
 8013cf4:	20000afc 	.word	0x20000afc
 8013cf8:	20001708 	.word	0x20001708

08013cfc <search_straight_update_maze>:
#include "index.h"
#include "glob_var.h"
#include "run_param.h"
#include "rad_accel_table.h"

void search_straight_update_maze(float len_target,float acc,float max_sp,float end_sp,int *x, int *y,int goal_size ,int mask){
 8013cfc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8013d00:	b08c      	sub	sp, #48	; 0x30
 8013d02:	af00      	add	r7, sp, #0
 8013d04:	ed87 0a07 	vstr	s0, [r7, #28]
 8013d08:	edc7 0a06 	vstr	s1, [r7, #24]
 8013d0c:	ed87 1a05 	vstr	s2, [r7, #20]
 8013d10:	edc7 1a04 	vstr	s3, [r7, #16]
 8013d14:	60f8      	str	r0, [r7, #12]
 8013d16:	60b9      	str	r1, [r7, #8]
 8013d18:	607a      	str	r2, [r7, #4]
 8013d1a:	603b      	str	r3, [r7, #0]
	//Machine_Param_Initialize();
	//Target_Param_Initialize();
	//MAX_Param_Initialize();

	Sp_Param_I_Initialize(&machine);
 8013d1c:	4881      	ldr	r0, [pc, #516]	; (8013f24 <search_straight_update_maze+0x228>)
 8013d1e:	f7fa fd03 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&target);
 8013d22:	4881      	ldr	r0, [pc, #516]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013d24:	f7fa fd00 	bl	800e728 <Sp_Param_I_Initialize>
	int maze_map_update_flag = 0;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(end_sp == 0.0f)
 8013d2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8013d30:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d38:	f040 80ac 	bne.w	8013e94 <search_straight_update_maze+0x198>
	{
		run_mode = STRAIGHT_MODE;
 8013d3c:	4b7b      	ldr	r3, [pc, #492]	; (8013f2c <search_straight_update_maze+0x230>)
 8013d3e:	2201      	movs	r2, #1
 8013d40:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 8013d42:	4a7b      	ldr	r2, [pc, #492]	; (8013f30 <search_straight_update_maze+0x234>)
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	6013      	str	r3, [r2, #0]
		int wait_time = (int)(max_sp/3.0*1000.0);
 8013d48:	6978      	ldr	r0, [r7, #20]
 8013d4a:	f7ec fc1d 	bl	8000588 <__aeabi_f2d>
 8013d4e:	f04f 0200 	mov.w	r2, #0
 8013d52:	4b78      	ldr	r3, [pc, #480]	; (8013f34 <search_straight_update_maze+0x238>)
 8013d54:	f7ec fd9a 	bl	800088c <__aeabi_ddiv>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	4621      	mov	r1, r4
 8013d60:	f04f 0200 	mov.w	r2, #0
 8013d64:	4b74      	ldr	r3, [pc, #464]	; (8013f38 <search_straight_update_maze+0x23c>)
 8013d66:	f7ec fc67 	bl	8000638 <__aeabi_dmul>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	460c      	mov	r4, r1
 8013d6e:	4618      	mov	r0, r3
 8013d70:	4621      	mov	r1, r4
 8013d72:	f7ec ff11 	bl	8000b98 <__aeabi_d2iz>
 8013d76:	4603      	mov	r3, r0
 8013d78:	623b      	str	r3, [r7, #32]
		max_set.accel = acc;
 8013d7a:	4a6d      	ldr	r2, [pc, #436]	; (8013f30 <search_straight_update_maze+0x234>)
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 8013d80:	4a69      	ldr	r2, [pc, #420]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013d82:	69bb      	ldr	r3, [r7, #24]
 8013d84:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 8013d86:	4a6a      	ldr	r2, [pc, #424]	; (8013f30 <search_straight_update_maze+0x234>)
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo - end_sp*end_sp)/(2.0*max_set.accel)){
 8013d8c:	e00a      	b.n	8013da4 <search_straight_update_maze+0xa8>
			if(maze_map_update_flag == 0){
 8013d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d107      	bne.n	8013da4 <search_straight_update_maze+0xa8>
				make_map_queue(x,y,goal_size,mask);
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	68b9      	ldr	r1, [r7, #8]
 8013d9a:	68f8      	ldr	r0, [r7, #12]
 8013d9c:	f7fc ff1e 	bl	8010bdc <make_map_queue>
				maze_map_update_flag = 1;
 8013da0:	2301      	movs	r3, #1
 8013da2:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo - end_sp*end_sp)/(2.0*max_set.accel)){
 8013da4:	4b62      	ldr	r3, [pc, #392]	; (8013f30 <search_straight_update_maze+0x234>)
 8013da6:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8013daa:	4b5e      	ldr	r3, [pc, #376]	; (8013f24 <search_straight_update_maze+0x228>)
 8013dac:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013db4:	ee17 0a90 	vmov	r0, s15
 8013db8:	f7ec fbe6 	bl	8000588 <__aeabi_f2d>
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	460d      	mov	r5, r1
 8013dc0:	4b5b      	ldr	r3, [pc, #364]	; (8013f30 <search_straight_update_maze+0x234>)
 8013dc2:	ed93 7a00 	vldr	s14, [r3]
 8013dc6:	4b5a      	ldr	r3, [pc, #360]	; (8013f30 <search_straight_update_maze+0x234>)
 8013dc8:	edd3 7a00 	vldr	s15, [r3]
 8013dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dd0:	edd7 6a04 	vldr	s13, [r7, #16]
 8013dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8013dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013de0:	ee17 0a90 	vmov	r0, s15
 8013de4:	f7ec fbd0 	bl	8000588 <__aeabi_f2d>
 8013de8:	f04f 0200 	mov.w	r2, #0
 8013dec:	4b52      	ldr	r3, [pc, #328]	; (8013f38 <search_straight_update_maze+0x23c>)
 8013dee:	f7ec fc23 	bl	8000638 <__aeabi_dmul>
 8013df2:	4602      	mov	r2, r0
 8013df4:	460b      	mov	r3, r1
 8013df6:	4690      	mov	r8, r2
 8013df8:	4699      	mov	r9, r3
 8013dfa:	4b4d      	ldr	r3, [pc, #308]	; (8013f30 <search_straight_update_maze+0x234>)
 8013dfc:	68db      	ldr	r3, [r3, #12]
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7ec fbc2 	bl	8000588 <__aeabi_f2d>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	f7ec fa60 	bl	80002cc <__adddf3>
 8013e0c:	4602      	mov	r2, r0
 8013e0e:	460b      	mov	r3, r1
 8013e10:	4640      	mov	r0, r8
 8013e12:	4649      	mov	r1, r9
 8013e14:	f7ec fd3a 	bl	800088c <__aeabi_ddiv>
 8013e18:	4602      	mov	r2, r0
 8013e1a:	460b      	mov	r3, r1
 8013e1c:	4620      	mov	r0, r4
 8013e1e:	4629      	mov	r1, r5
 8013e20:	f7ec fe9a 	bl	8000b58 <__aeabi_dcmpgt>
 8013e24:	4603      	mov	r3, r0
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d1b1      	bne.n	8013d8e <search_straight_update_maze+0x92>
			}
		}
		target.accel = -acc;
 8013e2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e2e:	eef1 7a67 	vneg.f32	s15, s15
 8013e32:	4b3d      	ldr	r3, [pc, #244]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e34:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 8013e38:	e011      	b.n	8013e5e <search_straight_update_maze+0x162>
			if(target.velo < 0.0){
 8013e3a:	4b3b      	ldr	r3, [pc, #236]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e3c:	edd3 7a00 	vldr	s15, [r3]
 8013e40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e48:	d400      	bmi.n	8013e4c <search_straight_update_maze+0x150>
 8013e4a:	e008      	b.n	8013e5e <search_straight_update_maze+0x162>
				target.accel = 0.0;target.velo = 0.0;
 8013e4c:	4b36      	ldr	r3, [pc, #216]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e4e:	f04f 0200 	mov.w	r2, #0
 8013e52:	60da      	str	r2, [r3, #12]
 8013e54:	4b34      	ldr	r3, [pc, #208]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e56:	f04f 0200 	mov.w	r2, #0
 8013e5a:	601a      	str	r2, [r3, #0]
				break;
 8013e5c:	e00a      	b.n	8013e74 <search_straight_update_maze+0x178>
		while(machine.length < max_set.length){
 8013e5e:	4b31      	ldr	r3, [pc, #196]	; (8013f24 <search_straight_update_maze+0x228>)
 8013e60:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8013e64:	4b32      	ldr	r3, [pc, #200]	; (8013f30 <search_straight_update_maze+0x234>)
 8013e66:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013e6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e72:	d4e2      	bmi.n	8013e3a <search_straight_update_maze+0x13e>
			}
		}
		target.accel = 0.0;target.velo = 0.0;
 8013e74:	4b2c      	ldr	r3, [pc, #176]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e76:	f04f 0200 	mov.w	r2, #0
 8013e7a:	60da      	str	r2, [r3, #12]
 8013e7c:	4b2a      	ldr	r3, [pc, #168]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013e7e:	f04f 0200 	mov.w	r2, #0
 8013e82:	601a      	str	r2, [r3, #0]
		HAL_Delay(wait_time);
 8013e84:	6a3b      	ldr	r3, [r7, #32]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f003 f9b8 	bl	80171fc <HAL_Delay>
		run_mode = NON_CON_MODE;
 8013e8c:	4b27      	ldr	r3, [pc, #156]	; (8013f2c <search_straight_update_maze+0x230>)
 8013e8e:	2200      	movs	r2, #0
 8013e90:	701a      	strb	r2, [r3, #0]
 8013e92:	e113      	b.n	80140bc <search_straight_update_maze+0x3c0>
	}
	else
	{
		run_mode = STRAIGHT_MODE;
 8013e94:	4b25      	ldr	r3, [pc, #148]	; (8013f2c <search_straight_update_maze+0x230>)
 8013e96:	2201      	movs	r2, #1
 8013e98:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 8013e9a:	4a25      	ldr	r2, [pc, #148]	; (8013f30 <search_straight_update_maze+0x234>)
 8013e9c:	697b      	ldr	r3, [r7, #20]
 8013e9e:	6013      	str	r3, [r2, #0]
		max_set.accel = acc;
 8013ea0:	4a23      	ldr	r2, [pc, #140]	; (8013f30 <search_straight_update_maze+0x234>)
 8013ea2:	69bb      	ldr	r3, [r7, #24]
 8013ea4:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 8013ea6:	4a20      	ldr	r2, [pc, #128]	; (8013f28 <search_straight_update_maze+0x22c>)
 8013ea8:	69bb      	ldr	r3, [r7, #24]
 8013eaa:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 8013eac:	4a20      	ldr	r2, [pc, #128]	; (8013f30 <search_straight_update_maze+0x234>)
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	6293      	str	r3, [r2, #40]	; 0x28

		t_bool hosei_flag = false;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		t_bool r_wall = sen_r.is_wall;
 8013eb8:	4b20      	ldr	r3, [pc, #128]	; (8013f3c <search_straight_update_maze+0x240>)
 8013eba:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013ebe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		t_bool l_wall = sen_r.is_wall;
 8013ec2:	4b1e      	ldr	r3, [pc, #120]	; (8013f3c <search_straight_update_maze+0x240>)
 8013ec4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013ec8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		uint16_t r_wall_cnt = 0;
 8013ecc:	2300      	movs	r3, #0
 8013ece:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t l_wall_cnt = 0;
 8013ed0:	2300      	movs	r3, #0
 8013ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel))
 8013ed4:	e082      	b.n	8013fdc <search_straight_update_maze+0x2e0>
		{
			if(maze_map_update_flag == 0){
 8013ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d107      	bne.n	8013eec <search_straight_update_maze+0x1f0>
				make_map_queue(x,y,goal_size,mask);
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	687a      	ldr	r2, [r7, #4]
 8013ee0:	68b9      	ldr	r1, [r7, #8]
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f7fc fe7a 	bl	8010bdc <make_map_queue>
				maze_map_update_flag = 1;
 8013ee8:	2301      	movs	r3, #1
 8013eea:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if(len_target == SECTION)
 8013eec:	edd7 7a07 	vldr	s15, [r7, #28]
 8013ef0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8013f40 <search_straight_update_maze+0x244>
 8013ef4:	eef4 7a47 	vcmp.f32	s15, s14
 8013ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013efc:	d164      	bne.n	8013fc8 <search_straight_update_maze+0x2cc>
			{
				if(r_wall == true)	r_wall_cnt++;
 8013efe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d103      	bne.n	8013f0e <search_straight_update_maze+0x212>
 8013f06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f08:	3301      	adds	r3, #1
 8013f0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013f0c:	e001      	b.n	8013f12 <search_straight_update_maze+0x216>
				else				r_wall_cnt = 0;
 8013f0e:	2300      	movs	r3, #0
 8013f10:	84fb      	strh	r3, [r7, #38]	; 0x26

				if(l_wall == true)	l_wall_cnt++;
 8013f12:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d114      	bne.n	8013f44 <search_straight_update_maze+0x248>
 8013f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013f20:	e012      	b.n	8013f48 <search_straight_update_maze+0x24c>
 8013f22:	bf00      	nop
 8013f24:	2001b664 	.word	0x2001b664
 8013f28:	2001b6a0 	.word	0x2001b6a0
 8013f2c:	20001708 	.word	0x20001708
 8013f30:	2001b1b4 	.word	0x2001b1b4
 8013f34:	40080000 	.word	0x40080000
 8013f38:	408f4000 	.word	0x408f4000
 8013f3c:	2001b5e4 	.word	0x2001b5e4
 8013f40:	42b40000 	.word	0x42b40000
				else				l_wall_cnt = 0;
 8013f44:	2300      	movs	r3, #0
 8013f46:	84bb      	strh	r3, [r7, #36]	; 0x24

				if((r_wall == true && sen_r.is_wall == false) && machine.length > 45.0 && r_wall_cnt > 100)
 8013f48:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8013f4c:	2b01      	cmp	r3, #1
 8013f4e:	d11b      	bne.n	8013f88 <search_straight_update_maze+0x28c>
 8013f50:	4b61      	ldr	r3, [pc, #388]	; (80140d8 <search_straight_update_maze+0x3dc>)
 8013f52:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d116      	bne.n	8013f88 <search_straight_update_maze+0x28c>
 8013f5a:	4b60      	ldr	r3, [pc, #384]	; (80140dc <search_straight_update_maze+0x3e0>)
 8013f5c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013f60:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80140e0 <search_straight_update_maze+0x3e4>
 8013f64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f6c:	dd0c      	ble.n	8013f88 <search_straight_update_maze+0x28c>
 8013f6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013f70:	2b64      	cmp	r3, #100	; 0x64
 8013f72:	d909      	bls.n	8013f88 <search_straight_update_maze+0x28c>
				{
					if(hosei_flag == false)
 8013f74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d105      	bne.n	8013f88 <search_straight_update_maze+0x28c>
					{
						machine.length = SEARCH_HOSEI;
 8013f7c:	4b57      	ldr	r3, [pc, #348]	; (80140dc <search_straight_update_maze+0x3e0>)
 8013f7e:	4a59      	ldr	r2, [pc, #356]	; (80140e4 <search_straight_update_maze+0x3e8>)
 8013f80:	629a      	str	r2, [r3, #40]	; 0x28
						hosei_flag = true;
 8013f82:	2301      	movs	r3, #1
 8013f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
				}
				if((l_wall == true && sen_l.is_wall == false)&& machine.length > 45.0 && l_wall_cnt > 100)
 8013f88:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8013f8c:	2b01      	cmp	r3, #1
 8013f8e:	d11b      	bne.n	8013fc8 <search_straight_update_maze+0x2cc>
 8013f90:	4b55      	ldr	r3, [pc, #340]	; (80140e8 <search_straight_update_maze+0x3ec>)
 8013f92:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d116      	bne.n	8013fc8 <search_straight_update_maze+0x2cc>
 8013f9a:	4b50      	ldr	r3, [pc, #320]	; (80140dc <search_straight_update_maze+0x3e0>)
 8013f9c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013fa0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80140e0 <search_straight_update_maze+0x3e4>
 8013fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fac:	dd0c      	ble.n	8013fc8 <search_straight_update_maze+0x2cc>
 8013fae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013fb0:	2b64      	cmp	r3, #100	; 0x64
 8013fb2:	d909      	bls.n	8013fc8 <search_straight_update_maze+0x2cc>
				{
					if(hosei_flag == false)
 8013fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d105      	bne.n	8013fc8 <search_straight_update_maze+0x2cc>
					{
						machine.length = SEARCH_HOSEI;
 8013fbc:	4b47      	ldr	r3, [pc, #284]	; (80140dc <search_straight_update_maze+0x3e0>)
 8013fbe:	4a49      	ldr	r2, [pc, #292]	; (80140e4 <search_straight_update_maze+0x3e8>)
 8013fc0:	629a      	str	r2, [r3, #40]	; 0x28
						hosei_flag = true;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
				}
			}
			r_wall = sen_r.is_wall;
 8013fc8:	4b43      	ldr	r3, [pc, #268]	; (80140d8 <search_straight_update_maze+0x3dc>)
 8013fca:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			l_wall = sen_l.is_wall;
 8013fd2:	4b45      	ldr	r3, [pc, #276]	; (80140e8 <search_straight_update_maze+0x3ec>)
 8013fd4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8013fd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel))
 8013fdc:	4b43      	ldr	r3, [pc, #268]	; (80140ec <search_straight_update_maze+0x3f0>)
 8013fde:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8013fe2:	4b3e      	ldr	r3, [pc, #248]	; (80140dc <search_straight_update_maze+0x3e0>)
 8013fe4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fec:	ee17 0a90 	vmov	r0, s15
 8013ff0:	f7ec faca 	bl	8000588 <__aeabi_f2d>
 8013ff4:	4604      	mov	r4, r0
 8013ff6:	460d      	mov	r5, r1
 8013ff8:	4b3c      	ldr	r3, [pc, #240]	; (80140ec <search_straight_update_maze+0x3f0>)
 8013ffa:	ed93 7a00 	vldr	s14, [r3]
 8013ffe:	4b3b      	ldr	r3, [pc, #236]	; (80140ec <search_straight_update_maze+0x3f0>)
 8014000:	edd3 7a00 	vldr	s15, [r3]
 8014004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014008:	edd7 6a04 	vldr	s13, [r7, #16]
 801400c:	edd7 7a04 	vldr	s15, [r7, #16]
 8014010:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014018:	ee17 0a90 	vmov	r0, s15
 801401c:	f7ec fab4 	bl	8000588 <__aeabi_f2d>
 8014020:	f04f 0200 	mov.w	r2, #0
 8014024:	4b32      	ldr	r3, [pc, #200]	; (80140f0 <search_straight_update_maze+0x3f4>)
 8014026:	f7ec fb07 	bl	8000638 <__aeabi_dmul>
 801402a:	4602      	mov	r2, r0
 801402c:	460b      	mov	r3, r1
 801402e:	4690      	mov	r8, r2
 8014030:	4699      	mov	r9, r3
 8014032:	4b2e      	ldr	r3, [pc, #184]	; (80140ec <search_straight_update_maze+0x3f0>)
 8014034:	68db      	ldr	r3, [r3, #12]
 8014036:	4618      	mov	r0, r3
 8014038:	f7ec faa6 	bl	8000588 <__aeabi_f2d>
 801403c:	4602      	mov	r2, r0
 801403e:	460b      	mov	r3, r1
 8014040:	f7ec f944 	bl	80002cc <__adddf3>
 8014044:	4602      	mov	r2, r0
 8014046:	460b      	mov	r3, r1
 8014048:	4640      	mov	r0, r8
 801404a:	4649      	mov	r1, r9
 801404c:	f7ec fc1e 	bl	800088c <__aeabi_ddiv>
 8014050:	4602      	mov	r2, r0
 8014052:	460b      	mov	r3, r1
 8014054:	4620      	mov	r0, r4
 8014056:	4629      	mov	r1, r5
 8014058:	f7ec fd7e 	bl	8000b58 <__aeabi_dcmpgt>
 801405c:	4603      	mov	r3, r0
 801405e:	2b00      	cmp	r3, #0
 8014060:	f47f af39 	bne.w	8013ed6 <search_straight_update_maze+0x1da>
		}
		target.accel = -acc;
 8014064:	edd7 7a06 	vldr	s15, [r7, #24]
 8014068:	eef1 7a67 	vneg.f32	s15, s15
 801406c:	4b21      	ldr	r3, [pc, #132]	; (80140f4 <search_straight_update_maze+0x3f8>)
 801406e:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 8014072:	e011      	b.n	8014098 <search_straight_update_maze+0x39c>
			if(target.velo < end_sp){
 8014074:	4b1f      	ldr	r3, [pc, #124]	; (80140f4 <search_straight_update_maze+0x3f8>)
 8014076:	edd3 7a00 	vldr	s15, [r3]
 801407a:	ed97 7a04 	vldr	s14, [r7, #16]
 801407e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014086:	dc00      	bgt.n	801408a <search_straight_update_maze+0x38e>
 8014088:	e006      	b.n	8014098 <search_straight_update_maze+0x39c>
				target.accel = 0.0;target.velo = end_sp;
 801408a:	4b1a      	ldr	r3, [pc, #104]	; (80140f4 <search_straight_update_maze+0x3f8>)
 801408c:	f04f 0200 	mov.w	r2, #0
 8014090:	60da      	str	r2, [r3, #12]
 8014092:	4a18      	ldr	r2, [pc, #96]	; (80140f4 <search_straight_update_maze+0x3f8>)
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	6013      	str	r3, [r2, #0]
		while(machine.length < max_set.length){
 8014098:	4b10      	ldr	r3, [pc, #64]	; (80140dc <search_straight_update_maze+0x3e0>)
 801409a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801409e:	4b13      	ldr	r3, [pc, #76]	; (80140ec <search_straight_update_maze+0x3f0>)
 80140a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80140a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80140a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ac:	d4e2      	bmi.n	8014074 <search_straight_update_maze+0x378>
			}
		}
		target.accel = 0.0;target.velo = end_sp;
 80140ae:	4b11      	ldr	r3, [pc, #68]	; (80140f4 <search_straight_update_maze+0x3f8>)
 80140b0:	f04f 0200 	mov.w	r2, #0
 80140b4:	60da      	str	r2, [r3, #12]
 80140b6:	4a0f      	ldr	r2, [pc, #60]	; (80140f4 <search_straight_update_maze+0x3f8>)
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	6013      	str	r3, [r2, #0]
	}

	machine.length = 0.0;
 80140bc:	4b07      	ldr	r3, [pc, #28]	; (80140dc <search_straight_update_maze+0x3e0>)
 80140be:	f04f 0200 	mov.w	r2, #0
 80140c2:	629a      	str	r2, [r3, #40]	; 0x28
	target.length =  0.0;
 80140c4:	4b0b      	ldr	r3, [pc, #44]	; (80140f4 <search_straight_update_maze+0x3f8>)
 80140c6:	f04f 0200 	mov.w	r2, #0
 80140ca:	629a      	str	r2, [r3, #40]	; 0x28
	//run_mode = NON_CON_MODE;

}
 80140cc:	bf00      	nop
 80140ce:	3730      	adds	r7, #48	; 0x30
 80140d0:	46bd      	mov	sp, r7
 80140d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80140d6:	bf00      	nop
 80140d8:	2001b5e4 	.word	0x2001b5e4
 80140dc:	2001b664 	.word	0x2001b664
 80140e0:	42340000 	.word	0x42340000
 80140e4:	42400000 	.word	0x42400000
 80140e8:	20009410 	.word	0x20009410
 80140ec:	2001b1b4 	.word	0x2001b1b4
 80140f0:	408f4000 	.word	0x408f4000
 80140f4:	2001b6a0 	.word	0x2001b6a0

080140f8 <search_turn90_table_update_maze>:

void search_turn90_table_update_maze(const t_param* parameter,int *x, int *y,int goal_size ,int mask)
{
 80140f8:	b5b0      	push	{r4, r5, r7, lr}
 80140fa:	b086      	sub	sp, #24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
 8014104:	603b      	str	r3, [r7, #0]

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	685b      	ldr	r3, [r3, #4]
 801410a:	edd3 7a00 	vldr	s15, [r3]
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	685b      	ldr	r3, [r3, #4]
 8014112:	ed93 7a01 	vldr	s14, [r3, #4]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	edd3 6a02 	vldr	s13, [r3, #8]
 801411e:	eeb0 1a66 	vmov.f32	s2, s13
 8014122:	eef0 0a47 	vmov.f32	s1, s14
 8014126:	eeb0 0a67 	vmov.f32	s0, s15
 801412a:	48a3      	ldr	r0, [pc, #652]	; (80143b8 <search_turn90_table_update_maze+0x2c0>)
 801412c:	f7fa fbfe 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	edd3 7a00 	vldr	s15, [r3]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	689b      	ldr	r3, [r3, #8]
 801413c:	ed93 7a01 	vldr	s14, [r3, #4]
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	689b      	ldr	r3, [r3, #8]
 8014144:	edd3 6a02 	vldr	s13, [r3, #8]
 8014148:	eeb0 1a66 	vmov.f32	s2, s13
 801414c:	eef0 0a47 	vmov.f32	s1, s14
 8014150:	eeb0 0a67 	vmov.f32	s0, s15
 8014154:	4899      	ldr	r0, [pc, #612]	; (80143bc <search_turn90_table_update_maze+0x2c4>)
 8014156:	f7fa fbe9 	bl	800e92c <Set_PID_Gain>
	Sp_Param_I_Initialize(&target);
 801415a:	4899      	ldr	r0, [pc, #612]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801415c:	f7fa fae4 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 8014160:	4898      	ldr	r0, [pc, #608]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 8014162:	f7fa fae1 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 8014166:	4896      	ldr	r0, [pc, #600]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 8014168:	f7fa faf6 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 801416c:	4895      	ldr	r0, [pc, #596]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 801416e:	f7fa faf3 	bl	800e758 <Sp_Param_rad_Initialize>

	run_mode = STRAIGHT_MODE;
 8014172:	4b95      	ldr	r3, [pc, #596]	; (80143c8 <search_turn90_table_update_maze+0x2d0>)
 8014174:	2201      	movs	r2, #1
 8014176:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	4a93      	ldr	r2, [pc, #588]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 8014180:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	4a8d      	ldr	r2, [pc, #564]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801418a:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	689b      	ldr	r3, [r3, #8]
 8014192:	4a8e      	ldr	r2, [pc, #568]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 8014194:	6293      	str	r3, [r2, #40]	; 0x28

	int maze_map_update_flag = 0;
 8014196:	2300      	movs	r3, #0
 8014198:	617b      	str	r3, [r7, #20]
	if(sen_fr.is_wall == true && sen_fl.is_wall == true)
 801419a:	4b8d      	ldr	r3, [pc, #564]	; (80143d0 <search_turn90_table_update_maze+0x2d8>)
 801419c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80141a0:	2b01      	cmp	r3, #1
 80141a2:	d15e      	bne.n	8014262 <search_turn90_table_update_maze+0x16a>
 80141a4:	4b8b      	ldr	r3, [pc, #556]	; (80143d4 <search_turn90_table_update_maze+0x2dc>)
 80141a6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d159      	bne.n	8014262 <search_turn90_table_update_maze+0x16a>
	{
		while((90.0 + 0.0 - ((sen_fr.distance+sen_fl.distance)/2 )) < parameter->param->Lstart){
 80141ae:	bf00      	nop
 80141b0:	4b87      	ldr	r3, [pc, #540]	; (80143d0 <search_turn90_table_update_maze+0x2d8>)
 80141b2:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80141b6:	4b87      	ldr	r3, [pc, #540]	; (80143d4 <search_turn90_table_update_maze+0x2dc>)
 80141b8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80141bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80141c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80141c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80141c8:	ee16 0a90 	vmov	r0, s13
 80141cc:	f7ec f9dc 	bl	8000588 <__aeabi_f2d>
 80141d0:	4603      	mov	r3, r0
 80141d2:	460c      	mov	r4, r1
 80141d4:	461a      	mov	r2, r3
 80141d6:	4623      	mov	r3, r4
 80141d8:	f04f 0000 	mov.w	r0, #0
 80141dc:	497e      	ldr	r1, [pc, #504]	; (80143d8 <search_turn90_table_update_maze+0x2e0>)
 80141de:	f7ec f873 	bl	80002c8 <__aeabi_dsub>
 80141e2:	4603      	mov	r3, r0
 80141e4:	460c      	mov	r4, r1
 80141e6:	4625      	mov	r5, r4
 80141e8:	461c      	mov	r4, r3
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7ec f9c9 	bl	8000588 <__aeabi_f2d>
 80141f6:	4602      	mov	r2, r0
 80141f8:	460b      	mov	r3, r1
 80141fa:	4620      	mov	r0, r4
 80141fc:	4629      	mov	r1, r5
 80141fe:	f7ec fc8d 	bl	8000b1c <__aeabi_dcmplt>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d1d3      	bne.n	80141b0 <search_turn90_table_update_maze+0xb8>
	if(sen_fr.is_wall == true && sen_fl.is_wall == true)
 8014208:	e039      	b.n	801427e <search_turn90_table_update_maze+0x186>
		while(machine.length < parameter->param->Lstart ){
			//if(maze_map_update_flag == 0){
				//make_map_queue(x,y,goal_size,mask);
				//maze_map_update_flag = 1;
			//}
			if((90.0 - (sen_fr.distance+sen_fl.distance)/2) > parameter->param->Lstart) break;
 801420a:	4b71      	ldr	r3, [pc, #452]	; (80143d0 <search_turn90_table_update_maze+0x2d8>)
 801420c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8014210:	4b70      	ldr	r3, [pc, #448]	; (80143d4 <search_turn90_table_update_maze+0x2dc>)
 8014212:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8014216:	ee77 7a27 	vadd.f32	s15, s14, s15
 801421a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801421e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8014222:	ee16 0a90 	vmov	r0, s13
 8014226:	f7ec f9af 	bl	8000588 <__aeabi_f2d>
 801422a:	4603      	mov	r3, r0
 801422c:	460c      	mov	r4, r1
 801422e:	461a      	mov	r2, r3
 8014230:	4623      	mov	r3, r4
 8014232:	f04f 0000 	mov.w	r0, #0
 8014236:	4968      	ldr	r1, [pc, #416]	; (80143d8 <search_turn90_table_update_maze+0x2e0>)
 8014238:	f7ec f846 	bl	80002c8 <__aeabi_dsub>
 801423c:	4603      	mov	r3, r0
 801423e:	460c      	mov	r4, r1
 8014240:	4625      	mov	r5, r4
 8014242:	461c      	mov	r4, r3
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	689b      	ldr	r3, [r3, #8]
 801424a:	4618      	mov	r0, r3
 801424c:	f7ec f99c 	bl	8000588 <__aeabi_f2d>
 8014250:	4602      	mov	r2, r0
 8014252:	460b      	mov	r3, r1
 8014254:	4620      	mov	r0, r4
 8014256:	4629      	mov	r1, r5
 8014258:	f7ec fc7e 	bl	8000b58 <__aeabi_dcmpgt>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d10c      	bne.n	801427c <search_turn90_table_update_maze+0x184>
		while(machine.length < parameter->param->Lstart ){
 8014262:	4b58      	ldr	r3, [pc, #352]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 8014264:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	edd3 7a02 	vldr	s15, [r3, #8]
 8014270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014278:	d4c7      	bmi.n	801420a <search_turn90_table_update_maze+0x112>
 801427a:	e000      	b.n	801427e <search_turn90_table_update_maze+0x186>
			if((90.0 - (sen_fr.distance+sen_fl.distance)/2) > parameter->param->Lstart) break;
 801427c:	bf00      	nop
		}
	}


	run_mode = TURN_MODE_TABLE;
 801427e:	4b52      	ldr	r3, [pc, #328]	; (80143c8 <search_turn90_table_update_maze+0x2d0>)
 8014280:	2204      	movs	r2, #4
 8014282:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	edd3 6a00 	vldr	s13, [r3]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	edd3 7a01 	vldr	s15, [r3, #4]
 8014294:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80143dc <search_turn90_table_update_maze+0x2e4>
 8014298:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801429c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142a0:	4b4a      	ldr	r3, [pc, #296]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 80142a2:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	ed93 7a04 	vldr	s14, [r3, #16]
 80142ae:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80143e0 <search_turn90_table_update_maze+0x2e8>
 80142b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80142b6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80143e4 <search_turn90_table_update_maze+0x2ec>
 80142ba:	ee67 6a87 	vmul.f32	s13, s15, s14
 80142be:	4b43      	ldr	r3, [pc, #268]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 80142c0:	edd3 7a05 	vldr	s15, [r3, #20]
 80142c4:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80143e8 <search_turn90_table_update_maze+0x2f0>
 80142c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80142cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80142d0:	4b46      	ldr	r3, [pc, #280]	; (80143ec <search_turn90_table_update_maze+0x2f4>)
 80142d2:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 80142d6:	483a      	ldr	r0, [pc, #232]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 80142d8:	f7fa fa3e 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 80142dc:	4839      	ldr	r0, [pc, #228]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 80142de:	f7fa fa3b 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 80142e2:	4b43      	ldr	r3, [pc, #268]	; (80143f0 <search_turn90_table_update_maze+0x2f8>)
 80142e4:	f04f 0200 	mov.w	r2, #0
 80142e8:	601a      	str	r2, [r3, #0]


	wall_controll.is_controll = true;
 80142ea:	4b42      	ldr	r3, [pc, #264]	; (80143f4 <search_turn90_table_update_maze+0x2fc>)
 80142ec:	2201      	movs	r2, #1
 80142ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	while((float)turn_time < set_turn_time * 1000){
 80142f2:	e00a      	b.n	801430a <search_turn90_table_update_maze+0x212>
		if(maze_map_update_flag == 0){
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d107      	bne.n	801430a <search_turn90_table_update_maze+0x212>
			make_map_queue(x,y,goal_size,mask);
 80142fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142fc:	683a      	ldr	r2, [r7, #0]
 80142fe:	6879      	ldr	r1, [r7, #4]
 8014300:	68b8      	ldr	r0, [r7, #8]
 8014302:	f7fc fc6b 	bl	8010bdc <make_map_queue>
			maze_map_update_flag = 1;
 8014306:	2301      	movs	r3, #1
 8014308:	617b      	str	r3, [r7, #20]
	while((float)turn_time < set_turn_time * 1000){
 801430a:	4b38      	ldr	r3, [pc, #224]	; (80143ec <search_turn90_table_update_maze+0x2f4>)
 801430c:	edd3 7a00 	vldr	s15, [r3]
 8014310:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80143dc <search_turn90_table_update_maze+0x2e4>
 8014314:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014318:	4b35      	ldr	r3, [pc, #212]	; (80143f0 <search_turn90_table_update_maze+0x2f8>)
 801431a:	edd3 7a00 	vldr	s15, [r3]
 801431e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014326:	dce5      	bgt.n	80142f4 <search_turn90_table_update_maze+0x1fc>
		}
	}
	max_set.rad_velo = 0.0f;
 8014328:	4b28      	ldr	r3, [pc, #160]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 801432a:	f04f 0200 	mov.w	r2, #0
 801432e:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 8014330:	4b23      	ldr	r3, [pc, #140]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 8014332:	f04f 0200 	mov.w	r2, #0
 8014336:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 8014338:	4b21      	ldr	r3, [pc, #132]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801433a:	f04f 0200 	mov.w	r2, #0
 801433e:	621a      	str	r2, [r3, #32]

	Sp_Param_rad_Initialize(&target);
 8014340:	481f      	ldr	r0, [pc, #124]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 8014342:	f7fa fa09 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 8014346:	481f      	ldr	r0, [pc, #124]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 8014348:	f7fa fa06 	bl	800e758 <Sp_Param_rad_Initialize>

	run_mode = STRAIGHT_MODE;
 801434c:	4b1e      	ldr	r3, [pc, #120]	; (80143c8 <search_turn90_table_update_maze+0x2d0>)
 801434e:	2201      	movs	r2, #1
 8014350:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 8014352:	4b1b      	ldr	r3, [pc, #108]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 8014354:	f04f 0200 	mov.w	r2, #0
 8014358:	629a      	str	r2, [r3, #40]	; 0x28
 801435a:	4b19      	ldr	r3, [pc, #100]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801435c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801435e:	4a19      	ldr	r2, [pc, #100]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 8014360:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	4a15      	ldr	r2, [pc, #84]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	4b14      	ldr	r3, [pc, #80]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	4a16      	ldr	r2, [pc, #88]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 8014372:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 8014374:	68fb      	ldr	r3, [r7, #12]
 8014376:	681b      	ldr	r3, [r3, #0]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	4a14      	ldr	r2, [pc, #80]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 801437c:	6293      	str	r3, [r2, #40]	; 0x28
	while(machine.length < max_set.length );
 801437e:	bf00      	nop
 8014380:	4b10      	ldr	r3, [pc, #64]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 8014382:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014386:	4b11      	ldr	r3, [pc, #68]	; (80143cc <search_turn90_table_update_maze+0x2d4>)
 8014388:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801438c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014394:	d4f4      	bmi.n	8014380 <search_turn90_table_update_maze+0x288>

	machine.length = target.length  = 0.0f;
 8014396:	4b0a      	ldr	r3, [pc, #40]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 8014398:	f04f 0200 	mov.w	r2, #0
 801439c:	629a      	str	r2, [r3, #40]	; 0x28
 801439e:	4b08      	ldr	r3, [pc, #32]	; (80143c0 <search_turn90_table_update_maze+0x2c8>)
 80143a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143a2:	4a08      	ldr	r2, [pc, #32]	; (80143c4 <search_turn90_table_update_maze+0x2cc>)
 80143a4:	6293      	str	r3, [r2, #40]	; 0x28
	wall_controll.is_controll = true;
 80143a6:	4b13      	ldr	r3, [pc, #76]	; (80143f4 <search_turn90_table_update_maze+0x2fc>)
 80143a8:	2201      	movs	r2, #1
 80143aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 80143ae:	bf00      	nop
 80143b0:	3718      	adds	r7, #24
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bdb0      	pop	{r4, r5, r7, pc}
 80143b6:	bf00      	nop
 80143b8:	2001b694 	.word	0x2001b694
 80143bc:	20009890 	.word	0x20009890
 80143c0:	2001b6a0 	.word	0x2001b6a0
 80143c4:	2001b664 	.word	0x2001b664
 80143c8:	20001708 	.word	0x20001708
 80143cc:	2001b1b4 	.word	0x2001b1b4
 80143d0:	200098a0 	.word	0x200098a0
 80143d4:	20009914 	.word	0x20009914
 80143d8:	40568000 	.word	0x40568000
 80143dc:	447a0000 	.word	0x447a0000
 80143e0:	43340000 	.word	0x43340000
 80143e4:	40490fda 	.word	0x40490fda
 80143e8:	3f344d01 	.word	0x3f344d01
 80143ec:	2001b6e4 	.word	0x2001b6e4
 80143f0:	2001b6e0 	.word	0x2001b6e0
 80143f4:	20000aac 	.word	0x20000aac

080143f8 <search_straight_update_maze_zenmen>:


void search_straight_update_maze_zenmen(float len_target,float acc,float max_sp,float end_sp,int *x, int *y,int goal_size ,int mask){
 80143f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80143fc:	b08c      	sub	sp, #48	; 0x30
 80143fe:	af00      	add	r7, sp, #0
 8014400:	ed87 0a07 	vstr	s0, [r7, #28]
 8014404:	edc7 0a06 	vstr	s1, [r7, #24]
 8014408:	ed87 1a05 	vstr	s2, [r7, #20]
 801440c:	edc7 1a04 	vstr	s3, [r7, #16]
 8014410:	60f8      	str	r0, [r7, #12]
 8014412:	60b9      	str	r1, [r7, #8]
 8014414:	607a      	str	r2, [r7, #4]
 8014416:	603b      	str	r3, [r7, #0]
	//Machine_Param_Initialize();
	//Target_Param_Initialize();
	//MAX_Param_Initialize();

	Sp_Param_I_Initialize(&machine);
 8014418:	4881      	ldr	r0, [pc, #516]	; (8014620 <search_straight_update_maze_zenmen+0x228>)
 801441a:	f7fa f985 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&target);
 801441e:	4881      	ldr	r0, [pc, #516]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 8014420:	f7fa f982 	bl	800e728 <Sp_Param_I_Initialize>
	int maze_map_update_flag = 0;
 8014424:	2300      	movs	r3, #0
 8014426:	62fb      	str	r3, [r7, #44]	; 0x2c
	if(end_sp == 0.0f)
 8014428:	edd7 7a04 	vldr	s15, [r7, #16]
 801442c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014434:	f040 80ac 	bne.w	8014590 <search_straight_update_maze_zenmen+0x198>
	{
		run_mode = STRAIGHT_MODE;
 8014438:	4b7b      	ldr	r3, [pc, #492]	; (8014628 <search_straight_update_maze_zenmen+0x230>)
 801443a:	2201      	movs	r2, #1
 801443c:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 801443e:	4a7b      	ldr	r2, [pc, #492]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	6013      	str	r3, [r2, #0]
		int wait_time = (int)(max_sp/3.0*1000.0);
 8014444:	6978      	ldr	r0, [r7, #20]
 8014446:	f7ec f89f 	bl	8000588 <__aeabi_f2d>
 801444a:	f04f 0200 	mov.w	r2, #0
 801444e:	4b78      	ldr	r3, [pc, #480]	; (8014630 <search_straight_update_maze_zenmen+0x238>)
 8014450:	f7ec fa1c 	bl	800088c <__aeabi_ddiv>
 8014454:	4603      	mov	r3, r0
 8014456:	460c      	mov	r4, r1
 8014458:	4618      	mov	r0, r3
 801445a:	4621      	mov	r1, r4
 801445c:	f04f 0200 	mov.w	r2, #0
 8014460:	4b74      	ldr	r3, [pc, #464]	; (8014634 <search_straight_update_maze_zenmen+0x23c>)
 8014462:	f7ec f8e9 	bl	8000638 <__aeabi_dmul>
 8014466:	4603      	mov	r3, r0
 8014468:	460c      	mov	r4, r1
 801446a:	4618      	mov	r0, r3
 801446c:	4621      	mov	r1, r4
 801446e:	f7ec fb93 	bl	8000b98 <__aeabi_d2iz>
 8014472:	4603      	mov	r3, r0
 8014474:	623b      	str	r3, [r7, #32]
		max_set.accel = acc;
 8014476:	4a6d      	ldr	r2, [pc, #436]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 801447c:	4a69      	ldr	r2, [pc, #420]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 8014482:	4a6a      	ldr	r2, [pc, #424]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 8014484:	69fb      	ldr	r3, [r7, #28]
 8014486:	6293      	str	r3, [r2, #40]	; 0x28

		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo - end_sp*end_sp)/(2.0*max_set.accel)){
 8014488:	e00a      	b.n	80144a0 <search_straight_update_maze_zenmen+0xa8>
			if(maze_map_update_flag == 0){
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	2b00      	cmp	r3, #0
 801448e:	d107      	bne.n	80144a0 <search_straight_update_maze_zenmen+0xa8>
				make_map_queue_zenmen(x,y,goal_size,mask);
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	68b9      	ldr	r1, [r7, #8]
 8014496:	68f8      	ldr	r0, [r7, #12]
 8014498:	f7fc fc74 	bl	8010d84 <make_map_queue_zenmen>
				maze_map_update_flag = 1;
 801449c:	2301      	movs	r3, #1
 801449e:	62fb      	str	r3, [r7, #44]	; 0x2c
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo - end_sp*end_sp)/(2.0*max_set.accel)){
 80144a0:	4b62      	ldr	r3, [pc, #392]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 80144a2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80144a6:	4b5e      	ldr	r3, [pc, #376]	; (8014620 <search_straight_update_maze_zenmen+0x228>)
 80144a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80144ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144b0:	ee17 0a90 	vmov	r0, s15
 80144b4:	f7ec f868 	bl	8000588 <__aeabi_f2d>
 80144b8:	4604      	mov	r4, r0
 80144ba:	460d      	mov	r5, r1
 80144bc:	4b5b      	ldr	r3, [pc, #364]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 80144be:	ed93 7a00 	vldr	s14, [r3]
 80144c2:	4b5a      	ldr	r3, [pc, #360]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 80144c4:	edd3 7a00 	vldr	s15, [r3]
 80144c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80144cc:	edd7 6a04 	vldr	s13, [r7, #16]
 80144d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80144d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80144d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80144dc:	ee17 0a90 	vmov	r0, s15
 80144e0:	f7ec f852 	bl	8000588 <__aeabi_f2d>
 80144e4:	f04f 0200 	mov.w	r2, #0
 80144e8:	4b52      	ldr	r3, [pc, #328]	; (8014634 <search_straight_update_maze_zenmen+0x23c>)
 80144ea:	f7ec f8a5 	bl	8000638 <__aeabi_dmul>
 80144ee:	4602      	mov	r2, r0
 80144f0:	460b      	mov	r3, r1
 80144f2:	4690      	mov	r8, r2
 80144f4:	4699      	mov	r9, r3
 80144f6:	4b4d      	ldr	r3, [pc, #308]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	4618      	mov	r0, r3
 80144fc:	f7ec f844 	bl	8000588 <__aeabi_f2d>
 8014500:	4602      	mov	r2, r0
 8014502:	460b      	mov	r3, r1
 8014504:	f7eb fee2 	bl	80002cc <__adddf3>
 8014508:	4602      	mov	r2, r0
 801450a:	460b      	mov	r3, r1
 801450c:	4640      	mov	r0, r8
 801450e:	4649      	mov	r1, r9
 8014510:	f7ec f9bc 	bl	800088c <__aeabi_ddiv>
 8014514:	4602      	mov	r2, r0
 8014516:	460b      	mov	r3, r1
 8014518:	4620      	mov	r0, r4
 801451a:	4629      	mov	r1, r5
 801451c:	f7ec fb1c 	bl	8000b58 <__aeabi_dcmpgt>
 8014520:	4603      	mov	r3, r0
 8014522:	2b00      	cmp	r3, #0
 8014524:	d1b1      	bne.n	801448a <search_straight_update_maze_zenmen+0x92>
			}
		}
		target.accel = -acc;
 8014526:	edd7 7a06 	vldr	s15, [r7, #24]
 801452a:	eef1 7a67 	vneg.f32	s15, s15
 801452e:	4b3d      	ldr	r3, [pc, #244]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 8014530:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 8014534:	e011      	b.n	801455a <search_straight_update_maze_zenmen+0x162>
			if(target.velo < 0.0){
 8014536:	4b3b      	ldr	r3, [pc, #236]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 8014538:	edd3 7a00 	vldr	s15, [r3]
 801453c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014544:	d400      	bmi.n	8014548 <search_straight_update_maze_zenmen+0x150>
 8014546:	e008      	b.n	801455a <search_straight_update_maze_zenmen+0x162>
				target.accel = 0.0;target.velo = 0.0;
 8014548:	4b36      	ldr	r3, [pc, #216]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 801454a:	f04f 0200 	mov.w	r2, #0
 801454e:	60da      	str	r2, [r3, #12]
 8014550:	4b34      	ldr	r3, [pc, #208]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 8014552:	f04f 0200 	mov.w	r2, #0
 8014556:	601a      	str	r2, [r3, #0]
				break;
 8014558:	e00a      	b.n	8014570 <search_straight_update_maze_zenmen+0x178>
		while(machine.length < max_set.length){
 801455a:	4b31      	ldr	r3, [pc, #196]	; (8014620 <search_straight_update_maze_zenmen+0x228>)
 801455c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014560:	4b32      	ldr	r3, [pc, #200]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 8014562:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801456a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801456e:	d4e2      	bmi.n	8014536 <search_straight_update_maze_zenmen+0x13e>
			}
		}
		target.accel = 0.0;target.velo = 0.0;
 8014570:	4b2c      	ldr	r3, [pc, #176]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 8014572:	f04f 0200 	mov.w	r2, #0
 8014576:	60da      	str	r2, [r3, #12]
 8014578:	4b2a      	ldr	r3, [pc, #168]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 801457a:	f04f 0200 	mov.w	r2, #0
 801457e:	601a      	str	r2, [r3, #0]
		HAL_Delay(wait_time);
 8014580:	6a3b      	ldr	r3, [r7, #32]
 8014582:	4618      	mov	r0, r3
 8014584:	f002 fe3a 	bl	80171fc <HAL_Delay>
		run_mode = NON_CON_MODE;
 8014588:	4b27      	ldr	r3, [pc, #156]	; (8014628 <search_straight_update_maze_zenmen+0x230>)
 801458a:	2200      	movs	r2, #0
 801458c:	701a      	strb	r2, [r3, #0]
 801458e:	e113      	b.n	80147b8 <search_straight_update_maze_zenmen+0x3c0>
	}
	else
	{
		run_mode = STRAIGHT_MODE;
 8014590:	4b25      	ldr	r3, [pc, #148]	; (8014628 <search_straight_update_maze_zenmen+0x230>)
 8014592:	2201      	movs	r2, #1
 8014594:	701a      	strb	r2, [r3, #0]

		max_set.velo = max_sp;
 8014596:	4a25      	ldr	r2, [pc, #148]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 8014598:	697b      	ldr	r3, [r7, #20]
 801459a:	6013      	str	r3, [r2, #0]
		max_set.accel = acc;
 801459c:	4a23      	ldr	r2, [pc, #140]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	60d3      	str	r3, [r2, #12]
		target.accel = acc;
 80145a2:	4a20      	ldr	r2, [pc, #128]	; (8014624 <search_straight_update_maze_zenmen+0x22c>)
 80145a4:	69bb      	ldr	r3, [r7, #24]
 80145a6:	60d3      	str	r3, [r2, #12]
		max_set.length = len_target;
 80145a8:	4a20      	ldr	r2, [pc, #128]	; (801462c <search_straight_update_maze_zenmen+0x234>)
 80145aa:	69fb      	ldr	r3, [r7, #28]
 80145ac:	6293      	str	r3, [r2, #40]	; 0x28

		t_bool hosei_flag = false;
 80145ae:	2300      	movs	r3, #0
 80145b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		t_bool r_wall = sen_r.is_wall;
 80145b4:	4b20      	ldr	r3, [pc, #128]	; (8014638 <search_straight_update_maze_zenmen+0x240>)
 80145b6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80145ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		t_bool l_wall = sen_r.is_wall;
 80145be:	4b1e      	ldr	r3, [pc, #120]	; (8014638 <search_straight_update_maze_zenmen+0x240>)
 80145c0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80145c4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		uint16_t r_wall_cnt = 0;
 80145c8:	2300      	movs	r3, #0
 80145ca:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t l_wall_cnt = 0;
 80145cc:	2300      	movs	r3, #0
 80145ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel))
 80145d0:	e082      	b.n	80146d8 <search_straight_update_maze_zenmen+0x2e0>
		{
			if(maze_map_update_flag == 0){
 80145d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d107      	bne.n	80145e8 <search_straight_update_maze_zenmen+0x1f0>
				make_map_queue_zenmen(x,y,goal_size,mask);
 80145d8:	683b      	ldr	r3, [r7, #0]
 80145da:	687a      	ldr	r2, [r7, #4]
 80145dc:	68b9      	ldr	r1, [r7, #8]
 80145de:	68f8      	ldr	r0, [r7, #12]
 80145e0:	f7fc fbd0 	bl	8010d84 <make_map_queue_zenmen>
				maze_map_update_flag = 1;
 80145e4:	2301      	movs	r3, #1
 80145e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			}
			if(len_target == SECTION)
 80145e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80145ec:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801463c <search_straight_update_maze_zenmen+0x244>
 80145f0:	eef4 7a47 	vcmp.f32	s15, s14
 80145f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145f8:	d164      	bne.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
			{
				if(r_wall == true)	r_wall_cnt++;
 80145fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80145fe:	2b01      	cmp	r3, #1
 8014600:	d103      	bne.n	801460a <search_straight_update_maze_zenmen+0x212>
 8014602:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014604:	3301      	adds	r3, #1
 8014606:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014608:	e001      	b.n	801460e <search_straight_update_maze_zenmen+0x216>
				else				r_wall_cnt = 0;
 801460a:	2300      	movs	r3, #0
 801460c:	84fb      	strh	r3, [r7, #38]	; 0x26

				if(l_wall == true)	l_wall_cnt++;
 801460e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8014612:	2b01      	cmp	r3, #1
 8014614:	d114      	bne.n	8014640 <search_straight_update_maze_zenmen+0x248>
 8014616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014618:	3301      	adds	r3, #1
 801461a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801461c:	e012      	b.n	8014644 <search_straight_update_maze_zenmen+0x24c>
 801461e:	bf00      	nop
 8014620:	2001b664 	.word	0x2001b664
 8014624:	2001b6a0 	.word	0x2001b6a0
 8014628:	20001708 	.word	0x20001708
 801462c:	2001b1b4 	.word	0x2001b1b4
 8014630:	40080000 	.word	0x40080000
 8014634:	408f4000 	.word	0x408f4000
 8014638:	2001b5e4 	.word	0x2001b5e4
 801463c:	42b40000 	.word	0x42b40000
				else				l_wall_cnt = 0;
 8014640:	2300      	movs	r3, #0
 8014642:	84bb      	strh	r3, [r7, #36]	; 0x24

				if((r_wall == true && sen_r.is_wall == false) && machine.length > 45.0 && r_wall_cnt > 100)
 8014644:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8014648:	2b01      	cmp	r3, #1
 801464a:	d11b      	bne.n	8014684 <search_straight_update_maze_zenmen+0x28c>
 801464c:	4b61      	ldr	r3, [pc, #388]	; (80147d4 <search_straight_update_maze_zenmen+0x3dc>)
 801464e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014652:	2b00      	cmp	r3, #0
 8014654:	d116      	bne.n	8014684 <search_straight_update_maze_zenmen+0x28c>
 8014656:	4b60      	ldr	r3, [pc, #384]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 8014658:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801465c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80147dc <search_straight_update_maze_zenmen+0x3e4>
 8014660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014668:	dd0c      	ble.n	8014684 <search_straight_update_maze_zenmen+0x28c>
 801466a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801466c:	2b64      	cmp	r3, #100	; 0x64
 801466e:	d909      	bls.n	8014684 <search_straight_update_maze_zenmen+0x28c>
				{
					if(hosei_flag == false)
 8014670:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014674:	2b00      	cmp	r3, #0
 8014676:	d105      	bne.n	8014684 <search_straight_update_maze_zenmen+0x28c>
					{
						machine.length = SEARCH_HOSEI;
 8014678:	4b57      	ldr	r3, [pc, #348]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 801467a:	4a59      	ldr	r2, [pc, #356]	; (80147e0 <search_straight_update_maze_zenmen+0x3e8>)
 801467c:	629a      	str	r2, [r3, #40]	; 0x28
						hosei_flag = true;
 801467e:	2301      	movs	r3, #1
 8014680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
				}
				if((l_wall == true && sen_l.is_wall == false)&& machine.length > 45.0 && l_wall_cnt > 100)
 8014684:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8014688:	2b01      	cmp	r3, #1
 801468a:	d11b      	bne.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
 801468c:	4b55      	ldr	r3, [pc, #340]	; (80147e4 <search_straight_update_maze_zenmen+0x3ec>)
 801468e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8014692:	2b00      	cmp	r3, #0
 8014694:	d116      	bne.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
 8014696:	4b50      	ldr	r3, [pc, #320]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 8014698:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801469c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80147dc <search_straight_update_maze_zenmen+0x3e4>
 80146a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80146a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146a8:	dd0c      	ble.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
 80146aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146ac:	2b64      	cmp	r3, #100	; 0x64
 80146ae:	d909      	bls.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
				{
					if(hosei_flag == false)
 80146b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d105      	bne.n	80146c4 <search_straight_update_maze_zenmen+0x2cc>
					{
						machine.length = SEARCH_HOSEI;
 80146b8:	4b47      	ldr	r3, [pc, #284]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 80146ba:	4a49      	ldr	r2, [pc, #292]	; (80147e0 <search_straight_update_maze_zenmen+0x3e8>)
 80146bc:	629a      	str	r2, [r3, #40]	; 0x28
						hosei_flag = true;
 80146be:	2301      	movs	r3, #1
 80146c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					}
				}
			}
			r_wall = sen_r.is_wall;
 80146c4:	4b43      	ldr	r3, [pc, #268]	; (80147d4 <search_straight_update_maze_zenmen+0x3dc>)
 80146c6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80146ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			l_wall = sen_l.is_wall;
 80146ce:	4b45      	ldr	r3, [pc, #276]	; (80147e4 <search_straight_update_maze_zenmen+0x3ec>)
 80146d0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80146d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		while(max_set.length - machine.length > 1000.0 * (max_set.velo *max_set.velo- end_sp*end_sp)/(2.0*max_set.accel))
 80146d8:	4b43      	ldr	r3, [pc, #268]	; (80147e8 <search_straight_update_maze_zenmen+0x3f0>)
 80146da:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80146de:	4b3e      	ldr	r3, [pc, #248]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 80146e0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80146e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80146e8:	ee17 0a90 	vmov	r0, s15
 80146ec:	f7eb ff4c 	bl	8000588 <__aeabi_f2d>
 80146f0:	4604      	mov	r4, r0
 80146f2:	460d      	mov	r5, r1
 80146f4:	4b3c      	ldr	r3, [pc, #240]	; (80147e8 <search_straight_update_maze_zenmen+0x3f0>)
 80146f6:	ed93 7a00 	vldr	s14, [r3]
 80146fa:	4b3b      	ldr	r3, [pc, #236]	; (80147e8 <search_straight_update_maze_zenmen+0x3f0>)
 80146fc:	edd3 7a00 	vldr	s15, [r3]
 8014700:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014704:	edd7 6a04 	vldr	s13, [r7, #16]
 8014708:	edd7 7a04 	vldr	s15, [r7, #16]
 801470c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014714:	ee17 0a90 	vmov	r0, s15
 8014718:	f7eb ff36 	bl	8000588 <__aeabi_f2d>
 801471c:	f04f 0200 	mov.w	r2, #0
 8014720:	4b32      	ldr	r3, [pc, #200]	; (80147ec <search_straight_update_maze_zenmen+0x3f4>)
 8014722:	f7eb ff89 	bl	8000638 <__aeabi_dmul>
 8014726:	4602      	mov	r2, r0
 8014728:	460b      	mov	r3, r1
 801472a:	4690      	mov	r8, r2
 801472c:	4699      	mov	r9, r3
 801472e:	4b2e      	ldr	r3, [pc, #184]	; (80147e8 <search_straight_update_maze_zenmen+0x3f0>)
 8014730:	68db      	ldr	r3, [r3, #12]
 8014732:	4618      	mov	r0, r3
 8014734:	f7eb ff28 	bl	8000588 <__aeabi_f2d>
 8014738:	4602      	mov	r2, r0
 801473a:	460b      	mov	r3, r1
 801473c:	f7eb fdc6 	bl	80002cc <__adddf3>
 8014740:	4602      	mov	r2, r0
 8014742:	460b      	mov	r3, r1
 8014744:	4640      	mov	r0, r8
 8014746:	4649      	mov	r1, r9
 8014748:	f7ec f8a0 	bl	800088c <__aeabi_ddiv>
 801474c:	4602      	mov	r2, r0
 801474e:	460b      	mov	r3, r1
 8014750:	4620      	mov	r0, r4
 8014752:	4629      	mov	r1, r5
 8014754:	f7ec fa00 	bl	8000b58 <__aeabi_dcmpgt>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	f47f af39 	bne.w	80145d2 <search_straight_update_maze_zenmen+0x1da>
		}
		target.accel = -acc;
 8014760:	edd7 7a06 	vldr	s15, [r7, #24]
 8014764:	eef1 7a67 	vneg.f32	s15, s15
 8014768:	4b21      	ldr	r3, [pc, #132]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 801476a:	edc3 7a03 	vstr	s15, [r3, #12]
		while(machine.length < max_set.length){
 801476e:	e011      	b.n	8014794 <search_straight_update_maze_zenmen+0x39c>
			if(target.velo < end_sp){
 8014770:	4b1f      	ldr	r3, [pc, #124]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 8014772:	edd3 7a00 	vldr	s15, [r3]
 8014776:	ed97 7a04 	vldr	s14, [r7, #16]
 801477a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801477e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014782:	dc00      	bgt.n	8014786 <search_straight_update_maze_zenmen+0x38e>
 8014784:	e006      	b.n	8014794 <search_straight_update_maze_zenmen+0x39c>
				target.accel = 0.0;target.velo = end_sp;
 8014786:	4b1a      	ldr	r3, [pc, #104]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 8014788:	f04f 0200 	mov.w	r2, #0
 801478c:	60da      	str	r2, [r3, #12]
 801478e:	4a18      	ldr	r2, [pc, #96]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 8014790:	693b      	ldr	r3, [r7, #16]
 8014792:	6013      	str	r3, [r2, #0]
		while(machine.length < max_set.length){
 8014794:	4b10      	ldr	r3, [pc, #64]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 8014796:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801479a:	4b13      	ldr	r3, [pc, #76]	; (80147e8 <search_straight_update_maze_zenmen+0x3f0>)
 801479c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80147a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147a8:	d4e2      	bmi.n	8014770 <search_straight_update_maze_zenmen+0x378>
			}
		}
		target.accel = 0.0;target.velo = end_sp;
 80147aa:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 80147ac:	f04f 0200 	mov.w	r2, #0
 80147b0:	60da      	str	r2, [r3, #12]
 80147b2:	4a0f      	ldr	r2, [pc, #60]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 80147b4:	693b      	ldr	r3, [r7, #16]
 80147b6:	6013      	str	r3, [r2, #0]
	}

	machine.length = 0.0;
 80147b8:	4b07      	ldr	r3, [pc, #28]	; (80147d8 <search_straight_update_maze_zenmen+0x3e0>)
 80147ba:	f04f 0200 	mov.w	r2, #0
 80147be:	629a      	str	r2, [r3, #40]	; 0x28
	target.length =  0.0;
 80147c0:	4b0b      	ldr	r3, [pc, #44]	; (80147f0 <search_straight_update_maze_zenmen+0x3f8>)
 80147c2:	f04f 0200 	mov.w	r2, #0
 80147c6:	629a      	str	r2, [r3, #40]	; 0x28
	//run_mode = NON_CON_MODE;

}
 80147c8:	bf00      	nop
 80147ca:	3730      	adds	r7, #48	; 0x30
 80147cc:	46bd      	mov	sp, r7
 80147ce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80147d2:	bf00      	nop
 80147d4:	2001b5e4 	.word	0x2001b5e4
 80147d8:	2001b664 	.word	0x2001b664
 80147dc:	42340000 	.word	0x42340000
 80147e0:	42400000 	.word	0x42400000
 80147e4:	20009410 	.word	0x20009410
 80147e8:	2001b1b4 	.word	0x2001b1b4
 80147ec:	408f4000 	.word	0x408f4000
 80147f0:	2001b6a0 	.word	0x2001b6a0

080147f4 <search_turn90_table_update_maze_zenmen>:

void search_turn90_table_update_maze_zenmen(const t_param* parameter,int *x, int *y,int goal_size ,int mask)
{
 80147f4:	b5b0      	push	{r4, r5, r7, lr}
 80147f6:	b086      	sub	sp, #24
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	60f8      	str	r0, [r7, #12]
 80147fc:	60b9      	str	r1, [r7, #8]
 80147fe:	607a      	str	r2, [r7, #4]
 8014800:	603b      	str	r3, [r7, #0]

	Set_PID_Gain(&velo_g, parameter->sp_gain->Kp, parameter->sp_gain->Ki, parameter->sp_gain->Kd);
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	685b      	ldr	r3, [r3, #4]
 8014806:	edd3 7a00 	vldr	s15, [r3]
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	685b      	ldr	r3, [r3, #4]
 801480e:	ed93 7a01 	vldr	s14, [r3, #4]
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	685b      	ldr	r3, [r3, #4]
 8014816:	edd3 6a02 	vldr	s13, [r3, #8]
 801481a:	eeb0 1a66 	vmov.f32	s2, s13
 801481e:	eef0 0a47 	vmov.f32	s1, s14
 8014822:	eeb0 0a67 	vmov.f32	s0, s15
 8014826:	48a3      	ldr	r0, [pc, #652]	; (8014ab4 <search_turn90_table_update_maze_zenmen+0x2c0>)
 8014828:	f7fa f880 	bl	800e92c <Set_PID_Gain>
	Set_PID_Gain(&omega_g, parameter->om_gain->Kp, parameter->om_gain->Ki, parameter->om_gain->Kd);
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	689b      	ldr	r3, [r3, #8]
 8014830:	edd3 7a00 	vldr	s15, [r3]
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	ed93 7a01 	vldr	s14, [r3, #4]
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	689b      	ldr	r3, [r3, #8]
 8014840:	edd3 6a02 	vldr	s13, [r3, #8]
 8014844:	eeb0 1a66 	vmov.f32	s2, s13
 8014848:	eef0 0a47 	vmov.f32	s1, s14
 801484c:	eeb0 0a67 	vmov.f32	s0, s15
 8014850:	4899      	ldr	r0, [pc, #612]	; (8014ab8 <search_turn90_table_update_maze_zenmen+0x2c4>)
 8014852:	f7fa f86b 	bl	800e92c <Set_PID_Gain>
	Sp_Param_I_Initialize(&target);
 8014856:	4899      	ldr	r0, [pc, #612]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014858:	f7f9 ff66 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_I_Initialize(&machine);
 801485c:	4898      	ldr	r0, [pc, #608]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 801485e:	f7f9 ff63 	bl	800e728 <Sp_Param_I_Initialize>
	Sp_Param_rad_Initialize(&target);
 8014862:	4896      	ldr	r0, [pc, #600]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014864:	f7f9 ff78 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 8014868:	4895      	ldr	r0, [pc, #596]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 801486a:	f7f9 ff75 	bl	800e758 <Sp_Param_rad_Initialize>

	run_mode = STRAIGHT_MODE;
 801486e:	4b95      	ldr	r3, [pc, #596]	; (8014ac4 <search_turn90_table_update_maze_zenmen+0x2d0>)
 8014870:	2201      	movs	r2, #1
 8014872:	701a      	strb	r2, [r3, #0]

	max_set.velo = parameter->param->velo;
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4a93      	ldr	r2, [pc, #588]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 801487c:	6013      	str	r3, [r2, #0]
	target.velo  = parameter->param->velo;
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	4a8d      	ldr	r2, [pc, #564]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014886:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lstart;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	689b      	ldr	r3, [r3, #8]
 801488e:	4a8e      	ldr	r2, [pc, #568]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 8014890:	6293      	str	r3, [r2, #40]	; 0x28

	int maze_map_update_flag = 0;
 8014892:	2300      	movs	r3, #0
 8014894:	617b      	str	r3, [r7, #20]
	if(sen_fr.is_wall == true && sen_fl.is_wall == true)
 8014896:	4b8d      	ldr	r3, [pc, #564]	; (8014acc <search_turn90_table_update_maze_zenmen+0x2d8>)
 8014898:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801489c:	2b01      	cmp	r3, #1
 801489e:	d15e      	bne.n	801495e <search_turn90_table_update_maze_zenmen+0x16a>
 80148a0:	4b8b      	ldr	r3, [pc, #556]	; (8014ad0 <search_turn90_table_update_maze_zenmen+0x2dc>)
 80148a2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d159      	bne.n	801495e <search_turn90_table_update_maze_zenmen+0x16a>
	{
		while((90.0 + 0.0 - ((sen_fr.distance+sen_fl.distance)/2 )) < parameter->param->Lstart){
 80148aa:	bf00      	nop
 80148ac:	4b87      	ldr	r3, [pc, #540]	; (8014acc <search_turn90_table_update_maze_zenmen+0x2d8>)
 80148ae:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80148b2:	4b87      	ldr	r3, [pc, #540]	; (8014ad0 <search_turn90_table_update_maze_zenmen+0x2dc>)
 80148b4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80148b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80148bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80148c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80148c4:	ee16 0a90 	vmov	r0, s13
 80148c8:	f7eb fe5e 	bl	8000588 <__aeabi_f2d>
 80148cc:	4603      	mov	r3, r0
 80148ce:	460c      	mov	r4, r1
 80148d0:	461a      	mov	r2, r3
 80148d2:	4623      	mov	r3, r4
 80148d4:	f04f 0000 	mov.w	r0, #0
 80148d8:	497e      	ldr	r1, [pc, #504]	; (8014ad4 <search_turn90_table_update_maze_zenmen+0x2e0>)
 80148da:	f7eb fcf5 	bl	80002c8 <__aeabi_dsub>
 80148de:	4603      	mov	r3, r0
 80148e0:	460c      	mov	r4, r1
 80148e2:	4625      	mov	r5, r4
 80148e4:	461c      	mov	r4, r3
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	689b      	ldr	r3, [r3, #8]
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7eb fe4b 	bl	8000588 <__aeabi_f2d>
 80148f2:	4602      	mov	r2, r0
 80148f4:	460b      	mov	r3, r1
 80148f6:	4620      	mov	r0, r4
 80148f8:	4629      	mov	r1, r5
 80148fa:	f7ec f90f 	bl	8000b1c <__aeabi_dcmplt>
 80148fe:	4603      	mov	r3, r0
 8014900:	2b00      	cmp	r3, #0
 8014902:	d1d3      	bne.n	80148ac <search_turn90_table_update_maze_zenmen+0xb8>
	if(sen_fr.is_wall == true && sen_fl.is_wall == true)
 8014904:	e039      	b.n	801497a <search_turn90_table_update_maze_zenmen+0x186>
		while(machine.length < parameter->param->Lstart ){
			//if(maze_map_update_flag == 0){
				//make_map_queue(x,y,goal_size,mask);
				//maze_map_update_flag = 1;
			//}
			if((90.0 - (sen_fr.distance+sen_fl.distance)/2) > parameter->param->Lstart) break;
 8014906:	4b71      	ldr	r3, [pc, #452]	; (8014acc <search_turn90_table_update_maze_zenmen+0x2d8>)
 8014908:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 801490c:	4b70      	ldr	r3, [pc, #448]	; (8014ad0 <search_turn90_table_update_maze_zenmen+0x2dc>)
 801490e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8014912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014916:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801491a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801491e:	ee16 0a90 	vmov	r0, s13
 8014922:	f7eb fe31 	bl	8000588 <__aeabi_f2d>
 8014926:	4603      	mov	r3, r0
 8014928:	460c      	mov	r4, r1
 801492a:	461a      	mov	r2, r3
 801492c:	4623      	mov	r3, r4
 801492e:	f04f 0000 	mov.w	r0, #0
 8014932:	4968      	ldr	r1, [pc, #416]	; (8014ad4 <search_turn90_table_update_maze_zenmen+0x2e0>)
 8014934:	f7eb fcc8 	bl	80002c8 <__aeabi_dsub>
 8014938:	4603      	mov	r3, r0
 801493a:	460c      	mov	r4, r1
 801493c:	4625      	mov	r5, r4
 801493e:	461c      	mov	r4, r3
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	689b      	ldr	r3, [r3, #8]
 8014946:	4618      	mov	r0, r3
 8014948:	f7eb fe1e 	bl	8000588 <__aeabi_f2d>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	4620      	mov	r0, r4
 8014952:	4629      	mov	r1, r5
 8014954:	f7ec f900 	bl	8000b58 <__aeabi_dcmpgt>
 8014958:	4603      	mov	r3, r0
 801495a:	2b00      	cmp	r3, #0
 801495c:	d10c      	bne.n	8014978 <search_turn90_table_update_maze_zenmen+0x184>
		while(machine.length < parameter->param->Lstart ){
 801495e:	4b58      	ldr	r3, [pc, #352]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 8014960:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	edd3 7a02 	vldr	s15, [r3, #8]
 801496c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014974:	d4c7      	bmi.n	8014906 <search_turn90_table_update_maze_zenmen+0x112>
 8014976:	e000      	b.n	801497a <search_turn90_table_update_maze_zenmen+0x186>
			if((90.0 - (sen_fr.distance+sen_fl.distance)/2) > parameter->param->Lstart) break;
 8014978:	bf00      	nop
		}
	}


	run_mode = TURN_MODE_TABLE;
 801497a:	4b52      	ldr	r3, [pc, #328]	; (8014ac4 <search_turn90_table_update_maze_zenmen+0x2d0>)
 801497c:	2204      	movs	r2, #4
 801497e:	701a      	strb	r2, [r3, #0]
	max_set.rad_velo = parameter->param->velo/(parameter->param->r_min/1000);							//rad\s
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	edd3 6a00 	vldr	s13, [r3]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	edd3 7a01 	vldr	s15, [r3, #4]
 8014990:	ed9f 6a51 	vldr	s12, [pc, #324]	; 8014ad8 <search_turn90_table_update_maze_zenmen+0x2e4>
 8014994:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8014998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801499c:	4b4a      	ldr	r3, [pc, #296]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 801499e:	edc3 7a05 	vstr	s15, [r3, #20]
	set_turn_time = DEG2RAD(parameter->param->degree)/(accel_Integral*max_set.rad_velo);	//s
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80149aa:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8014adc <search_turn90_table_update_maze_zenmen+0x2e8>
 80149ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80149b2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014ae0 <search_turn90_table_update_maze_zenmen+0x2ec>
 80149b6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80149ba:	4b43      	ldr	r3, [pc, #268]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 80149bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80149c0:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8014ae4 <search_turn90_table_update_maze_zenmen+0x2f0>
 80149c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80149c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80149cc:	4b46      	ldr	r3, [pc, #280]	; (8014ae8 <search_turn90_table_update_maze_zenmen+0x2f4>)
 80149ce:	edc3 7a00 	vstr	s15, [r3]

	Sp_Param_rad_Initialize(&target);
 80149d2:	483a      	ldr	r0, [pc, #232]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 80149d4:	f7f9 fec0 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 80149d8:	4839      	ldr	r0, [pc, #228]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 80149da:	f7f9 febd 	bl	800e758 <Sp_Param_rad_Initialize>
	turn_time = 0;
 80149de:	4b43      	ldr	r3, [pc, #268]	; (8014aec <search_turn90_table_update_maze_zenmen+0x2f8>)
 80149e0:	f04f 0200 	mov.w	r2, #0
 80149e4:	601a      	str	r2, [r3, #0]


	wall_controll.is_controll = true;
 80149e6:	4b42      	ldr	r3, [pc, #264]	; (8014af0 <search_turn90_table_update_maze_zenmen+0x2fc>)
 80149e8:	2201      	movs	r2, #1
 80149ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	while((float)turn_time < set_turn_time * 1000){
 80149ee:	e00a      	b.n	8014a06 <search_turn90_table_update_maze_zenmen+0x212>
		if(maze_map_update_flag == 0){
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d107      	bne.n	8014a06 <search_turn90_table_update_maze_zenmen+0x212>
			make_map_queue_zenmen(x,y,goal_size,mask);
 80149f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f8:	683a      	ldr	r2, [r7, #0]
 80149fa:	6879      	ldr	r1, [r7, #4]
 80149fc:	68b8      	ldr	r0, [r7, #8]
 80149fe:	f7fc f9c1 	bl	8010d84 <make_map_queue_zenmen>
			maze_map_update_flag = 1;
 8014a02:	2301      	movs	r3, #1
 8014a04:	617b      	str	r3, [r7, #20]
	while((float)turn_time < set_turn_time * 1000){
 8014a06:	4b38      	ldr	r3, [pc, #224]	; (8014ae8 <search_turn90_table_update_maze_zenmen+0x2f4>)
 8014a08:	edd3 7a00 	vldr	s15, [r3]
 8014a0c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8014ad8 <search_turn90_table_update_maze_zenmen+0x2e4>
 8014a10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014a14:	4b35      	ldr	r3, [pc, #212]	; (8014aec <search_turn90_table_update_maze_zenmen+0x2f8>)
 8014a16:	edd3 7a00 	vldr	s15, [r3]
 8014a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a22:	dce5      	bgt.n	80149f0 <search_turn90_table_update_maze_zenmen+0x1fc>
		}
	}
	max_set.rad_velo = 0.0f;
 8014a24:	4b28      	ldr	r3, [pc, #160]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 8014a26:	f04f 0200 	mov.w	r2, #0
 8014a2a:	615a      	str	r2, [r3, #20]
	target.rad_velo = 0.0f;
 8014a2c:	4b23      	ldr	r3, [pc, #140]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a2e:	f04f 0200 	mov.w	r2, #0
 8014a32:	615a      	str	r2, [r3, #20]
	target.rad_accel = 0.0f;
 8014a34:	4b21      	ldr	r3, [pc, #132]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a36:	f04f 0200 	mov.w	r2, #0
 8014a3a:	621a      	str	r2, [r3, #32]

	Sp_Param_rad_Initialize(&target);
 8014a3c:	481f      	ldr	r0, [pc, #124]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a3e:	f7f9 fe8b 	bl	800e758 <Sp_Param_rad_Initialize>
	Sp_Param_rad_Initialize(&machine);
 8014a42:	481f      	ldr	r0, [pc, #124]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 8014a44:	f7f9 fe88 	bl	800e758 <Sp_Param_rad_Initialize>

	run_mode = STRAIGHT_MODE;
 8014a48:	4b1e      	ldr	r3, [pc, #120]	; (8014ac4 <search_turn90_table_update_maze_zenmen+0x2d0>)
 8014a4a:	2201      	movs	r2, #1
 8014a4c:	701a      	strb	r2, [r3, #0]
	machine.length	= target.length	= 0.0f;
 8014a4e:	4b1b      	ldr	r3, [pc, #108]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a50:	f04f 0200 	mov.w	r2, #0
 8014a54:	629a      	str	r2, [r3, #40]	; 0x28
 8014a56:	4b19      	ldr	r3, [pc, #100]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a5a:	4a19      	ldr	r2, [pc, #100]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 8014a5c:	6293      	str	r3, [r2, #40]	; 0x28
	max_set.velo	= target.velo	= parameter->param->velo;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	4a15      	ldr	r2, [pc, #84]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a66:	6013      	str	r3, [r2, #0]
 8014a68:	4b14      	ldr	r3, [pc, #80]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4a16      	ldr	r2, [pc, #88]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 8014a6e:	6013      	str	r3, [r2, #0]
	max_set.length = parameter->param->Lend;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	681b      	ldr	r3, [r3, #0]
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	4a14      	ldr	r2, [pc, #80]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 8014a78:	6293      	str	r3, [r2, #40]	; 0x28
	while(machine.length < max_set.length );
 8014a7a:	bf00      	nop
 8014a7c:	4b10      	ldr	r3, [pc, #64]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 8014a7e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8014a82:	4b11      	ldr	r3, [pc, #68]	; (8014ac8 <search_turn90_table_update_maze_zenmen+0x2d4>)
 8014a84:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a90:	d4f4      	bmi.n	8014a7c <search_turn90_table_update_maze_zenmen+0x288>

	machine.length = target.length  = 0.0f;
 8014a92:	4b0a      	ldr	r3, [pc, #40]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a94:	f04f 0200 	mov.w	r2, #0
 8014a98:	629a      	str	r2, [r3, #40]	; 0x28
 8014a9a:	4b08      	ldr	r3, [pc, #32]	; (8014abc <search_turn90_table_update_maze_zenmen+0x2c8>)
 8014a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a9e:	4a08      	ldr	r2, [pc, #32]	; (8014ac0 <search_turn90_table_update_maze_zenmen+0x2cc>)
 8014aa0:	6293      	str	r3, [r2, #40]	; 0x28
	wall_controll.is_controll = true;
 8014aa2:	4b13      	ldr	r3, [pc, #76]	; (8014af0 <search_turn90_table_update_maze_zenmen+0x2fc>)
 8014aa4:	2201      	movs	r2, #1
 8014aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

}
 8014aaa:	bf00      	nop
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8014ab2:	bf00      	nop
 8014ab4:	2001b694 	.word	0x2001b694
 8014ab8:	20009890 	.word	0x20009890
 8014abc:	2001b6a0 	.word	0x2001b6a0
 8014ac0:	2001b664 	.word	0x2001b664
 8014ac4:	20001708 	.word	0x20001708
 8014ac8:	2001b1b4 	.word	0x2001b1b4
 8014acc:	200098a0 	.word	0x200098a0
 8014ad0:	20009914 	.word	0x20009914
 8014ad4:	40568000 	.word	0x40568000
 8014ad8:	447a0000 	.word	0x447a0000
 8014adc:	43340000 	.word	0x43340000
 8014ae0:	40490fda 	.word	0x40490fda
 8014ae4:	3f344d01 	.word	0x3f344d01
 8014ae8:	2001b6e4 	.word	0x2001b6e4
 8014aec:	2001b6e0 	.word	0x2001b6e0
 8014af0:	20000aac 	.word	0x20000aac

08014af4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b08a      	sub	sp, #40	; 0x28
 8014af8:	af00      	add	r7, sp, #0
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8014afa:	f107 0310 	add.w	r3, r7, #16
 8014afe:	2200      	movs	r2, #0
 8014b00:	601a      	str	r2, [r3, #0]
 8014b02:	605a      	str	r2, [r3, #4]
 8014b04:	609a      	str	r2, [r3, #8]
 8014b06:	60da      	str	r2, [r3, #12]
 8014b08:	611a      	str	r2, [r3, #16]
 8014b0a:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8014b0c:	463b      	mov	r3, r7
 8014b0e:	2200      	movs	r2, #0
 8014b10:	601a      	str	r2, [r3, #0]
 8014b12:	605a      	str	r2, [r3, #4]
 8014b14:	609a      	str	r2, [r3, #8]
 8014b16:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8014b18:	4b69      	ldr	r3, [pc, #420]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b1a:	4a6a      	ldr	r2, [pc, #424]	; (8014cc4 <MX_ADC1_Init+0x1d0>)
 8014b1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8014b1e:	4b68      	ldr	r3, [pc, #416]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b20:	2200      	movs	r2, #0
 8014b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8014b24:	4b66      	ldr	r3, [pc, #408]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b26:	2200      	movs	r2, #0
 8014b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8014b2a:	4b65      	ldr	r3, [pc, #404]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8014b30:	4b63      	ldr	r3, [pc, #396]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b32:	2200      	movs	r2, #0
 8014b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8014b36:	4b62      	ldr	r3, [pc, #392]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b38:	2201      	movs	r2, #1
 8014b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8014b3e:	4b60      	ldr	r3, [pc, #384]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b40:	2201      	movs	r2, #1
 8014b42:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 8014b44:	4b5e      	ldr	r3, [pc, #376]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8014b4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC3;
 8014b4c:	4b5c      	ldr	r3, [pc, #368]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8014b52:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8014b54:	4b5a      	ldr	r3, [pc, #360]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8014b5a:	4b59      	ldr	r3, [pc, #356]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b5c:	220a      	movs	r2, #10
 8014b5e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8014b60:	4b57      	ldr	r3, [pc, #348]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b62:	2201      	movs	r2, #1
 8014b64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8014b68:	4b55      	ldr	r3, [pc, #340]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8014b6e:	4854      	ldr	r0, [pc, #336]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b70:	f002 fb66 	bl	8017240 <HAL_ADC_Init>
 8014b74:	4603      	mov	r3, r0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d001      	beq.n	8014b7e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8014b7a:	f001 fb61 	bl	8016240 <Error_Handler>
  }
  /** Configure the analog watchdog 
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8014b7e:	4b52      	ldr	r3, [pc, #328]	; (8014cc8 <MX_ADC1_Init+0x1d4>)
 8014b80:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8014b82:	2300      	movs	r3, #0
 8014b84:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.LowThreshold = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	61bb      	str	r3, [r7, #24]
  AnalogWDGConfig.Channel = ADC_CHANNEL_4;
 8014b8a:	2304      	movs	r3, #4
 8014b8c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.ITMode = DISABLE;
 8014b8e:	2300      	movs	r3, #0
 8014b90:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8014b94:	f107 0310 	add.w	r3, r7, #16
 8014b98:	4619      	mov	r1, r3
 8014b9a:	4849      	ldr	r0, [pc, #292]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014b9c:	f002 fdd6 	bl	801774c <HAL_ADC_AnalogWDGConfig>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d001      	beq.n	8014baa <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8014ba6:	f001 fb4b 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8014baa:	230d      	movs	r3, #13
 8014bac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8014bae:	2301      	movs	r3, #1
 8014bb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8014bb2:	2302      	movs	r3, #2
 8014bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014bb6:	463b      	mov	r3, r7
 8014bb8:	4619      	mov	r1, r3
 8014bba:	4841      	ldr	r0, [pc, #260]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014bbc:	f002 fc94 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d001      	beq.n	8014bca <MX_ADC1_Init+0xd6>
  {
    Error_Handler();
 8014bc6:	f001 fb3b 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8014bca:	2308      	movs	r3, #8
 8014bcc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8014bce:	2302      	movs	r3, #2
 8014bd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014bd2:	463b      	mov	r3, r7
 8014bd4:	4619      	mov	r1, r3
 8014bd6:	483a      	ldr	r0, [pc, #232]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014bd8:	f002 fc86 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d001      	beq.n	8014be6 <MX_ADC1_Init+0xf2>
  {
    Error_Handler();
 8014be2:	f001 fb2d 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 3;
 8014be6:	2303      	movs	r3, #3
 8014be8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014bea:	463b      	mov	r3, r7
 8014bec:	4619      	mov	r1, r3
 8014bee:	4834      	ldr	r0, [pc, #208]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014bf0:	f002 fc7a 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014bf4:	4603      	mov	r3, r0
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d001      	beq.n	8014bfe <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 8014bfa:	f001 fb21 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8014bfe:	2305      	movs	r3, #5
 8014c00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8014c02:	2304      	movs	r3, #4
 8014c04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c06:	463b      	mov	r3, r7
 8014c08:	4619      	mov	r1, r3
 8014c0a:	482d      	ldr	r0, [pc, #180]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c0c:	f002 fc6c 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c10:	4603      	mov	r3, r0
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d001      	beq.n	8014c1a <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 8014c16:	f001 fb13 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 5;
 8014c1a:	2305      	movs	r3, #5
 8014c1c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c1e:	463b      	mov	r3, r7
 8014c20:	4619      	mov	r1, r3
 8014c22:	4827      	ldr	r0, [pc, #156]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c24:	f002 fc60 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d001      	beq.n	8014c32 <MX_ADC1_Init+0x13e>
  {
    Error_Handler();
 8014c2e:	f001 fb07 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8014c32:	2309      	movs	r3, #9
 8014c34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8014c36:	2306      	movs	r3, #6
 8014c38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c3a:	463b      	mov	r3, r7
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	4820      	ldr	r0, [pc, #128]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c40:	f002 fc52 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d001      	beq.n	8014c4e <MX_ADC1_Init+0x15a>
  {
    Error_Handler();
 8014c4a:	f001 faf9 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 7;
 8014c4e:	2307      	movs	r3, #7
 8014c50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c52:	463b      	mov	r3, r7
 8014c54:	4619      	mov	r1, r3
 8014c56:	481a      	ldr	r0, [pc, #104]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c58:	f002 fc46 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c5c:	4603      	mov	r3, r0
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d001      	beq.n	8014c66 <MX_ADC1_Init+0x172>
  {
    Error_Handler();
 8014c62:	f001 faed 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8014c66:	2304      	movs	r3, #4
 8014c68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8014c6a:	2308      	movs	r3, #8
 8014c6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c6e:	463b      	mov	r3, r7
 8014c70:	4619      	mov	r1, r3
 8014c72:	4813      	ldr	r0, [pc, #76]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c74:	f002 fc38 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c78:	4603      	mov	r3, r0
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d001      	beq.n	8014c82 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 8014c7e:	f001 fadf 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 9;
 8014c82:	2309      	movs	r3, #9
 8014c84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014c86:	463b      	mov	r3, r7
 8014c88:	4619      	mov	r1, r3
 8014c8a:	480d      	ldr	r0, [pc, #52]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014c8c:	f002 fc2c 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014c90:	4603      	mov	r3, r0
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	d001      	beq.n	8014c9a <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 8014c96:	f001 fad3 	bl	8016240 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8014c9a:	230d      	movs	r3, #13
 8014c9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8014c9e:	230a      	movs	r3, #10
 8014ca0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8014ca2:	463b      	mov	r3, r7
 8014ca4:	4619      	mov	r1, r3
 8014ca6:	4806      	ldr	r0, [pc, #24]	; (8014cc0 <MX_ADC1_Init+0x1cc>)
 8014ca8:	f002 fc1e 	bl	80174e8 <HAL_ADC_ConfigChannel>
 8014cac:	4603      	mov	r3, r0
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d001      	beq.n	8014cb6 <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8014cb2:	f001 fac5 	bl	8016240 <Error_Handler>
  }

}
 8014cb6:	bf00      	nop
 8014cb8:	3728      	adds	r7, #40	; 0x28
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	2001b7c0 	.word	0x2001b7c0
 8014cc4:	40012000 	.word	0x40012000
 8014cc8:	00800200 	.word	0x00800200

08014ccc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b08c      	sub	sp, #48	; 0x30
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014cd4:	f107 031c 	add.w	r3, r7, #28
 8014cd8:	2200      	movs	r2, #0
 8014cda:	601a      	str	r2, [r3, #0]
 8014cdc:	605a      	str	r2, [r3, #4]
 8014cde:	609a      	str	r2, [r3, #8]
 8014ce0:	60da      	str	r2, [r3, #12]
 8014ce2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	681b      	ldr	r3, [r3, #0]
 8014ce8:	4a4a      	ldr	r2, [pc, #296]	; (8014e14 <HAL_ADC_MspInit+0x148>)
 8014cea:	4293      	cmp	r3, r2
 8014cec:	f040 808d 	bne.w	8014e0a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	61bb      	str	r3, [r7, #24]
 8014cf4:	4b48      	ldr	r3, [pc, #288]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014cf8:	4a47      	ldr	r2, [pc, #284]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014cfe:	6453      	str	r3, [r2, #68]	; 0x44
 8014d00:	4b45      	ldr	r3, [pc, #276]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d08:	61bb      	str	r3, [r7, #24]
 8014d0a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014d0c:	2300      	movs	r3, #0
 8014d0e:	617b      	str	r3, [r7, #20]
 8014d10:	4b41      	ldr	r3, [pc, #260]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d14:	4a40      	ldr	r2, [pc, #256]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d16:	f043 0304 	orr.w	r3, r3, #4
 8014d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8014d1c:	4b3e      	ldr	r3, [pc, #248]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d20:	f003 0304 	and.w	r3, r3, #4
 8014d24:	617b      	str	r3, [r7, #20]
 8014d26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d28:	2300      	movs	r3, #0
 8014d2a:	613b      	str	r3, [r7, #16]
 8014d2c:	4b3a      	ldr	r3, [pc, #232]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d30:	4a39      	ldr	r2, [pc, #228]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d32:	f043 0301 	orr.w	r3, r3, #1
 8014d36:	6313      	str	r3, [r2, #48]	; 0x30
 8014d38:	4b37      	ldr	r3, [pc, #220]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d3c:	f003 0301 	and.w	r3, r3, #1
 8014d40:	613b      	str	r3, [r7, #16]
 8014d42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d44:	2300      	movs	r3, #0
 8014d46:	60fb      	str	r3, [r7, #12]
 8014d48:	4b33      	ldr	r3, [pc, #204]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d4c:	4a32      	ldr	r2, [pc, #200]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d4e:	f043 0302 	orr.w	r3, r3, #2
 8014d52:	6313      	str	r3, [r2, #48]	; 0x30
 8014d54:	4b30      	ldr	r3, [pc, #192]	; (8014e18 <HAL_ADC_MspInit+0x14c>)
 8014d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d58:	f003 0302 	and.w	r3, r3, #2
 8014d5c:	60fb      	str	r3, [r7, #12]
 8014d5e:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8014d60:	2308      	movs	r3, #8
 8014d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014d64:	2303      	movs	r3, #3
 8014d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d68:	2300      	movs	r3, #0
 8014d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014d6c:	f107 031c 	add.w	r3, r7, #28
 8014d70:	4619      	mov	r1, r3
 8014d72:	482a      	ldr	r0, [pc, #168]	; (8014e1c <HAL_ADC_MspInit+0x150>)
 8014d74:	f003 fe2e 	bl	80189d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8014d78:	2330      	movs	r3, #48	; 0x30
 8014d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014d7c:	2303      	movs	r3, #3
 8014d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d80:	2300      	movs	r3, #0
 8014d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d84:	f107 031c 	add.w	r3, r7, #28
 8014d88:	4619      	mov	r1, r3
 8014d8a:	4825      	ldr	r0, [pc, #148]	; (8014e20 <HAL_ADC_MspInit+0x154>)
 8014d8c:	f003 fe22 	bl	80189d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8014d90:	2303      	movs	r3, #3
 8014d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014d94:	2303      	movs	r3, #3
 8014d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d98:	2300      	movs	r3, #0
 8014d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014d9c:	f107 031c 	add.w	r3, r7, #28
 8014da0:	4619      	mov	r1, r3
 8014da2:	4820      	ldr	r0, [pc, #128]	; (8014e24 <HAL_ADC_MspInit+0x158>)
 8014da4:	f003 fe16 	bl	80189d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8014da8:	4b1f      	ldr	r3, [pc, #124]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014daa:	4a20      	ldr	r2, [pc, #128]	; (8014e2c <HAL_ADC_MspInit+0x160>)
 8014dac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8014dae:	4b1e      	ldr	r3, [pc, #120]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014db0:	2200      	movs	r2, #0
 8014db2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014db4:	4b1c      	ldr	r3, [pc, #112]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014db6:	2200      	movs	r2, #0
 8014db8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014dba:	4b1b      	ldr	r3, [pc, #108]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014dc0:	4b19      	ldr	r3, [pc, #100]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014dc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014dc8:	4b17      	ldr	r3, [pc, #92]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014dd0:	4b15      	ldr	r3, [pc, #84]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014dd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014dd8:	4b13      	ldr	r3, [pc, #76]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8014dde:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8014de0:	4b11      	ldr	r3, [pc, #68]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014de2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8014de6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8014de8:	4b0f      	ldr	r3, [pc, #60]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014dea:	2200      	movs	r2, #0
 8014dec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014dee:	480e      	ldr	r0, [pc, #56]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014df0:	f002 ff9c 	bl	8017d2c <HAL_DMA_Init>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d001      	beq.n	8014dfe <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8014dfa:	f001 fa21 	bl	8016240 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	4a09      	ldr	r2, [pc, #36]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014e02:	639a      	str	r2, [r3, #56]	; 0x38
 8014e04:	4a08      	ldr	r2, [pc, #32]	; (8014e28 <HAL_ADC_MspInit+0x15c>)
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8014e0a:	bf00      	nop
 8014e0c:	3730      	adds	r7, #48	; 0x30
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}
 8014e12:	bf00      	nop
 8014e14:	40012000 	.word	0x40012000
 8014e18:	40023800 	.word	0x40023800
 8014e1c:	40020800 	.word	0x40020800
 8014e20:	40020000 	.word	0x40020000
 8014e24:	40020400 	.word	0x40020400
 8014e28:	2001b808 	.word	0x2001b808
 8014e2c:	40026410 	.word	0x40026410

08014e30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	b082      	sub	sp, #8
 8014e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8014e36:	2300      	movs	r3, #0
 8014e38:	607b      	str	r3, [r7, #4]
 8014e3a:	4b23      	ldr	r3, [pc, #140]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e3e:	4a22      	ldr	r2, [pc, #136]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014e44:	6313      	str	r3, [r2, #48]	; 0x30
 8014e46:	4b20      	ldr	r3, [pc, #128]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8014e4e:	607b      	str	r3, [r7, #4]
 8014e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8014e52:	2300      	movs	r3, #0
 8014e54:	603b      	str	r3, [r7, #0]
 8014e56:	4b1c      	ldr	r3, [pc, #112]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e5a:	4a1b      	ldr	r2, [pc, #108]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8014e60:	6313      	str	r3, [r2, #48]	; 0x30
 8014e62:	4b19      	ldr	r3, [pc, #100]	; (8014ec8 <MX_DMA_Init+0x98>)
 8014e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014e6a:	603b      	str	r3, [r7, #0]
 8014e6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8014e6e:	2200      	movs	r2, #0
 8014e70:	2100      	movs	r1, #0
 8014e72:	200e      	movs	r0, #14
 8014e74:	f002 ff23 	bl	8017cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8014e78:	200e      	movs	r0, #14
 8014e7a:	f002 ff3c 	bl	8017cf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8014e7e:	2200      	movs	r2, #0
 8014e80:	2100      	movs	r1, #0
 8014e82:	200f      	movs	r0, #15
 8014e84:	f002 ff1b 	bl	8017cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8014e88:	200f      	movs	r0, #15
 8014e8a:	f002 ff34 	bl	8017cf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8014e8e:	2200      	movs	r2, #0
 8014e90:	2100      	movs	r1, #0
 8014e92:	2038      	movs	r0, #56	; 0x38
 8014e94:	f002 ff13 	bl	8017cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8014e98:	2038      	movs	r0, #56	; 0x38
 8014e9a:	f002 ff2c 	bl	8017cf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	2100      	movs	r1, #0
 8014ea2:	2039      	movs	r0, #57	; 0x39
 8014ea4:	f002 ff0b 	bl	8017cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8014ea8:	2039      	movs	r0, #57	; 0x39
 8014eaa:	f002 ff24 	bl	8017cf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8014eae:	2200      	movs	r2, #0
 8014eb0:	2100      	movs	r1, #0
 8014eb2:	203a      	movs	r0, #58	; 0x3a
 8014eb4:	f002 ff03 	bl	8017cbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8014eb8:	203a      	movs	r0, #58	; 0x3a
 8014eba:	f002 ff1c 	bl	8017cf6 <HAL_NVIC_EnableIRQ>

}
 8014ebe:	bf00      	nop
 8014ec0:	3708      	adds	r7, #8
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	40023800 	.word	0x40023800

08014ecc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b088      	sub	sp, #32
 8014ed0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ed2:	f107 030c 	add.w	r3, r7, #12
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	601a      	str	r2, [r3, #0]
 8014eda:	605a      	str	r2, [r3, #4]
 8014edc:	609a      	str	r2, [r3, #8]
 8014ede:	60da      	str	r2, [r3, #12]
 8014ee0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	60bb      	str	r3, [r7, #8]
 8014ee6:	4b3c      	ldr	r3, [pc, #240]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eea:	4a3b      	ldr	r2, [pc, #236]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014eec:	f043 0304 	orr.w	r3, r3, #4
 8014ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8014ef2:	4b39      	ldr	r3, [pc, #228]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ef6:	f003 0304 	and.w	r3, r3, #4
 8014efa:	60bb      	str	r3, [r7, #8]
 8014efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8014efe:	2300      	movs	r3, #0
 8014f00:	607b      	str	r3, [r7, #4]
 8014f02:	4b35      	ldr	r3, [pc, #212]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f06:	4a34      	ldr	r2, [pc, #208]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f08:	f043 0301 	orr.w	r3, r3, #1
 8014f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8014f0e:	4b32      	ldr	r3, [pc, #200]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f12:	f003 0301 	and.w	r3, r3, #1
 8014f16:	607b      	str	r3, [r7, #4]
 8014f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	603b      	str	r3, [r7, #0]
 8014f1e:	4b2e      	ldr	r3, [pc, #184]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f22:	4a2d      	ldr	r2, [pc, #180]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f24:	f043 0302 	orr.w	r3, r3, #2
 8014f28:	6313      	str	r3, [r2, #48]	; 0x30
 8014f2a:	4b2b      	ldr	r3, [pc, #172]	; (8014fd8 <MX_GPIO_Init+0x10c>)
 8014f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f2e:	f003 0302 	and.w	r3, r3, #2
 8014f32:	603b      	str	r3, [r7, #0]
 8014f34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED1_Pin|photo1_Pin|photo3_Pin 
 8014f36:	2200      	movs	r2, #0
 8014f38:	f240 31b5 	movw	r1, #949	; 0x3b5
 8014f3c:	4827      	ldr	r0, [pc, #156]	; (8014fdc <MX_GPIO_Init+0x110>)
 8014f3e:	f003 fef3 	bl	8018d28 <HAL_GPIO_WritePin>
                          |photo4_Pin|photo2_Pin|LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|CSS_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);
 8014f42:	2200      	movs	r2, #0
 8014f44:	f241 4130 	movw	r1, #5168	; 0x1430
 8014f48:	4825      	ldr	r0, [pc, #148]	; (8014fe0 <MX_GPIO_Init+0x114>)
 8014f4a:	f003 feed 	bl	8018d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED5_GPIO_Port, LED5_Pin, GPIO_PIN_RESET);
 8014f4e:	2200      	movs	r2, #0
 8014f50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f54:	4823      	ldr	r0, [pc, #140]	; (8014fe4 <MX_GPIO_Init+0x118>)
 8014f56:	f003 fee7 	bl	8018d28 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|photo1_Pin|photo3_Pin 
 8014f5a:	f240 33b5 	movw	r3, #949	; 0x3b5
 8014f5e:	60fb      	str	r3, [r7, #12]
                          |photo4_Pin|photo2_Pin|LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014f60:	2301      	movs	r3, #1
 8014f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f64:	2300      	movs	r3, #0
 8014f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014f6c:	f107 030c 	add.w	r3, r7, #12
 8014f70:	4619      	mov	r1, r3
 8014f72:	481a      	ldr	r0, [pc, #104]	; (8014fdc <MX_GPIO_Init+0x110>)
 8014f74:	f003 fd2e 	bl	80189d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|CSS_Pin|LED6_Pin|LED7_Pin;
 8014f78:	f241 4330 	movw	r3, #5168	; 0x1430
 8014f7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014f7e:	2301      	movs	r3, #1
 8014f80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f86:	2300      	movs	r3, #0
 8014f88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014f8a:	f107 030c 	add.w	r3, r7, #12
 8014f8e:	4619      	mov	r1, r3
 8014f90:	4813      	ldr	r0, [pc, #76]	; (8014fe0 <MX_GPIO_Init+0x114>)
 8014f92:	f003 fd1f 	bl	80189d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED5_Pin;
 8014f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8014f9c:	2301      	movs	r3, #1
 8014f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED5_GPIO_Port, &GPIO_InitStruct);
 8014fa8:	f107 030c 	add.w	r3, r7, #12
 8014fac:	4619      	mov	r1, r3
 8014fae:	480d      	ldr	r0, [pc, #52]	; (8014fe4 <MX_GPIO_Init+0x118>)
 8014fb0:	f003 fd10 	bl	80189d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8014fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8014fb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8014fc2:	f107 030c 	add.w	r3, r7, #12
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	4805      	ldr	r0, [pc, #20]	; (8014fe0 <MX_GPIO_Init+0x114>)
 8014fca:	f003 fd03 	bl	80189d4 <HAL_GPIO_Init>

}
 8014fce:	bf00      	nop
 8014fd0:	3720      	adds	r7, #32
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	40023800 	.word	0x40023800
 8014fdc:	40020800 	.word	0x40020800
 8014fe0:	40020400 	.word	0x40020400
 8014fe4:	40020000 	.word	0x40020000

08014fe8 <__NVIC_SystemReset>:
{
 8014fe8:	b480      	push	{r7}
 8014fea:	af00      	add	r7, sp, #0
 8014fec:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014ff0:	4b05      	ldr	r3, [pc, #20]	; (8015008 <__NVIC_SystemReset+0x20>)
 8014ff2:	68db      	ldr	r3, [r3, #12]
 8014ff4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014ff8:	4903      	ldr	r1, [pc, #12]	; (8015008 <__NVIC_SystemReset+0x20>)
 8014ffa:	4b04      	ldr	r3, [pc, #16]	; (801500c <__NVIC_SystemReset+0x24>)
 8014ffc:	4313      	orrs	r3, r2
 8014ffe:	60cb      	str	r3, [r1, #12]
 8015000:	f3bf 8f4f 	dsb	sy
    __NOP();
 8015004:	bf00      	nop
 8015006:	e7fd      	b.n	8015004 <__NVIC_SystemReset+0x1c>
 8015008:	e000ed00 	.word	0xe000ed00
 801500c:	05fa0004 	.word	0x05fa0004

08015010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8015010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015014:	b097      	sub	sp, #92	; 0x5c
 8015016:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8015018:	f002 f87e 	bl	8017118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801501c:	f001 f890 	bl	8016140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8015020:	f7ff ff54 	bl	8014ecc <MX_GPIO_Init>
  MX_DMA_Init();
 8015024:	f7ff ff04 	bl	8014e30 <MX_DMA_Init>
  MX_ADC1_Init();
 8015028:	f7ff fd64 	bl	8014af4 <MX_ADC1_Init>
  MX_SPI2_Init();
 801502c:	f001 f910 	bl	8016250 <MX_SPI2_Init>
  MX_TIM1_Init();
 8015030:	f001 fb18 	bl	8016664 <MX_TIM1_Init>
  MX_TIM2_Init();
 8015034:	f001 fbd0 	bl	80167d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8015038:	f001 fc64 	bl	8016904 <MX_TIM3_Init>
  MX_TIM4_Init();
 801503c:	f001 fcb6 	bl	80169ac <MX_TIM4_Init>
  MX_TIM8_Init();
 8015040:	f001 fd7c 	bl	8016b3c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8015044:	f001 ffcc 	bl	8016fe0 <MX_USART1_UART_Init>
  MX_TIM5_Init();
 8015048:	f001 fd04 	bl	8016a54 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 801504c:	20c8      	movs	r0, #200	; 0xc8
 801504e:	f002 f8d5 	bl	80171fc <HAL_Delay>
  setbuf(stdout, NULL);
 8015052:	4ba1      	ldr	r3, [pc, #644]	; (80152d8 <main+0x2c8>)
 8015054:	681b      	ldr	r3, [r3, #0]
 8015056:	689b      	ldr	r3, [r3, #8]
 8015058:	2100      	movs	r1, #0
 801505a:	4618      	mov	r0, r3
 801505c:	f007 fa50 	bl	801c500 <setbuf>
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, 1);
 8015060:	2201      	movs	r2, #1
 8015062:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015066:	489d      	ldr	r0, [pc, #628]	; (80152dc <main+0x2cc>)
 8015068:	f003 fe5e 	bl	8018d28 <HAL_GPIO_WritePin>
  imu_initialize();
 801506c:	f7f5 fa32 	bl	800a4d4 <imu_initialize>
  IMU_read_DMA_Start();
 8015070:	f7f5 fa74 	bl	800a55c <IMU_read_DMA_Start>
  Encoder_Initialize();		//tim3,4
 8015074:	f7f5 f86c 	bl	800a150 <Encoder_Initialize>
  Sensor_Initialize();		//tim1
 8015078:	f7f8 f9f8 	bl	800d46c <Sensor_Initialize>
  Interrupt_Initialize();	//tim5
 801507c:	f7f5 fd86 	bl	800ab8c <Interrupt_Initialize>
  Motor_Initialize();		//tim2
 8015080:	f7f8 fe18 	bl	800dcb4 <Motor_Initialize>
  FAN_Motor_Initialize();	//tim8
 8015084:	f7f8 fe44 	bl	800dd10 <FAN_Motor_Initialize>
  init_maze();
 8015088:	f7fb f9a4 	bl	80103d4 <init_maze>

  int sx[1] = {0};		int sy[1] = {0};
 801508c:	2300      	movs	r3, #0
 801508e:	633b      	str	r3, [r7, #48]	; 0x30
 8015090:	2300      	movs	r3, #0
 8015092:	62fb      	str	r3, [r7, #44]	; 0x2c
  int gx[MAZE_GOAL_SIZE];	int gy[MAZE_GOAL_SIZE];
  for(int i = 0;i < MAZE_GOAL_SIZE;i++){
 8015094:	2300      	movs	r3, #0
 8015096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015098:	e013      	b.n	80150c2 <main+0xb2>
	  gx[i] = MAZE_GOAL_X + i;
 801509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801509c:	1c5a      	adds	r2, r3, #1
 801509e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80150a6:	440b      	add	r3, r1
 80150a8:	f843 2c1c 	str.w	r2, [r3, #-28]
	  gy[i] = MAZE_GOAL_Y + i;
 80150ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150ae:	009b      	lsls	r3, r3, #2
 80150b0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80150b4:	4413      	add	r3, r2
 80150b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80150b8:	f843 2c24 	str.w	r2, [r3, #-36]
  for(int i = 0;i < MAZE_GOAL_SIZE;i++){
 80150bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150be:	3301      	adds	r3, #1
 80150c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80150c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80150c4:	2b01      	cmp	r3, #1
 80150c6:	dde8      	ble.n	801509a <main+0x8a>
  }

  enable_lsm = true;
 80150c8:	4b85      	ldr	r3, [pc, #532]	; (80152e0 <main+0x2d0>)
 80150ca:	2201      	movs	r2, #1
 80150cc:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(10);
 80150ce:	200a      	movs	r0, #10
 80150d0:	f002 f894 	bl	80171fc <HAL_Delay>
	  Mode_Change_ENC();
 80150d4:	f7f5 fc34 	bl	800a940 <Mode_Change_ENC>
	  Battery_LimiterVoltage();
 80150d8:	f7eb ff90 	bl	8000ffc <Battery_LimiterVoltage>
	  switch((uint8_t)is_mode_enable << 4|mouse_mode){
 80150dc:	4b81      	ldr	r3, [pc, #516]	; (80152e4 <main+0x2d4>)
 80150de:	781b      	ldrb	r3, [r3, #0]
 80150e0:	011b      	lsls	r3, r3, #4
 80150e2:	4a81      	ldr	r2, [pc, #516]	; (80152e8 <main+0x2d8>)
 80150e4:	7812      	ldrb	r2, [r2, #0]
 80150e6:	4313      	orrs	r3, r2
 80150e8:	3b10      	subs	r3, #16
 80150ea:	2b0f      	cmp	r3, #15
 80150ec:	d8ef      	bhi.n	80150ce <main+0xbe>
 80150ee:	a201      	add	r2, pc, #4	; (adr r2, 80150f4 <main+0xe4>)
 80150f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150f4:	080151b1 	.word	0x080151b1
 80150f8:	080151c9 	.word	0x080151c9
 80150fc:	080152b3 	.word	0x080152b3
 8015100:	0801546d 	.word	0x0801546d
 8015104:	0801554d 	.word	0x0801554d
 8015108:	08015685 	.word	0x08015685
 801510c:	080157f1 	.word	0x080157f1
 8015110:	080158d5 	.word	0x080158d5
 8015114:	08015a7d 	.word	0x08015a7d
 8015118:	08015a97 	.word	0x08015a97
 801511c:	08015abb 	.word	0x08015abb
 8015120:	08015ad9 	.word	0x08015ad9
 8015124:	08015bb9 	.word	0x08015bb9
 8015128:	08015ce5 	.word	0x08015ce5
 801512c:	08015e6d 	.word	0x08015e6d
 8015130:	08015f95 	.word	0x08015f95
	  	  case (MOUSE_ENABLE|0x00):
				//Suction_start((int16_t)((5.0)/Battery_GetVoltage()*1000.0));
	  		  	//Suction_start((int16_t)((5.0)/Battery_GetVoltage()*1000.0));
	  			while(Button_Read() != true){
	  				printf("fr:%4d,fl:%4d,sr:%4d,sl%4d,battery:%.2f\n",Sensor_GetValue(sensor_fr),Sensor_GetValue(sensor_fl),Sensor_GetValue(sensor_sr),Sensor_GetValue(sensor_sl),Battery_GetVoltage());
 8015134:	2004      	movs	r0, #4
 8015136:	f7f8 f9e7 	bl	800d508 <Sensor_GetValue>
 801513a:	4603      	mov	r3, r0
 801513c:	461e      	mov	r6, r3
 801513e:	2003      	movs	r0, #3
 8015140:	f7f8 f9e2 	bl	800d508 <Sensor_GetValue>
 8015144:	4603      	mov	r3, r0
 8015146:	4698      	mov	r8, r3
 8015148:	2002      	movs	r0, #2
 801514a:	f7f8 f9dd 	bl	800d508 <Sensor_GetValue>
 801514e:	4603      	mov	r3, r0
 8015150:	4699      	mov	r9, r3
 8015152:	2001      	movs	r0, #1
 8015154:	f7f8 f9d8 	bl	800d508 <Sensor_GetValue>
 8015158:	4603      	mov	r3, r0
 801515a:	461d      	mov	r5, r3
 801515c:	f7eb ff34 	bl	8000fc8 <Battery_GetVoltage>
 8015160:	ee10 3a10 	vmov	r3, s0
 8015164:	4618      	mov	r0, r3
 8015166:	f7eb fa0f 	bl	8000588 <__aeabi_f2d>
 801516a:	4603      	mov	r3, r0
 801516c:	460c      	mov	r4, r1
 801516e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015172:	9500      	str	r5, [sp, #0]
 8015174:	464b      	mov	r3, r9
 8015176:	4642      	mov	r2, r8
 8015178:	4631      	mov	r1, r6
 801517a:	485c      	ldr	r0, [pc, #368]	; (80152ec <main+0x2dc>)
 801517c:	f007 f944 	bl	801c408 <iprintf>
	  				printf("fr:%f,fl:%f\n",sen_fr.distance,sen_fl.distance);
 8015180:	4b5b      	ldr	r3, [pc, #364]	; (80152f0 <main+0x2e0>)
 8015182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015184:	4618      	mov	r0, r3
 8015186:	f7eb f9ff 	bl	8000588 <__aeabi_f2d>
 801518a:	4605      	mov	r5, r0
 801518c:	460e      	mov	r6, r1
 801518e:	4b59      	ldr	r3, [pc, #356]	; (80152f4 <main+0x2e4>)
 8015190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015192:	4618      	mov	r0, r3
 8015194:	f7eb f9f8 	bl	8000588 <__aeabi_f2d>
 8015198:	4603      	mov	r3, r0
 801519a:	460c      	mov	r4, r1
 801519c:	e9cd 3400 	strd	r3, r4, [sp]
 80151a0:	462a      	mov	r2, r5
 80151a2:	4633      	mov	r3, r6
 80151a4:	4854      	ldr	r0, [pc, #336]	; (80152f8 <main+0x2e8>)
 80151a6:	f007 f92f 	bl	801c408 <iprintf>
		  		  	//if(Mode_Start_photo_Sens()) Suction_start((int16_t)((5.0)/Battery_GetVoltage()*1000.0));
	  				HAL_Delay(10);
 80151aa:	200a      	movs	r0, #10
 80151ac:	f002 f826 	bl	80171fc <HAL_Delay>
	  			while(Button_Read() != true){
 80151b0:	f7f5 fc68 	bl	800aa84 <Button_Read>
 80151b4:	4603      	mov	r3, r0
 80151b6:	2b01      	cmp	r3, #1
 80151b8:	d1bc      	bne.n	8015134 <main+0x124>
	  			}
	  			Suction_Stop();
 80151ba:	f7f8 ff65 	bl	800e088 <Suction_Stop>

	  			is_mode_enable = false;
 80151be:	4b49      	ldr	r3, [pc, #292]	; (80152e4 <main+0x2d4>)
 80151c0:	2200      	movs	r2, #0
 80151c2:	701a      	strb	r2, [r3, #0]
	  			break;
 80151c4:	f000 bf95 	b.w	80160f2 <main+0x10e2>
	  	  case (MOUSE_ENABLE|0x01):
	  			if(Mode_Start_photo_Sens())
 80151c8:	f7f5 fc3e 	bl	800aa48 <Mode_Start_photo_Sens>
 80151cc:	4603      	mov	r3, r0
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f000 8773 	beq.w	80160ba <main+0x10aa>
	  			{
	  				Check_LED_Toggle(5);
 80151d4:	2005      	movs	r0, #5
 80151d6:	f7f5 faeb 	bl	800a7b0 <Check_LED_Toggle>
	  				Set_Velo_PID_Gain(12.0,0.2,0.0);//14.0,0.1,0.0;
 80151da:	ed9f 1a48 	vldr	s2, [pc, #288]	; 80152fc <main+0x2ec>
 80151de:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015300 <main+0x2f0>
 80151e2:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 80151e6:	f7f9 fb6d 	bl	800e8c4 <Set_Velo_PID_Gain>
	  				Set_Omega_PID_Gain(0.4f, 0.001f, 0.0f);
 80151ea:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80152fc <main+0x2ec>
 80151ee:	eddf 0a45 	vldr	s1, [pc, #276]	; 8015304 <main+0x2f4>
 80151f2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015308 <main+0x2f8>
 80151f6:	f7f9 fb7f 	bl	800e8f8 <Set_Omega_PID_Gain>
	  				Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.02);
 80151fa:	ed9f 1a44 	vldr	s2, [pc, #272]	; 801530c <main+0x2fc>
 80151fe:	eddf 0a3f 	vldr	s1, [pc, #252]	; 80152fc <main+0x2ec>
 8015202:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8015310 <main+0x300>
 8015206:	4843      	ldr	r0, [pc, #268]	; (8015314 <main+0x304>)
 8015208:	f7f9 fb90 	bl	800e92c <Set_PID_Gain>
	  				Sp_Param_Initialize(&machine);
 801520c:	4842      	ldr	r0, [pc, #264]	; (8015318 <main+0x308>)
 801520e:	f7f9 fab1 	bl	800e774 <Sp_Param_Initialize>
	  				Sp_Param_Initialize(&target);
 8015212:	4842      	ldr	r0, [pc, #264]	; (801531c <main+0x30c>)
 8015214:	f7f9 faae 	bl	800e774 <Sp_Param_Initialize>
	  				Sp_Param_Initialize(&max_set);
 8015218:	4841      	ldr	r0, [pc, #260]	; (8015320 <main+0x310>)
 801521a:	f7f9 faab 	bl	800e774 <Sp_Param_Initialize>
	  				Suction_start((int16_t)((8.0)/Battery_GetVoltage()*1000.0));HAL_Delay(300);
 801521e:	f7eb fed3 	bl	8000fc8 <Battery_GetVoltage>
 8015222:	ee10 3a10 	vmov	r3, s0
 8015226:	4618      	mov	r0, r3
 8015228:	f7eb f9ae 	bl	8000588 <__aeabi_f2d>
 801522c:	4603      	mov	r3, r0
 801522e:	460c      	mov	r4, r1
 8015230:	461a      	mov	r2, r3
 8015232:	4623      	mov	r3, r4
 8015234:	f04f 0000 	mov.w	r0, #0
 8015238:	493a      	ldr	r1, [pc, #232]	; (8015324 <main+0x314>)
 801523a:	f7eb fb27 	bl	800088c <__aeabi_ddiv>
 801523e:	4603      	mov	r3, r0
 8015240:	460c      	mov	r4, r1
 8015242:	4618      	mov	r0, r3
 8015244:	4621      	mov	r1, r4
 8015246:	f04f 0200 	mov.w	r2, #0
 801524a:	4b37      	ldr	r3, [pc, #220]	; (8015328 <main+0x318>)
 801524c:	f7eb f9f4 	bl	8000638 <__aeabi_dmul>
 8015250:	4603      	mov	r3, r0
 8015252:	460c      	mov	r4, r1
 8015254:	4618      	mov	r0, r3
 8015256:	4621      	mov	r1, r4
 8015258:	f7eb fc9e 	bl	8000b98 <__aeabi_d2iz>
 801525c:	4603      	mov	r3, r0
 801525e:	b21b      	sxth	r3, r3
 8015260:	4618      	mov	r0, r3
 8015262:	f7f8 fee7 	bl	800e034 <Suction_start>
 8015266:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801526a:	f001 ffc7 	bl	80171fc <HAL_Delay>
	  				wall_controll.is_controll = true;
 801526e:	4b29      	ldr	r3, [pc, #164]	; (8015314 <main+0x304>)
 8015270:	2201      	movs	r2, #1
 8015272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  				//wall_controll.is_controll = false;
	  				log_flag = true;time = 0;
 8015276:	4b2d      	ldr	r3, [pc, #180]	; (801532c <main+0x31c>)
 8015278:	2201      	movs	r2, #1
 801527a:	701a      	strb	r2, [r3, #0]
 801527c:	4b2c      	ldr	r3, [pc, #176]	; (8015330 <main+0x320>)
 801527e:	2200      	movs	r2, #0
 8015280:	601a      	str	r2, [r3, #0]
	  				//slalom_check(&st_param_1000,mode_1000,Turn_in_L45);
	  				//straight(90.0*7+15.0,25.0,4.0,0.0);
	  				//slalom_check(&st_param_1200,mode_1200,Long_turnR180);
	  				//long_turn(mode_1200[Long_turnR180], &st_param_1200);
	  				//straight(90.0*1,4.0,0.3,0.0);
	  				straight(90.0*8,25.0,3.8,0.0);
 8015282:	eddf 1a1e 	vldr	s3, [pc, #120]	; 80152fc <main+0x2ec>
 8015286:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8015334 <main+0x324>
 801528a:	eef3 0a09 	vmov.f32	s1, #57	; 0x41c80000  25.0
 801528e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8015338 <main+0x328>
 8015292:	f7f9 fb65 	bl	800e960 <straight>
	  				//slalom_check_R90();
	  				//set_stop_wall(2000);

	  				wall_controll.is_controll = false;
 8015296:	4b1f      	ldr	r3, [pc, #124]	; (8015314 <main+0x304>)
 8015298:	2200      	movs	r2, #0
 801529a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  				Suction_Stop();
 801529e:	f7f8 fef3 	bl	800e088 <Suction_Stop>
	  				log_flag = false;
 80152a2:	4b22      	ldr	r3, [pc, #136]	; (801532c <main+0x31c>)
 80152a4:	2200      	movs	r2, #0
 80152a6:	701a      	strb	r2, [r3, #0]
	  				is_mode_enable = false;
 80152a8:	4b0e      	ldr	r3, [pc, #56]	; (80152e4 <main+0x2d4>)
 80152aa:	2200      	movs	r2, #0
 80152ac:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 80152ae:	f000 bf04 	b.w	80160ba <main+0x10aa>
	  	  case (MOUSE_ENABLE|0x02):
	  			if(Mode_Start_photo_Sens())
 80152b2:	f7f5 fbc9 	bl	800aa48 <Mode_Start_photo_Sens>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	f000 8701 	beq.w	80160c0 <main+0x10b0>
	  			{
	  				Check_LED_Toggle(5);
 80152be:	2005      	movs	r0, #5
 80152c0:	f7f5 fa76 	bl	800a7b0 <Check_LED_Toggle>

	  				printf("target_velo,velo,target_rad_velo,rad_velo\n");
 80152c4:	481d      	ldr	r0, [pc, #116]	; (801533c <main+0x32c>)
 80152c6:	f007 f913 	bl	801c4f0 <puts>
	  				HAL_Delay(2);
 80152ca:	2002      	movs	r0, #2
 80152cc:	f001 ff96 	bl	80171fc <HAL_Delay>
	  				for(int i = 0;i < LOG_COUNT;i++){
 80152d0:	2300      	movs	r3, #0
 80152d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80152d4:	e0c0      	b.n	8015458 <main+0x448>
 80152d6:	bf00      	nop
 80152d8:	20000020 	.word	0x20000020
 80152dc:	40020400 	.word	0x40020400
 80152e0:	20000af0 	.word	0x20000af0
 80152e4:	200002a8 	.word	0x200002a8
 80152e8:	20000aec 	.word	0x20000aec
 80152ec:	0801e400 	.word	0x0801e400
 80152f0:	200098a0 	.word	0x200098a0
 80152f4:	20009914 	.word	0x20009914
 80152f8:	0801e42c 	.word	0x0801e42c
 80152fc:	00000000 	.word	0x00000000
 8015300:	3e4ccccd 	.word	0x3e4ccccd
 8015304:	3a83126f 	.word	0x3a83126f
 8015308:	3ecccccd 	.word	0x3ecccccd
 801530c:	3ca3d70a 	.word	0x3ca3d70a
 8015310:	3e19999a 	.word	0x3e19999a
 8015314:	20000aac 	.word	0x20000aac
 8015318:	2001b664 	.word	0x2001b664
 801531c:	2001b6a0 	.word	0x2001b6a0
 8015320:	2001b1b4 	.word	0x2001b1b4
 8015324:	40200000 	.word	0x40200000
 8015328:	408f4000 	.word	0x408f4000
 801532c:	2001b658 	.word	0x2001b658
 8015330:	20009998 	.word	0x20009998
 8015334:	40733333 	.word	0x40733333
 8015338:	44340000 	.word	0x44340000
 801533c:	0801e43c 	.word	0x0801e43c
	  					printf("%.3f,%.3f,",log_data[0][i],log_data[1][i]);
 8015340:	4abb      	ldr	r2, [pc, #748]	; (8015630 <main+0x620>)
 8015342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015344:	009b      	lsls	r3, r3, #2
 8015346:	4413      	add	r3, r2
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	4618      	mov	r0, r3
 801534c:	f7eb f91c 	bl	8000588 <__aeabi_f2d>
 8015350:	4605      	mov	r5, r0
 8015352:	460e      	mov	r6, r1
 8015354:	4ab6      	ldr	r2, [pc, #728]	; (8015630 <main+0x620>)
 8015356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015358:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801535c:	009b      	lsls	r3, r3, #2
 801535e:	4413      	add	r3, r2
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4618      	mov	r0, r3
 8015364:	f7eb f910 	bl	8000588 <__aeabi_f2d>
 8015368:	4603      	mov	r3, r0
 801536a:	460c      	mov	r4, r1
 801536c:	e9cd 3400 	strd	r3, r4, [sp]
 8015370:	462a      	mov	r2, r5
 8015372:	4633      	mov	r3, r6
 8015374:	48af      	ldr	r0, [pc, #700]	; (8015634 <main+0x624>)
 8015376:	f007 f847 	bl	801c408 <iprintf>
	  					HAL_Delay(3);
 801537a:	2003      	movs	r0, #3
 801537c:	f001 ff3e 	bl	80171fc <HAL_Delay>
	  					printf("%.3f,%.3f,",log_data[2][i],log_data[3][i]);
 8015380:	4aab      	ldr	r2, [pc, #684]	; (8015630 <main+0x620>)
 8015382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015384:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	4413      	add	r3, r2
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4618      	mov	r0, r3
 8015390:	f7eb f8fa 	bl	8000588 <__aeabi_f2d>
 8015394:	4605      	mov	r5, r0
 8015396:	460e      	mov	r6, r1
 8015398:	4aa5      	ldr	r2, [pc, #660]	; (8015630 <main+0x620>)
 801539a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801539c:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80153a0:	009b      	lsls	r3, r3, #2
 80153a2:	4413      	add	r3, r2
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7eb f8ee 	bl	8000588 <__aeabi_f2d>
 80153ac:	4603      	mov	r3, r0
 80153ae:	460c      	mov	r4, r1
 80153b0:	e9cd 3400 	strd	r3, r4, [sp]
 80153b4:	462a      	mov	r2, r5
 80153b6:	4633      	mov	r3, r6
 80153b8:	489e      	ldr	r0, [pc, #632]	; (8015634 <main+0x624>)
 80153ba:	f007 f825 	bl	801c408 <iprintf>
	  					HAL_Delay(3);
 80153be:	2003      	movs	r0, #3
 80153c0:	f001 ff1c 	bl	80171fc <HAL_Delay>
	  					printf("%.3f,%.3f,",log_data[4][i],log_data[5][i]);
 80153c4:	4a9a      	ldr	r2, [pc, #616]	; (8015630 <main+0x620>)
 80153c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153c8:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	4413      	add	r3, r2
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	4618      	mov	r0, r3
 80153d4:	f7eb f8d8 	bl	8000588 <__aeabi_f2d>
 80153d8:	4605      	mov	r5, r0
 80153da:	460e      	mov	r6, r1
 80153dc:	4a94      	ldr	r2, [pc, #592]	; (8015630 <main+0x620>)
 80153de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80153e0:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80153e4:	3308      	adds	r3, #8
 80153e6:	009b      	lsls	r3, r3, #2
 80153e8:	4413      	add	r3, r2
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7eb f8cb 	bl	8000588 <__aeabi_f2d>
 80153f2:	4603      	mov	r3, r0
 80153f4:	460c      	mov	r4, r1
 80153f6:	e9cd 3400 	strd	r3, r4, [sp]
 80153fa:	462a      	mov	r2, r5
 80153fc:	4633      	mov	r3, r6
 80153fe:	488d      	ldr	r0, [pc, #564]	; (8015634 <main+0x624>)
 8015400:	f007 f802 	bl	801c408 <iprintf>
	  					HAL_Delay(3);
 8015404:	2003      	movs	r0, #3
 8015406:	f001 fef9 	bl	80171fc <HAL_Delay>
	  					printf("%.3f,%.3f,\n",log_data[6][i],log_data[7][i]);
 801540a:	4a89      	ldr	r2, [pc, #548]	; (8015630 <main+0x620>)
 801540c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801540e:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8015412:	3310      	adds	r3, #16
 8015414:	009b      	lsls	r3, r3, #2
 8015416:	4413      	add	r3, r2
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	4618      	mov	r0, r3
 801541c:	f7eb f8b4 	bl	8000588 <__aeabi_f2d>
 8015420:	4605      	mov	r5, r0
 8015422:	460e      	mov	r6, r1
 8015424:	4a82      	ldr	r2, [pc, #520]	; (8015630 <main+0x620>)
 8015426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015428:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 801542c:	3318      	adds	r3, #24
 801542e:	009b      	lsls	r3, r3, #2
 8015430:	4413      	add	r3, r2
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4618      	mov	r0, r3
 8015436:	f7eb f8a7 	bl	8000588 <__aeabi_f2d>
 801543a:	4603      	mov	r3, r0
 801543c:	460c      	mov	r4, r1
 801543e:	e9cd 3400 	strd	r3, r4, [sp]
 8015442:	462a      	mov	r2, r5
 8015444:	4633      	mov	r3, r6
 8015446:	487c      	ldr	r0, [pc, #496]	; (8015638 <main+0x628>)
 8015448:	f006 ffde 	bl	801c408 <iprintf>
	  					HAL_Delay(3);
 801544c:	2003      	movs	r0, #3
 801544e:	f001 fed5 	bl	80171fc <HAL_Delay>
	  				for(int i = 0;i < LOG_COUNT;i++){
 8015452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015454:	3301      	adds	r3, #1
 8015456:	63bb      	str	r3, [r7, #56]	; 0x38
 8015458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801545a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801545e:	f6ff af6f 	blt.w	8015340 <main+0x330>
	  				}

	  				//disp_map();

	  				is_mode_enable = false;
 8015462:	4b76      	ldr	r3, [pc, #472]	; (801563c <main+0x62c>)
 8015464:	2200      	movs	r2, #0
 8015466:	701a      	strb	r2, [r3, #0]
	  			}
	  			break;
 8015468:	f000 be2a 	b.w	80160c0 <main+0x10b0>
	  	  case (MOUSE_ENABLE|0x03):
	  			 if(Mode_Start_photo_Sens())
 801546c:	f7f5 faec 	bl	800aa48 <Mode_Start_photo_Sens>
 8015470:	4603      	mov	r3, r0
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 8627 	beq.w	80160c6 <main+0x10b6>
	  			 {

		  				Check_LED_Toggle(5);
 8015478:	2005      	movs	r0, #5
 801547a:	f7f5 f999 	bl	800a7b0 <Check_LED_Toggle>
		  				Set_Velo_PID_Gain(12.0,0.05,0.0);//14.0,0.1,0.0;
 801547e:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8015640 <main+0x630>
 8015482:	eddf 0a70 	vldr	s1, [pc, #448]	; 8015644 <main+0x634>
 8015486:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 801548a:	f7f9 fa1b 	bl	800e8c4 <Set_Velo_PID_Gain>
		  				Set_Omega_PID_Gain(0.1f, 0.01f, 0.0f);
 801548e:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8015640 <main+0x630>
 8015492:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8015648 <main+0x638>
 8015496:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801564c <main+0x63c>
 801549a:	f7f9 fa2d 	bl	800e8f8 <Set_Omega_PID_Gain>
		  				Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.02);
 801549e:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8015650 <main+0x640>
 80154a2:	eddf 0a67 	vldr	s1, [pc, #412]	; 8015640 <main+0x630>
 80154a6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015654 <main+0x644>
 80154aa:	486b      	ldr	r0, [pc, #428]	; (8015658 <main+0x648>)
 80154ac:	f7f9 fa3e 	bl	800e92c <Set_PID_Gain>
		  				Sp_Param_Initialize(&machine);
 80154b0:	486a      	ldr	r0, [pc, #424]	; (801565c <main+0x64c>)
 80154b2:	f7f9 f95f 	bl	800e774 <Sp_Param_Initialize>
		  				Sp_Param_Initialize(&target);
 80154b6:	486a      	ldr	r0, [pc, #424]	; (8015660 <main+0x650>)
 80154b8:	f7f9 f95c 	bl	800e774 <Sp_Param_Initialize>
		  				Sp_Param_Initialize(&max_set);
 80154bc:	4869      	ldr	r0, [pc, #420]	; (8015664 <main+0x654>)
 80154be:	f7f9 f959 	bl	800e774 <Sp_Param_Initialize>
		  				Suction_start((int16_t)((8.0)/Battery_GetVoltage()*1000.0));HAL_Delay(300);
 80154c2:	f7eb fd81 	bl	8000fc8 <Battery_GetVoltage>
 80154c6:	ee10 3a10 	vmov	r3, s0
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7eb f85c 	bl	8000588 <__aeabi_f2d>
 80154d0:	4603      	mov	r3, r0
 80154d2:	460c      	mov	r4, r1
 80154d4:	461a      	mov	r2, r3
 80154d6:	4623      	mov	r3, r4
 80154d8:	f04f 0000 	mov.w	r0, #0
 80154dc:	4962      	ldr	r1, [pc, #392]	; (8015668 <main+0x658>)
 80154de:	f7eb f9d5 	bl	800088c <__aeabi_ddiv>
 80154e2:	4603      	mov	r3, r0
 80154e4:	460c      	mov	r4, r1
 80154e6:	4618      	mov	r0, r3
 80154e8:	4621      	mov	r1, r4
 80154ea:	f04f 0200 	mov.w	r2, #0
 80154ee:	4b5f      	ldr	r3, [pc, #380]	; (801566c <main+0x65c>)
 80154f0:	f7eb f8a2 	bl	8000638 <__aeabi_dmul>
 80154f4:	4603      	mov	r3, r0
 80154f6:	460c      	mov	r4, r1
 80154f8:	4618      	mov	r0, r3
 80154fa:	4621      	mov	r1, r4
 80154fc:	f7eb fb4c 	bl	8000b98 <__aeabi_d2iz>
 8015500:	4603      	mov	r3, r0
 8015502:	b21b      	sxth	r3, r3
 8015504:	4618      	mov	r0, r3
 8015506:	f7f8 fd95 	bl	800e034 <Suction_start>
 801550a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 801550e:	f001 fe75 	bl	80171fc <HAL_Delay>
		  				wall_controll.is_controll = true;
 8015512:	4b51      	ldr	r3, [pc, #324]	; (8015658 <main+0x648>)
 8015514:	2201      	movs	r2, #1
 8015516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  				log_flag = true;time = 0;
 801551a:	4b55      	ldr	r3, [pc, #340]	; (8015670 <main+0x660>)
 801551c:	2201      	movs	r2, #1
 801551e:	701a      	strb	r2, [r3, #0]
 8015520:	4b54      	ldr	r3, [pc, #336]	; (8015674 <main+0x664>)
 8015522:	2200      	movs	r2, #0
 8015524:	601a      	str	r2, [r3, #0]
		  				slalom_check(&st_param_1200,mode_1200,Turn_in_R45);
 8015526:	2207      	movs	r2, #7
 8015528:	4953      	ldr	r1, [pc, #332]	; (8015678 <main+0x668>)
 801552a:	4854      	ldr	r0, [pc, #336]	; (801567c <main+0x66c>)
 801552c:	f7f8 fdd4 	bl	800e0d8 <slalom_check>
		  				//slalom_check_L90();
		  				wall_controll.is_controll = false;
 8015530:	4b49      	ldr	r3, [pc, #292]	; (8015658 <main+0x648>)
 8015532:	2200      	movs	r2, #0
 8015534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  				Suction_Stop();
 8015538:	f7f8 fda6 	bl	800e088 <Suction_Stop>
		  				log_flag = false;
 801553c:	4b4c      	ldr	r3, [pc, #304]	; (8015670 <main+0x660>)
 801553e:	2200      	movs	r2, #0
 8015540:	701a      	strb	r2, [r3, #0]
		  				is_mode_enable = false;
 8015542:	4b3e      	ldr	r3, [pc, #248]	; (801563c <main+0x62c>)
 8015544:	2200      	movs	r2, #0
 8015546:	701a      	strb	r2, [r3, #0]
	  			 }
	  			break;
 8015548:	f000 bdbd 	b.w	80160c6 <main+0x10b6>
	  	  case (MOUSE_ENABLE|0x04):
	  		  	 if(Mode_Start_photo_Sens())
 801554c:	f7f5 fa7c 	bl	800aa48 <Mode_Start_photo_Sens>
 8015550:	4603      	mov	r3, r0
 8015552:	2b00      	cmp	r3, #0
 8015554:	d067      	beq.n	8015626 <main+0x616>
	  			 {
		  				Check_LED_Toggle(5);
 8015556:	2005      	movs	r0, #5
 8015558:	f7f5 f92a 	bl	800a7b0 <Check_LED_Toggle>
		  				Set_Velo_PID_Gain(12.0,0.05,0.0);//14.0,0.1,0.0;
 801555c:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8015640 <main+0x630>
 8015560:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015644 <main+0x634>
 8015564:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015568:	f7f9 f9ac 	bl	800e8c4 <Set_Velo_PID_Gain>
		  				Set_Omega_PID_Gain(0.1f, 0.01f, 0.0f);
 801556c:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8015640 <main+0x630>
 8015570:	eddf 0a35 	vldr	s1, [pc, #212]	; 8015648 <main+0x638>
 8015574:	ed9f 0a35 	vldr	s0, [pc, #212]	; 801564c <main+0x63c>
 8015578:	f7f9 f9be 	bl	800e8f8 <Set_Omega_PID_Gain>
		  				Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.02);
 801557c:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8015650 <main+0x640>
 8015580:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015640 <main+0x630>
 8015584:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8015654 <main+0x644>
 8015588:	4833      	ldr	r0, [pc, #204]	; (8015658 <main+0x648>)
 801558a:	f7f9 f9cf 	bl	800e92c <Set_PID_Gain>
		  				Sp_Param_Initialize(&machine);
 801558e:	4833      	ldr	r0, [pc, #204]	; (801565c <main+0x64c>)
 8015590:	f7f9 f8f0 	bl	800e774 <Sp_Param_Initialize>
		  				Sp_Param_Initialize(&target);
 8015594:	4832      	ldr	r0, [pc, #200]	; (8015660 <main+0x650>)
 8015596:	f7f9 f8ed 	bl	800e774 <Sp_Param_Initialize>
		  				Sp_Param_Initialize(&max_set);
 801559a:	4832      	ldr	r0, [pc, #200]	; (8015664 <main+0x654>)
 801559c:	f7f9 f8ea 	bl	800e774 <Sp_Param_Initialize>
		  				Suction_start((int16_t)((9.0)/Battery_GetVoltage()*1000.0));HAL_Delay(300);
 80155a0:	f7eb fd12 	bl	8000fc8 <Battery_GetVoltage>
 80155a4:	ee10 3a10 	vmov	r3, s0
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7ea ffed 	bl	8000588 <__aeabi_f2d>
 80155ae:	4603      	mov	r3, r0
 80155b0:	460c      	mov	r4, r1
 80155b2:	461a      	mov	r2, r3
 80155b4:	4623      	mov	r3, r4
 80155b6:	f04f 0000 	mov.w	r0, #0
 80155ba:	4931      	ldr	r1, [pc, #196]	; (8015680 <main+0x670>)
 80155bc:	f7eb f966 	bl	800088c <__aeabi_ddiv>
 80155c0:	4603      	mov	r3, r0
 80155c2:	460c      	mov	r4, r1
 80155c4:	4618      	mov	r0, r3
 80155c6:	4621      	mov	r1, r4
 80155c8:	f04f 0200 	mov.w	r2, #0
 80155cc:	4b27      	ldr	r3, [pc, #156]	; (801566c <main+0x65c>)
 80155ce:	f7eb f833 	bl	8000638 <__aeabi_dmul>
 80155d2:	4603      	mov	r3, r0
 80155d4:	460c      	mov	r4, r1
 80155d6:	4618      	mov	r0, r3
 80155d8:	4621      	mov	r1, r4
 80155da:	f7eb fadd 	bl	8000b98 <__aeabi_d2iz>
 80155de:	4603      	mov	r3, r0
 80155e0:	b21b      	sxth	r3, r3
 80155e2:	4618      	mov	r0, r3
 80155e4:	f7f8 fd26 	bl	800e034 <Suction_start>
 80155e8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80155ec:	f001 fe06 	bl	80171fc <HAL_Delay>
		  				wall_controll.is_controll = true;
 80155f0:	4b19      	ldr	r3, [pc, #100]	; (8015658 <main+0x648>)
 80155f2:	2201      	movs	r2, #1
 80155f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  				log_flag = true;time = 0;
 80155f8:	4b1d      	ldr	r3, [pc, #116]	; (8015670 <main+0x660>)
 80155fa:	2201      	movs	r2, #1
 80155fc:	701a      	strb	r2, [r3, #0]
 80155fe:	4b1d      	ldr	r3, [pc, #116]	; (8015674 <main+0x664>)
 8015600:	2200      	movs	r2, #0
 8015602:	601a      	str	r2, [r3, #0]
		  				//slalom_check_R90();
		  				slalom_check(&st_param_1200,mode_1200,Turn_in_R135);
 8015604:	220b      	movs	r2, #11
 8015606:	491c      	ldr	r1, [pc, #112]	; (8015678 <main+0x668>)
 8015608:	481c      	ldr	r0, [pc, #112]	; (801567c <main+0x66c>)
 801560a:	f7f8 fd65 	bl	800e0d8 <slalom_check>
		  				wall_controll.is_controll = false;
 801560e:	4b12      	ldr	r3, [pc, #72]	; (8015658 <main+0x648>)
 8015610:	2200      	movs	r2, #0
 8015612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		  				Suction_Stop();
 8015616:	f7f8 fd37 	bl	800e088 <Suction_Stop>
		  				log_flag = false;
 801561a:	4b15      	ldr	r3, [pc, #84]	; (8015670 <main+0x660>)
 801561c:	2200      	movs	r2, #0
 801561e:	701a      	strb	r2, [r3, #0]
		  				is_mode_enable = false;
 8015620:	4b06      	ldr	r3, [pc, #24]	; (801563c <main+0x62c>)
 8015622:	2200      	movs	r2, #0
 8015624:	701a      	strb	r2, [r3, #0]
	  		  	 }
	  	  	  	HAL_Delay(10);
 8015626:	200a      	movs	r0, #10
 8015628:	f001 fde8 	bl	80171fc <HAL_Delay>
	  			break;
 801562c:	f000 bd61 	b.w	80160f2 <main+0x10e2>
 8015630:	2000170c 	.word	0x2000170c
 8015634:	0801e468 	.word	0x0801e468
 8015638:	0801e474 	.word	0x0801e474
 801563c:	200002a8 	.word	0x200002a8
 8015640:	00000000 	.word	0x00000000
 8015644:	3d4ccccd 	.word	0x3d4ccccd
 8015648:	3c23d70a 	.word	0x3c23d70a
 801564c:	3dcccccd 	.word	0x3dcccccd
 8015650:	3ca3d70a 	.word	0x3ca3d70a
 8015654:	3e19999a 	.word	0x3e19999a
 8015658:	20000aac 	.word	0x20000aac
 801565c:	2001b664 	.word	0x2001b664
 8015660:	2001b6a0 	.word	0x2001b6a0
 8015664:	2001b1b4 	.word	0x2001b1b4
 8015668:	40200000 	.word	0x40200000
 801566c:	408f4000 	.word	0x408f4000
 8015670:	2001b658 	.word	0x2001b658
 8015674:	20009998 	.word	0x20009998
 8015678:	08020360 	.word	0x08020360
 801567c:	0801f6a4 	.word	0x0801f6a4
 8015680:	40220000 	.word	0x40220000
	  	  case (MOUSE_ENABLE|0x05):

  		  		if(Mode_Start_photo_Sens())
 8015684:	f7f5 f9e0 	bl	800aa48 <Mode_Start_photo_Sens>
 8015688:	4603      	mov	r3, r0
 801568a:	2b00      	cmp	r3, #0
 801568c:	f000 80ab 	beq.w	80157e6 <main+0x7d6>
  			  	{
	  				 Check_LED_Toggle(5);
 8015690:	2005      	movs	r0, #5
 8015692:	f7f5 f88d 	bl	800a7b0 <Check_LED_Toggle>
		  			 Sp_Param_Initialize(&machine);
 8015696:	48d7      	ldr	r0, [pc, #860]	; (80159f4 <main+0x9e4>)
 8015698:	f7f9 f86c 	bl	800e774 <Sp_Param_Initialize>
		  			 Sp_Param_Initialize(&target);
 801569c:	48d6      	ldr	r0, [pc, #856]	; (80159f8 <main+0x9e8>)
 801569e:	f7f9 f869 	bl	800e774 <Sp_Param_Initialize>
		  			 Sp_Param_Initialize(&max_set);
 80156a2:	48d6      	ldr	r0, [pc, #856]	; (80159fc <main+0x9ec>)
 80156a4:	f7f9 f866 	bl	800e774 <Sp_Param_Initialize>
		  			 filter_init();
 80156a8:	f7f8 f9ce 	bl	800da48 <filter_init>
					 mypos.x = mypos.y = 0;
 80156ac:	4bd4      	ldr	r3, [pc, #848]	; (8015a00 <main+0x9f0>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	705a      	strb	r2, [r3, #1]
 80156b2:	4bd3      	ldr	r3, [pc, #844]	; (8015a00 <main+0x9f0>)
 80156b4:	785a      	ldrb	r2, [r3, #1]
 80156b6:	4bd2      	ldr	r3, [pc, #840]	; (8015a00 <main+0x9f0>)
 80156b8:	701a      	strb	r2, [r3, #0]
					 mypos.dir = north;
 80156ba:	4bd1      	ldr	r3, [pc, #836]	; (8015a00 <main+0x9f0>)
 80156bc:	2200      	movs	r2, #0
 80156be:	709a      	strb	r2, [r3, #2]
					 Set_Omega_PID_Gain(om_gain_search_straight.Kp, om_gain_search_straight.Ki, om_gain_search_straight.Kd);
 80156c0:	eddf 7ad0 	vldr	s15, [pc, #832]	; 8015a04 <main+0x9f4>
 80156c4:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8015a08 <main+0x9f8>
 80156c8:	eddf 6ad0 	vldr	s13, [pc, #832]	; 8015a0c <main+0x9fc>
 80156cc:	eeb0 1a66 	vmov.f32	s2, s13
 80156d0:	eef0 0a47 	vmov.f32	s1, s14
 80156d4:	eeb0 0a67 	vmov.f32	s0, s15
 80156d8:	f7f9 f90e 	bl	800e8f8 <Set_Omega_PID_Gain>
					 Set_Velo_PID_Gain(sp_gain_search_straight.Kp, sp_gain_search_straight.Ki, sp_gain_search_straight.Kd);
 80156dc:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 80156e0:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8015a10 <main+0xa00>
 80156e4:	eddf 6ac9 	vldr	s13, [pc, #804]	; 8015a0c <main+0x9fc>
 80156e8:	eeb0 1a66 	vmov.f32	s2, s13
 80156ec:	eef0 0a47 	vmov.f32	s1, s14
 80156f0:	eeb0 0a67 	vmov.f32	s0, s15
 80156f4:	f7f9 f8e6 	bl	800e8c4 <Set_Velo_PID_Gain>
					 const t_straight_param *stmode = &st_param_300;
 80156f8:	4bc6      	ldr	r3, [pc, #792]	; (8015a14 <main+0xa04>)
 80156fa:	637b      	str	r3, [r7, #52]	; 0x34
					 //Suction_start((int16_t)((5.0)/Battery_GetVoltage()*1000.0));HAL_Delay(300);
					 straight(15.0,stmode->param->acc,stmode->param->max_velo,stmode->param->max_velo);
 80156fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	edd3 7a01 	vldr	s15, [r3, #4]
 8015704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	ed93 7a00 	vldr	s14, [r3]
 801570c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801570e:	681b      	ldr	r3, [r3, #0]
 8015710:	edd3 6a00 	vldr	s13, [r3]
 8015714:	eef0 1a66 	vmov.f32	s3, s13
 8015718:	eeb0 1a47 	vmov.f32	s2, s14
 801571c:	eef0 0a67 	vmov.f32	s1, s15
 8015720:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015724:	f7f9 f91c 	bl	800e960 <straight>
					 goal_set_vwall(gx, gy,MAZE_GOAL_SIZE);
 8015728:	f107 011c 	add.w	r1, r7, #28
 801572c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015730:	2202      	movs	r2, #2
 8015732:	4618      	mov	r0, r3
 8015734:	f7fa ff4c 	bl	80105d0 <goal_set_vwall>
					 //search_adachi3(gx, gy,MAZE_GOAL_SIZE);
					 search_adachi4(gx,gy,MAZE_GOAL_SIZE,
 8015738:	f107 011c 	add.w	r1, r7, #28
 801573c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8015740:	4bb5      	ldr	r3, [pc, #724]	; (8015a18 <main+0xa08>)
 8015742:	9302      	str	r3, [sp, #8]
 8015744:	4bb5      	ldr	r3, [pc, #724]	; (8015a1c <main+0xa0c>)
 8015746:	9301      	str	r3, [sp, #4]
 8015748:	4bb5      	ldr	r3, [pc, #724]	; (8015a20 <main+0xa10>)
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4bb1      	ldr	r3, [pc, #708]	; (8015a14 <main+0xa04>)
 801574e:	2202      	movs	r2, #2
 8015750:	f7fc f940 	bl	80119d4 <search_adachi4>
							 	 	&st_param_300		,&st_param_600,
									&param_L90_search	,&param_R90_search);

					 //Suction_Stop();HAL_Delay(100);
					 save_data();
 8015754:	f7f4 fd48 	bl	800a1e8 <save_data>
					 HAL_Delay(100);
 8015758:	2064      	movs	r0, #100	; 0x64
 801575a:	f001 fd4f 	bl	80171fc <HAL_Delay>
					 search_adachi_zenmen3(sx, sy,1);
 801575e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8015762:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015766:	2201      	movs	r2, #1
 8015768:	4618      	mov	r0, r3
 801576a:	f7fd fa03 	bl	8012b74 <search_adachi_zenmen3>
					 save_data();
 801576e:	f7f4 fd3b 	bl	800a1e8 <save_data>
					 HAL_Delay(100);
 8015772:	2064      	movs	r0, #100	; 0x64
 8015774:	f001 fd42 	bl	80171fc <HAL_Delay>
		 			 Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015778:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8015a0c <main+0x9fc>
 801577c:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8015a08 <main+0x9f8>
 8015780:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015a04 <main+0x9f4>
 8015784:	f7f9 f8b8 	bl	800e8f8 <Set_Omega_PID_Gain>
			  		 Set_Velo_PID_Gain(12.0f, 0.1f, 0.0f);
 8015788:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015a0c <main+0x9fc>
 801578c:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015a24 <main+0xa14>
 8015790:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 8015794:	f7f9 f896 	bl	800e8c4 <Set_Velo_PID_Gain>
		  			 Spin_turn(DEG2RAD(180.0), 20.0*PI, 2.0*PI, turn_left);
 8015798:	2001      	movs	r0, #1
 801579a:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015a28 <main+0xa18>
 801579e:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8015a2c <main+0xa1c>
 80157a2:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8015a30 <main+0xa20>
 80157a6:	f7f9 fbb3 	bl	800ef10 <Spin_turn>
		  			 mypos.dir = (mypos.dir + 2 + 4) % 4;
 80157aa:	4b95      	ldr	r3, [pc, #596]	; (8015a00 <main+0x9f0>)
 80157ac:	789b      	ldrb	r3, [r3, #2]
 80157ae:	3306      	adds	r3, #6
 80157b0:	425a      	negs	r2, r3
 80157b2:	f003 0303 	and.w	r3, r3, #3
 80157b6:	f002 0203 	and.w	r2, r2, #3
 80157ba:	bf58      	it	pl
 80157bc:	4253      	negpl	r3, r2
 80157be:	b2da      	uxtb	r2, r3
 80157c0:	4b8f      	ldr	r3, [pc, #572]	; (8015a00 <main+0x9f0>)
 80157c2:	709a      	strb	r2, [r3, #2]
					 HAL_Delay(100);
 80157c4:	2064      	movs	r0, #100	; 0x64
 80157c6:	f001 fd19 	bl	80171fc <HAL_Delay>
					 run_mode = NON_CON_MODE;
 80157ca:	4b9a      	ldr	r3, [pc, #616]	; (8015a34 <main+0xa24>)
 80157cc:	2200      	movs	r2, #0
 80157ce:	701a      	strb	r2, [r3, #0]
					 goal_clear_vwall(gx, gy,MAZE_GOAL_SIZE);
 80157d0:	f107 011c 	add.w	r1, r7, #28
 80157d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80157d8:	2202      	movs	r2, #2
 80157da:	4618      	mov	r0, r3
 80157dc:	f7fa ffa8 	bl	8010730 <goal_clear_vwall>
			  		 is_mode_enable = false;
 80157e0:	4b95      	ldr	r3, [pc, #596]	; (8015a38 <main+0xa28>)
 80157e2:	2200      	movs	r2, #0
 80157e4:	701a      	strb	r2, [r3, #0]
	  			  	Suction_Stop();
	  			  	log_flag = false;
	  			  	is_mode_enable = false;
	  		  	}
	  		  	*/
	  	  	  	HAL_Delay(10);
 80157e6:	200a      	movs	r0, #10
 80157e8:	f001 fd08 	bl	80171fc <HAL_Delay>
	  			break;
 80157ec:	f000 bc81 	b.w	80160f2 <main+0x10e2>
	  	  case (MOUSE_ENABLE|0x06):
	  		  			if(Mode_Start_photo_Sens())
 80157f0:	f7f5 f92a 	bl	800aa48 <Mode_Start_photo_Sens>
 80157f4:	4603      	mov	r3, r0
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d067      	beq.n	80158ca <main+0x8ba>
	  		  			{
	  		   				Check_LED_Toggle(5);
 80157fa:	2005      	movs	r0, #5
 80157fc:	f7f4 ffd8 	bl	800a7b0 <Check_LED_Toggle>
	  		  				Set_Velo_PID_Gain(12.0,0.05,0.0);//14.0,0.1,0.0;
 8015800:	ed9f 1a82 	vldr	s2, [pc, #520]	; 8015a0c <main+0x9fc>
 8015804:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8015a3c <main+0xa2c>
 8015808:	eeb2 0a08 	vmov.f32	s0, #40	; 0x41400000  12.0
 801580c:	f7f9 f85a 	bl	800e8c4 <Set_Velo_PID_Gain>
	  		  				Set_Omega_PID_Gain(0.1f, 0.01f, 0.0f);
 8015810:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8015a0c <main+0x9fc>
 8015814:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015a08 <main+0x9f8>
 8015818:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8015a24 <main+0xa14>
 801581c:	f7f9 f86c 	bl	800e8f8 <Set_Omega_PID_Gain>
	  		  			  	Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.02);
 8015820:	ed9f 1a87 	vldr	s2, [pc, #540]	; 8015a40 <main+0xa30>
 8015824:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015a0c <main+0x9fc>
 8015828:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015a44 <main+0xa34>
 801582c:	4886      	ldr	r0, [pc, #536]	; (8015a48 <main+0xa38>)
 801582e:	f7f9 f87d 	bl	800e92c <Set_PID_Gain>
	  		  			  	Sp_Param_Initialize(&machine);
 8015832:	4870      	ldr	r0, [pc, #448]	; (80159f4 <main+0x9e4>)
 8015834:	f7f8 ff9e 	bl	800e774 <Sp_Param_Initialize>
	  		  			  	Sp_Param_Initialize(&target);
 8015838:	486f      	ldr	r0, [pc, #444]	; (80159f8 <main+0x9e8>)
 801583a:	f7f8 ff9b 	bl	800e774 <Sp_Param_Initialize>
	  		  			  	Sp_Param_Initialize(&max_set);
 801583e:	486f      	ldr	r0, [pc, #444]	; (80159fc <main+0x9ec>)
 8015840:	f7f8 ff98 	bl	800e774 <Sp_Param_Initialize>
	  		  			  	Suction_start((int16_t)((6.0)/Battery_GetVoltage()*1000.0));HAL_Delay(300);
 8015844:	f7eb fbc0 	bl	8000fc8 <Battery_GetVoltage>
 8015848:	ee10 3a10 	vmov	r3, s0
 801584c:	4618      	mov	r0, r3
 801584e:	f7ea fe9b 	bl	8000588 <__aeabi_f2d>
 8015852:	4603      	mov	r3, r0
 8015854:	460c      	mov	r4, r1
 8015856:	461a      	mov	r2, r3
 8015858:	4623      	mov	r3, r4
 801585a:	f04f 0000 	mov.w	r0, #0
 801585e:	497b      	ldr	r1, [pc, #492]	; (8015a4c <main+0xa3c>)
 8015860:	f7eb f814 	bl	800088c <__aeabi_ddiv>
 8015864:	4603      	mov	r3, r0
 8015866:	460c      	mov	r4, r1
 8015868:	4618      	mov	r0, r3
 801586a:	4621      	mov	r1, r4
 801586c:	f04f 0200 	mov.w	r2, #0
 8015870:	4b77      	ldr	r3, [pc, #476]	; (8015a50 <main+0xa40>)
 8015872:	f7ea fee1 	bl	8000638 <__aeabi_dmul>
 8015876:	4603      	mov	r3, r0
 8015878:	460c      	mov	r4, r1
 801587a:	4618      	mov	r0, r3
 801587c:	4621      	mov	r1, r4
 801587e:	f7eb f98b 	bl	8000b98 <__aeabi_d2iz>
 8015882:	4603      	mov	r3, r0
 8015884:	b21b      	sxth	r3, r3
 8015886:	4618      	mov	r0, r3
 8015888:	f7f8 fbd4 	bl	800e034 <Suction_start>
 801588c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015890:	f001 fcb4 	bl	80171fc <HAL_Delay>
	  		  			  	wall_controll.is_controll = true;
 8015894:	4b6c      	ldr	r3, [pc, #432]	; (8015a48 <main+0xa38>)
 8015896:	2201      	movs	r2, #1
 8015898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  		  			  	log_flag = true;time = 0;
 801589c:	4b6d      	ldr	r3, [pc, #436]	; (8015a54 <main+0xa44>)
 801589e:	2201      	movs	r2, #1
 80158a0:	701a      	strb	r2, [r3, #0]
 80158a2:	4b6d      	ldr	r3, [pc, #436]	; (8015a58 <main+0xa48>)
 80158a4:	2200      	movs	r2, #0
 80158a6:	601a      	str	r2, [r3, #0]
	  		  			  	slalom_check(&st_param_1200,mode_1200,Long_turnR180);
 80158a8:	2205      	movs	r2, #5
 80158aa:	496c      	ldr	r1, [pc, #432]	; (8015a5c <main+0xa4c>)
 80158ac:	486c      	ldr	r0, [pc, #432]	; (8015a60 <main+0xa50>)
 80158ae:	f7f8 fc13 	bl	800e0d8 <slalom_check>
	  		  			  	wall_controll.is_controll = false;
 80158b2:	4b65      	ldr	r3, [pc, #404]	; (8015a48 <main+0xa38>)
 80158b4:	2200      	movs	r2, #0
 80158b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	  		  			  	Suction_Stop();
 80158ba:	f7f8 fbe5 	bl	800e088 <Suction_Stop>
	  		  			  	log_flag = false;
 80158be:	4b65      	ldr	r3, [pc, #404]	; (8015a54 <main+0xa44>)
 80158c0:	2200      	movs	r2, #0
 80158c2:	701a      	strb	r2, [r3, #0]
	  		  			  	is_mode_enable = false;
 80158c4:	4b5c      	ldr	r3, [pc, #368]	; (8015a38 <main+0xa28>)
 80158c6:	2200      	movs	r2, #0
 80158c8:	701a      	strb	r2, [r3, #0]
	  		  		  	}
	  		  	  	  	HAL_Delay(10);
 80158ca:	200a      	movs	r0, #10
 80158cc:	f001 fc96 	bl	80171fc <HAL_Delay>
	  			break;
 80158d0:	f000 bc0f 	b.w	80160f2 <main+0x10e2>
	  	  case (MOUSE_ENABLE|0x07):
  		  		if(Mode_Start_photo_Sens())
 80158d4:	f7f5 f8b8 	bl	800aa48 <Mode_Start_photo_Sens>
 80158d8:	4603      	mov	r3, r0
 80158da:	2b00      	cmp	r3, #0
 80158dc:	f000 83f6 	beq.w	80160cc <main+0x10bc>
  		  		{
  		  			Check_LED_Toggle(5);
 80158e0:	2005      	movs	r0, #5
 80158e2:	f7f4 ff65 	bl	800a7b0 <Check_LED_Toggle>
  		  			t_position start_pos = make_position(0,0,center);
 80158e6:	2204      	movs	r2, #4
 80158e8:	2100      	movs	r1, #0
 80158ea:	2000      	movs	r0, #0
 80158ec:	f7eb fbc2 	bl	8001074 <make_position>
 80158f0:	4603      	mov	r3, r0
 80158f2:	461a      	mov	r2, r3
 80158f4:	763a      	strb	r2, [r7, #24]
 80158f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80158fa:	767a      	strb	r2, [r7, #25]
 80158fc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015900:	76bb      	strb	r3, [r7, #26]
		  			Sp_Param_Initialize(&machine);
 8015902:	483c      	ldr	r0, [pc, #240]	; (80159f4 <main+0x9e4>)
 8015904:	f7f8 ff36 	bl	800e774 <Sp_Param_Initialize>
		  			Sp_Param_Initialize(&target);
 8015908:	483b      	ldr	r0, [pc, #236]	; (80159f8 <main+0x9e8>)
 801590a:	f7f8 ff33 	bl	800e774 <Sp_Param_Initialize>
		  			Sp_Param_Initialize(&max_set);
 801590e:	483b      	ldr	r0, [pc, #236]	; (80159fc <main+0x9ec>)
 8015910:	f7f8 ff30 	bl	800e774 <Sp_Param_Initialize>
		  			Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.2, 0.0, 0.01);
 8015914:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8015a08 <main+0x9f8>
 8015918:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015a0c <main+0x9fc>
 801591c:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8015a64 <main+0xa54>
 8015920:	4849      	ldr	r0, [pc, #292]	; (8015a48 <main+0xa38>)
 8015922:	f7f9 f803 	bl	800e92c <Set_PID_Gain>
	  				Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015926:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015a0c <main+0x9fc>
 801592a:	eddf 0a37 	vldr	s1, [pc, #220]	; 8015a08 <main+0x9f8>
 801592e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8015a04 <main+0x9f4>
 8015932:	f7f8 ffe1 	bl	800e8f8 <Set_Omega_PID_Gain>
		  			Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015936:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8015a0c <main+0x9fc>
 801593a:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8015a24 <main+0xa14>
 801593e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015942:	f7f8 ffbf 	bl	800e8c4 <Set_Velo_PID_Gain>
		  			filter_init();
 8015946:	f7f8 f87f 	bl	800da48 <filter_init>
		  			Suction_start((int16_t)((7.5)/Battery_GetVoltage()*1000.0));
 801594a:	f7eb fb3d 	bl	8000fc8 <Battery_GetVoltage>
 801594e:	ee10 3a10 	vmov	r3, s0
 8015952:	4618      	mov	r0, r3
 8015954:	f7ea fe18 	bl	8000588 <__aeabi_f2d>
 8015958:	4603      	mov	r3, r0
 801595a:	460c      	mov	r4, r1
 801595c:	461a      	mov	r2, r3
 801595e:	4623      	mov	r3, r4
 8015960:	f04f 0000 	mov.w	r0, #0
 8015964:	4940      	ldr	r1, [pc, #256]	; (8015a68 <main+0xa58>)
 8015966:	f7ea ff91 	bl	800088c <__aeabi_ddiv>
 801596a:	4603      	mov	r3, r0
 801596c:	460c      	mov	r4, r1
 801596e:	4618      	mov	r0, r3
 8015970:	4621      	mov	r1, r4
 8015972:	f04f 0200 	mov.w	r2, #0
 8015976:	4b36      	ldr	r3, [pc, #216]	; (8015a50 <main+0xa40>)
 8015978:	f7ea fe5e 	bl	8000638 <__aeabi_dmul>
 801597c:	4603      	mov	r3, r0
 801597e:	460c      	mov	r4, r1
 8015980:	4618      	mov	r0, r3
 8015982:	4621      	mov	r1, r4
 8015984:	f7eb f908 	bl	8000b98 <__aeabi_d2iz>
 8015988:	4603      	mov	r3, r0
 801598a:	b21b      	sxth	r3, r3
 801598c:	4618      	mov	r0, r3
 801598e:	f7f8 fb51 	bl	800e034 <Suction_start>
  		  			printf("%d\n",(int)(sizeof(st_mode_500_v1)/sizeof(t_straight_param *const)));
 8015992:	2102      	movs	r1, #2
 8015994:	4835      	ldr	r0, [pc, #212]	; (8015a6c <main+0xa5c>)
 8015996:	f006 fd37 	bl	801c408 <iprintf>
  		  		    //log_flag = true;time = 0;
  		  			run_dijkstra(	st_mode_1000_v2, (int)(sizeof(st_mode_1000_v2)/sizeof(t_straight_param *const)),
 801599a:	2302      	movs	r3, #2
 801599c:	9305      	str	r3, [sp, #20]
 801599e:	f107 031c 	add.w	r3, r7, #28
 80159a2:	9304      	str	r3, [sp, #16]
 80159a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80159a8:	9303      	str	r3, [sp, #12]
 80159aa:	2300      	movs	r3, #0
 80159ac:	9302      	str	r3, [sp, #8]
 80159ae:	ab01      	add	r3, sp, #4
 80159b0:	f107 0218 	add.w	r2, r7, #24
 80159b4:	6812      	ldr	r2, [r2, #0]
 80159b6:	4611      	mov	r1, r2
 80159b8:	8019      	strh	r1, [r3, #0]
 80159ba:	3302      	adds	r3, #2
 80159bc:	0c12      	lsrs	r2, r2, #16
 80159be:	701a      	strb	r2, [r3, #0]
 80159c0:	4b2b      	ldr	r3, [pc, #172]	; (8015a70 <main+0xa60>)
 80159c2:	9300      	str	r3, [sp, #0]
 80159c4:	2304      	movs	r3, #4
 80159c6:	4a2b      	ldr	r2, [pc, #172]	; (8015a74 <main+0xa64>)
 80159c8:	2107      	movs	r1, #7
 80159ca:	482b      	ldr	r0, [pc, #172]	; (8015a78 <main+0xa68>)
 80159cc:	f7ec fde0 	bl	8002590 <run_dijkstra>
  		  							di_mode_1000_v1, (int)(sizeof(di_mode_1000_v1)/sizeof(t_straight_param *const)),
									mode_1000,
									start_pos, north, gx, gy, MAZE_GOAL_SIZE);
		  			HAL_Delay(100);
 80159d0:	2064      	movs	r0, #100	; 0x64
 80159d2:	f001 fc13 	bl	80171fc <HAL_Delay>
		  			Suction_Stop();
 80159d6:	f7f8 fb57 	bl	800e088 <Suction_Stop>
  		  			is_mode_enable = false;
 80159da:	4b17      	ldr	r3, [pc, #92]	; (8015a38 <main+0xa28>)
 80159dc:	2200      	movs	r2, #0
 80159de:	701a      	strb	r2, [r3, #0]
  		  			Sp_Param_Initialize(&machine);
 80159e0:	4804      	ldr	r0, [pc, #16]	; (80159f4 <main+0x9e4>)
 80159e2:	f7f8 fec7 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&target);
 80159e6:	4804      	ldr	r0, [pc, #16]	; (80159f8 <main+0x9e8>)
 80159e8:	f7f8 fec4 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&max_set);
 80159ec:	4803      	ldr	r0, [pc, #12]	; (80159fc <main+0x9ec>)
 80159ee:	f7f8 fec1 	bl	800e774 <Sp_Param_Initialize>
  		  		}
	  			break;
 80159f2:	e36b      	b.n	80160cc <main+0x10bc>
 80159f4:	2001b664 	.word	0x2001b664
 80159f8:	2001b6a0 	.word	0x2001b6a0
 80159fc:	2001b1b4 	.word	0x2001b1b4
 8015a00:	20000afc 	.word	0x20000afc
 8015a04:	3f19999a 	.word	0x3f19999a
 8015a08:	3c23d70a 	.word	0x3c23d70a
 8015a0c:	00000000 	.word	0x00000000
 8015a10:	3e99999a 	.word	0x3e99999a
 8015a14:	0801f5c8 	.word	0x0801f5c8
 8015a18:	0801f59c 	.word	0x0801f59c
 8015a1c:	0801f590 	.word	0x0801f590
 8015a20:	0801f5f4 	.word	0x0801f5f4
 8015a24:	3dcccccd 	.word	0x3dcccccd
 8015a28:	40c90fda 	.word	0x40c90fda
 8015a2c:	427b53d0 	.word	0x427b53d0
 8015a30:	40490fda 	.word	0x40490fda
 8015a34:	20001708 	.word	0x20001708
 8015a38:	200002a8 	.word	0x200002a8
 8015a3c:	3d4ccccd 	.word	0x3d4ccccd
 8015a40:	3ca3d70a 	.word	0x3ca3d70a
 8015a44:	3e19999a 	.word	0x3e19999a
 8015a48:	20000aac 	.word	0x20000aac
 8015a4c:	40180000 	.word	0x40180000
 8015a50:	408f4000 	.word	0x408f4000
 8015a54:	2001b658 	.word	0x2001b658
 8015a58:	20009998 	.word	0x20009998
 8015a5c:	08020360 	.word	0x08020360
 8015a60:	0801f6a4 	.word	0x0801f6a4
 8015a64:	3e4ccccd 	.word	0x3e4ccccd
 8015a68:	401e0000 	.word	0x401e0000
 8015a6c:	0801e480 	.word	0x0801e480
 8015a70:	0802007c 	.word	0x0802007c
 8015a74:	0801fa10 	.word	0x0801fa10
 8015a78:	0801fa20 	.word	0x0801fa20
	  	  case (MOUSE_ENABLE|0x08):
  		  		if(Mode_Start_photo_Sens())
 8015a7c:	f7f4 ffe4 	bl	800aa48 <Mode_Start_photo_Sens>
 8015a80:	4603      	mov	r3, r0
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f000 8325 	beq.w	80160d2 <main+0x10c2>
  		  		{
  		  			Check_LED_Toggle(5);
 8015a88:	2005      	movs	r0, #5
 8015a8a:	f7f4 fe91 	bl	800a7b0 <Check_LED_Toggle>
					write_save_data();
 8015a8e:	f7f4 fbd9 	bl	800a244 <write_save_data>
					NVIC_SystemReset();
 8015a92:	f7ff faa9 	bl	8014fe8 <__NVIC_SystemReset>
					is_mode_enable = false;
  		  		}
	  			break;
	  	  case (MOUSE_ENABLE|0x09):
  		  		if(Mode_Start_photo_Sens())
 8015a96:	f7f4 ffd7 	bl	800aa48 <Mode_Start_photo_Sens>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f000 831b 	beq.w	80160d8 <main+0x10c8>
  		  		{
  		  		  	Check_LED_Toggle(5);
 8015aa2:	2005      	movs	r0, #5
 8015aa4:	f7f4 fe84 	bl	800a7b0 <Check_LED_Toggle>
  		  		  	read_save_data();
 8015aa8:	f7f4 fbd8 	bl	800a25c <read_save_data>
  		  		  	HAL_Delay(10);
 8015aac:	200a      	movs	r0, #10
 8015aae:	f001 fba5 	bl	80171fc <HAL_Delay>
  		  			is_mode_enable = false;
 8015ab2:	4bd6      	ldr	r3, [pc, #856]	; (8015e0c <main+0xdfc>)
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	701a      	strb	r2, [r3, #0]
  		  		}
	  			break;
 8015ab8:	e30e      	b.n	80160d8 <main+0x10c8>
	  	  case (MOUSE_ENABLE|0x0A):
  		  		if(Mode_Start_photo_Sens())
 8015aba:	f7f4 ffc5 	bl	800aa48 <Mode_Start_photo_Sens>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	f000 830c 	beq.w	80160de <main+0x10ce>
  		  		{
  		  			HAL_Delay(10);
 8015ac6:	200a      	movs	r0, #10
 8015ac8:	f001 fb98 	bl	80171fc <HAL_Delay>
  		  			disp_map();
 8015acc:	f7f8 fc36 	bl	800e33c <disp_map>
  		  			is_mode_enable = false;
 8015ad0:	4bce      	ldr	r3, [pc, #824]	; (8015e0c <main+0xdfc>)
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	701a      	strb	r2, [r3, #0]
  		  		}
	  			break;
 8015ad6:	e302      	b.n	80160de <main+0x10ce>
	  	  case (MOUSE_ENABLE|0x0B):
  		  		if(Mode_Start_photo_Sens())
 8015ad8:	f7f4 ffb6 	bl	800aa48 <Mode_Start_photo_Sens>
 8015adc:	4603      	mov	r3, r0
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d066      	beq.n	8015bb0 <main+0xba0>
  		  		{
  		   			Check_LED_Toggle(5);
 8015ae2:	2005      	movs	r0, #5
 8015ae4:	f7f4 fe64 	bl	800a7b0 <Check_LED_Toggle>
  		  			t_position start_pos = make_position(0,0,center);
 8015ae8:	2204      	movs	r2, #4
 8015aea:	2100      	movs	r1, #0
 8015aec:	2000      	movs	r0, #0
 8015aee:	f7eb fac1 	bl	8001074 <make_position>
 8015af2:	4603      	mov	r3, r0
 8015af4:	461a      	mov	r2, r3
 8015af6:	753a      	strb	r2, [r7, #20]
 8015af8:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015afc:	757a      	strb	r2, [r7, #21]
 8015afe:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015b02:	75bb      	strb	r3, [r7, #22]
  		  			Sp_Param_Initialize(&machine);
 8015b04:	48c2      	ldr	r0, [pc, #776]	; (8015e10 <main+0xe00>)
 8015b06:	f7f8 fe35 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&target);
 8015b0a:	48c2      	ldr	r0, [pc, #776]	; (8015e14 <main+0xe04>)
 8015b0c:	f7f8 fe32 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&max_set);
 8015b10:	48c1      	ldr	r0, [pc, #772]	; (8015e18 <main+0xe08>)
 8015b12:	f7f8 fe2f 	bl	800e774 <Sp_Param_Initialize>
  					Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.15, 0.0, 0.0);
 8015b16:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015e1c <main+0xe0c>
 8015b1a:	eddf 0ac0 	vldr	s1, [pc, #768]	; 8015e1c <main+0xe0c>
 8015b1e:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015e20 <main+0xe10>
 8015b22:	48c0      	ldr	r0, [pc, #768]	; (8015e24 <main+0xe14>)
 8015b24:	f7f8 ff02 	bl	800e92c <Set_PID_Gain>
  			  		Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015b28:	ed9f 1abc 	vldr	s2, [pc, #752]	; 8015e1c <main+0xe0c>
 8015b2c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8015e28 <main+0xe18>
 8015b30:	ed9f 0abe 	vldr	s0, [pc, #760]	; 8015e2c <main+0xe1c>
 8015b34:	f7f8 fee0 	bl	800e8f8 <Set_Omega_PID_Gain>
  				  	Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015b38:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015e1c <main+0xe0c>
 8015b3c:	eddf 0abc 	vldr	s1, [pc, #752]	; 8015e30 <main+0xe20>
 8015b40:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015b44:	f7f8 febe 	bl	800e8c4 <Set_Velo_PID_Gain>
  				  	filter_init();
 8015b48:	f7f7 ff7e 	bl	800da48 <filter_init>
  				  	//Suction_start((int16_t)((6.0)/Battery_GetVoltage()*1000.0));
  		  		  	printf("%d\n",(int)(sizeof(st_mode_1000_v0)/sizeof(t_straight_param *const)));
 8015b4c:	2101      	movs	r1, #1
 8015b4e:	48b9      	ldr	r0, [pc, #740]	; (8015e34 <main+0xe24>)
 8015b50:	f006 fc5a 	bl	801c408 <iprintf>
  		  		  	run_dijkstra(	st_mode_700_no_suction, (int)(sizeof(st_mode_700_no_suction)/sizeof(t_straight_param *const)),
 8015b54:	2302      	movs	r3, #2
 8015b56:	9305      	str	r3, [sp, #20]
 8015b58:	f107 031c 	add.w	r3, r7, #28
 8015b5c:	9304      	str	r3, [sp, #16]
 8015b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b62:	9303      	str	r3, [sp, #12]
 8015b64:	2300      	movs	r3, #0
 8015b66:	9302      	str	r3, [sp, #8]
 8015b68:	ab01      	add	r3, sp, #4
 8015b6a:	f107 0214 	add.w	r2, r7, #20
 8015b6e:	6812      	ldr	r2, [r2, #0]
 8015b70:	4611      	mov	r1, r2
 8015b72:	8019      	strh	r1, [r3, #0]
 8015b74:	3302      	adds	r3, #2
 8015b76:	0c12      	lsrs	r2, r2, #16
 8015b78:	701a      	strb	r2, [r3, #0]
 8015b7a:	4baf      	ldr	r3, [pc, #700]	; (8015e38 <main+0xe28>)
 8015b7c:	9300      	str	r3, [sp, #0]
 8015b7e:	2302      	movs	r3, #2
 8015b80:	4aae      	ldr	r2, [pc, #696]	; (8015e3c <main+0xe2c>)
 8015b82:	2102      	movs	r1, #2
 8015b84:	48ae      	ldr	r0, [pc, #696]	; (8015e40 <main+0xe30>)
 8015b86:	f7ec fd03 	bl	8002590 <run_dijkstra>
  		  		  					di_mode_700_no_suction, (int)(sizeof(di_mode_700_no_suction)/sizeof(t_straight_param *const)),
									mode_700_no_suction,
									start_pos, north, gx, gy, MAZE_GOAL_SIZE);
  				  	HAL_Delay(100);
 8015b8a:	2064      	movs	r0, #100	; 0x64
 8015b8c:	f001 fb36 	bl	80171fc <HAL_Delay>
  				  	//Suction_Stop();
  		  		  	is_mode_enable = false;
 8015b90:	4b9e      	ldr	r3, [pc, #632]	; (8015e0c <main+0xdfc>)
 8015b92:	2200      	movs	r2, #0
 8015b94:	701a      	strb	r2, [r3, #0]
  		  			Sp_Param_Initialize(&machine);
 8015b96:	489e      	ldr	r0, [pc, #632]	; (8015e10 <main+0xe00>)
 8015b98:	f7f8 fdec 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&target);
 8015b9c:	489d      	ldr	r0, [pc, #628]	; (8015e14 <main+0xe04>)
 8015b9e:	f7f8 fde9 	bl	800e774 <Sp_Param_Initialize>
  		  			Sp_Param_Initialize(&max_set);
 8015ba2:	489d      	ldr	r0, [pc, #628]	; (8015e18 <main+0xe08>)
 8015ba4:	f7f8 fde6 	bl	800e774 <Sp_Param_Initialize>
  		  			HAL_Delay(300);
 8015ba8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015bac:	f001 fb26 	bl	80171fc <HAL_Delay>
  		  		}
	  	  	  	HAL_Delay(1);
 8015bb0:	2001      	movs	r0, #1
 8015bb2:	f001 fb23 	bl	80171fc <HAL_Delay>
	  			break;
 8015bb6:	e29c      	b.n	80160f2 <main+0x10e2>
	  	  case (MOUSE_ENABLE|0x0C):
  		  		  		if(Mode_Start_photo_Sens())
 8015bb8:	f7f4 ff46 	bl	800aa48 <Mode_Start_photo_Sens>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	f000 808d 	beq.w	8015cde <main+0xcce>
  		  		  		{
  		  		   			Check_LED_Toggle(5);
 8015bc4:	2005      	movs	r0, #5
 8015bc6:	f7f4 fdf3 	bl	800a7b0 <Check_LED_Toggle>
  		  		  			t_position start_pos = make_position(0,0,center);
 8015bca:	2204      	movs	r2, #4
 8015bcc:	2100      	movs	r1, #0
 8015bce:	2000      	movs	r0, #0
 8015bd0:	f7eb fa50 	bl	8001074 <make_position>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	743a      	strb	r2, [r7, #16]
 8015bda:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015bde:	747a      	strb	r2, [r7, #17]
 8015be0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015be4:	74bb      	strb	r3, [r7, #18]
  		  		  			Sp_Param_Initialize(&machine);
 8015be6:	488a      	ldr	r0, [pc, #552]	; (8015e10 <main+0xe00>)
 8015be8:	f7f8 fdc4 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&target);
 8015bec:	4889      	ldr	r0, [pc, #548]	; (8015e14 <main+0xe04>)
 8015bee:	f7f8 fdc1 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&max_set);
 8015bf2:	4889      	ldr	r0, [pc, #548]	; (8015e18 <main+0xe08>)
 8015bf4:	f7f8 fdbe 	bl	800e774 <Sp_Param_Initialize>
  		  					Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.2, 0.0, 0.01);
 8015bf8:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 8015e28 <main+0xe18>
 8015bfc:	eddf 0a87 	vldr	s1, [pc, #540]	; 8015e1c <main+0xe0c>
 8015c00:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8015e44 <main+0xe34>
 8015c04:	4887      	ldr	r0, [pc, #540]	; (8015e24 <main+0xe14>)
 8015c06:	f7f8 fe91 	bl	800e92c <Set_PID_Gain>
  		  			  		Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015c0a:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8015e1c <main+0xe0c>
 8015c0e:	eddf 0a86 	vldr	s1, [pc, #536]	; 8015e28 <main+0xe18>
 8015c12:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8015e2c <main+0xe1c>
 8015c16:	f7f8 fe6f 	bl	800e8f8 <Set_Omega_PID_Gain>
  		  				  	Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015c1a:	ed9f 1a80 	vldr	s2, [pc, #512]	; 8015e1c <main+0xe0c>
 8015c1e:	eddf 0a84 	vldr	s1, [pc, #528]	; 8015e30 <main+0xe20>
 8015c22:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015c26:	f7f8 fe4d 	bl	800e8c4 <Set_Velo_PID_Gain>
  		  				  	filter_init();
 8015c2a:	f7f7 ff0d 	bl	800da48 <filter_init>
  		  				  	Suction_start((int16_t)((9.0)/Battery_GetVoltage()*1000.0));
 8015c2e:	f7eb f9cb 	bl	8000fc8 <Battery_GetVoltage>
 8015c32:	ee10 3a10 	vmov	r3, s0
 8015c36:	4618      	mov	r0, r3
 8015c38:	f7ea fca6 	bl	8000588 <__aeabi_f2d>
 8015c3c:	4603      	mov	r3, r0
 8015c3e:	460c      	mov	r4, r1
 8015c40:	461a      	mov	r2, r3
 8015c42:	4623      	mov	r3, r4
 8015c44:	f04f 0000 	mov.w	r0, #0
 8015c48:	497f      	ldr	r1, [pc, #508]	; (8015e48 <main+0xe38>)
 8015c4a:	f7ea fe1f 	bl	800088c <__aeabi_ddiv>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	460c      	mov	r4, r1
 8015c52:	4618      	mov	r0, r3
 8015c54:	4621      	mov	r1, r4
 8015c56:	f04f 0200 	mov.w	r2, #0
 8015c5a:	4b7c      	ldr	r3, [pc, #496]	; (8015e4c <main+0xe3c>)
 8015c5c:	f7ea fcec 	bl	8000638 <__aeabi_dmul>
 8015c60:	4603      	mov	r3, r0
 8015c62:	460c      	mov	r4, r1
 8015c64:	4618      	mov	r0, r3
 8015c66:	4621      	mov	r1, r4
 8015c68:	f7ea ff96 	bl	8000b98 <__aeabi_d2iz>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	b21b      	sxth	r3, r3
 8015c70:	4618      	mov	r0, r3
 8015c72:	f7f8 f9df 	bl	800e034 <Suction_start>
  		  		  		  	printf("%d\n",(int)(sizeof(st_mode_1200_v0)/sizeof(t_straight_param *const)));
 8015c76:	2101      	movs	r1, #1
 8015c78:	486e      	ldr	r0, [pc, #440]	; (8015e34 <main+0xe24>)
 8015c7a:	f006 fbc5 	bl	801c408 <iprintf>
  		  		  		  	run_dijkstra(	st_mode_1300_v1, (int)(sizeof(st_mode_1300_v1)/sizeof(t_straight_param *const)),
 8015c7e:	2302      	movs	r3, #2
 8015c80:	9305      	str	r3, [sp, #20]
 8015c82:	f107 031c 	add.w	r3, r7, #28
 8015c86:	9304      	str	r3, [sp, #16]
 8015c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c8c:	9303      	str	r3, [sp, #12]
 8015c8e:	2300      	movs	r3, #0
 8015c90:	9302      	str	r3, [sp, #8]
 8015c92:	ab01      	add	r3, sp, #4
 8015c94:	f107 0210 	add.w	r2, r7, #16
 8015c98:	6812      	ldr	r2, [r2, #0]
 8015c9a:	4611      	mov	r1, r2
 8015c9c:	8019      	strh	r1, [r3, #0]
 8015c9e:	3302      	adds	r3, #2
 8015ca0:	0c12      	lsrs	r2, r2, #16
 8015ca2:	701a      	strb	r2, [r3, #0]
 8015ca4:	4b6a      	ldr	r3, [pc, #424]	; (8015e50 <main+0xe40>)
 8015ca6:	9300      	str	r3, [sp, #0]
 8015ca8:	2304      	movs	r3, #4
 8015caa:	4a6a      	ldr	r2, [pc, #424]	; (8015e54 <main+0xe44>)
 8015cac:	2105      	movs	r1, #5
 8015cae:	486a      	ldr	r0, [pc, #424]	; (8015e58 <main+0xe48>)
 8015cb0:	f7ec fc6e 	bl	8002590 <run_dijkstra>
  		  		  		  					di_mode_1300_v1, (int)(sizeof(di_mode_1300_v1)/sizeof(t_straight_param *const)),
  											mode_1300,
  											start_pos, north, gx, gy, MAZE_GOAL_SIZE);
  		  				  	HAL_Delay(100);
 8015cb4:	2064      	movs	r0, #100	; 0x64
 8015cb6:	f001 faa1 	bl	80171fc <HAL_Delay>
  		  				  	Suction_Stop();
 8015cba:	f7f8 f9e5 	bl	800e088 <Suction_Stop>
  		  		  		  	is_mode_enable = false;
 8015cbe:	4b53      	ldr	r3, [pc, #332]	; (8015e0c <main+0xdfc>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	701a      	strb	r2, [r3, #0]
  		  		  			Sp_Param_Initialize(&machine);
 8015cc4:	4852      	ldr	r0, [pc, #328]	; (8015e10 <main+0xe00>)
 8015cc6:	f7f8 fd55 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&target);
 8015cca:	4852      	ldr	r0, [pc, #328]	; (8015e14 <main+0xe04>)
 8015ccc:	f7f8 fd52 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&max_set);
 8015cd0:	4851      	ldr	r0, [pc, #324]	; (8015e18 <main+0xe08>)
 8015cd2:	f7f8 fd4f 	bl	800e774 <Sp_Param_Initialize>
  		  		  			HAL_Delay(300);
 8015cd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015cda:	f001 fa8f 	bl	80171fc <HAL_Delay>
  		  		  		}
  			  	  	  	HAL_Delay(1);
 8015cde:	2001      	movs	r0, #1
 8015ce0:	f001 fa8c 	bl	80171fc <HAL_Delay>
	  	  case (MOUSE_ENABLE|0x0D):
  		  		  		if(Mode_Start_photo_Sens())
 8015ce4:	f7f4 feb0 	bl	800aa48 <Mode_Start_photo_Sens>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	f000 81fa 	beq.w	80160e4 <main+0x10d4>
  		  		  		{
  		  		  			Check_LED_Toggle(5);
 8015cf0:	2005      	movs	r0, #5
 8015cf2:	f7f4 fd5d 	bl	800a7b0 <Check_LED_Toggle>
  		  		  			t_position start_pos = make_position(0,0,center);
 8015cf6:	2204      	movs	r2, #4
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	f7eb f9ba 	bl	8001074 <make_position>
 8015d00:	4603      	mov	r3, r0
 8015d02:	461a      	mov	r2, r3
 8015d04:	733a      	strb	r2, [r7, #12]
 8015d06:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015d0a:	737a      	strb	r2, [r7, #13]
 8015d0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015d10:	73bb      	strb	r3, [r7, #14]
  				  			Sp_Param_Initialize(&machine);
 8015d12:	483f      	ldr	r0, [pc, #252]	; (8015e10 <main+0xe00>)
 8015d14:	f7f8 fd2e 	bl	800e774 <Sp_Param_Initialize>
  				  			Sp_Param_Initialize(&target);
 8015d18:	483e      	ldr	r0, [pc, #248]	; (8015e14 <main+0xe04>)
 8015d1a:	f7f8 fd2b 	bl	800e774 <Sp_Param_Initialize>
  				  			Sp_Param_Initialize(&max_set);
 8015d1e:	483e      	ldr	r0, [pc, #248]	; (8015e18 <main+0xe08>)
 8015d20:	f7f8 fd28 	bl	800e774 <Sp_Param_Initialize>
  				  			Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.2, 0.0, 0.01);
 8015d24:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8015e28 <main+0xe18>
 8015d28:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015e1c <main+0xe0c>
 8015d2c:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015e44 <main+0xe34>
 8015d30:	483c      	ldr	r0, [pc, #240]	; (8015e24 <main+0xe14>)
 8015d32:	f7f8 fdfb 	bl	800e92c <Set_PID_Gain>
  			  				Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015d36:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015e1c <main+0xe0c>
 8015d3a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8015e28 <main+0xe18>
 8015d3e:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8015e2c <main+0xe1c>
 8015d42:	f7f8 fdd9 	bl	800e8f8 <Set_Omega_PID_Gain>
  				  			Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015d46:	ed9f 1a35 	vldr	s2, [pc, #212]	; 8015e1c <main+0xe0c>
 8015d4a:	eddf 0a39 	vldr	s1, [pc, #228]	; 8015e30 <main+0xe20>
 8015d4e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015d52:	f7f8 fdb7 	bl	800e8c4 <Set_Velo_PID_Gain>
  				  			filter_init();
 8015d56:	f7f7 fe77 	bl	800da48 <filter_init>
  				  			Suction_start((int16_t)((7.5)/Battery_GetVoltage()*1000.0));
 8015d5a:	f7eb f935 	bl	8000fc8 <Battery_GetVoltage>
 8015d5e:	ee10 3a10 	vmov	r3, s0
 8015d62:	4618      	mov	r0, r3
 8015d64:	f7ea fc10 	bl	8000588 <__aeabi_f2d>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	460c      	mov	r4, r1
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	4623      	mov	r3, r4
 8015d70:	f04f 0000 	mov.w	r0, #0
 8015d74:	4939      	ldr	r1, [pc, #228]	; (8015e5c <main+0xe4c>)
 8015d76:	f7ea fd89 	bl	800088c <__aeabi_ddiv>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	460c      	mov	r4, r1
 8015d7e:	4618      	mov	r0, r3
 8015d80:	4621      	mov	r1, r4
 8015d82:	f04f 0200 	mov.w	r2, #0
 8015d86:	4b31      	ldr	r3, [pc, #196]	; (8015e4c <main+0xe3c>)
 8015d88:	f7ea fc56 	bl	8000638 <__aeabi_dmul>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	460c      	mov	r4, r1
 8015d90:	4618      	mov	r0, r3
 8015d92:	4621      	mov	r1, r4
 8015d94:	f7ea ff00 	bl	8000b98 <__aeabi_d2iz>
 8015d98:	4603      	mov	r3, r0
 8015d9a:	b21b      	sxth	r3, r3
 8015d9c:	4618      	mov	r0, r3
 8015d9e:	f7f8 f949 	bl	800e034 <Suction_start>
  		  		  			printf("%d\n",(int)(sizeof(st_mode_500_v1)/sizeof(t_straight_param *const)));
 8015da2:	2102      	movs	r1, #2
 8015da4:	4823      	ldr	r0, [pc, #140]	; (8015e34 <main+0xe24>)
 8015da6:	f006 fb2f 	bl	801c408 <iprintf>
  		  		  		    //log_flag = true;time = 0;
  		  		  			run_dijkstra(	st_mode_1000_v1, (int)(sizeof(st_mode_1000_v1)/sizeof(t_straight_param *const)),
 8015daa:	2302      	movs	r3, #2
 8015dac:	9305      	str	r3, [sp, #20]
 8015dae:	f107 031c 	add.w	r3, r7, #28
 8015db2:	9304      	str	r3, [sp, #16]
 8015db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015db8:	9303      	str	r3, [sp, #12]
 8015dba:	2300      	movs	r3, #0
 8015dbc:	9302      	str	r3, [sp, #8]
 8015dbe:	ab01      	add	r3, sp, #4
 8015dc0:	f107 020c 	add.w	r2, r7, #12
 8015dc4:	6812      	ldr	r2, [r2, #0]
 8015dc6:	4611      	mov	r1, r2
 8015dc8:	8019      	strh	r1, [r3, #0]
 8015dca:	3302      	adds	r3, #2
 8015dcc:	0c12      	lsrs	r2, r2, #16
 8015dce:	701a      	strb	r2, [r3, #0]
 8015dd0:	4b23      	ldr	r3, [pc, #140]	; (8015e60 <main+0xe50>)
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	2304      	movs	r3, #4
 8015dd6:	4a23      	ldr	r2, [pc, #140]	; (8015e64 <main+0xe54>)
 8015dd8:	2105      	movs	r1, #5
 8015dda:	4823      	ldr	r0, [pc, #140]	; (8015e68 <main+0xe58>)
 8015ddc:	f7ec fbd8 	bl	8002590 <run_dijkstra>
  		  		  							di_mode_1000_v1, (int)(sizeof(di_mode_1000_v1)/sizeof(t_straight_param *const)),
  											mode_1000,
  											start_pos, north, gx, gy, MAZE_GOAL_SIZE);
  				  			HAL_Delay(100);
 8015de0:	2064      	movs	r0, #100	; 0x64
 8015de2:	f001 fa0b 	bl	80171fc <HAL_Delay>
  				  			Suction_Stop();
 8015de6:	f7f8 f94f 	bl	800e088 <Suction_Stop>
  		  		  			is_mode_enable = false;
 8015dea:	4b08      	ldr	r3, [pc, #32]	; (8015e0c <main+0xdfc>)
 8015dec:	2200      	movs	r2, #0
 8015dee:	701a      	strb	r2, [r3, #0]
  		  		  			Sp_Param_Initialize(&machine);
 8015df0:	4807      	ldr	r0, [pc, #28]	; (8015e10 <main+0xe00>)
 8015df2:	f7f8 fcbf 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&target);
 8015df6:	4807      	ldr	r0, [pc, #28]	; (8015e14 <main+0xe04>)
 8015df8:	f7f8 fcbc 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&max_set);
 8015dfc:	4806      	ldr	r0, [pc, #24]	; (8015e18 <main+0xe08>)
 8015dfe:	f7f8 fcb9 	bl	800e774 <Sp_Param_Initialize>
  		  		  			HAL_Delay(300);
 8015e02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015e06:	f001 f9f9 	bl	80171fc <HAL_Delay>
  		  		  		}
  			  			break;
 8015e0a:	e16b      	b.n	80160e4 <main+0x10d4>
 8015e0c:	200002a8 	.word	0x200002a8
 8015e10:	2001b664 	.word	0x2001b664
 8015e14:	2001b6a0 	.word	0x2001b6a0
 8015e18:	2001b1b4 	.word	0x2001b1b4
 8015e1c:	00000000 	.word	0x00000000
 8015e20:	3e19999a 	.word	0x3e19999a
 8015e24:	20000aac 	.word	0x20000aac
 8015e28:	3c23d70a 	.word	0x3c23d70a
 8015e2c:	3f19999a 	.word	0x3f19999a
 8015e30:	3dcccccd 	.word	0x3dcccccd
 8015e34:	0801e480 	.word	0x0801e480
 8015e38:	0801fd98 	.word	0x0801fd98
 8015e3c:	0801f9f4 	.word	0x0801f9f4
 8015e40:	0801f9ec 	.word	0x0801f9ec
 8015e44:	3e4ccccd 	.word	0x3e4ccccd
 8015e48:	40220000 	.word	0x40220000
 8015e4c:	408f4000 	.word	0x408f4000
 8015e50:	08020644 	.word	0x08020644
 8015e54:	0801faac 	.word	0x0801faac
 8015e58:	0801fa98 	.word	0x0801fa98
 8015e5c:	401e0000 	.word	0x401e0000
 8015e60:	0802007c 	.word	0x0802007c
 8015e64:	0801fa10 	.word	0x0801fa10
 8015e68:	0801f9fc 	.word	0x0801f9fc
	  	  case (MOUSE_ENABLE|0x0E):
  		  		  		if(Mode_Start_photo_Sens())
 8015e6c:	f7f4 fdec 	bl	800aa48 <Mode_Start_photo_Sens>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	f000 8139 	beq.w	80160ea <main+0x10da>
  		  		  		{
  		  		  			Check_LED_Toggle(5);
 8015e78:	2005      	movs	r0, #5
 8015e7a:	f7f4 fc99 	bl	800a7b0 <Check_LED_Toggle>
  		  		  			t_position start_pos = make_position(0,0,center);
 8015e7e:	2204      	movs	r2, #4
 8015e80:	2100      	movs	r1, #0
 8015e82:	2000      	movs	r0, #0
 8015e84:	f7eb f8f6 	bl	8001074 <make_position>
 8015e88:	4603      	mov	r3, r0
 8015e8a:	461a      	mov	r2, r3
 8015e8c:	723a      	strb	r2, [r7, #8]
 8015e8e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015e92:	727a      	strb	r2, [r7, #9]
 8015e94:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015e98:	72bb      	strb	r3, [r7, #10]
  		  		  			Sp_Param_Initialize(&machine);
 8015e9a:	4897      	ldr	r0, [pc, #604]	; (80160f8 <main+0x10e8>)
 8015e9c:	f7f8 fc6a 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&target);
 8015ea0:	4896      	ldr	r0, [pc, #600]	; (80160fc <main+0x10ec>)
 8015ea2:	f7f8 fc67 	bl	800e774 <Sp_Param_Initialize>
   		  		  			Sp_Param_Initialize(&max_set);
 8015ea6:	4896      	ldr	r0, [pc, #600]	; (8016100 <main+0x10f0>)
 8015ea8:	f7f8 fc64 	bl	800e774 <Sp_Param_Initialize>
   		  					Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.2, 0.0, 0.01);
 8015eac:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8016104 <main+0x10f4>
 8015eb0:	eddf 0a95 	vldr	s1, [pc, #596]	; 8016108 <main+0x10f8>
 8015eb4:	ed9f 0a95 	vldr	s0, [pc, #596]	; 801610c <main+0x10fc>
 8015eb8:	4895      	ldr	r0, [pc, #596]	; (8016110 <main+0x1100>)
 8015eba:	f7f8 fd37 	bl	800e92c <Set_PID_Gain>
  		  			  		Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015ebe:	ed9f 1a92 	vldr	s2, [pc, #584]	; 8016108 <main+0x10f8>
 8015ec2:	eddf 0a90 	vldr	s1, [pc, #576]	; 8016104 <main+0x10f4>
 8015ec6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016114 <main+0x1104>
 8015eca:	f7f8 fd15 	bl	800e8f8 <Set_Omega_PID_Gain>
   		  				  	Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015ece:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 8016108 <main+0x10f8>
 8015ed2:	eddf 0a91 	vldr	s1, [pc, #580]	; 8016118 <main+0x1108>
 8015ed6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8015eda:	f7f8 fcf3 	bl	800e8c4 <Set_Velo_PID_Gain>
  		  				  	filter_init();
 8015ede:	f7f7 fdb3 	bl	800da48 <filter_init>
  		  		  		  	Suction_start((int16_t)((9.0)/Battery_GetVoltage()*1000.0));
 8015ee2:	f7eb f871 	bl	8000fc8 <Battery_GetVoltage>
 8015ee6:	ee10 3a10 	vmov	r3, s0
 8015eea:	4618      	mov	r0, r3
 8015eec:	f7ea fb4c 	bl	8000588 <__aeabi_f2d>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	460c      	mov	r4, r1
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	4623      	mov	r3, r4
 8015ef8:	f04f 0000 	mov.w	r0, #0
 8015efc:	4987      	ldr	r1, [pc, #540]	; (801611c <main+0x110c>)
 8015efe:	f7ea fcc5 	bl	800088c <__aeabi_ddiv>
 8015f02:	4603      	mov	r3, r0
 8015f04:	460c      	mov	r4, r1
 8015f06:	4618      	mov	r0, r3
 8015f08:	4621      	mov	r1, r4
 8015f0a:	f04f 0200 	mov.w	r2, #0
 8015f0e:	4b84      	ldr	r3, [pc, #528]	; (8016120 <main+0x1110>)
 8015f10:	f7ea fb92 	bl	8000638 <__aeabi_dmul>
 8015f14:	4603      	mov	r3, r0
 8015f16:	460c      	mov	r4, r1
 8015f18:	4618      	mov	r0, r3
 8015f1a:	4621      	mov	r1, r4
 8015f1c:	f7ea fe3c 	bl	8000b98 <__aeabi_d2iz>
 8015f20:	4603      	mov	r3, r0
 8015f22:	b21b      	sxth	r3, r3
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f8 f885 	bl	800e034 <Suction_start>
  		  		  		  	printf("%d\n",(int)(sizeof(st_mode_1200_v0)/sizeof(t_straight_param *const)));
 8015f2a:	2101      	movs	r1, #1
 8015f2c:	487d      	ldr	r0, [pc, #500]	; (8016124 <main+0x1114>)
 8015f2e:	f006 fa6b 	bl	801c408 <iprintf>
  		   		  		  	run_dijkstra(	st_mode_1200_v1, (int)(sizeof(st_mode_1200_v1)/sizeof(t_straight_param *const)),
 8015f32:	2302      	movs	r3, #2
 8015f34:	9305      	str	r3, [sp, #20]
 8015f36:	f107 031c 	add.w	r3, r7, #28
 8015f3a:	9304      	str	r3, [sp, #16]
 8015f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015f40:	9303      	str	r3, [sp, #12]
 8015f42:	2300      	movs	r3, #0
 8015f44:	9302      	str	r3, [sp, #8]
 8015f46:	ab01      	add	r3, sp, #4
 8015f48:	f107 0208 	add.w	r2, r7, #8
 8015f4c:	6812      	ldr	r2, [r2, #0]
 8015f4e:	4611      	mov	r1, r2
 8015f50:	8019      	strh	r1, [r3, #0]
 8015f52:	3302      	adds	r3, #2
 8015f54:	0c12      	lsrs	r2, r2, #16
 8015f56:	701a      	strb	r2, [r3, #0]
 8015f58:	4b73      	ldr	r3, [pc, #460]	; (8016128 <main+0x1118>)
 8015f5a:	9300      	str	r3, [sp, #0]
 8015f5c:	2304      	movs	r3, #4
 8015f5e:	4a73      	ldr	r2, [pc, #460]	; (801612c <main+0x111c>)
 8015f60:	2105      	movs	r1, #5
 8015f62:	4873      	ldr	r0, [pc, #460]	; (8016130 <main+0x1120>)
 8015f64:	f7ec fb14 	bl	8002590 <run_dijkstra>
  		   		  		  					di_mode_1200_v1, (int)(sizeof(di_mode_1200_v1)/sizeof(t_straight_param *const)),
  		  									mode_1200,
											start_pos, north, gx, gy, MAZE_GOAL_SIZE);
  		  		  			HAL_Delay(100);
 8015f68:	2064      	movs	r0, #100	; 0x64
 8015f6a:	f001 f947 	bl	80171fc <HAL_Delay>
  		  		  		  	Suction_Stop();
 8015f6e:	f7f8 f88b 	bl	800e088 <Suction_Stop>
  		  		   		  	is_mode_enable = false;
 8015f72:	4b70      	ldr	r3, [pc, #448]	; (8016134 <main+0x1124>)
 8015f74:	2200      	movs	r2, #0
 8015f76:	701a      	strb	r2, [r3, #0]
  		  		  			Sp_Param_Initialize(&machine);
 8015f78:	485f      	ldr	r0, [pc, #380]	; (80160f8 <main+0x10e8>)
 8015f7a:	f7f8 fbfb 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&target);
 8015f7e:	485f      	ldr	r0, [pc, #380]	; (80160fc <main+0x10ec>)
 8015f80:	f7f8 fbf8 	bl	800e774 <Sp_Param_Initialize>
  		  		  			Sp_Param_Initialize(&max_set);
 8015f84:	485e      	ldr	r0, [pc, #376]	; (8016100 <main+0x10f0>)
 8015f86:	f7f8 fbf5 	bl	800e774 <Sp_Param_Initialize>
  		  		  			HAL_Delay(300);
 8015f8a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8015f8e:	f001 f935 	bl	80171fc <HAL_Delay>
   		  		  		}
	  			break;
 8015f92:	e0aa      	b.n	80160ea <main+0x10da>
	  	  case (MOUSE_ENABLE|0x0F):
  		  		  		  		if(Mode_Start_photo_Sens())
 8015f94:	f7f4 fd58 	bl	800aa48 <Mode_Start_photo_Sens>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	f000 80a8 	beq.w	80160f0 <main+0x10e0>
  		  		  		  		{
  		  		  		  			Check_LED_Toggle(5);
 8015fa0:	2005      	movs	r0, #5
 8015fa2:	f7f4 fc05 	bl	800a7b0 <Check_LED_Toggle>
  		  		  		  			t_position start_pos = make_position(0,0,center);
 8015fa6:	2204      	movs	r2, #4
 8015fa8:	2100      	movs	r1, #0
 8015faa:	2000      	movs	r0, #0
 8015fac:	f7eb f862 	bl	8001074 <make_position>
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	713a      	strb	r2, [r7, #4]
 8015fb6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8015fba:	717a      	strb	r2, [r7, #5]
 8015fbc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8015fc0:	71bb      	strb	r3, [r7, #6]
  		  		  		  			Sp_Param_Initialize(&machine);
 8015fc2:	484d      	ldr	r0, [pc, #308]	; (80160f8 <main+0x10e8>)
 8015fc4:	f7f8 fbd6 	bl	800e774 <Sp_Param_Initialize>
  		  		  		  			Sp_Param_Initialize(&target);
 8015fc8:	484c      	ldr	r0, [pc, #304]	; (80160fc <main+0x10ec>)
 8015fca:	f7f8 fbd3 	bl	800e774 <Sp_Param_Initialize>
  		   		  		  			Sp_Param_Initialize(&max_set);
 8015fce:	484c      	ldr	r0, [pc, #304]	; (8016100 <main+0x10f0>)
 8015fd0:	f7f8 fbd0 	bl	800e774 <Sp_Param_Initialize>
  		   		  					Set_PID_Gain(&(wall_controll.side_om_wall_gain), 0.2, 0.0, 0.01);
 8015fd4:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 8016104 <main+0x10f4>
 8015fd8:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8016108 <main+0x10f8>
 8015fdc:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 801610c <main+0x10fc>
 8015fe0:	484b      	ldr	r0, [pc, #300]	; (8016110 <main+0x1100>)
 8015fe2:	f7f8 fca3 	bl	800e92c <Set_PID_Gain>
  		  		  			  		Set_Omega_PID_Gain(0.6f, 0.01f, 0.0f);
 8015fe6:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8016108 <main+0x10f8>
 8015fea:	eddf 0a46 	vldr	s1, [pc, #280]	; 8016104 <main+0x10f4>
 8015fee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016114 <main+0x1104>
 8015ff2:	f7f8 fc81 	bl	800e8f8 <Set_Omega_PID_Gain>
  		   		  				  	Set_Velo_PID_Gain(15.0f, 0.1f, 0.0f);
 8015ff6:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8016108 <main+0x10f8>
 8015ffa:	eddf 0a47 	vldr	s1, [pc, #284]	; 8016118 <main+0x1108>
 8015ffe:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8016002:	f7f8 fc5f 	bl	800e8c4 <Set_Velo_PID_Gain>
  		  		  				  	filter_init();
 8016006:	f7f7 fd1f 	bl	800da48 <filter_init>
  		  		  		  		  	Suction_start((int16_t)((9.0)/Battery_GetVoltage()*1000.0));
 801600a:	f7ea ffdd 	bl	8000fc8 <Battery_GetVoltage>
 801600e:	ee10 3a10 	vmov	r3, s0
 8016012:	4618      	mov	r0, r3
 8016014:	f7ea fab8 	bl	8000588 <__aeabi_f2d>
 8016018:	4603      	mov	r3, r0
 801601a:	460c      	mov	r4, r1
 801601c:	461a      	mov	r2, r3
 801601e:	4623      	mov	r3, r4
 8016020:	f04f 0000 	mov.w	r0, #0
 8016024:	493d      	ldr	r1, [pc, #244]	; (801611c <main+0x110c>)
 8016026:	f7ea fc31 	bl	800088c <__aeabi_ddiv>
 801602a:	4603      	mov	r3, r0
 801602c:	460c      	mov	r4, r1
 801602e:	4618      	mov	r0, r3
 8016030:	4621      	mov	r1, r4
 8016032:	f04f 0200 	mov.w	r2, #0
 8016036:	4b3a      	ldr	r3, [pc, #232]	; (8016120 <main+0x1110>)
 8016038:	f7ea fafe 	bl	8000638 <__aeabi_dmul>
 801603c:	4603      	mov	r3, r0
 801603e:	460c      	mov	r4, r1
 8016040:	4618      	mov	r0, r3
 8016042:	4621      	mov	r1, r4
 8016044:	f7ea fda8 	bl	8000b98 <__aeabi_d2iz>
 8016048:	4603      	mov	r3, r0
 801604a:	b21b      	sxth	r3, r3
 801604c:	4618      	mov	r0, r3
 801604e:	f7f7 fff1 	bl	800e034 <Suction_start>
  		  		  		  		  	printf("%d\n",(int)(sizeof(st_mode_1200_v0)/sizeof(t_straight_param *const)));
 8016052:	2101      	movs	r1, #1
 8016054:	4833      	ldr	r0, [pc, #204]	; (8016124 <main+0x1114>)
 8016056:	f006 f9d7 	bl	801c408 <iprintf>
  		  		   		  		  	run_dijkstra(	st_mode_1200_v3, (int)(sizeof(st_mode_1200_v3)/sizeof(t_straight_param *const)),
 801605a:	2302      	movs	r3, #2
 801605c:	9305      	str	r3, [sp, #20]
 801605e:	f107 031c 	add.w	r3, r7, #28
 8016062:	9304      	str	r3, [sp, #16]
 8016064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016068:	9303      	str	r3, [sp, #12]
 801606a:	2300      	movs	r3, #0
 801606c:	9302      	str	r3, [sp, #8]
 801606e:	ab01      	add	r3, sp, #4
 8016070:	1d3a      	adds	r2, r7, #4
 8016072:	6812      	ldr	r2, [r2, #0]
 8016074:	4611      	mov	r1, r2
 8016076:	8019      	strh	r1, [r3, #0]
 8016078:	3302      	adds	r3, #2
 801607a:	0c12      	lsrs	r2, r2, #16
 801607c:	701a      	strb	r2, [r3, #0]
 801607e:	4b2a      	ldr	r3, [pc, #168]	; (8016128 <main+0x1118>)
 8016080:	9300      	str	r3, [sp, #0]
 8016082:	2307      	movs	r3, #7
 8016084:	4a2c      	ldr	r2, [pc, #176]	; (8016138 <main+0x1128>)
 8016086:	2107      	movs	r1, #7
 8016088:	482c      	ldr	r0, [pc, #176]	; (801613c <main+0x112c>)
 801608a:	f7ec fa81 	bl	8002590 <run_dijkstra>
  		  		   		  		  					di_mode_1200_v3, (int)(sizeof(di_mode_1200_v3)/sizeof(t_straight_param *const)),
  		  		  									mode_1200,
  													start_pos, north, gx, gy, MAZE_GOAL_SIZE);
  		  		  		  			HAL_Delay(100);
 801608e:	2064      	movs	r0, #100	; 0x64
 8016090:	f001 f8b4 	bl	80171fc <HAL_Delay>
  		  		  		  		  	Suction_Stop();
 8016094:	f7f7 fff8 	bl	800e088 <Suction_Stop>
  		  		  		   		  	is_mode_enable = false;
 8016098:	4b26      	ldr	r3, [pc, #152]	; (8016134 <main+0x1124>)
 801609a:	2200      	movs	r2, #0
 801609c:	701a      	strb	r2, [r3, #0]
  		  		  		  			Sp_Param_Initialize(&machine);
 801609e:	4816      	ldr	r0, [pc, #88]	; (80160f8 <main+0x10e8>)
 80160a0:	f7f8 fb68 	bl	800e774 <Sp_Param_Initialize>
  		  		  		  			Sp_Param_Initialize(&target);
 80160a4:	4815      	ldr	r0, [pc, #84]	; (80160fc <main+0x10ec>)
 80160a6:	f7f8 fb65 	bl	800e774 <Sp_Param_Initialize>
  		  		  		  			Sp_Param_Initialize(&max_set);
 80160aa:	4815      	ldr	r0, [pc, #84]	; (8016100 <main+0x10f0>)
 80160ac:	f7f8 fb62 	bl	800e774 <Sp_Param_Initialize>
  		  		  		  			HAL_Delay(300);
 80160b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80160b4:	f001 f8a2 	bl	80171fc <HAL_Delay>
  		   		  		  		}
  			  			break;
 80160b8:	e01a      	b.n	80160f0 <main+0x10e0>
	  			break;
 80160ba:	bf00      	nop
 80160bc:	f7ff b807 	b.w	80150ce <main+0xbe>
	  			break;
 80160c0:	bf00      	nop
 80160c2:	f7ff b804 	b.w	80150ce <main+0xbe>
	  			break;
 80160c6:	bf00      	nop
 80160c8:	f7ff b801 	b.w	80150ce <main+0xbe>
	  			break;
 80160cc:	bf00      	nop
 80160ce:	f7fe bffe 	b.w	80150ce <main+0xbe>
	  			break;
 80160d2:	bf00      	nop
 80160d4:	f7fe bffb 	b.w	80150ce <main+0xbe>
	  			break;
 80160d8:	bf00      	nop
 80160da:	f7fe bff8 	b.w	80150ce <main+0xbe>
	  			break;
 80160de:	bf00      	nop
 80160e0:	f7fe bff5 	b.w	80150ce <main+0xbe>
  			  			break;
 80160e4:	bf00      	nop
 80160e6:	f7fe bff2 	b.w	80150ce <main+0xbe>
	  			break;
 80160ea:	bf00      	nop
 80160ec:	f7fe bfef 	b.w	80150ce <main+0xbe>
  			  			break;
 80160f0:	bf00      	nop
	  HAL_Delay(10);
 80160f2:	f7fe bfec 	b.w	80150ce <main+0xbe>
 80160f6:	bf00      	nop
 80160f8:	2001b664 	.word	0x2001b664
 80160fc:	2001b6a0 	.word	0x2001b6a0
 8016100:	2001b1b4 	.word	0x2001b1b4
 8016104:	3c23d70a 	.word	0x3c23d70a
 8016108:	00000000 	.word	0x00000000
 801610c:	3e4ccccd 	.word	0x3e4ccccd
 8016110:	20000aac 	.word	0x20000aac
 8016114:	3f19999a 	.word	0x3f19999a
 8016118:	3dcccccd 	.word	0x3dcccccd
 801611c:	40220000 	.word	0x40220000
 8016120:	408f4000 	.word	0x408f4000
 8016124:	0801e480 	.word	0x0801e480
 8016128:	08020360 	.word	0x08020360
 801612c:	0801fa50 	.word	0x0801fa50
 8016130:	0801fa3c 	.word	0x0801fa3c
 8016134:	200002a8 	.word	0x200002a8
 8016138:	0801fa7c 	.word	0x0801fa7c
 801613c:	0801fa60 	.word	0x0801fa60

08016140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b094      	sub	sp, #80	; 0x50
 8016144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016146:	f107 031c 	add.w	r3, r7, #28
 801614a:	2234      	movs	r2, #52	; 0x34
 801614c:	2100      	movs	r1, #0
 801614e:	4618      	mov	r0, r3
 8016150:	f005 fcf5 	bl	801bb3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016154:	f107 0308 	add.w	r3, r7, #8
 8016158:	2200      	movs	r2, #0
 801615a:	601a      	str	r2, [r3, #0]
 801615c:	605a      	str	r2, [r3, #4]
 801615e:	609a      	str	r2, [r3, #8]
 8016160:	60da      	str	r2, [r3, #12]
 8016162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8016164:	2300      	movs	r3, #0
 8016166:	607b      	str	r3, [r7, #4]
 8016168:	4b29      	ldr	r3, [pc, #164]	; (8016210 <SystemClock_Config+0xd0>)
 801616a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801616c:	4a28      	ldr	r2, [pc, #160]	; (8016210 <SystemClock_Config+0xd0>)
 801616e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016172:	6413      	str	r3, [r2, #64]	; 0x40
 8016174:	4b26      	ldr	r3, [pc, #152]	; (8016210 <SystemClock_Config+0xd0>)
 8016176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801617c:	607b      	str	r3, [r7, #4]
 801617e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8016180:	2300      	movs	r3, #0
 8016182:	603b      	str	r3, [r7, #0]
 8016184:	4b23      	ldr	r3, [pc, #140]	; (8016214 <SystemClock_Config+0xd4>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 801618c:	4a21      	ldr	r2, [pc, #132]	; (8016214 <SystemClock_Config+0xd4>)
 801618e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016192:	6013      	str	r3, [r2, #0]
 8016194:	4b1f      	ldr	r3, [pc, #124]	; (8016214 <SystemClock_Config+0xd4>)
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801619c:	603b      	str	r3, [r7, #0]
 801619e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80161a0:	2302      	movs	r3, #2
 80161a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80161a4:	2301      	movs	r3, #1
 80161a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80161a8:	2310      	movs	r3, #16
 80161aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80161ac:	2302      	movs	r3, #2
 80161ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80161b0:	2300      	movs	r3, #0
 80161b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80161b4:	2308      	movs	r3, #8
 80161b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80161b8:	2332      	movs	r3, #50	; 0x32
 80161ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80161bc:	2302      	movs	r3, #2
 80161be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80161c0:	2302      	movs	r3, #2
 80161c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80161c4:	2302      	movs	r3, #2
 80161c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80161c8:	f107 031c 	add.w	r3, r7, #28
 80161cc:	4618      	mov	r0, r3
 80161ce:	f003 f84b 	bl	8019268 <HAL_RCC_OscConfig>
 80161d2:	4603      	mov	r3, r0
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d001      	beq.n	80161dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80161d8:	f000 f832 	bl	8016240 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80161dc:	230f      	movs	r3, #15
 80161de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80161e0:	2302      	movs	r3, #2
 80161e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80161e4:	2300      	movs	r3, #0
 80161e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80161e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80161ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80161ee:	2300      	movs	r3, #0
 80161f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80161f2:	f107 0308 	add.w	r3, r7, #8
 80161f6:	2101      	movs	r1, #1
 80161f8:	4618      	mov	r0, r3
 80161fa:	f002 fdc9 	bl	8018d90 <HAL_RCC_ClockConfig>
 80161fe:	4603      	mov	r3, r0
 8016200:	2b00      	cmp	r3, #0
 8016202:	d001      	beq.n	8016208 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8016204:	f000 f81c 	bl	8016240 <Error_Handler>
  }
}
 8016208:	bf00      	nop
 801620a:	3750      	adds	r7, #80	; 0x50
 801620c:	46bd      	mov	sp, r7
 801620e:	bd80      	pop	{r7, pc}
 8016210:	40023800 	.word	0x40023800
 8016214:	40007000 	.word	0x40007000

08016218 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	60f8      	str	r0, [r7, #12]
 8016220:	60b9      	str	r1, [r7, #8]
 8016222:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)ptr,len,10);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	b29a      	uxth	r2, r3
 8016228:	230a      	movs	r3, #10
 801622a:	68b9      	ldr	r1, [r7, #8]
 801622c:	4803      	ldr	r0, [pc, #12]	; (801623c <_write+0x24>)
 801622e:	f004 fff2 	bl	801b216 <HAL_UART_Transmit>
  return len;
 8016232:	687b      	ldr	r3, [r7, #4]
}
 8016234:	4618      	mov	r0, r3
 8016236:	3710      	adds	r7, #16
 8016238:	46bd      	mov	sp, r7
 801623a:	bd80      	pop	{r7, pc}
 801623c:	2001bbc0 	.word	0x2001bbc0

08016240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8016240:	b480      	push	{r7}
 8016242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8016244:	bf00      	nop
 8016246:	46bd      	mov	sp, r7
 8016248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801624c:	4770      	bx	lr
	...

08016250 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi2_rx;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8016250:	b580      	push	{r7, lr}
 8016252:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8016254:	4b17      	ldr	r3, [pc, #92]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016256:	4a18      	ldr	r2, [pc, #96]	; (80162b8 <MX_SPI2_Init+0x68>)
 8016258:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 801625a:	4b16      	ldr	r3, [pc, #88]	; (80162b4 <MX_SPI2_Init+0x64>)
 801625c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016260:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8016262:	4b14      	ldr	r3, [pc, #80]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016264:	2200      	movs	r2, #0
 8016266:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8016268:	4b12      	ldr	r3, [pc, #72]	; (80162b4 <MX_SPI2_Init+0x64>)
 801626a:	2200      	movs	r2, #0
 801626c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801626e:	4b11      	ldr	r3, [pc, #68]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016270:	2202      	movs	r2, #2
 8016272:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016274:	4b0f      	ldr	r3, [pc, #60]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016276:	2201      	movs	r2, #1
 8016278:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 801627a:	4b0e      	ldr	r3, [pc, #56]	; (80162b4 <MX_SPI2_Init+0x64>)
 801627c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016280:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8016282:	4b0c      	ldr	r3, [pc, #48]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016284:	2208      	movs	r2, #8
 8016286:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016288:	4b0a      	ldr	r3, [pc, #40]	; (80162b4 <MX_SPI2_Init+0x64>)
 801628a:	2200      	movs	r2, #0
 801628c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 801628e:	4b09      	ldr	r3, [pc, #36]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016290:	2200      	movs	r2, #0
 8016292:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016294:	4b07      	ldr	r3, [pc, #28]	; (80162b4 <MX_SPI2_Init+0x64>)
 8016296:	2200      	movs	r2, #0
 8016298:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 801629a:	4b06      	ldr	r3, [pc, #24]	; (80162b4 <MX_SPI2_Init+0x64>)
 801629c:	220a      	movs	r2, #10
 801629e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80162a0:	4804      	ldr	r0, [pc, #16]	; (80162b4 <MX_SPI2_Init+0x64>)
 80162a2:	f003 fa3b 	bl	801971c <HAL_SPI_Init>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d001      	beq.n	80162b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80162ac:	f7ff ffc8 	bl	8016240 <Error_Handler>
  }

}
 80162b0:	bf00      	nop
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	2001b868 	.word	0x2001b868
 80162b8:	40003800 	.word	0x40003800

080162bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80162bc:	b580      	push	{r7, lr}
 80162be:	b08a      	sub	sp, #40	; 0x28
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80162c4:	f107 0314 	add.w	r3, r7, #20
 80162c8:	2200      	movs	r2, #0
 80162ca:	601a      	str	r2, [r3, #0]
 80162cc:	605a      	str	r2, [r3, #4]
 80162ce:	609a      	str	r2, [r3, #8]
 80162d0:	60da      	str	r2, [r3, #12]
 80162d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	4a48      	ldr	r2, [pc, #288]	; (80163fc <HAL_SPI_MspInit+0x140>)
 80162da:	4293      	cmp	r3, r2
 80162dc:	f040 8089 	bne.w	80163f2 <HAL_SPI_MspInit+0x136>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80162e0:	2300      	movs	r3, #0
 80162e2:	613b      	str	r3, [r7, #16]
 80162e4:	4b46      	ldr	r3, [pc, #280]	; (8016400 <HAL_SPI_MspInit+0x144>)
 80162e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162e8:	4a45      	ldr	r2, [pc, #276]	; (8016400 <HAL_SPI_MspInit+0x144>)
 80162ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80162ee:	6413      	str	r3, [r2, #64]	; 0x40
 80162f0:	4b43      	ldr	r3, [pc, #268]	; (8016400 <HAL_SPI_MspInit+0x144>)
 80162f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80162f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80162f8:	613b      	str	r3, [r7, #16]
 80162fa:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80162fc:	2300      	movs	r3, #0
 80162fe:	60fb      	str	r3, [r7, #12]
 8016300:	4b3f      	ldr	r3, [pc, #252]	; (8016400 <HAL_SPI_MspInit+0x144>)
 8016302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016304:	4a3e      	ldr	r2, [pc, #248]	; (8016400 <HAL_SPI_MspInit+0x144>)
 8016306:	f043 0302 	orr.w	r3, r3, #2
 801630a:	6313      	str	r3, [r2, #48]	; 0x30
 801630c:	4b3c      	ldr	r3, [pc, #240]	; (8016400 <HAL_SPI_MspInit+0x144>)
 801630e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016310:	f003 0302 	and.w	r3, r3, #2
 8016314:	60fb      	str	r3, [r7, #12]
 8016316:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8016318:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 801631c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801631e:	2302      	movs	r3, #2
 8016320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016322:	2300      	movs	r3, #0
 8016324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016326:	2303      	movs	r3, #3
 8016328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801632a:	2305      	movs	r3, #5
 801632c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801632e:	f107 0314 	add.w	r3, r7, #20
 8016332:	4619      	mov	r1, r3
 8016334:	4833      	ldr	r0, [pc, #204]	; (8016404 <HAL_SPI_MspInit+0x148>)
 8016336:	f002 fb4d 	bl	80189d4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 801633a:	4b33      	ldr	r3, [pc, #204]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801633c:	4a33      	ldr	r2, [pc, #204]	; (801640c <HAL_SPI_MspInit+0x150>)
 801633e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8016340:	4b31      	ldr	r3, [pc, #196]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016342:	2200      	movs	r2, #0
 8016344:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8016346:	4b30      	ldr	r3, [pc, #192]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016348:	2200      	movs	r2, #0
 801634a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801634c:	4b2e      	ldr	r3, [pc, #184]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801634e:	2200      	movs	r2, #0
 8016350:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8016352:	4b2d      	ldr	r3, [pc, #180]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016358:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801635a:	4b2b      	ldr	r3, [pc, #172]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801635c:	2200      	movs	r2, #0
 801635e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8016360:	4b29      	ldr	r3, [pc, #164]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016362:	2200      	movs	r2, #0
 8016364:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8016366:	4b28      	ldr	r3, [pc, #160]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016368:	2200      	movs	r2, #0
 801636a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 801636c:	4b26      	ldr	r3, [pc, #152]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801636e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8016372:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016374:	4b24      	ldr	r3, [pc, #144]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016376:	2200      	movs	r2, #0
 8016378:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 801637a:	4823      	ldr	r0, [pc, #140]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801637c:	f001 fcd6 	bl	8017d2c <HAL_DMA_Init>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	d001      	beq.n	801638a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8016386:	f7ff ff5b 	bl	8016240 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	4a1e      	ldr	r2, [pc, #120]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 801638e:	64da      	str	r2, [r3, #76]	; 0x4c
 8016390:	4a1d      	ldr	r2, [pc, #116]	; (8016408 <HAL_SPI_MspInit+0x14c>)
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8016396:	4b1e      	ldr	r3, [pc, #120]	; (8016410 <HAL_SPI_MspInit+0x154>)
 8016398:	4a1e      	ldr	r2, [pc, #120]	; (8016414 <HAL_SPI_MspInit+0x158>)
 801639a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 801639c:	4b1c      	ldr	r3, [pc, #112]	; (8016410 <HAL_SPI_MspInit+0x154>)
 801639e:	2200      	movs	r2, #0
 80163a0:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80163a2:	4b1b      	ldr	r3, [pc, #108]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163a4:	2240      	movs	r2, #64	; 0x40
 80163a6:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80163a8:	4b19      	ldr	r3, [pc, #100]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163aa:	2200      	movs	r2, #0
 80163ac:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80163ae:	4b18      	ldr	r3, [pc, #96]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80163b4:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80163b6:	4b16      	ldr	r3, [pc, #88]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163b8:	2200      	movs	r2, #0
 80163ba:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80163bc:	4b14      	ldr	r3, [pc, #80]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163be:	2200      	movs	r2, #0
 80163c0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80163c2:	4b13      	ldr	r3, [pc, #76]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163c4:	2200      	movs	r2, #0
 80163c6:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80163c8:	4b11      	ldr	r3, [pc, #68]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163ca:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80163ce:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80163d0:	4b0f      	ldr	r3, [pc, #60]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80163d6:	480e      	ldr	r0, [pc, #56]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163d8:	f001 fca8 	bl	8017d2c <HAL_DMA_Init>
 80163dc:	4603      	mov	r3, r0
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d001      	beq.n	80163e6 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80163e2:	f7ff ff2d 	bl	8016240 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	4a09      	ldr	r2, [pc, #36]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163ea:	649a      	str	r2, [r3, #72]	; 0x48
 80163ec:	4a08      	ldr	r2, [pc, #32]	; (8016410 <HAL_SPI_MspInit+0x154>)
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80163f2:	bf00      	nop
 80163f4:	3728      	adds	r7, #40	; 0x28
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}
 80163fa:	bf00      	nop
 80163fc:	40003800 	.word	0x40003800
 8016400:	40023800 	.word	0x40023800
 8016404:	40020400 	.word	0x40020400
 8016408:	2001b8c0 	.word	0x2001b8c0
 801640c:	40026058 	.word	0x40026058
 8016410:	2001b920 	.word	0x2001b920
 8016414:	40026070 	.word	0x40026070

08016418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016418:	b480      	push	{r7}
 801641a:	b083      	sub	sp, #12
 801641c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801641e:	2300      	movs	r3, #0
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	4b10      	ldr	r3, [pc, #64]	; (8016464 <HAL_MspInit+0x4c>)
 8016424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016426:	4a0f      	ldr	r2, [pc, #60]	; (8016464 <HAL_MspInit+0x4c>)
 8016428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801642c:	6453      	str	r3, [r2, #68]	; 0x44
 801642e:	4b0d      	ldr	r3, [pc, #52]	; (8016464 <HAL_MspInit+0x4c>)
 8016430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016436:	607b      	str	r3, [r7, #4]
 8016438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801643a:	2300      	movs	r3, #0
 801643c:	603b      	str	r3, [r7, #0]
 801643e:	4b09      	ldr	r3, [pc, #36]	; (8016464 <HAL_MspInit+0x4c>)
 8016440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016442:	4a08      	ldr	r2, [pc, #32]	; (8016464 <HAL_MspInit+0x4c>)
 8016444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016448:	6413      	str	r3, [r2, #64]	; 0x40
 801644a:	4b06      	ldr	r3, [pc, #24]	; (8016464 <HAL_MspInit+0x4c>)
 801644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801644e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016452:	603b      	str	r3, [r7, #0]
 8016454:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8016456:	bf00      	nop
 8016458:	370c      	adds	r7, #12
 801645a:	46bd      	mov	sp, r7
 801645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016460:	4770      	bx	lr
 8016462:	bf00      	nop
 8016464:	40023800 	.word	0x40023800

08016468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8016468:	b480      	push	{r7}
 801646a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 801646c:	bf00      	nop
 801646e:	46bd      	mov	sp, r7
 8016470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016474:	4770      	bx	lr

08016476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8016476:	b480      	push	{r7}
 8016478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801647a:	e7fe      	b.n	801647a <HardFault_Handler+0x4>

0801647c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801647c:	b480      	push	{r7}
 801647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8016480:	e7fe      	b.n	8016480 <MemManage_Handler+0x4>

08016482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8016482:	b480      	push	{r7}
 8016484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8016486:	e7fe      	b.n	8016486 <BusFault_Handler+0x4>

08016488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8016488:	b480      	push	{r7}
 801648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801648c:	e7fe      	b.n	801648c <UsageFault_Handler+0x4>

0801648e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 801648e:	b480      	push	{r7}
 8016490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8016492:	bf00      	nop
 8016494:	46bd      	mov	sp, r7
 8016496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649a:	4770      	bx	lr

0801649c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 801649c:	b480      	push	{r7}
 801649e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80164a0:	bf00      	nop
 80164a2:	46bd      	mov	sp, r7
 80164a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a8:	4770      	bx	lr

080164aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80164aa:	b480      	push	{r7}
 80164ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80164ae:	bf00      	nop
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80164b8:	b580      	push	{r7, lr}
 80164ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80164bc:	f000 fe7e 	bl	80171bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80164c0:	bf00      	nop
 80164c2:	bd80      	pop	{r7, pc}

080164c4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80164c8:	4802      	ldr	r0, [pc, #8]	; (80164d4 <DMA1_Stream3_IRQHandler+0x10>)
 80164ca:	f001 fd35 	bl	8017f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80164ce:	bf00      	nop
 80164d0:	bd80      	pop	{r7, pc}
 80164d2:	bf00      	nop
 80164d4:	2001b8c0 	.word	0x2001b8c0

080164d8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80164d8:	b580      	push	{r7, lr}
 80164da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80164dc:	4802      	ldr	r0, [pc, #8]	; (80164e8 <DMA1_Stream4_IRQHandler+0x10>)
 80164de:	f001 fd2b 	bl	8017f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80164e2:	bf00      	nop
 80164e4:	bd80      	pop	{r7, pc}
 80164e6:	bf00      	nop
 80164e8:	2001b920 	.word	0x2001b920

080164ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80164f0:	4802      	ldr	r0, [pc, #8]	; (80164fc <TIM5_IRQHandler+0x10>)
 80164f2:	f003 ffa2 	bl	801a43a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80164f6:	bf00      	nop
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	2001bac0 	.word	0x2001bac0

08016500 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8016504:	4802      	ldr	r0, [pc, #8]	; (8016510 <DMA2_Stream0_IRQHandler+0x10>)
 8016506:	f001 fd17 	bl	8017f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801650a:	bf00      	nop
 801650c:	bd80      	pop	{r7, pc}
 801650e:	bf00      	nop
 8016510:	2001b808 	.word	0x2001b808

08016514 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8016514:	b580      	push	{r7, lr}
 8016516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8016518:	4802      	ldr	r0, [pc, #8]	; (8016524 <DMA2_Stream1_IRQHandler+0x10>)
 801651a:	f001 fd0d 	bl	8017f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 801651e:	bf00      	nop
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	2001b980 	.word	0x2001b980

08016528 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 801652c:	4802      	ldr	r0, [pc, #8]	; (8016538 <DMA2_Stream2_IRQHandler+0x10>)
 801652e:	f001 fd03 	bl	8017f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8016532:	bf00      	nop
 8016534:	bd80      	pop	{r7, pc}
 8016536:	bf00      	nop
 8016538:	2001ba60 	.word	0x2001ba60

0801653c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801653c:	b580      	push	{r7, lr}
 801653e:	b086      	sub	sp, #24
 8016540:	af00      	add	r7, sp, #0
 8016542:	60f8      	str	r0, [r7, #12]
 8016544:	60b9      	str	r1, [r7, #8]
 8016546:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8016548:	2300      	movs	r3, #0
 801654a:	617b      	str	r3, [r7, #20]
 801654c:	e00a      	b.n	8016564 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801654e:	f3af 8000 	nop.w
 8016552:	4601      	mov	r1, r0
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	1c5a      	adds	r2, r3, #1
 8016558:	60ba      	str	r2, [r7, #8]
 801655a:	b2ca      	uxtb	r2, r1
 801655c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801655e:	697b      	ldr	r3, [r7, #20]
 8016560:	3301      	adds	r3, #1
 8016562:	617b      	str	r3, [r7, #20]
 8016564:	697a      	ldr	r2, [r7, #20]
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	429a      	cmp	r2, r3
 801656a:	dbf0      	blt.n	801654e <_read+0x12>
	}

return len;
 801656c:	687b      	ldr	r3, [r7, #4]
}
 801656e:	4618      	mov	r0, r3
 8016570:	3718      	adds	r7, #24
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}

08016576 <_close>:
	}
	return len;
}

int _close(int file)
{
 8016576:	b480      	push	{r7}
 8016578:	b083      	sub	sp, #12
 801657a:	af00      	add	r7, sp, #0
 801657c:	6078      	str	r0, [r7, #4]
	return -1;
 801657e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016582:	4618      	mov	r0, r3
 8016584:	370c      	adds	r7, #12
 8016586:	46bd      	mov	sp, r7
 8016588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658c:	4770      	bx	lr

0801658e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801658e:	b480      	push	{r7}
 8016590:	b083      	sub	sp, #12
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]
 8016596:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801659e:	605a      	str	r2, [r3, #4]
	return 0;
 80165a0:	2300      	movs	r3, #0
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	370c      	adds	r7, #12
 80165a6:	46bd      	mov	sp, r7
 80165a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ac:	4770      	bx	lr

080165ae <_isatty>:

int _isatty(int file)
{
 80165ae:	b480      	push	{r7}
 80165b0:	b083      	sub	sp, #12
 80165b2:	af00      	add	r7, sp, #0
 80165b4:	6078      	str	r0, [r7, #4]
	return 1;
 80165b6:	2301      	movs	r3, #1
}
 80165b8:	4618      	mov	r0, r3
 80165ba:	370c      	adds	r7, #12
 80165bc:	46bd      	mov	sp, r7
 80165be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c2:	4770      	bx	lr

080165c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80165c4:	b480      	push	{r7}
 80165c6:	b085      	sub	sp, #20
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	60f8      	str	r0, [r7, #12]
 80165cc:	60b9      	str	r1, [r7, #8]
 80165ce:	607a      	str	r2, [r7, #4]
	return 0;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3714      	adds	r7, #20
 80165d6:	46bd      	mov	sp, r7
 80165d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165dc:	4770      	bx	lr
	...

080165e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80165e0:	b580      	push	{r7, lr}
 80165e2:	b084      	sub	sp, #16
 80165e4:	af00      	add	r7, sp, #0
 80165e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80165e8:	4b11      	ldr	r3, [pc, #68]	; (8016630 <_sbrk+0x50>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d102      	bne.n	80165f6 <_sbrk+0x16>
		heap_end = &end;
 80165f0:	4b0f      	ldr	r3, [pc, #60]	; (8016630 <_sbrk+0x50>)
 80165f2:	4a10      	ldr	r2, [pc, #64]	; (8016634 <_sbrk+0x54>)
 80165f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80165f6:	4b0e      	ldr	r3, [pc, #56]	; (8016630 <_sbrk+0x50>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80165fc:	4b0c      	ldr	r3, [pc, #48]	; (8016630 <_sbrk+0x50>)
 80165fe:	681a      	ldr	r2, [r3, #0]
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	4413      	add	r3, r2
 8016604:	466a      	mov	r2, sp
 8016606:	4293      	cmp	r3, r2
 8016608:	d907      	bls.n	801661a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801660a:	f005 fa63 	bl	801bad4 <__errno>
 801660e:	4602      	mov	r2, r0
 8016610:	230c      	movs	r3, #12
 8016612:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8016614:	f04f 33ff 	mov.w	r3, #4294967295
 8016618:	e006      	b.n	8016628 <_sbrk+0x48>
	}

	heap_end += incr;
 801661a:	4b05      	ldr	r3, [pc, #20]	; (8016630 <_sbrk+0x50>)
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	4413      	add	r3, r2
 8016622:	4a03      	ldr	r2, [pc, #12]	; (8016630 <_sbrk+0x50>)
 8016624:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8016626:	68fb      	ldr	r3, [r7, #12]
}
 8016628:	4618      	mov	r0, r3
 801662a:	3710      	adds	r7, #16
 801662c:	46bd      	mov	sp, r7
 801662e:	bd80      	pop	{r7, pc}
 8016630:	2000029c 	.word	0x2000029c
 8016634:	2001bc28 	.word	0x2001bc28

08016638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8016638:	b480      	push	{r7}
 801663a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801663c:	4b08      	ldr	r3, [pc, #32]	; (8016660 <SystemInit+0x28>)
 801663e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016642:	4a07      	ldr	r2, [pc, #28]	; (8016660 <SystemInit+0x28>)
 8016644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801664c:	4b04      	ldr	r3, [pc, #16]	; (8016660 <SystemInit+0x28>)
 801664e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8016652:	609a      	str	r2, [r3, #8]
#endif
}
 8016654:	bf00      	nop
 8016656:	46bd      	mov	sp, r7
 8016658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801665c:	4770      	bx	lr
 801665e:	bf00      	nop
 8016660:	e000ed00 	.word	0xe000ed00

08016664 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim1_ch1;
DMA_HandleTypeDef hdma_tim1_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b096      	sub	sp, #88	; 0x58
 8016668:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801666a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801666e:	2200      	movs	r2, #0
 8016670:	601a      	str	r2, [r3, #0]
 8016672:	605a      	str	r2, [r3, #4]
 8016674:	609a      	str	r2, [r3, #8]
 8016676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016678:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801667c:	2200      	movs	r2, #0
 801667e:	601a      	str	r2, [r3, #0]
 8016680:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016686:	2200      	movs	r2, #0
 8016688:	601a      	str	r2, [r3, #0]
 801668a:	605a      	str	r2, [r3, #4]
 801668c:	609a      	str	r2, [r3, #8]
 801668e:	60da      	str	r2, [r3, #12]
 8016690:	611a      	str	r2, [r3, #16]
 8016692:	615a      	str	r2, [r3, #20]
 8016694:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016696:	1d3b      	adds	r3, r7, #4
 8016698:	2220      	movs	r2, #32
 801669a:	2100      	movs	r1, #0
 801669c:	4618      	mov	r0, r3
 801669e:	f005 fa4e 	bl	801bb3e <memset>

  htim1.Instance = TIM1;
 80166a2:	4b4b      	ldr	r3, [pc, #300]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166a4:	4a4b      	ldr	r2, [pc, #300]	; (80167d4 <MX_TIM1_Init+0x170>)
 80166a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80166a8:	4b49      	ldr	r3, [pc, #292]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166aa:	2204      	movs	r2, #4
 80166ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80166ae:	4b48      	ldr	r3, [pc, #288]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166b0:	2200      	movs	r2, #0
 80166b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80166b4:	4b46      	ldr	r3, [pc, #280]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80166ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80166bc:	4b44      	ldr	r3, [pc, #272]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166be:	2200      	movs	r2, #0
 80166c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80166c2:	4b43      	ldr	r3, [pc, #268]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166c4:	2200      	movs	r2, #0
 80166c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80166c8:	4b41      	ldr	r3, [pc, #260]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166ca:	2200      	movs	r2, #0
 80166cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80166ce:	4840      	ldr	r0, [pc, #256]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166d0:	f003 fcd0 	bl	801a074 <HAL_TIM_Base_Init>
 80166d4:	4603      	mov	r3, r0
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d001      	beq.n	80166de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80166da:	f7ff fdb1 	bl	8016240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80166de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80166e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80166e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80166e8:	4619      	mov	r1, r3
 80166ea:	4839      	ldr	r0, [pc, #228]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166ec:	f004 f874 	bl	801a7d8 <HAL_TIM_ConfigClockSource>
 80166f0:	4603      	mov	r3, r0
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d001      	beq.n	80166fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80166f6:	f7ff fda3 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80166fa:	4835      	ldr	r0, [pc, #212]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80166fc:	f003 fd09 	bl	801a112 <HAL_TIM_PWM_Init>
 8016700:	4603      	mov	r3, r0
 8016702:	2b00      	cmp	r3, #0
 8016704:	d001      	beq.n	801670a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8016706:	f7ff fd9b 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801670a:	2300      	movs	r3, #0
 801670c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801670e:	2300      	movs	r3, #0
 8016710:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8016712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016716:	4619      	mov	r1, r3
 8016718:	482d      	ldr	r0, [pc, #180]	; (80167d0 <MX_TIM1_Init+0x16c>)
 801671a:	f004 fc4d 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 801671e:	4603      	mov	r3, r0
 8016720:	2b00      	cmp	r3, #0
 8016722:	d001      	beq.n	8016728 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8016724:	f7ff fd8c 	bl	8016240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016728:	2360      	movs	r3, #96	; 0x60
 801672a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2-1;
 801672c:	2301      	movs	r3, #1
 801672e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016730:	2300      	movs	r3, #0
 8016732:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016734:	2300      	movs	r3, #0
 8016736:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016738:	2300      	movs	r3, #0
 801673a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801673c:	2300      	movs	r3, #0
 801673e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016740:	2300      	movs	r3, #0
 8016742:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016748:	2200      	movs	r2, #0
 801674a:	4619      	mov	r1, r3
 801674c:	4820      	ldr	r0, [pc, #128]	; (80167d0 <MX_TIM1_Init+0x16c>)
 801674e:	f003 ff7d 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 8016752:	4603      	mov	r3, r0
 8016754:	2b00      	cmp	r3, #0
 8016756:	d001      	beq.n	801675c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8016758:	f7ff fd72 	bl	8016240 <Error_Handler>
  }
  sConfigOC.Pulse = 252-1;
 801675c:	23fb      	movs	r3, #251	; 0xfb
 801675e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8016760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016764:	2204      	movs	r2, #4
 8016766:	4619      	mov	r1, r3
 8016768:	4819      	ldr	r0, [pc, #100]	; (80167d0 <MX_TIM1_Init+0x16c>)
 801676a:	f003 ff6f 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 801676e:	4603      	mov	r3, r0
 8016770:	2b00      	cmp	r3, #0
 8016772:	d001      	beq.n	8016778 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8016774:	f7ff fd64 	bl	8016240 <Error_Handler>
  }
  sConfigOC.Pulse = 202-1;
 8016778:	23c9      	movs	r3, #201	; 0xc9
 801677a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801677c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016780:	2208      	movs	r2, #8
 8016782:	4619      	mov	r1, r3
 8016784:	4812      	ldr	r0, [pc, #72]	; (80167d0 <MX_TIM1_Init+0x16c>)
 8016786:	f003 ff61 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d001      	beq.n	8016794 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8016790:	f7ff fd56 	bl	8016240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016794:	2300      	movs	r3, #0
 8016796:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016798:	2300      	movs	r3, #0
 801679a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801679c:	2300      	movs	r3, #0
 801679e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80167a0:	2300      	movs	r3, #0
 80167a2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80167a4:	2300      	movs	r3, #0
 80167a6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80167a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80167ac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80167ae:	2300      	movs	r3, #0
 80167b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80167b2:	1d3b      	adds	r3, r7, #4
 80167b4:	4619      	mov	r1, r3
 80167b6:	4806      	ldr	r0, [pc, #24]	; (80167d0 <MX_TIM1_Init+0x16c>)
 80167b8:	f004 fc7a 	bl	801b0b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80167bc:	4603      	mov	r3, r0
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d001      	beq.n	80167c6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80167c2:	f7ff fd3d 	bl	8016240 <Error_Handler>
  }

}
 80167c6:	bf00      	nop
 80167c8:	3758      	adds	r7, #88	; 0x58
 80167ca:	46bd      	mov	sp, r7
 80167cc:	bd80      	pop	{r7, pc}
 80167ce:	bf00      	nop
 80167d0:	2001bb40 	.word	0x2001bb40
 80167d4:	40010000 	.word	0x40010000

080167d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80167d8:	b580      	push	{r7, lr}
 80167da:	b08e      	sub	sp, #56	; 0x38
 80167dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80167de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80167e2:	2200      	movs	r2, #0
 80167e4:	601a      	str	r2, [r3, #0]
 80167e6:	605a      	str	r2, [r3, #4]
 80167e8:	609a      	str	r2, [r3, #8]
 80167ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80167ec:	f107 0320 	add.w	r3, r7, #32
 80167f0:	2200      	movs	r2, #0
 80167f2:	601a      	str	r2, [r3, #0]
 80167f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80167f6:	1d3b      	adds	r3, r7, #4
 80167f8:	2200      	movs	r2, #0
 80167fa:	601a      	str	r2, [r3, #0]
 80167fc:	605a      	str	r2, [r3, #4]
 80167fe:	609a      	str	r2, [r3, #8]
 8016800:	60da      	str	r2, [r3, #12]
 8016802:	611a      	str	r2, [r3, #16]
 8016804:	615a      	str	r2, [r3, #20]
 8016806:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 8016808:	4b3d      	ldr	r3, [pc, #244]	; (8016900 <MX_TIM2_Init+0x128>)
 801680a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801680e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8016810:	4b3b      	ldr	r3, [pc, #236]	; (8016900 <MX_TIM2_Init+0x128>)
 8016812:	2200      	movs	r2, #0
 8016814:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016816:	4b3a      	ldr	r3, [pc, #232]	; (8016900 <MX_TIM2_Init+0x128>)
 8016818:	2200      	movs	r2, #0
 801681a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 801681c:	4b38      	ldr	r3, [pc, #224]	; (8016900 <MX_TIM2_Init+0x128>)
 801681e:	22f9      	movs	r2, #249	; 0xf9
 8016820:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016822:	4b37      	ldr	r3, [pc, #220]	; (8016900 <MX_TIM2_Init+0x128>)
 8016824:	2200      	movs	r2, #0
 8016826:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016828:	4b35      	ldr	r3, [pc, #212]	; (8016900 <MX_TIM2_Init+0x128>)
 801682a:	2200      	movs	r2, #0
 801682c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801682e:	4834      	ldr	r0, [pc, #208]	; (8016900 <MX_TIM2_Init+0x128>)
 8016830:	f003 fc20 	bl	801a074 <HAL_TIM_Base_Init>
 8016834:	4603      	mov	r3, r0
 8016836:	2b00      	cmp	r3, #0
 8016838:	d001      	beq.n	801683e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 801683a:	f7ff fd01 	bl	8016240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801683e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016842:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8016844:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016848:	4619      	mov	r1, r3
 801684a:	482d      	ldr	r0, [pc, #180]	; (8016900 <MX_TIM2_Init+0x128>)
 801684c:	f003 ffc4 	bl	801a7d8 <HAL_TIM_ConfigClockSource>
 8016850:	4603      	mov	r3, r0
 8016852:	2b00      	cmp	r3, #0
 8016854:	d001      	beq.n	801685a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8016856:	f7ff fcf3 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 801685a:	4829      	ldr	r0, [pc, #164]	; (8016900 <MX_TIM2_Init+0x128>)
 801685c:	f003 fc59 	bl	801a112 <HAL_TIM_PWM_Init>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	d001      	beq.n	801686a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8016866:	f7ff fceb 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801686a:	2300      	movs	r3, #0
 801686c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801686e:	2300      	movs	r3, #0
 8016870:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8016872:	f107 0320 	add.w	r3, r7, #32
 8016876:	4619      	mov	r1, r3
 8016878:	4821      	ldr	r0, [pc, #132]	; (8016900 <MX_TIM2_Init+0x128>)
 801687a:	f004 fb9d 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 801687e:	4603      	mov	r3, r0
 8016880:	2b00      	cmp	r3, #0
 8016882:	d001      	beq.n	8016888 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8016884:	f7ff fcdc 	bl	8016240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016888:	2360      	movs	r3, #96	; 0x60
 801688a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 801688c:	2300      	movs	r3, #0
 801688e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016890:	2300      	movs	r3, #0
 8016892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016894:	2300      	movs	r3, #0
 8016896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016898:	1d3b      	adds	r3, r7, #4
 801689a:	2200      	movs	r2, #0
 801689c:	4619      	mov	r1, r3
 801689e:	4818      	ldr	r0, [pc, #96]	; (8016900 <MX_TIM2_Init+0x128>)
 80168a0:	f003 fed4 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 80168a4:	4603      	mov	r3, r0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d001      	beq.n	80168ae <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80168aa:	f7ff fcc9 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80168ae:	1d3b      	adds	r3, r7, #4
 80168b0:	2204      	movs	r2, #4
 80168b2:	4619      	mov	r1, r3
 80168b4:	4812      	ldr	r0, [pc, #72]	; (8016900 <MX_TIM2_Init+0x128>)
 80168b6:	f003 fec9 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 80168ba:	4603      	mov	r3, r0
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d001      	beq.n	80168c4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80168c0:	f7ff fcbe 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80168c4:	1d3b      	adds	r3, r7, #4
 80168c6:	2208      	movs	r2, #8
 80168c8:	4619      	mov	r1, r3
 80168ca:	480d      	ldr	r0, [pc, #52]	; (8016900 <MX_TIM2_Init+0x128>)
 80168cc:	f003 febe 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 80168d0:	4603      	mov	r3, r0
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d001      	beq.n	80168da <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 80168d6:	f7ff fcb3 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80168da:	1d3b      	adds	r3, r7, #4
 80168dc:	220c      	movs	r2, #12
 80168de:	4619      	mov	r1, r3
 80168e0:	4807      	ldr	r0, [pc, #28]	; (8016900 <MX_TIM2_Init+0x128>)
 80168e2:	f003 feb3 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 80168e6:	4603      	mov	r3, r0
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d001      	beq.n	80168f0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80168ec:	f7ff fca8 	bl	8016240 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80168f0:	4803      	ldr	r0, [pc, #12]	; (8016900 <MX_TIM2_Init+0x128>)
 80168f2:	f000 fb15 	bl	8016f20 <HAL_TIM_MspPostInit>

}
 80168f6:	bf00      	nop
 80168f8:	3738      	adds	r7, #56	; 0x38
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	2001bb80 	.word	0x2001bb80

08016904 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b08c      	sub	sp, #48	; 0x30
 8016908:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 801690a:	f107 030c 	add.w	r3, r7, #12
 801690e:	2224      	movs	r2, #36	; 0x24
 8016910:	2100      	movs	r1, #0
 8016912:	4618      	mov	r0, r3
 8016914:	f005 f913 	bl	801bb3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016918:	1d3b      	adds	r3, r7, #4
 801691a:	2200      	movs	r2, #0
 801691c:	601a      	str	r2, [r3, #0]
 801691e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8016920:	4b20      	ldr	r3, [pc, #128]	; (80169a4 <MX_TIM3_Init+0xa0>)
 8016922:	4a21      	ldr	r2, [pc, #132]	; (80169a8 <MX_TIM3_Init+0xa4>)
 8016924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8016926:	4b1f      	ldr	r3, [pc, #124]	; (80169a4 <MX_TIM3_Init+0xa0>)
 8016928:	2200      	movs	r2, #0
 801692a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801692c:	4b1d      	ldr	r3, [pc, #116]	; (80169a4 <MX_TIM3_Init+0xa0>)
 801692e:	2200      	movs	r2, #0
 8016930:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8016932:	4b1c      	ldr	r3, [pc, #112]	; (80169a4 <MX_TIM3_Init+0xa0>)
 8016934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801693a:	4b1a      	ldr	r3, [pc, #104]	; (80169a4 <MX_TIM3_Init+0xa0>)
 801693c:	2200      	movs	r2, #0
 801693e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016940:	4b18      	ldr	r3, [pc, #96]	; (80169a4 <MX_TIM3_Init+0xa0>)
 8016942:	2200      	movs	r2, #0
 8016944:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8016946:	2303      	movs	r3, #3
 8016948:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 801694a:	2300      	movs	r3, #0
 801694c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 801694e:	2301      	movs	r3, #1
 8016950:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8016952:	2300      	movs	r3, #0
 8016954:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8016956:	2300      	movs	r3, #0
 8016958:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 801695a:	2300      	movs	r3, #0
 801695c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 801695e:	2301      	movs	r3, #1
 8016960:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8016962:	2300      	movs	r3, #0
 8016964:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8016966:	2300      	movs	r3, #0
 8016968:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 801696a:	f107 030c 	add.w	r3, r7, #12
 801696e:	4619      	mov	r1, r3
 8016970:	480c      	ldr	r0, [pc, #48]	; (80169a4 <MX_TIM3_Init+0xa0>)
 8016972:	f003 fc99 	bl	801a2a8 <HAL_TIM_Encoder_Init>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d001      	beq.n	8016980 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 801697c:	f7ff fc60 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016980:	2300      	movs	r3, #0
 8016982:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016984:	2300      	movs	r3, #0
 8016986:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8016988:	1d3b      	adds	r3, r7, #4
 801698a:	4619      	mov	r1, r3
 801698c:	4805      	ldr	r0, [pc, #20]	; (80169a4 <MX_TIM3_Init+0xa0>)
 801698e:	f004 fb13 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 8016992:	4603      	mov	r3, r0
 8016994:	2b00      	cmp	r3, #0
 8016996:	d001      	beq.n	801699c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8016998:	f7ff fc52 	bl	8016240 <Error_Handler>
  }

}
 801699c:	bf00      	nop
 801699e:	3730      	adds	r7, #48	; 0x30
 80169a0:	46bd      	mov	sp, r7
 80169a2:	bd80      	pop	{r7, pc}
 80169a4:	2001bb00 	.word	0x2001bb00
 80169a8:	40000400 	.word	0x40000400

080169ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80169ac:	b580      	push	{r7, lr}
 80169ae:	b08c      	sub	sp, #48	; 0x30
 80169b0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80169b2:	f107 030c 	add.w	r3, r7, #12
 80169b6:	2224      	movs	r2, #36	; 0x24
 80169b8:	2100      	movs	r1, #0
 80169ba:	4618      	mov	r0, r3
 80169bc:	f005 f8bf 	bl	801bb3e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80169c0:	1d3b      	adds	r3, r7, #4
 80169c2:	2200      	movs	r2, #0
 80169c4:	601a      	str	r2, [r3, #0]
 80169c6:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80169c8:	4b20      	ldr	r3, [pc, #128]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169ca:	4a21      	ldr	r2, [pc, #132]	; (8016a50 <MX_TIM4_Init+0xa4>)
 80169cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80169ce:	4b1f      	ldr	r3, [pc, #124]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169d0:	2200      	movs	r2, #0
 80169d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80169d4:	4b1d      	ldr	r3, [pc, #116]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169d6:	2200      	movs	r2, #0
 80169d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80169da:	4b1c      	ldr	r3, [pc, #112]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80169e2:	4b1a      	ldr	r3, [pc, #104]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169e4:	2200      	movs	r2, #0
 80169e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80169e8:	4b18      	ldr	r3, [pc, #96]	; (8016a4c <MX_TIM4_Init+0xa0>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80169ee:	2303      	movs	r3, #3
 80169f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80169f2:	2300      	movs	r3, #0
 80169f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80169f6:	2301      	movs	r3, #1
 80169f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80169fa:	2300      	movs	r3, #0
 80169fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80169fe:	2300      	movs	r3, #0
 8016a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8016a02:	2300      	movs	r3, #0
 8016a04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8016a06:	2301      	movs	r3, #1
 8016a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8016a12:	f107 030c 	add.w	r3, r7, #12
 8016a16:	4619      	mov	r1, r3
 8016a18:	480c      	ldr	r0, [pc, #48]	; (8016a4c <MX_TIM4_Init+0xa0>)
 8016a1a:	f003 fc45 	bl	801a2a8 <HAL_TIM_Encoder_Init>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d001      	beq.n	8016a28 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8016a24:	f7ff fc0c 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016a28:	2300      	movs	r3, #0
 8016a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8016a30:	1d3b      	adds	r3, r7, #4
 8016a32:	4619      	mov	r1, r3
 8016a34:	4805      	ldr	r0, [pc, #20]	; (8016a4c <MX_TIM4_Init+0xa0>)
 8016a36:	f004 fabf 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d001      	beq.n	8016a44 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8016a40:	f7ff fbfe 	bl	8016240 <Error_Handler>
  }

}
 8016a44:	bf00      	nop
 8016a46:	3730      	adds	r7, #48	; 0x30
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}
 8016a4c:	2001ba20 	.word	0x2001ba20
 8016a50:	40000800 	.word	0x40000800

08016a54 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8016a54:	b580      	push	{r7, lr}
 8016a56:	b08e      	sub	sp, #56	; 0x38
 8016a58:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016a5e:	2200      	movs	r2, #0
 8016a60:	601a      	str	r2, [r3, #0]
 8016a62:	605a      	str	r2, [r3, #4]
 8016a64:	609a      	str	r2, [r3, #8]
 8016a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016a68:	f107 0320 	add.w	r3, r7, #32
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	601a      	str	r2, [r3, #0]
 8016a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016a72:	1d3b      	adds	r3, r7, #4
 8016a74:	2200      	movs	r2, #0
 8016a76:	601a      	str	r2, [r3, #0]
 8016a78:	605a      	str	r2, [r3, #4]
 8016a7a:	609a      	str	r2, [r3, #8]
 8016a7c:	60da      	str	r2, [r3, #12]
 8016a7e:	611a      	str	r2, [r3, #16]
 8016a80:	615a      	str	r2, [r3, #20]
 8016a82:	619a      	str	r2, [r3, #24]

  htim5.Instance = TIM5;
 8016a84:	4b2b      	ldr	r3, [pc, #172]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016a86:	4a2c      	ldr	r2, [pc, #176]	; (8016b38 <MX_TIM5_Init+0xe4>)
 8016a88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50-1;
 8016a8a:	4b2a      	ldr	r3, [pc, #168]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016a8c:	2231      	movs	r2, #49	; 0x31
 8016a8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016a90:	4b28      	ldr	r3, [pc, #160]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016a92:	2200      	movs	r2, #0
 8016a94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8016a96:	4b27      	ldr	r3, [pc, #156]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8016a9c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016a9e:	4b25      	ldr	r3, [pc, #148]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016aa0:	2200      	movs	r2, #0
 8016aa2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016aa4:	4b23      	ldr	r3, [pc, #140]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016aa6:	2200      	movs	r2, #0
 8016aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8016aaa:	4822      	ldr	r0, [pc, #136]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016aac:	f003 fae2 	bl	801a074 <HAL_TIM_Base_Init>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d001      	beq.n	8016aba <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8016ab6:	f7ff fbc3 	bl	8016240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016aba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016abe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8016ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016ac4:	4619      	mov	r1, r3
 8016ac6:	481b      	ldr	r0, [pc, #108]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016ac8:	f003 fe86 	bl	801a7d8 <HAL_TIM_ConfigClockSource>
 8016acc:	4603      	mov	r3, r0
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d001      	beq.n	8016ad6 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8016ad2:	f7ff fbb5 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8016ad6:	4817      	ldr	r0, [pc, #92]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016ad8:	f003 fb1b 	bl	801a112 <HAL_TIM_PWM_Init>
 8016adc:	4603      	mov	r3, r0
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d001      	beq.n	8016ae6 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8016ae2:	f7ff fbad 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016ae6:	2300      	movs	r3, #0
 8016ae8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016aea:	2300      	movs	r3, #0
 8016aec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8016aee:	f107 0320 	add.w	r3, r7, #32
 8016af2:	4619      	mov	r1, r3
 8016af4:	480f      	ldr	r0, [pc, #60]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016af6:	f004 fa5f 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 8016afa:	4603      	mov	r3, r0
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d001      	beq.n	8016b04 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8016b00:	f7ff fb9e 	bl	8016240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016b04:	2360      	movs	r3, #96	; 0x60
 8016b06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016b10:	2300      	movs	r3, #0
 8016b12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016b14:	1d3b      	adds	r3, r7, #4
 8016b16:	2200      	movs	r2, #0
 8016b18:	4619      	mov	r1, r3
 8016b1a:	4806      	ldr	r0, [pc, #24]	; (8016b34 <MX_TIM5_Init+0xe0>)
 8016b1c:	f003 fd96 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 8016b20:	4603      	mov	r3, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d001      	beq.n	8016b2a <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8016b26:	f7ff fb8b 	bl	8016240 <Error_Handler>
  }

}
 8016b2a:	bf00      	nop
 8016b2c:	3738      	adds	r7, #56	; 0x38
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
 8016b32:	bf00      	nop
 8016b34:	2001bac0 	.word	0x2001bac0
 8016b38:	40000c00 	.word	0x40000c00

08016b3c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8016b3c:	b580      	push	{r7, lr}
 8016b3e:	b096      	sub	sp, #88	; 0x58
 8016b40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016b46:	2200      	movs	r2, #0
 8016b48:	601a      	str	r2, [r3, #0]
 8016b4a:	605a      	str	r2, [r3, #4]
 8016b4c:	609a      	str	r2, [r3, #8]
 8016b4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016b54:	2200      	movs	r2, #0
 8016b56:	601a      	str	r2, [r3, #0]
 8016b58:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016b5e:	2200      	movs	r2, #0
 8016b60:	601a      	str	r2, [r3, #0]
 8016b62:	605a      	str	r2, [r3, #4]
 8016b64:	609a      	str	r2, [r3, #8]
 8016b66:	60da      	str	r2, [r3, #12]
 8016b68:	611a      	str	r2, [r3, #16]
 8016b6a:	615a      	str	r2, [r3, #20]
 8016b6c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016b6e:	1d3b      	adds	r3, r7, #4
 8016b70:	2220      	movs	r2, #32
 8016b72:	2100      	movs	r1, #0
 8016b74:	4618      	mov	r0, r3
 8016b76:	f004 ffe2 	bl	801bb3e <memset>

  htim8.Instance = TIM8;
 8016b7a:	4b3e      	ldr	r3, [pc, #248]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b7c:	4a3e      	ldr	r2, [pc, #248]	; (8016c78 <MX_TIM8_Init+0x13c>)
 8016b7e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8016b80:	4b3c      	ldr	r3, [pc, #240]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b82:	2200      	movs	r2, #0
 8016b84:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016b86:	4b3b      	ldr	r3, [pc, #236]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b88:	2200      	movs	r2, #0
 8016b8a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 250-1;
 8016b8c:	4b39      	ldr	r3, [pc, #228]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b8e:	22f9      	movs	r2, #249	; 0xf9
 8016b90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016b92:	4b38      	ldr	r3, [pc, #224]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b94:	2200      	movs	r2, #0
 8016b96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8016b98:	4b36      	ldr	r3, [pc, #216]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016b9e:	4b35      	ldr	r3, [pc, #212]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8016ba4:	4833      	ldr	r0, [pc, #204]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016ba6:	f003 fa65 	bl	801a074 <HAL_TIM_Base_Init>
 8016baa:	4603      	mov	r3, r0
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d001      	beq.n	8016bb4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8016bb0:	f7ff fb46 	bl	8016240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8016bba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8016bbe:	4619      	mov	r1, r3
 8016bc0:	482c      	ldr	r0, [pc, #176]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016bc2:	f003 fe09 	bl	801a7d8 <HAL_TIM_ConfigClockSource>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d001      	beq.n	8016bd0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8016bcc:	f7ff fb38 	bl	8016240 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8016bd0:	4828      	ldr	r0, [pc, #160]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016bd2:	f003 fa9e 	bl	801a112 <HAL_TIM_PWM_Init>
 8016bd6:	4603      	mov	r3, r0
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d001      	beq.n	8016be0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8016bdc:	f7ff fb30 	bl	8016240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016be0:	2300      	movs	r3, #0
 8016be2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016be4:	2300      	movs	r3, #0
 8016be6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016be8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8016bec:	4619      	mov	r1, r3
 8016bee:	4821      	ldr	r0, [pc, #132]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016bf0:	f004 f9e2 	bl	801afb8 <HAL_TIMEx_MasterConfigSynchronization>
 8016bf4:	4603      	mov	r3, r0
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d001      	beq.n	8016bfe <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8016bfa:	f7ff fb21 	bl	8016240 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016bfe:	2360      	movs	r3, #96	; 0x60
 8016c00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8016c02:	2300      	movs	r3, #0
 8016c04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016c06:	2300      	movs	r3, #0
 8016c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016c12:	2300      	movs	r3, #0
 8016c14:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016c16:	2300      	movs	r3, #0
 8016c18:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016c1e:	2200      	movs	r2, #0
 8016c20:	4619      	mov	r1, r3
 8016c22:	4814      	ldr	r0, [pc, #80]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016c24:	f003 fd12 	bl	801a64c <HAL_TIM_PWM_ConfigChannel>
 8016c28:	4603      	mov	r3, r0
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d001      	beq.n	8016c32 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8016c2e:	f7ff fb07 	bl	8016240 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016c32:	2300      	movs	r3, #0
 8016c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016c36:	2300      	movs	r3, #0
 8016c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016c42:	2300      	movs	r3, #0
 8016c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016c50:	1d3b      	adds	r3, r7, #4
 8016c52:	4619      	mov	r1, r3
 8016c54:	4807      	ldr	r0, [pc, #28]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016c56:	f004 fa2b 	bl	801b0b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d001      	beq.n	8016c64 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8016c60:	f7ff faee 	bl	8016240 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8016c64:	4803      	ldr	r0, [pc, #12]	; (8016c74 <MX_TIM8_Init+0x138>)
 8016c66:	f000 f95b 	bl	8016f20 <HAL_TIM_MspPostInit>

}
 8016c6a:	bf00      	nop
 8016c6c:	3758      	adds	r7, #88	; 0x58
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	2001b9e0 	.word	0x2001b9e0
 8016c78:	40010400 	.word	0x40010400

08016c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b086      	sub	sp, #24
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	4a5e      	ldr	r2, [pc, #376]	; (8016e04 <HAL_TIM_Base_MspInit+0x188>)
 8016c8a:	4293      	cmp	r3, r2
 8016c8c:	d172      	bne.n	8016d74 <HAL_TIM_Base_MspInit+0xf8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8016c8e:	2300      	movs	r3, #0
 8016c90:	617b      	str	r3, [r7, #20]
 8016c92:	4b5d      	ldr	r3, [pc, #372]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c96:	4a5c      	ldr	r2, [pc, #368]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016c98:	f043 0301 	orr.w	r3, r3, #1
 8016c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8016c9e:	4b5a      	ldr	r3, [pc, #360]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ca2:	f003 0301 	and.w	r3, r3, #1
 8016ca6:	617b      	str	r3, [r7, #20]
 8016ca8:	697b      	ldr	r3, [r7, #20]
  
    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8016caa:	4b58      	ldr	r3, [pc, #352]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cac:	4a58      	ldr	r2, [pc, #352]	; (8016e10 <HAL_TIM_Base_MspInit+0x194>)
 8016cae:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8016cb0:	4b56      	ldr	r3, [pc, #344]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cb2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8016cb6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016cb8:	4b54      	ldr	r3, [pc, #336]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cba:	2240      	movs	r2, #64	; 0x40
 8016cbc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8016cbe:	4b53      	ldr	r3, [pc, #332]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8016cc4:	4b51      	ldr	r3, [pc, #324]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016cca:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016ccc:	4b4f      	ldr	r3, [pc, #316]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016cd2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016cd4:	4b4d      	ldr	r3, [pc, #308]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016cda:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8016cdc:	4b4b      	ldr	r3, [pc, #300]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016ce2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8016ce4:	4b49      	ldr	r3, [pc, #292]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016ce6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016cea:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016cec:	4b47      	ldr	r3, [pc, #284]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8016cf2:	4846      	ldr	r0, [pc, #280]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016cf4:	f001 f81a 	bl	8017d2c <HAL_DMA_Init>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d001      	beq.n	8016d02 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8016cfe:	f7ff fa9f 	bl	8016240 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	4a41      	ldr	r2, [pc, #260]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016d06:	625a      	str	r2, [r3, #36]	; 0x24
 8016d08:	4a40      	ldr	r2, [pc, #256]	; (8016e0c <HAL_TIM_Base_MspInit+0x190>)
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8016d0e:	4b41      	ldr	r3, [pc, #260]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d10:	4a41      	ldr	r2, [pc, #260]	; (8016e18 <HAL_TIM_Base_MspInit+0x19c>)
 8016d12:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8016d14:	4b3f      	ldr	r3, [pc, #252]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d16:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8016d1a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8016d1c:	4b3d      	ldr	r3, [pc, #244]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d1e:	2240      	movs	r2, #64	; 0x40
 8016d20:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8016d22:	4b3c      	ldr	r3, [pc, #240]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d24:	2200      	movs	r2, #0
 8016d26:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8016d28:	4b3a      	ldr	r3, [pc, #232]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016d2e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8016d30:	4b38      	ldr	r3, [pc, #224]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016d36:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8016d38:	4b36      	ldr	r3, [pc, #216]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8016d3e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8016d40:	4b34      	ldr	r3, [pc, #208]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016d46:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8016d48:	4b32      	ldr	r3, [pc, #200]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8016d4e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8016d50:	4b30      	ldr	r3, [pc, #192]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d52:	2200      	movs	r2, #0
 8016d54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8016d56:	482f      	ldr	r0, [pc, #188]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d58:	f000 ffe8 	bl	8017d2c <HAL_DMA_Init>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d001      	beq.n	8016d66 <HAL_TIM_Base_MspInit+0xea>
    {
      Error_Handler();
 8016d62:	f7ff fa6d 	bl	8016240 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	4a2a      	ldr	r2, [pc, #168]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d6a:	629a      	str	r2, [r3, #40]	; 0x28
 8016d6c:	4a29      	ldr	r2, [pc, #164]	; (8016e14 <HAL_TIM_Base_MspInit+0x198>)
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8016d72:	e042      	b.n	8016dfa <HAL_TIM_Base_MspInit+0x17e>
  else if(tim_baseHandle->Instance==TIM2)
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016d7c:	d10e      	bne.n	8016d9c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8016d7e:	2300      	movs	r3, #0
 8016d80:	613b      	str	r3, [r7, #16]
 8016d82:	4b21      	ldr	r3, [pc, #132]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d86:	4a20      	ldr	r2, [pc, #128]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016d88:	f043 0301 	orr.w	r3, r3, #1
 8016d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8016d8e:	4b1e      	ldr	r3, [pc, #120]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d92:	f003 0301 	and.w	r3, r3, #1
 8016d96:	613b      	str	r3, [r7, #16]
 8016d98:	693b      	ldr	r3, [r7, #16]
}
 8016d9a:	e02e      	b.n	8016dfa <HAL_TIM_Base_MspInit+0x17e>
  else if(tim_baseHandle->Instance==TIM5)
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4a1e      	ldr	r2, [pc, #120]	; (8016e1c <HAL_TIM_Base_MspInit+0x1a0>)
 8016da2:	4293      	cmp	r3, r2
 8016da4:	d116      	bne.n	8016dd4 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8016da6:	2300      	movs	r3, #0
 8016da8:	60fb      	str	r3, [r7, #12]
 8016daa:	4b17      	ldr	r3, [pc, #92]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dae:	4a16      	ldr	r2, [pc, #88]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016db0:	f043 0308 	orr.w	r3, r3, #8
 8016db4:	6413      	str	r3, [r2, #64]	; 0x40
 8016db6:	4b14      	ldr	r3, [pc, #80]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dba:	f003 0308 	and.w	r3, r3, #8
 8016dbe:	60fb      	str	r3, [r7, #12]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	2032      	movs	r0, #50	; 0x32
 8016dc8:	f000 ff79 	bl	8017cbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8016dcc:	2032      	movs	r0, #50	; 0x32
 8016dce:	f000 ff92 	bl	8017cf6 <HAL_NVIC_EnableIRQ>
}
 8016dd2:	e012      	b.n	8016dfa <HAL_TIM_Base_MspInit+0x17e>
  else if(tim_baseHandle->Instance==TIM8)
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	4a11      	ldr	r2, [pc, #68]	; (8016e20 <HAL_TIM_Base_MspInit+0x1a4>)
 8016dda:	4293      	cmp	r3, r2
 8016ddc:	d10d      	bne.n	8016dfa <HAL_TIM_Base_MspInit+0x17e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016dde:	2300      	movs	r3, #0
 8016de0:	60bb      	str	r3, [r7, #8]
 8016de2:	4b09      	ldr	r3, [pc, #36]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016de6:	4a08      	ldr	r2, [pc, #32]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016de8:	f043 0302 	orr.w	r3, r3, #2
 8016dec:	6453      	str	r3, [r2, #68]	; 0x44
 8016dee:	4b06      	ldr	r3, [pc, #24]	; (8016e08 <HAL_TIM_Base_MspInit+0x18c>)
 8016df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016df2:	f003 0302 	and.w	r3, r3, #2
 8016df6:	60bb      	str	r3, [r7, #8]
 8016df8:	68bb      	ldr	r3, [r7, #8]
}
 8016dfa:	bf00      	nop
 8016dfc:	3718      	adds	r7, #24
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}
 8016e02:	bf00      	nop
 8016e04:	40010000 	.word	0x40010000
 8016e08:	40023800 	.word	0x40023800
 8016e0c:	2001b980 	.word	0x2001b980
 8016e10:	40026428 	.word	0x40026428
 8016e14:	2001ba60 	.word	0x2001ba60
 8016e18:	40026440 	.word	0x40026440
 8016e1c:	40000c00 	.word	0x40000c00
 8016e20:	40010400 	.word	0x40010400

08016e24 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b08c      	sub	sp, #48	; 0x30
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016e2c:	f107 031c 	add.w	r3, r7, #28
 8016e30:	2200      	movs	r2, #0
 8016e32:	601a      	str	r2, [r3, #0]
 8016e34:	605a      	str	r2, [r3, #4]
 8016e36:	609a      	str	r2, [r3, #8]
 8016e38:	60da      	str	r2, [r3, #12]
 8016e3a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	4a32      	ldr	r2, [pc, #200]	; (8016f0c <HAL_TIM_Encoder_MspInit+0xe8>)
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d12c      	bne.n	8016ea0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8016e46:	2300      	movs	r3, #0
 8016e48:	61bb      	str	r3, [r7, #24]
 8016e4a:	4b31      	ldr	r3, [pc, #196]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e4e:	4a30      	ldr	r2, [pc, #192]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e50:	f043 0302 	orr.w	r3, r3, #2
 8016e54:	6413      	str	r3, [r2, #64]	; 0x40
 8016e56:	4b2e      	ldr	r3, [pc, #184]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e5a:	f003 0302 	and.w	r3, r3, #2
 8016e5e:	61bb      	str	r3, [r7, #24]
 8016e60:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016e62:	2300      	movs	r3, #0
 8016e64:	617b      	str	r3, [r7, #20]
 8016e66:	4b2a      	ldr	r3, [pc, #168]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e6a:	4a29      	ldr	r2, [pc, #164]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e6c:	f043 0301 	orr.w	r3, r3, #1
 8016e70:	6313      	str	r3, [r2, #48]	; 0x30
 8016e72:	4b27      	ldr	r3, [pc, #156]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	617b      	str	r3, [r7, #20]
 8016e7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8016e7e:	23c0      	movs	r3, #192	; 0xc0
 8016e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e82:	2302      	movs	r3, #2
 8016e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e86:	2300      	movs	r3, #0
 8016e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8016e8e:	2302      	movs	r3, #2
 8016e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016e92:	f107 031c 	add.w	r3, r7, #28
 8016e96:	4619      	mov	r1, r3
 8016e98:	481e      	ldr	r0, [pc, #120]	; (8016f14 <HAL_TIM_Encoder_MspInit+0xf0>)
 8016e9a:	f001 fd9b 	bl	80189d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8016e9e:	e030      	b.n	8016f02 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	4a1c      	ldr	r2, [pc, #112]	; (8016f18 <HAL_TIM_Encoder_MspInit+0xf4>)
 8016ea6:	4293      	cmp	r3, r2
 8016ea8:	d12b      	bne.n	8016f02 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8016eaa:	2300      	movs	r3, #0
 8016eac:	613b      	str	r3, [r7, #16]
 8016eae:	4b18      	ldr	r3, [pc, #96]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016eb2:	4a17      	ldr	r2, [pc, #92]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016eb4:	f043 0304 	orr.w	r3, r3, #4
 8016eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8016eba:	4b15      	ldr	r3, [pc, #84]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ebe:	f003 0304 	and.w	r3, r3, #4
 8016ec2:	613b      	str	r3, [r7, #16]
 8016ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	60fb      	str	r3, [r7, #12]
 8016eca:	4b11      	ldr	r3, [pc, #68]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ece:	4a10      	ldr	r2, [pc, #64]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016ed0:	f043 0302 	orr.w	r3, r3, #2
 8016ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8016ed6:	4b0e      	ldr	r3, [pc, #56]	; (8016f10 <HAL_TIM_Encoder_MspInit+0xec>)
 8016ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016eda:	f003 0302 	and.w	r3, r3, #2
 8016ede:	60fb      	str	r3, [r7, #12]
 8016ee0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8016ee2:	23c0      	movs	r3, #192	; 0xc0
 8016ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016ee6:	2302      	movs	r3, #2
 8016ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016eea:	2300      	movs	r3, #0
 8016eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016eee:	2300      	movs	r3, #0
 8016ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8016ef2:	2302      	movs	r3, #2
 8016ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016ef6:	f107 031c 	add.w	r3, r7, #28
 8016efa:	4619      	mov	r1, r3
 8016efc:	4807      	ldr	r0, [pc, #28]	; (8016f1c <HAL_TIM_Encoder_MspInit+0xf8>)
 8016efe:	f001 fd69 	bl	80189d4 <HAL_GPIO_Init>
}
 8016f02:	bf00      	nop
 8016f04:	3730      	adds	r7, #48	; 0x30
 8016f06:	46bd      	mov	sp, r7
 8016f08:	bd80      	pop	{r7, pc}
 8016f0a:	bf00      	nop
 8016f0c:	40000400 	.word	0x40000400
 8016f10:	40023800 	.word	0x40023800
 8016f14:	40020000 	.word	0x40020000
 8016f18:	40000800 	.word	0x40000800
 8016f1c:	40020400 	.word	0x40020400

08016f20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b08a      	sub	sp, #40	; 0x28
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016f28:	f107 0314 	add.w	r3, r7, #20
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	601a      	str	r2, [r3, #0]
 8016f30:	605a      	str	r2, [r3, #4]
 8016f32:	609a      	str	r2, [r3, #8]
 8016f34:	60da      	str	r2, [r3, #12]
 8016f36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016f40:	d11e      	bne.n	8016f80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f42:	2300      	movs	r3, #0
 8016f44:	613b      	str	r3, [r7, #16]
 8016f46:	4b22      	ldr	r3, [pc, #136]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f4a:	4a21      	ldr	r2, [pc, #132]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f4c:	f043 0301 	orr.w	r3, r3, #1
 8016f50:	6313      	str	r3, [r2, #48]	; 0x30
 8016f52:	4b1f      	ldr	r3, [pc, #124]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f56:	f003 0301 	and.w	r3, r3, #1
 8016f5a:	613b      	str	r3, [r7, #16]
 8016f5c:	693b      	ldr	r3, [r7, #16]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8016f5e:	230f      	movs	r3, #15
 8016f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016f62:	2302      	movs	r3, #2
 8016f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016f66:	2300      	movs	r3, #0
 8016f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016f6a:	2300      	movs	r3, #0
 8016f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8016f6e:	2301      	movs	r3, #1
 8016f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016f72:	f107 0314 	add.w	r3, r7, #20
 8016f76:	4619      	mov	r1, r3
 8016f78:	4816      	ldr	r0, [pc, #88]	; (8016fd4 <HAL_TIM_MspPostInit+0xb4>)
 8016f7a:	f001 fd2b 	bl	80189d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8016f7e:	e022      	b.n	8016fc6 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM8)
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	4a14      	ldr	r2, [pc, #80]	; (8016fd8 <HAL_TIM_MspPostInit+0xb8>)
 8016f86:	4293      	cmp	r3, r2
 8016f88:	d11d      	bne.n	8016fc6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016f8a:	2300      	movs	r3, #0
 8016f8c:	60fb      	str	r3, [r7, #12]
 8016f8e:	4b10      	ldr	r3, [pc, #64]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f92:	4a0f      	ldr	r2, [pc, #60]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f94:	f043 0304 	orr.w	r3, r3, #4
 8016f98:	6313      	str	r3, [r2, #48]	; 0x30
 8016f9a:	4b0d      	ldr	r3, [pc, #52]	; (8016fd0 <HAL_TIM_MspPostInit+0xb0>)
 8016f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016f9e:	f003 0304 	and.w	r3, r3, #4
 8016fa2:	60fb      	str	r3, [r7, #12]
 8016fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8016fa6:	2340      	movs	r3, #64	; 0x40
 8016fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016faa:	2302      	movs	r3, #2
 8016fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016fae:	2300      	movs	r3, #0
 8016fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8016fb6:	2303      	movs	r3, #3
 8016fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016fba:	f107 0314 	add.w	r3, r7, #20
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	4806      	ldr	r0, [pc, #24]	; (8016fdc <HAL_TIM_MspPostInit+0xbc>)
 8016fc2:	f001 fd07 	bl	80189d4 <HAL_GPIO_Init>
}
 8016fc6:	bf00      	nop
 8016fc8:	3728      	adds	r7, #40	; 0x28
 8016fca:	46bd      	mov	sp, r7
 8016fcc:	bd80      	pop	{r7, pc}
 8016fce:	bf00      	nop
 8016fd0:	40023800 	.word	0x40023800
 8016fd4:	40020000 	.word	0x40020000
 8016fd8:	40010400 	.word	0x40010400
 8016fdc:	40020800 	.word	0x40020800

08016fe0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8016fe4:	4b11      	ldr	r3, [pc, #68]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8016fe6:	4a12      	ldr	r2, [pc, #72]	; (8017030 <MX_USART1_UART_Init+0x50>)
 8016fe8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8016fea:	4b10      	ldr	r3, [pc, #64]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8016fec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8016ff0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8016ff2:	4b0e      	ldr	r3, [pc, #56]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8016ff4:	2200      	movs	r2, #0
 8016ff6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8016ff8:	4b0c      	ldr	r3, [pc, #48]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8016ffa:	2200      	movs	r2, #0
 8016ffc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8016ffe:	4b0b      	ldr	r3, [pc, #44]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8017000:	2200      	movs	r2, #0
 8017002:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017004:	4b09      	ldr	r3, [pc, #36]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8017006:	220c      	movs	r2, #12
 8017008:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801700a:	4b08      	ldr	r3, [pc, #32]	; (801702c <MX_USART1_UART_Init+0x4c>)
 801700c:	2200      	movs	r2, #0
 801700e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017010:	4b06      	ldr	r3, [pc, #24]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8017012:	2200      	movs	r2, #0
 8017014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017016:	4805      	ldr	r0, [pc, #20]	; (801702c <MX_USART1_UART_Init+0x4c>)
 8017018:	f004 f8b0 	bl	801b17c <HAL_UART_Init>
 801701c:	4603      	mov	r3, r0
 801701e:	2b00      	cmp	r3, #0
 8017020:	d001      	beq.n	8017026 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8017022:	f7ff f90d 	bl	8016240 <Error_Handler>
  }

}
 8017026:	bf00      	nop
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	2001bbc0 	.word	0x2001bbc0
 8017030:	40011000 	.word	0x40011000

08017034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b08a      	sub	sp, #40	; 0x28
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801703c:	f107 0314 	add.w	r3, r7, #20
 8017040:	2200      	movs	r2, #0
 8017042:	601a      	str	r2, [r3, #0]
 8017044:	605a      	str	r2, [r3, #4]
 8017046:	609a      	str	r2, [r3, #8]
 8017048:	60da      	str	r2, [r3, #12]
 801704a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4a19      	ldr	r2, [pc, #100]	; (80170b8 <HAL_UART_MspInit+0x84>)
 8017052:	4293      	cmp	r3, r2
 8017054:	d12c      	bne.n	80170b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8017056:	2300      	movs	r3, #0
 8017058:	613b      	str	r3, [r7, #16]
 801705a:	4b18      	ldr	r3, [pc, #96]	; (80170bc <HAL_UART_MspInit+0x88>)
 801705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801705e:	4a17      	ldr	r2, [pc, #92]	; (80170bc <HAL_UART_MspInit+0x88>)
 8017060:	f043 0310 	orr.w	r3, r3, #16
 8017064:	6453      	str	r3, [r2, #68]	; 0x44
 8017066:	4b15      	ldr	r3, [pc, #84]	; (80170bc <HAL_UART_MspInit+0x88>)
 8017068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801706a:	f003 0310 	and.w	r3, r3, #16
 801706e:	613b      	str	r3, [r7, #16]
 8017070:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017072:	2300      	movs	r3, #0
 8017074:	60fb      	str	r3, [r7, #12]
 8017076:	4b11      	ldr	r3, [pc, #68]	; (80170bc <HAL_UART_MspInit+0x88>)
 8017078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801707a:	4a10      	ldr	r2, [pc, #64]	; (80170bc <HAL_UART_MspInit+0x88>)
 801707c:	f043 0301 	orr.w	r3, r3, #1
 8017080:	6313      	str	r3, [r2, #48]	; 0x30
 8017082:	4b0e      	ldr	r3, [pc, #56]	; (80170bc <HAL_UART_MspInit+0x88>)
 8017084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017086:	f003 0301 	and.w	r3, r3, #1
 801708a:	60fb      	str	r3, [r7, #12]
 801708c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801708e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8017092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017094:	2302      	movs	r3, #2
 8017096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017098:	2300      	movs	r3, #0
 801709a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801709c:	2303      	movs	r3, #3
 801709e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80170a0:	2307      	movs	r3, #7
 80170a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170a4:	f107 0314 	add.w	r3, r7, #20
 80170a8:	4619      	mov	r1, r3
 80170aa:	4805      	ldr	r0, [pc, #20]	; (80170c0 <HAL_UART_MspInit+0x8c>)
 80170ac:	f001 fc92 	bl	80189d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80170b0:	bf00      	nop
 80170b2:	3728      	adds	r7, #40	; 0x28
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}
 80170b8:	40011000 	.word	0x40011000
 80170bc:	40023800 	.word	0x40023800
 80170c0:	40020000 	.word	0x40020000

080170c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80170c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80170fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80170c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80170ca:	e003      	b.n	80170d4 <LoopCopyDataInit>

080170cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80170cc:	4b0c      	ldr	r3, [pc, #48]	; (8017100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80170ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80170d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80170d2:	3104      	adds	r1, #4

080170d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80170d4:	480b      	ldr	r0, [pc, #44]	; (8017104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80170d6:	4b0c      	ldr	r3, [pc, #48]	; (8017108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80170d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80170da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80170dc:	d3f6      	bcc.n	80170cc <CopyDataInit>
  ldr  r2, =_sbss
 80170de:	4a0b      	ldr	r2, [pc, #44]	; (801710c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80170e0:	e002      	b.n	80170e8 <LoopFillZerobss>

080170e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80170e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80170e4:	f842 3b04 	str.w	r3, [r2], #4

080170e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80170e8:	4b09      	ldr	r3, [pc, #36]	; (8017110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80170ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80170ec:	d3f9      	bcc.n	80170e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80170ee:	f7ff faa3 	bl	8016638 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80170f2:	f004 fcf5 	bl	801bae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80170f6:	f7fd ff8b 	bl	8015010 <main>
  bx  lr    
 80170fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80170fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8017100:	08020978 	.word	0x08020978
  ldr  r0, =_sdata
 8017104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017108:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 801710c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8017110:	2001bc28 	.word	0x2001bc28

08017114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017114:	e7fe      	b.n	8017114 <ADC_IRQHandler>
	...

08017118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801711c:	4b0e      	ldr	r3, [pc, #56]	; (8017158 <HAL_Init+0x40>)
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	4a0d      	ldr	r2, [pc, #52]	; (8017158 <HAL_Init+0x40>)
 8017122:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8017126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8017128:	4b0b      	ldr	r3, [pc, #44]	; (8017158 <HAL_Init+0x40>)
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	4a0a      	ldr	r2, [pc, #40]	; (8017158 <HAL_Init+0x40>)
 801712e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8017132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8017134:	4b08      	ldr	r3, [pc, #32]	; (8017158 <HAL_Init+0x40>)
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	4a07      	ldr	r2, [pc, #28]	; (8017158 <HAL_Init+0x40>)
 801713a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801713e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8017140:	2003      	movs	r0, #3
 8017142:	f000 fdb1 	bl	8017ca8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8017146:	2000      	movs	r0, #0
 8017148:	f000 f808 	bl	801715c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801714c:	f7ff f964 	bl	8016418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8017150:	2300      	movs	r3, #0
}
 8017152:	4618      	mov	r0, r3
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	40023c00 	.word	0x40023c00

0801715c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b082      	sub	sp, #8
 8017160:	af00      	add	r7, sp, #0
 8017162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8017164:	4b12      	ldr	r3, [pc, #72]	; (80171b0 <HAL_InitTick+0x54>)
 8017166:	681a      	ldr	r2, [r3, #0]
 8017168:	4b12      	ldr	r3, [pc, #72]	; (80171b4 <HAL_InitTick+0x58>)
 801716a:	781b      	ldrb	r3, [r3, #0]
 801716c:	4619      	mov	r1, r3
 801716e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017172:	fbb3 f3f1 	udiv	r3, r3, r1
 8017176:	fbb2 f3f3 	udiv	r3, r2, r3
 801717a:	4618      	mov	r0, r3
 801717c:	f000 fdc9 	bl	8017d12 <HAL_SYSTICK_Config>
 8017180:	4603      	mov	r3, r0
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8017186:	2301      	movs	r3, #1
 8017188:	e00e      	b.n	80171a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	2b0f      	cmp	r3, #15
 801718e:	d80a      	bhi.n	80171a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8017190:	2200      	movs	r2, #0
 8017192:	6879      	ldr	r1, [r7, #4]
 8017194:	f04f 30ff 	mov.w	r0, #4294967295
 8017198:	f000 fd91 	bl	8017cbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801719c:	4a06      	ldr	r2, [pc, #24]	; (80171b8 <HAL_InitTick+0x5c>)
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80171a2:	2300      	movs	r3, #0
 80171a4:	e000      	b.n	80171a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80171a6:	2301      	movs	r3, #1
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	3708      	adds	r7, #8
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}
 80171b0:	20000014 	.word	0x20000014
 80171b4:	2000001c 	.word	0x2000001c
 80171b8:	20000018 	.word	0x20000018

080171bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80171bc:	b480      	push	{r7}
 80171be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80171c0:	4b06      	ldr	r3, [pc, #24]	; (80171dc <HAL_IncTick+0x20>)
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	461a      	mov	r2, r3
 80171c6:	4b06      	ldr	r3, [pc, #24]	; (80171e0 <HAL_IncTick+0x24>)
 80171c8:	681b      	ldr	r3, [r3, #0]
 80171ca:	4413      	add	r3, r2
 80171cc:	4a04      	ldr	r2, [pc, #16]	; (80171e0 <HAL_IncTick+0x24>)
 80171ce:	6013      	str	r3, [r2, #0]
}
 80171d0:	bf00      	nop
 80171d2:	46bd      	mov	sp, r7
 80171d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171d8:	4770      	bx	lr
 80171da:	bf00      	nop
 80171dc:	2000001c 	.word	0x2000001c
 80171e0:	2001bc00 	.word	0x2001bc00

080171e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80171e4:	b480      	push	{r7}
 80171e6:	af00      	add	r7, sp, #0
  return uwTick;
 80171e8:	4b03      	ldr	r3, [pc, #12]	; (80171f8 <HAL_GetTick+0x14>)
 80171ea:	681b      	ldr	r3, [r3, #0]
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr
 80171f6:	bf00      	nop
 80171f8:	2001bc00 	.word	0x2001bc00

080171fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b084      	sub	sp, #16
 8017200:	af00      	add	r7, sp, #0
 8017202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8017204:	f7ff ffee 	bl	80171e4 <HAL_GetTick>
 8017208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017214:	d005      	beq.n	8017222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8017216:	4b09      	ldr	r3, [pc, #36]	; (801723c <HAL_Delay+0x40>)
 8017218:	781b      	ldrb	r3, [r3, #0]
 801721a:	461a      	mov	r2, r3
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	4413      	add	r3, r2
 8017220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8017222:	bf00      	nop
 8017224:	f7ff ffde 	bl	80171e4 <HAL_GetTick>
 8017228:	4602      	mov	r2, r0
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	1ad3      	subs	r3, r2, r3
 801722e:	68fa      	ldr	r2, [r7, #12]
 8017230:	429a      	cmp	r2, r3
 8017232:	d8f7      	bhi.n	8017224 <HAL_Delay+0x28>
  {
  }
}
 8017234:	bf00      	nop
 8017236:	3710      	adds	r7, #16
 8017238:	46bd      	mov	sp, r7
 801723a:	bd80      	pop	{r7, pc}
 801723c:	2000001c 	.word	0x2000001c

08017240 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b084      	sub	sp, #16
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017248:	2300      	movs	r3, #0
 801724a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d101      	bne.n	8017256 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8017252:	2301      	movs	r3, #1
 8017254:	e033      	b.n	80172be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801725a:	2b00      	cmp	r3, #0
 801725c:	d109      	bne.n	8017272 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801725e:	6878      	ldr	r0, [r7, #4]
 8017260:	f7fd fd34 	bl	8014ccc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	2200      	movs	r2, #0
 8017268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	2200      	movs	r2, #0
 801726e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017276:	f003 0310 	and.w	r3, r3, #16
 801727a:	2b00      	cmp	r3, #0
 801727c:	d118      	bne.n	80172b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017282:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8017286:	f023 0302 	bic.w	r3, r3, #2
 801728a:	f043 0202 	orr.w	r2, r3, #2
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8017292:	6878      	ldr	r0, [r7, #4]
 8017294:	f000 faba 	bl	801780c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	2200      	movs	r2, #0
 801729c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172a2:	f023 0303 	bic.w	r3, r3, #3
 80172a6:	f043 0201 	orr.w	r2, r3, #1
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	641a      	str	r2, [r3, #64]	; 0x40
 80172ae:	e001      	b.n	80172b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80172b0:	2301      	movs	r3, #1
 80172b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2200      	movs	r2, #0
 80172b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80172bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3710      	adds	r7, #16
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}
	...

080172c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b086      	sub	sp, #24
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	60f8      	str	r0, [r7, #12]
 80172d0:	60b9      	str	r1, [r7, #8]
 80172d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80172d4:	2300      	movs	r3, #0
 80172d6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d101      	bne.n	80172e6 <HAL_ADC_Start_DMA+0x1e>
 80172e2:	2302      	movs	r3, #2
 80172e4:	e0cc      	b.n	8017480 <HAL_ADC_Start_DMA+0x1b8>
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	2201      	movs	r2, #1
 80172ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80172ee:	68fb      	ldr	r3, [r7, #12]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	689b      	ldr	r3, [r3, #8]
 80172f4:	f003 0301 	and.w	r3, r3, #1
 80172f8:	2b01      	cmp	r3, #1
 80172fa:	d018      	beq.n	801732e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	689a      	ldr	r2, [r3, #8]
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f042 0201 	orr.w	r2, r2, #1
 801730a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 801730c:	4b5e      	ldr	r3, [pc, #376]	; (8017488 <HAL_ADC_Start_DMA+0x1c0>)
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	4a5e      	ldr	r2, [pc, #376]	; (801748c <HAL_ADC_Start_DMA+0x1c4>)
 8017312:	fba2 2303 	umull	r2, r3, r2, r3
 8017316:	0c9a      	lsrs	r2, r3, #18
 8017318:	4613      	mov	r3, r2
 801731a:	005b      	lsls	r3, r3, #1
 801731c:	4413      	add	r3, r2
 801731e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8017320:	e002      	b.n	8017328 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8017322:	693b      	ldr	r3, [r7, #16]
 8017324:	3b01      	subs	r3, #1
 8017326:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8017328:	693b      	ldr	r3, [r7, #16]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d1f9      	bne.n	8017322 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	681b      	ldr	r3, [r3, #0]
 8017332:	689b      	ldr	r3, [r3, #8]
 8017334:	f003 0301 	and.w	r3, r3, #1
 8017338:	2b01      	cmp	r3, #1
 801733a:	f040 80a0 	bne.w	801747e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017342:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8017346:	f023 0301 	bic.w	r3, r3, #1
 801734a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801735c:	2b00      	cmp	r3, #0
 801735e:	d007      	beq.n	8017370 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8017360:	68fb      	ldr	r3, [r7, #12]
 8017362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8017368:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801737c:	d106      	bne.n	801738c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017382:	f023 0206 	bic.w	r2, r3, #6
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	645a      	str	r2, [r3, #68]	; 0x44
 801738a:	e002      	b.n	8017392 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	2200      	movs	r2, #0
 8017390:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8017392:	68fb      	ldr	r3, [r7, #12]
 8017394:	2200      	movs	r2, #0
 8017396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 801739a:	4b3d      	ldr	r3, [pc, #244]	; (8017490 <HAL_ADC_Start_DMA+0x1c8>)
 801739c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173a2:	4a3c      	ldr	r2, [pc, #240]	; (8017494 <HAL_ADC_Start_DMA+0x1cc>)
 80173a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80173a6:	68fb      	ldr	r3, [r7, #12]
 80173a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173aa:	4a3b      	ldr	r2, [pc, #236]	; (8017498 <HAL_ADC_Start_DMA+0x1d0>)
 80173ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173b2:	4a3a      	ldr	r2, [pc, #232]	; (801749c <HAL_ADC_Start_DMA+0x1d4>)
 80173b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80173be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	685a      	ldr	r2, [r3, #4]
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80173ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	681b      	ldr	r3, [r3, #0]
 80173d4:	689a      	ldr	r2, [r3, #8]
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80173de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	334c      	adds	r3, #76	; 0x4c
 80173ea:	4619      	mov	r1, r3
 80173ec:	68ba      	ldr	r2, [r7, #8]
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	f000 fd4a 	bl	8017e88 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	685b      	ldr	r3, [r3, #4]
 80173f8:	f003 031f 	and.w	r3, r3, #31
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d12a      	bne.n	8017456 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	681b      	ldr	r3, [r3, #0]
 8017404:	4a26      	ldr	r2, [pc, #152]	; (80174a0 <HAL_ADC_Start_DMA+0x1d8>)
 8017406:	4293      	cmp	r3, r2
 8017408:	d015      	beq.n	8017436 <HAL_ADC_Start_DMA+0x16e>
 801740a:	68fb      	ldr	r3, [r7, #12]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	4a25      	ldr	r2, [pc, #148]	; (80174a4 <HAL_ADC_Start_DMA+0x1dc>)
 8017410:	4293      	cmp	r3, r2
 8017412:	d105      	bne.n	8017420 <HAL_ADC_Start_DMA+0x158>
 8017414:	4b1e      	ldr	r3, [pc, #120]	; (8017490 <HAL_ADC_Start_DMA+0x1c8>)
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	f003 031f 	and.w	r3, r3, #31
 801741c:	2b00      	cmp	r3, #0
 801741e:	d00a      	beq.n	8017436 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	4a20      	ldr	r2, [pc, #128]	; (80174a8 <HAL_ADC_Start_DMA+0x1e0>)
 8017426:	4293      	cmp	r3, r2
 8017428:	d129      	bne.n	801747e <HAL_ADC_Start_DMA+0x1b6>
 801742a:	4b19      	ldr	r3, [pc, #100]	; (8017490 <HAL_ADC_Start_DMA+0x1c8>)
 801742c:	685b      	ldr	r3, [r3, #4]
 801742e:	f003 031f 	and.w	r3, r3, #31
 8017432:	2b0f      	cmp	r3, #15
 8017434:	d823      	bhi.n	801747e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	689b      	ldr	r3, [r3, #8]
 801743c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8017440:	2b00      	cmp	r3, #0
 8017442:	d11c      	bne.n	801747e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8017444:	68fb      	ldr	r3, [r7, #12]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	689a      	ldr	r2, [r3, #8]
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8017452:	609a      	str	r2, [r3, #8]
 8017454:	e013      	b.n	801747e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	681b      	ldr	r3, [r3, #0]
 801745a:	4a11      	ldr	r2, [pc, #68]	; (80174a0 <HAL_ADC_Start_DMA+0x1d8>)
 801745c:	4293      	cmp	r3, r2
 801745e:	d10e      	bne.n	801747e <HAL_ADC_Start_DMA+0x1b6>
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	689b      	ldr	r3, [r3, #8]
 8017466:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801746a:	2b00      	cmp	r3, #0
 801746c:	d107      	bne.n	801747e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801746e:	68fb      	ldr	r3, [r7, #12]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	689a      	ldr	r2, [r3, #8]
 8017474:	68fb      	ldr	r3, [r7, #12]
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801747c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 801747e:	2300      	movs	r3, #0
}
 8017480:	4618      	mov	r0, r3
 8017482:	3718      	adds	r7, #24
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}
 8017488:	20000014 	.word	0x20000014
 801748c:	431bde83 	.word	0x431bde83
 8017490:	40012300 	.word	0x40012300
 8017494:	08017a05 	.word	0x08017a05
 8017498:	08017abf 	.word	0x08017abf
 801749c:	08017adb 	.word	0x08017adb
 80174a0:	40012000 	.word	0x40012000
 80174a4:	40012100 	.word	0x40012100
 80174a8:	40012200 	.word	0x40012200

080174ac <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80174ac:	b480      	push	{r7}
 80174ae:	b083      	sub	sp, #12
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80174b4:	bf00      	nop
 80174b6:	370c      	adds	r7, #12
 80174b8:	46bd      	mov	sp, r7
 80174ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174be:	4770      	bx	lr

080174c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80174c0:	b480      	push	{r7}
 80174c2:	b083      	sub	sp, #12
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80174c8:	bf00      	nop
 80174ca:	370c      	adds	r7, #12
 80174cc:	46bd      	mov	sp, r7
 80174ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d2:	4770      	bx	lr

080174d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80174d4:	b480      	push	{r7}
 80174d6:	b083      	sub	sp, #12
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80174dc:	bf00      	nop
 80174de:	370c      	adds	r7, #12
 80174e0:	46bd      	mov	sp, r7
 80174e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174e6:	4770      	bx	lr

080174e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80174e8:	b480      	push	{r7}
 80174ea:	b085      	sub	sp, #20
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80174f2:	2300      	movs	r3, #0
 80174f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80174fc:	2b01      	cmp	r3, #1
 80174fe:	d101      	bne.n	8017504 <HAL_ADC_ConfigChannel+0x1c>
 8017500:	2302      	movs	r3, #2
 8017502:	e113      	b.n	801772c <HAL_ADC_ConfigChannel+0x244>
 8017504:	687b      	ldr	r3, [r7, #4]
 8017506:	2201      	movs	r2, #1
 8017508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	2b09      	cmp	r3, #9
 8017512:	d925      	bls.n	8017560 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	68d9      	ldr	r1, [r3, #12]
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	681b      	ldr	r3, [r3, #0]
 801751e:	b29b      	uxth	r3, r3
 8017520:	461a      	mov	r2, r3
 8017522:	4613      	mov	r3, r2
 8017524:	005b      	lsls	r3, r3, #1
 8017526:	4413      	add	r3, r2
 8017528:	3b1e      	subs	r3, #30
 801752a:	2207      	movs	r2, #7
 801752c:	fa02 f303 	lsl.w	r3, r2, r3
 8017530:	43da      	mvns	r2, r3
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	400a      	ands	r2, r1
 8017538:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	681b      	ldr	r3, [r3, #0]
 801753e:	68d9      	ldr	r1, [r3, #12]
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	689a      	ldr	r2, [r3, #8]
 8017544:	683b      	ldr	r3, [r7, #0]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	b29b      	uxth	r3, r3
 801754a:	4618      	mov	r0, r3
 801754c:	4603      	mov	r3, r0
 801754e:	005b      	lsls	r3, r3, #1
 8017550:	4403      	add	r3, r0
 8017552:	3b1e      	subs	r3, #30
 8017554:	409a      	lsls	r2, r3
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	430a      	orrs	r2, r1
 801755c:	60da      	str	r2, [r3, #12]
 801755e:	e022      	b.n	80175a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	6919      	ldr	r1, [r3, #16]
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	b29b      	uxth	r3, r3
 801756c:	461a      	mov	r2, r3
 801756e:	4613      	mov	r3, r2
 8017570:	005b      	lsls	r3, r3, #1
 8017572:	4413      	add	r3, r2
 8017574:	2207      	movs	r2, #7
 8017576:	fa02 f303 	lsl.w	r3, r2, r3
 801757a:	43da      	mvns	r2, r3
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	400a      	ands	r2, r1
 8017582:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	6919      	ldr	r1, [r3, #16]
 801758a:	683b      	ldr	r3, [r7, #0]
 801758c:	689a      	ldr	r2, [r3, #8]
 801758e:	683b      	ldr	r3, [r7, #0]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	b29b      	uxth	r3, r3
 8017594:	4618      	mov	r0, r3
 8017596:	4603      	mov	r3, r0
 8017598:	005b      	lsls	r3, r3, #1
 801759a:	4403      	add	r3, r0
 801759c:	409a      	lsls	r2, r3
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	681b      	ldr	r3, [r3, #0]
 80175a2:	430a      	orrs	r2, r1
 80175a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	2b06      	cmp	r3, #6
 80175ac:	d824      	bhi.n	80175f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80175b4:	683b      	ldr	r3, [r7, #0]
 80175b6:	685a      	ldr	r2, [r3, #4]
 80175b8:	4613      	mov	r3, r2
 80175ba:	009b      	lsls	r3, r3, #2
 80175bc:	4413      	add	r3, r2
 80175be:	3b05      	subs	r3, #5
 80175c0:	221f      	movs	r2, #31
 80175c2:	fa02 f303 	lsl.w	r3, r2, r3
 80175c6:	43da      	mvns	r2, r3
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	400a      	ands	r2, r1
 80175ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80175d6:	683b      	ldr	r3, [r7, #0]
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	4618      	mov	r0, r3
 80175de:	683b      	ldr	r3, [r7, #0]
 80175e0:	685a      	ldr	r2, [r3, #4]
 80175e2:	4613      	mov	r3, r2
 80175e4:	009b      	lsls	r3, r3, #2
 80175e6:	4413      	add	r3, r2
 80175e8:	3b05      	subs	r3, #5
 80175ea:	fa00 f203 	lsl.w	r2, r0, r3
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	430a      	orrs	r2, r1
 80175f4:	635a      	str	r2, [r3, #52]	; 0x34
 80175f6:	e04c      	b.n	8017692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80175f8:	683b      	ldr	r3, [r7, #0]
 80175fa:	685b      	ldr	r3, [r3, #4]
 80175fc:	2b0c      	cmp	r3, #12
 80175fe:	d824      	bhi.n	801764a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	685a      	ldr	r2, [r3, #4]
 801760a:	4613      	mov	r3, r2
 801760c:	009b      	lsls	r3, r3, #2
 801760e:	4413      	add	r3, r2
 8017610:	3b23      	subs	r3, #35	; 0x23
 8017612:	221f      	movs	r2, #31
 8017614:	fa02 f303 	lsl.w	r3, r2, r3
 8017618:	43da      	mvns	r2, r3
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	400a      	ands	r2, r1
 8017620:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8017628:	683b      	ldr	r3, [r7, #0]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	b29b      	uxth	r3, r3
 801762e:	4618      	mov	r0, r3
 8017630:	683b      	ldr	r3, [r7, #0]
 8017632:	685a      	ldr	r2, [r3, #4]
 8017634:	4613      	mov	r3, r2
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	4413      	add	r3, r2
 801763a:	3b23      	subs	r3, #35	; 0x23
 801763c:	fa00 f203 	lsl.w	r2, r0, r3
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	430a      	orrs	r2, r1
 8017646:	631a      	str	r2, [r3, #48]	; 0x30
 8017648:	e023      	b.n	8017692 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017650:	683b      	ldr	r3, [r7, #0]
 8017652:	685a      	ldr	r2, [r3, #4]
 8017654:	4613      	mov	r3, r2
 8017656:	009b      	lsls	r3, r3, #2
 8017658:	4413      	add	r3, r2
 801765a:	3b41      	subs	r3, #65	; 0x41
 801765c:	221f      	movs	r2, #31
 801765e:	fa02 f303 	lsl.w	r3, r2, r3
 8017662:	43da      	mvns	r2, r3
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	400a      	ands	r2, r1
 801766a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017672:	683b      	ldr	r3, [r7, #0]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	b29b      	uxth	r3, r3
 8017678:	4618      	mov	r0, r3
 801767a:	683b      	ldr	r3, [r7, #0]
 801767c:	685a      	ldr	r2, [r3, #4]
 801767e:	4613      	mov	r3, r2
 8017680:	009b      	lsls	r3, r3, #2
 8017682:	4413      	add	r3, r2
 8017684:	3b41      	subs	r3, #65	; 0x41
 8017686:	fa00 f203 	lsl.w	r2, r0, r3
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	430a      	orrs	r2, r1
 8017690:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8017692:	4b29      	ldr	r3, [pc, #164]	; (8017738 <HAL_ADC_ConfigChannel+0x250>)
 8017694:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	4a28      	ldr	r2, [pc, #160]	; (801773c <HAL_ADC_ConfigChannel+0x254>)
 801769c:	4293      	cmp	r3, r2
 801769e:	d10f      	bne.n	80176c0 <HAL_ADC_ConfigChannel+0x1d8>
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	2b12      	cmp	r3, #18
 80176a6:	d10b      	bne.n	80176c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80176b4:	68fb      	ldr	r3, [r7, #12]
 80176b6:	685b      	ldr	r3, [r3, #4]
 80176b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	4a1d      	ldr	r2, [pc, #116]	; (801773c <HAL_ADC_ConfigChannel+0x254>)
 80176c6:	4293      	cmp	r3, r2
 80176c8:	d12b      	bne.n	8017722 <HAL_ADC_ConfigChannel+0x23a>
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	4a1c      	ldr	r2, [pc, #112]	; (8017740 <HAL_ADC_ConfigChannel+0x258>)
 80176d0:	4293      	cmp	r3, r2
 80176d2:	d003      	beq.n	80176dc <HAL_ADC_ConfigChannel+0x1f4>
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	2b11      	cmp	r3, #17
 80176da:	d122      	bne.n	8017722 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	685b      	ldr	r3, [r3, #4]
 80176e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	685b      	ldr	r3, [r3, #4]
 80176ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80176f4:	683b      	ldr	r3, [r7, #0]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	4a11      	ldr	r2, [pc, #68]	; (8017740 <HAL_ADC_ConfigChannel+0x258>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d111      	bne.n	8017722 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80176fe:	4b11      	ldr	r3, [pc, #68]	; (8017744 <HAL_ADC_ConfigChannel+0x25c>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	4a11      	ldr	r2, [pc, #68]	; (8017748 <HAL_ADC_ConfigChannel+0x260>)
 8017704:	fba2 2303 	umull	r2, r3, r2, r3
 8017708:	0c9a      	lsrs	r2, r3, #18
 801770a:	4613      	mov	r3, r2
 801770c:	009b      	lsls	r3, r3, #2
 801770e:	4413      	add	r3, r2
 8017710:	005b      	lsls	r3, r3, #1
 8017712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8017714:	e002      	b.n	801771c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8017716:	68bb      	ldr	r3, [r7, #8]
 8017718:	3b01      	subs	r3, #1
 801771a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 801771c:	68bb      	ldr	r3, [r7, #8]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d1f9      	bne.n	8017716 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	2200      	movs	r2, #0
 8017726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 801772a:	2300      	movs	r3, #0
}
 801772c:	4618      	mov	r0, r3
 801772e:	3714      	adds	r7, #20
 8017730:	46bd      	mov	sp, r7
 8017732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017736:	4770      	bx	lr
 8017738:	40012300 	.word	0x40012300
 801773c:	40012000 	.word	0x40012000
 8017740:	10000012 	.word	0x10000012
 8017744:	20000014 	.word	0x20000014
 8017748:	431bde83 	.word	0x431bde83

0801774c <HAL_ADC_AnalogWDGConfig>:
  * @param  AnalogWDGConfig  pointer to an ADC_AnalogWDGConfTypeDef structure 
  *         that contains the configuration information of ADC analog watchdog.
  * @retval HAL status	  
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 801774c:	b480      	push	{r7}
 801774e:	b083      	sub	sp, #12
 8017750:	af00      	add	r7, sp, #0
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->HighThreshold));
  assert_param(IS_ADC_RANGE(tmp, AnalogWDGConfig->LowThreshold));
#endif /* USE_FULL_ASSERT  */
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801775c:	2b01      	cmp	r3, #1
 801775e:	d101      	bne.n	8017764 <HAL_ADC_AnalogWDGConfig+0x18>
 8017760:	2302      	movs	r3, #2
 8017762:	e04d      	b.n	8017800 <HAL_ADC_AnalogWDGConfig+0xb4>
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2201      	movs	r2, #1
 8017768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  if(AnalogWDGConfig->ITMode == ENABLE)
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	7c1b      	ldrb	r3, [r3, #16]
 8017770:	2b01      	cmp	r3, #1
 8017772:	d108      	bne.n	8017786 <HAL_ADC_AnalogWDGConfig+0x3a>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	685a      	ldr	r2, [r3, #4]
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8017782:	605a      	str	r2, [r3, #4]
 8017784:	e007      	b.n	8017796 <HAL_ADC_AnalogWDGConfig+0x4a>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	685a      	ldr	r2, [r3, #4]
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017794:	605a      	str	r2, [r3, #4]
  }
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  hadc->Instance->CR1 &=  ~(ADC_CR1_AWDSGL | ADC_CR1_JAWDEN | ADC_CR1_AWDEN);
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	685b      	ldr	r3, [r3, #4]
 801779c:	687a      	ldr	r2, [r7, #4]
 801779e:	6812      	ldr	r2, [r2, #0]
 80177a0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80177a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80177a8:	6053      	str	r3, [r2, #4]
  
  /* Set the analog watchdog enable mode */
  hadc->Instance->CR1 |= AnalogWDGConfig->WatchdogMode;
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	6859      	ldr	r1, [r3, #4]
 80177b0:	683b      	ldr	r3, [r7, #0]
 80177b2:	681a      	ldr	r2, [r3, #0]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	430a      	orrs	r2, r1
 80177ba:	605a      	str	r2, [r3, #4]
  
  /* Set the high threshold */
  hadc->Instance->HTR = AnalogWDGConfig->HighThreshold;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	683a      	ldr	r2, [r7, #0]
 80177c2:	6852      	ldr	r2, [r2, #4]
 80177c4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the low threshold */
  hadc->Instance->LTR = AnalogWDGConfig->LowThreshold;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	683a      	ldr	r2, [r7, #0]
 80177cc:	6892      	ldr	r2, [r2, #8]
 80177ce:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Clear the Analog watchdog channel select bits */
  hadc->Instance->CR1 &= ~ADC_CR1_AWDCH;
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	685a      	ldr	r2, [r3, #4]
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	f022 021f 	bic.w	r2, r2, #31
 80177de:	605a      	str	r2, [r3, #4]
  
  /* Set the Analog watchdog channel */
  hadc->Instance->CR1 |= (uint32_t)((uint16_t)(AnalogWDGConfig->Channel));
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	685a      	ldr	r2, [r3, #4]
 80177e6:	683b      	ldr	r3, [r7, #0]
 80177e8:	68db      	ldr	r3, [r3, #12]
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	4619      	mov	r1, r3
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	430a      	orrs	r2, r1
 80177f4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2200      	movs	r2, #0
 80177fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80177fe:	2300      	movs	r3, #0
}
 8017800:	4618      	mov	r0, r3
 8017802:	370c      	adds	r7, #12
 8017804:	46bd      	mov	sp, r7
 8017806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801780a:	4770      	bx	lr

0801780c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 801780c:	b480      	push	{r7}
 801780e:	b085      	sub	sp, #20
 8017810:	af00      	add	r7, sp, #0
 8017812:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8017814:	4b79      	ldr	r3, [pc, #484]	; (80179fc <ADC_Init+0x1f0>)
 8017816:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	685a      	ldr	r2, [r3, #4]
 8017828:	687b      	ldr	r3, [r7, #4]
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	431a      	orrs	r2, r3
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	685a      	ldr	r2, [r3, #4]
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8017840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	6859      	ldr	r1, [r3, #4]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	691b      	ldr	r3, [r3, #16]
 801784c:	021a      	lsls	r2, r3, #8
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	430a      	orrs	r2, r1
 8017854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	685a      	ldr	r2, [r3, #4]
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8017864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8017866:	687b      	ldr	r3, [r7, #4]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	6859      	ldr	r1, [r3, #4]
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	689a      	ldr	r2, [r3, #8]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	430a      	orrs	r2, r1
 8017876:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	689a      	ldr	r2, [r3, #8]
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8017886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	6899      	ldr	r1, [r3, #8]
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	68da      	ldr	r2, [r3, #12]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	430a      	orrs	r2, r1
 8017898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801789e:	4a58      	ldr	r2, [pc, #352]	; (8017a00 <ADC_Init+0x1f4>)
 80178a0:	4293      	cmp	r3, r2
 80178a2:	d022      	beq.n	80178ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	689a      	ldr	r2, [r3, #8]
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80178b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	6899      	ldr	r1, [r3, #8]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	430a      	orrs	r2, r1
 80178c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	689a      	ldr	r2, [r3, #8]
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80178d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	681b      	ldr	r3, [r3, #0]
 80178da:	6899      	ldr	r1, [r3, #8]
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	430a      	orrs	r2, r1
 80178e6:	609a      	str	r2, [r3, #8]
 80178e8:	e00f      	b.n	801790a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	689a      	ldr	r2, [r3, #8]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80178f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	689a      	ldr	r2, [r3, #8]
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8017908:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	689a      	ldr	r2, [r3, #8]
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	f022 0202 	bic.w	r2, r2, #2
 8017918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	6899      	ldr	r1, [r3, #8]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	7e1b      	ldrb	r3, [r3, #24]
 8017924:	005a      	lsls	r2, r3, #1
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	681b      	ldr	r3, [r3, #0]
 801792a:	430a      	orrs	r2, r1
 801792c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017934:	2b00      	cmp	r3, #0
 8017936:	d01b      	beq.n	8017970 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	685a      	ldr	r2, [r3, #4]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017946:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	681b      	ldr	r3, [r3, #0]
 801794c:	685a      	ldr	r2, [r3, #4]
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8017956:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8017958:	687b      	ldr	r3, [r7, #4]
 801795a:	681b      	ldr	r3, [r3, #0]
 801795c:	6859      	ldr	r1, [r3, #4]
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017962:	3b01      	subs	r3, #1
 8017964:	035a      	lsls	r2, r3, #13
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	430a      	orrs	r2, r1
 801796c:	605a      	str	r2, [r3, #4]
 801796e:	e007      	b.n	8017980 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	685a      	ldr	r2, [r3, #4]
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801797e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 801798e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	681b      	ldr	r3, [r3, #0]
 8017994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	69db      	ldr	r3, [r3, #28]
 801799a:	3b01      	subs	r3, #1
 801799c:	051a      	lsls	r2, r3, #20
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	430a      	orrs	r2, r1
 80179a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	681b      	ldr	r3, [r3, #0]
 80179aa:	689a      	ldr	r2, [r3, #8]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	681b      	ldr	r3, [r3, #0]
 80179b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80179b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	681b      	ldr	r3, [r3, #0]
 80179ba:	6899      	ldr	r1, [r3, #8]
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179c2:	025a      	lsls	r2, r3, #9
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	681b      	ldr	r3, [r3, #0]
 80179c8:	430a      	orrs	r2, r1
 80179ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	689a      	ldr	r2, [r3, #8]
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80179da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	681b      	ldr	r3, [r3, #0]
 80179e0:	6899      	ldr	r1, [r3, #8]
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	695b      	ldr	r3, [r3, #20]
 80179e6:	029a      	lsls	r2, r3, #10
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	430a      	orrs	r2, r1
 80179ee:	609a      	str	r2, [r3, #8]
}
 80179f0:	bf00      	nop
 80179f2:	3714      	adds	r7, #20
 80179f4:	46bd      	mov	sp, r7
 80179f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fa:	4770      	bx	lr
 80179fc:	40012300 	.word	0x40012300
 8017a00:	0f000001 	.word	0x0f000001

08017a04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d13c      	bne.n	8017a98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	689b      	ldr	r3, [r3, #8]
 8017a30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d12b      	bne.n	8017a90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d127      	bne.n	8017a90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8017a40:	68fb      	ldr	r3, [r7, #12]
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d006      	beq.n	8017a5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	689b      	ldr	r3, [r3, #8]
 8017a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d119      	bne.n	8017a90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	685a      	ldr	r2, [r3, #4]
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f022 0220 	bic.w	r2, r2, #32
 8017a6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8017a6c:	68fb      	ldr	r3, [r7, #12]
 8017a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d105      	bne.n	8017a90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a88:	f043 0201 	orr.w	r2, r3, #1
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8017a90:	68f8      	ldr	r0, [r7, #12]
 8017a92:	f7ff fd0b 	bl	80174ac <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8017a96:	e00e      	b.n	8017ab6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017a9c:	f003 0310 	and.w	r3, r3, #16
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d003      	beq.n	8017aac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8017aa4:	68f8      	ldr	r0, [r7, #12]
 8017aa6:	f7ff fd15 	bl	80174d4 <HAL_ADC_ErrorCallback>
}
 8017aaa:	e004      	b.n	8017ab6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8017aac:	68fb      	ldr	r3, [r7, #12]
 8017aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ab2:	6878      	ldr	r0, [r7, #4]
 8017ab4:	4798      	blx	r3
}
 8017ab6:	bf00      	nop
 8017ab8:	3710      	adds	r7, #16
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}

08017abe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8017abe:	b580      	push	{r7, lr}
 8017ac0:	b084      	sub	sp, #16
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017aca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8017acc:	68f8      	ldr	r0, [r7, #12]
 8017ace:	f7ff fcf7 	bl	80174c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017ad2:	bf00      	nop
 8017ad4:	3710      	adds	r7, #16
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd80      	pop	{r7, pc}

08017ada <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8017ada:	b580      	push	{r7, lr}
 8017adc:	b084      	sub	sp, #16
 8017ade:	af00      	add	r7, sp, #0
 8017ae0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ae6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	2240      	movs	r2, #64	; 0x40
 8017aec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017af2:	f043 0204 	orr.w	r2, r3, #4
 8017af6:	68fb      	ldr	r3, [r7, #12]
 8017af8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8017afa:	68f8      	ldr	r0, [r7, #12]
 8017afc:	f7ff fcea 	bl	80174d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8017b00:	bf00      	nop
 8017b02:	3710      	adds	r7, #16
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bd80      	pop	{r7, pc}

08017b08 <__NVIC_SetPriorityGrouping>:
{
 8017b08:	b480      	push	{r7}
 8017b0a:	b085      	sub	sp, #20
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	f003 0307 	and.w	r3, r3, #7
 8017b16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017b18:	4b0c      	ldr	r3, [pc, #48]	; (8017b4c <__NVIC_SetPriorityGrouping+0x44>)
 8017b1a:	68db      	ldr	r3, [r3, #12]
 8017b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017b1e:	68ba      	ldr	r2, [r7, #8]
 8017b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017b24:	4013      	ands	r3, r2
 8017b26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017b2c:	68bb      	ldr	r3, [r7, #8]
 8017b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8017b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8017b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017b3a:	4a04      	ldr	r2, [pc, #16]	; (8017b4c <__NVIC_SetPriorityGrouping+0x44>)
 8017b3c:	68bb      	ldr	r3, [r7, #8]
 8017b3e:	60d3      	str	r3, [r2, #12]
}
 8017b40:	bf00      	nop
 8017b42:	3714      	adds	r7, #20
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr
 8017b4c:	e000ed00 	.word	0xe000ed00

08017b50 <__NVIC_GetPriorityGrouping>:
{
 8017b50:	b480      	push	{r7}
 8017b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017b54:	4b04      	ldr	r3, [pc, #16]	; (8017b68 <__NVIC_GetPriorityGrouping+0x18>)
 8017b56:	68db      	ldr	r3, [r3, #12]
 8017b58:	0a1b      	lsrs	r3, r3, #8
 8017b5a:	f003 0307 	and.w	r3, r3, #7
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	46bd      	mov	sp, r7
 8017b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b66:	4770      	bx	lr
 8017b68:	e000ed00 	.word	0xe000ed00

08017b6c <__NVIC_EnableIRQ>:
{
 8017b6c:	b480      	push	{r7}
 8017b6e:	b083      	sub	sp, #12
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	4603      	mov	r3, r0
 8017b74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	db0b      	blt.n	8017b96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017b7e:	79fb      	ldrb	r3, [r7, #7]
 8017b80:	f003 021f 	and.w	r2, r3, #31
 8017b84:	4907      	ldr	r1, [pc, #28]	; (8017ba4 <__NVIC_EnableIRQ+0x38>)
 8017b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017b8a:	095b      	lsrs	r3, r3, #5
 8017b8c:	2001      	movs	r0, #1
 8017b8e:	fa00 f202 	lsl.w	r2, r0, r2
 8017b92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8017b96:	bf00      	nop
 8017b98:	370c      	adds	r7, #12
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba0:	4770      	bx	lr
 8017ba2:	bf00      	nop
 8017ba4:	e000e100 	.word	0xe000e100

08017ba8 <__NVIC_SetPriority>:
{
 8017ba8:	b480      	push	{r7}
 8017baa:	b083      	sub	sp, #12
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	4603      	mov	r3, r0
 8017bb0:	6039      	str	r1, [r7, #0]
 8017bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	db0a      	blt.n	8017bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	b2da      	uxtb	r2, r3
 8017bc0:	490c      	ldr	r1, [pc, #48]	; (8017bf4 <__NVIC_SetPriority+0x4c>)
 8017bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017bc6:	0112      	lsls	r2, r2, #4
 8017bc8:	b2d2      	uxtb	r2, r2
 8017bca:	440b      	add	r3, r1
 8017bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017bd0:	e00a      	b.n	8017be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	b2da      	uxtb	r2, r3
 8017bd6:	4908      	ldr	r1, [pc, #32]	; (8017bf8 <__NVIC_SetPriority+0x50>)
 8017bd8:	79fb      	ldrb	r3, [r7, #7]
 8017bda:	f003 030f 	and.w	r3, r3, #15
 8017bde:	3b04      	subs	r3, #4
 8017be0:	0112      	lsls	r2, r2, #4
 8017be2:	b2d2      	uxtb	r2, r2
 8017be4:	440b      	add	r3, r1
 8017be6:	761a      	strb	r2, [r3, #24]
}
 8017be8:	bf00      	nop
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr
 8017bf4:	e000e100 	.word	0xe000e100
 8017bf8:	e000ed00 	.word	0xe000ed00

08017bfc <NVIC_EncodePriority>:
{
 8017bfc:	b480      	push	{r7}
 8017bfe:	b089      	sub	sp, #36	; 0x24
 8017c00:	af00      	add	r7, sp, #0
 8017c02:	60f8      	str	r0, [r7, #12]
 8017c04:	60b9      	str	r1, [r7, #8]
 8017c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017c08:	68fb      	ldr	r3, [r7, #12]
 8017c0a:	f003 0307 	and.w	r3, r3, #7
 8017c0e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8017c10:	69fb      	ldr	r3, [r7, #28]
 8017c12:	f1c3 0307 	rsb	r3, r3, #7
 8017c16:	2b04      	cmp	r3, #4
 8017c18:	bf28      	it	cs
 8017c1a:	2304      	movcs	r3, #4
 8017c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	3304      	adds	r3, #4
 8017c22:	2b06      	cmp	r3, #6
 8017c24:	d902      	bls.n	8017c2c <NVIC_EncodePriority+0x30>
 8017c26:	69fb      	ldr	r3, [r7, #28]
 8017c28:	3b03      	subs	r3, #3
 8017c2a:	e000      	b.n	8017c2e <NVIC_EncodePriority+0x32>
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017c30:	f04f 32ff 	mov.w	r2, #4294967295
 8017c34:	69bb      	ldr	r3, [r7, #24]
 8017c36:	fa02 f303 	lsl.w	r3, r2, r3
 8017c3a:	43da      	mvns	r2, r3
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	401a      	ands	r2, r3
 8017c40:	697b      	ldr	r3, [r7, #20]
 8017c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017c44:	f04f 31ff 	mov.w	r1, #4294967295
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8017c4e:	43d9      	mvns	r1, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017c54:	4313      	orrs	r3, r2
}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3724      	adds	r7, #36	; 0x24
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c60:	4770      	bx	lr
	...

08017c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017c74:	d301      	bcc.n	8017c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017c76:	2301      	movs	r3, #1
 8017c78:	e00f      	b.n	8017c9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8017c7a:	4a0a      	ldr	r2, [pc, #40]	; (8017ca4 <SysTick_Config+0x40>)
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017c82:	210f      	movs	r1, #15
 8017c84:	f04f 30ff 	mov.w	r0, #4294967295
 8017c88:	f7ff ff8e 	bl	8017ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8017c8c:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <SysTick_Config+0x40>)
 8017c8e:	2200      	movs	r2, #0
 8017c90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017c92:	4b04      	ldr	r3, [pc, #16]	; (8017ca4 <SysTick_Config+0x40>)
 8017c94:	2207      	movs	r2, #7
 8017c96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017c98:	2300      	movs	r3, #0
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	3708      	adds	r7, #8
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	e000e010 	.word	0xe000e010

08017ca8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	b082      	sub	sp, #8
 8017cac:	af00      	add	r7, sp, #0
 8017cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f7ff ff29 	bl	8017b08 <__NVIC_SetPriorityGrouping>
}
 8017cb6:	bf00      	nop
 8017cb8:	3708      	adds	r7, #8
 8017cba:	46bd      	mov	sp, r7
 8017cbc:	bd80      	pop	{r7, pc}

08017cbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8017cbe:	b580      	push	{r7, lr}
 8017cc0:	b086      	sub	sp, #24
 8017cc2:	af00      	add	r7, sp, #0
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	60b9      	str	r1, [r7, #8]
 8017cc8:	607a      	str	r2, [r7, #4]
 8017cca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8017ccc:	2300      	movs	r3, #0
 8017cce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8017cd0:	f7ff ff3e 	bl	8017b50 <__NVIC_GetPriorityGrouping>
 8017cd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	68b9      	ldr	r1, [r7, #8]
 8017cda:	6978      	ldr	r0, [r7, #20]
 8017cdc:	f7ff ff8e 	bl	8017bfc <NVIC_EncodePriority>
 8017ce0:	4602      	mov	r2, r0
 8017ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ce6:	4611      	mov	r1, r2
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f7ff ff5d 	bl	8017ba8 <__NVIC_SetPriority>
}
 8017cee:	bf00      	nop
 8017cf0:	3718      	adds	r7, #24
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}

08017cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017cf6:	b580      	push	{r7, lr}
 8017cf8:	b082      	sub	sp, #8
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017d04:	4618      	mov	r0, r3
 8017d06:	f7ff ff31 	bl	8017b6c <__NVIC_EnableIRQ>
}
 8017d0a:	bf00      	nop
 8017d0c:	3708      	adds	r7, #8
 8017d0e:	46bd      	mov	sp, r7
 8017d10:	bd80      	pop	{r7, pc}

08017d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017d12:	b580      	push	{r7, lr}
 8017d14:	b082      	sub	sp, #8
 8017d16:	af00      	add	r7, sp, #0
 8017d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017d1a:	6878      	ldr	r0, [r7, #4]
 8017d1c:	f7ff ffa2 	bl	8017c64 <SysTick_Config>
 8017d20:	4603      	mov	r3, r0
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
	...

08017d2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b086      	sub	sp, #24
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8017d34:	2300      	movs	r3, #0
 8017d36:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8017d38:	f7ff fa54 	bl	80171e4 <HAL_GetTick>
 8017d3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d101      	bne.n	8017d48 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8017d44:	2301      	movs	r3, #1
 8017d46:	e099      	b.n	8017e7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	2200      	movs	r2, #0
 8017d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2202      	movs	r2, #2
 8017d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	681a      	ldr	r2, [r3, #0]
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	f022 0201 	bic.w	r2, r2, #1
 8017d66:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017d68:	e00f      	b.n	8017d8a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017d6a:	f7ff fa3b 	bl	80171e4 <HAL_GetTick>
 8017d6e:	4602      	mov	r2, r0
 8017d70:	693b      	ldr	r3, [r7, #16]
 8017d72:	1ad3      	subs	r3, r2, r3
 8017d74:	2b05      	cmp	r3, #5
 8017d76:	d908      	bls.n	8017d8a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	2220      	movs	r2, #32
 8017d7c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	2203      	movs	r2, #3
 8017d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8017d86:	2303      	movs	r3, #3
 8017d88:	e078      	b.n	8017e7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	f003 0301 	and.w	r3, r3, #1
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d1e8      	bne.n	8017d6a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017da0:	697a      	ldr	r2, [r7, #20]
 8017da2:	4b38      	ldr	r3, [pc, #224]	; (8017e84 <HAL_DMA_Init+0x158>)
 8017da4:	4013      	ands	r3, r2
 8017da6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	685a      	ldr	r2, [r3, #4]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	689b      	ldr	r3, [r3, #8]
 8017db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017db2:	687b      	ldr	r3, [r7, #4]
 8017db4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8017db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	691b      	ldr	r3, [r3, #16]
 8017dbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017dc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	699b      	ldr	r3, [r3, #24]
 8017dc8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017dce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6a1b      	ldr	r3, [r3, #32]
 8017dd4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8017dd6:	697a      	ldr	r2, [r7, #20]
 8017dd8:	4313      	orrs	r3, r2
 8017dda:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de0:	2b04      	cmp	r3, #4
 8017de2:	d107      	bne.n	8017df4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017dec:	4313      	orrs	r3, r2
 8017dee:	697a      	ldr	r2, [r7, #20]
 8017df0:	4313      	orrs	r3, r2
 8017df2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	697a      	ldr	r2, [r7, #20]
 8017dfa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	681b      	ldr	r3, [r3, #0]
 8017e00:	695b      	ldr	r3, [r3, #20]
 8017e02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017e04:	697b      	ldr	r3, [r7, #20]
 8017e06:	f023 0307 	bic.w	r3, r3, #7
 8017e0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e10:	697a      	ldr	r2, [r7, #20]
 8017e12:	4313      	orrs	r3, r2
 8017e14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e1a:	2b04      	cmp	r3, #4
 8017e1c:	d117      	bne.n	8017e4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e22:	697a      	ldr	r2, [r7, #20]
 8017e24:	4313      	orrs	r3, r2
 8017e26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d00e      	beq.n	8017e4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017e30:	6878      	ldr	r0, [r7, #4]
 8017e32:	f000 fa6f 	bl	8018314 <DMA_CheckFifoParam>
 8017e36:	4603      	mov	r3, r0
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d008      	beq.n	8017e4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	2240      	movs	r2, #64	; 0x40
 8017e40:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	2201      	movs	r2, #1
 8017e46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8017e4a:	2301      	movs	r3, #1
 8017e4c:	e016      	b.n	8017e7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	697a      	ldr	r2, [r7, #20]
 8017e54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017e56:	6878      	ldr	r0, [r7, #4]
 8017e58:	f000 fa26 	bl	80182a8 <DMA_CalcBaseAndBitshift>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e64:	223f      	movs	r2, #63	; 0x3f
 8017e66:	409a      	lsls	r2, r3
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	2200      	movs	r2, #0
 8017e70:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	2201      	movs	r2, #1
 8017e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017e7a:	2300      	movs	r3, #0
}
 8017e7c:	4618      	mov	r0, r3
 8017e7e:	3718      	adds	r7, #24
 8017e80:	46bd      	mov	sp, r7
 8017e82:	bd80      	pop	{r7, pc}
 8017e84:	f010803f 	.word	0xf010803f

08017e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b086      	sub	sp, #24
 8017e8c:	af00      	add	r7, sp, #0
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	607a      	str	r2, [r7, #4]
 8017e94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017e96:	2300      	movs	r3, #0
 8017e98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017e9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8017ea0:	68fb      	ldr	r3, [r7, #12]
 8017ea2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017ea6:	2b01      	cmp	r3, #1
 8017ea8:	d101      	bne.n	8017eae <HAL_DMA_Start_IT+0x26>
 8017eaa:	2302      	movs	r3, #2
 8017eac:	e040      	b.n	8017f30 <HAL_DMA_Start_IT+0xa8>
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	2201      	movs	r2, #1
 8017eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017ebc:	b2db      	uxtb	r3, r3
 8017ebe:	2b01      	cmp	r3, #1
 8017ec0:	d12f      	bne.n	8017f22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2202      	movs	r2, #2
 8017ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	2200      	movs	r2, #0
 8017ece:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017ed0:	683b      	ldr	r3, [r7, #0]
 8017ed2:	687a      	ldr	r2, [r7, #4]
 8017ed4:	68b9      	ldr	r1, [r7, #8]
 8017ed6:	68f8      	ldr	r0, [r7, #12]
 8017ed8:	f000 f9b8 	bl	801824c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8017edc:	68fb      	ldr	r3, [r7, #12]
 8017ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ee0:	223f      	movs	r2, #63	; 0x3f
 8017ee2:	409a      	lsls	r2, r3
 8017ee4:	693b      	ldr	r3, [r7, #16]
 8017ee6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	681a      	ldr	r2, [r3, #0]
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	f042 0216 	orr.w	r2, r2, #22
 8017ef6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d007      	beq.n	8017f10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	681a      	ldr	r2, [r3, #0]
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f042 0208 	orr.w	r2, r2, #8
 8017f0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	681b      	ldr	r3, [r3, #0]
 8017f14:	681a      	ldr	r2, [r3, #0]
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f042 0201 	orr.w	r2, r2, #1
 8017f1e:	601a      	str	r2, [r3, #0]
 8017f20:	e005      	b.n	8017f2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	2200      	movs	r2, #0
 8017f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8017f2a:	2302      	movs	r3, #2
 8017f2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8017f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f30:	4618      	mov	r0, r3
 8017f32:	3718      	adds	r7, #24
 8017f34:	46bd      	mov	sp, r7
 8017f36:	bd80      	pop	{r7, pc}

08017f38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b086      	sub	sp, #24
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8017f40:	2300      	movs	r3, #0
 8017f42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8017f44:	4b92      	ldr	r3, [pc, #584]	; (8018190 <HAL_DMA_IRQHandler+0x258>)
 8017f46:	681b      	ldr	r3, [r3, #0]
 8017f48:	4a92      	ldr	r2, [pc, #584]	; (8018194 <HAL_DMA_IRQHandler+0x25c>)
 8017f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8017f4e:	0a9b      	lsrs	r3, r3, #10
 8017f50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017f56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8017f58:	693b      	ldr	r3, [r7, #16]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f62:	2208      	movs	r2, #8
 8017f64:	409a      	lsls	r2, r3
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	4013      	ands	r3, r2
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d01a      	beq.n	8017fa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681b      	ldr	r3, [r3, #0]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	f003 0304 	and.w	r3, r3, #4
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d013      	beq.n	8017fa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	681a      	ldr	r2, [r3, #0]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f022 0204 	bic.w	r2, r2, #4
 8017f8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017f90:	2208      	movs	r2, #8
 8017f92:	409a      	lsls	r2, r3
 8017f94:	693b      	ldr	r3, [r7, #16]
 8017f96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f9c:	f043 0201 	orr.w	r2, r3, #1
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fa8:	2201      	movs	r2, #1
 8017faa:	409a      	lsls	r2, r3
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	4013      	ands	r3, r2
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d012      	beq.n	8017fda <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	695b      	ldr	r3, [r3, #20]
 8017fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d00b      	beq.n	8017fda <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	409a      	lsls	r2, r3
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017fd2:	f043 0202 	orr.w	r2, r3, #2
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017fde:	2204      	movs	r2, #4
 8017fe0:	409a      	lsls	r2, r3
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	4013      	ands	r3, r2
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d012      	beq.n	8018010 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	f003 0302 	and.w	r3, r3, #2
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d00b      	beq.n	8018010 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ffc:	2204      	movs	r2, #4
 8017ffe:	409a      	lsls	r2, r3
 8018000:	693b      	ldr	r3, [r7, #16]
 8018002:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018008:	f043 0204 	orr.w	r2, r3, #4
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018014:	2210      	movs	r2, #16
 8018016:	409a      	lsls	r2, r3
 8018018:	68fb      	ldr	r3, [r7, #12]
 801801a:	4013      	ands	r3, r2
 801801c:	2b00      	cmp	r3, #0
 801801e:	d043      	beq.n	80180a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	681b      	ldr	r3, [r3, #0]
 8018026:	f003 0308 	and.w	r3, r3, #8
 801802a:	2b00      	cmp	r3, #0
 801802c:	d03c      	beq.n	80180a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018032:	2210      	movs	r2, #16
 8018034:	409a      	lsls	r2, r3
 8018036:	693b      	ldr	r3, [r7, #16]
 8018038:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	681b      	ldr	r3, [r3, #0]
 8018040:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018044:	2b00      	cmp	r3, #0
 8018046:	d018      	beq.n	801807a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018052:	2b00      	cmp	r3, #0
 8018054:	d108      	bne.n	8018068 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018056:	687b      	ldr	r3, [r7, #4]
 8018058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801805a:	2b00      	cmp	r3, #0
 801805c:	d024      	beq.n	80180a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018062:	6878      	ldr	r0, [r7, #4]
 8018064:	4798      	blx	r3
 8018066:	e01f      	b.n	80180a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801806c:	2b00      	cmp	r3, #0
 801806e:	d01b      	beq.n	80180a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018074:	6878      	ldr	r0, [r7, #4]
 8018076:	4798      	blx	r3
 8018078:	e016      	b.n	80180a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	681b      	ldr	r3, [r3, #0]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018084:	2b00      	cmp	r3, #0
 8018086:	d107      	bne.n	8018098 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	681a      	ldr	r2, [r3, #0]
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	f022 0208 	bic.w	r2, r2, #8
 8018096:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801809c:	2b00      	cmp	r3, #0
 801809e:	d003      	beq.n	80180a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180ac:	2220      	movs	r2, #32
 80180ae:	409a      	lsls	r2, r3
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	4013      	ands	r3, r2
 80180b4:	2b00      	cmp	r3, #0
 80180b6:	f000 808e 	beq.w	80181d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f003 0310 	and.w	r3, r3, #16
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f000 8086 	beq.w	80181d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80180ce:	2220      	movs	r2, #32
 80180d0:	409a      	lsls	r2, r3
 80180d2:	693b      	ldr	r3, [r7, #16]
 80180d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80180dc:	b2db      	uxtb	r3, r3
 80180de:	2b05      	cmp	r3, #5
 80180e0:	d136      	bne.n	8018150 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	681b      	ldr	r3, [r3, #0]
 80180e6:	681a      	ldr	r2, [r3, #0]
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	f022 0216 	bic.w	r2, r2, #22
 80180f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	695a      	ldr	r2, [r3, #20]
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018100:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018106:	2b00      	cmp	r3, #0
 8018108:	d103      	bne.n	8018112 <HAL_DMA_IRQHandler+0x1da>
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801810e:	2b00      	cmp	r3, #0
 8018110:	d007      	beq.n	8018122 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	681a      	ldr	r2, [r3, #0]
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	f022 0208 	bic.w	r2, r2, #8
 8018120:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018126:	223f      	movs	r2, #63	; 0x3f
 8018128:	409a      	lsls	r2, r3
 801812a:	693b      	ldr	r3, [r7, #16]
 801812c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	2200      	movs	r2, #0
 8018132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2201      	movs	r2, #1
 801813a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 801813e:	687b      	ldr	r3, [r7, #4]
 8018140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018142:	2b00      	cmp	r3, #0
 8018144:	d07d      	beq.n	8018242 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	4798      	blx	r3
        }
        return;
 801814e:	e078      	b.n	8018242 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8018150:	687b      	ldr	r3, [r7, #4]
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801815a:	2b00      	cmp	r3, #0
 801815c:	d01c      	beq.n	8018198 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	681b      	ldr	r3, [r3, #0]
 8018164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018168:	2b00      	cmp	r3, #0
 801816a:	d108      	bne.n	801817e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018170:	2b00      	cmp	r3, #0
 8018172:	d030      	beq.n	80181d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	4798      	blx	r3
 801817c:	e02b      	b.n	80181d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018182:	2b00      	cmp	r3, #0
 8018184:	d027      	beq.n	80181d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8018186:	687b      	ldr	r3, [r7, #4]
 8018188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	4798      	blx	r3
 801818e:	e022      	b.n	80181d6 <HAL_DMA_IRQHandler+0x29e>
 8018190:	20000014 	.word	0x20000014
 8018194:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d10f      	bne.n	80181c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	681a      	ldr	r2, [r3, #0]
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	f022 0210 	bic.w	r2, r2, #16
 80181b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	2200      	movs	r2, #0
 80181ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	2201      	movs	r2, #1
 80181c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d003      	beq.n	80181d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80181d2:	6878      	ldr	r0, [r7, #4]
 80181d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d032      	beq.n	8018244 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181e2:	f003 0301 	and.w	r3, r3, #1
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d022      	beq.n	8018230 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2205      	movs	r2, #5
 80181ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	681a      	ldr	r2, [r3, #0]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	f022 0201 	bic.w	r2, r2, #1
 8018200:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8018202:	68bb      	ldr	r3, [r7, #8]
 8018204:	3301      	adds	r3, #1
 8018206:	60bb      	str	r3, [r7, #8]
 8018208:	697a      	ldr	r2, [r7, #20]
 801820a:	429a      	cmp	r2, r3
 801820c:	d307      	bcc.n	801821e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	f003 0301 	and.w	r3, r3, #1
 8018218:	2b00      	cmp	r3, #0
 801821a:	d1f2      	bne.n	8018202 <HAL_DMA_IRQHandler+0x2ca>
 801821c:	e000      	b.n	8018220 <HAL_DMA_IRQHandler+0x2e8>
          break;
 801821e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	2200      	movs	r2, #0
 8018224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	2201      	movs	r2, #1
 801822c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018234:	2b00      	cmp	r3, #0
 8018236:	d005      	beq.n	8018244 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801823c:	6878      	ldr	r0, [r7, #4]
 801823e:	4798      	blx	r3
 8018240:	e000      	b.n	8018244 <HAL_DMA_IRQHandler+0x30c>
        return;
 8018242:	bf00      	nop
    }
  }
}
 8018244:	3718      	adds	r7, #24
 8018246:	46bd      	mov	sp, r7
 8018248:	bd80      	pop	{r7, pc}
 801824a:	bf00      	nop

0801824c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801824c:	b480      	push	{r7}
 801824e:	b085      	sub	sp, #20
 8018250:	af00      	add	r7, sp, #0
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	681a      	ldr	r2, [r3, #0]
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8018268:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	681b      	ldr	r3, [r3, #0]
 801826e:	683a      	ldr	r2, [r7, #0]
 8018270:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	689b      	ldr	r3, [r3, #8]
 8018276:	2b40      	cmp	r3, #64	; 0x40
 8018278:	d108      	bne.n	801828c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	687a      	ldr	r2, [r7, #4]
 8018280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	68ba      	ldr	r2, [r7, #8]
 8018288:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801828a:	e007      	b.n	801829c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	68ba      	ldr	r2, [r7, #8]
 8018292:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	681b      	ldr	r3, [r3, #0]
 8018298:	687a      	ldr	r2, [r7, #4]
 801829a:	60da      	str	r2, [r3, #12]
}
 801829c:	bf00      	nop
 801829e:	3714      	adds	r7, #20
 80182a0:	46bd      	mov	sp, r7
 80182a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182a6:	4770      	bx	lr

080182a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80182a8:	b480      	push	{r7}
 80182aa:	b085      	sub	sp, #20
 80182ac:	af00      	add	r7, sp, #0
 80182ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	b2db      	uxtb	r3, r3
 80182b6:	3b10      	subs	r3, #16
 80182b8:	4a14      	ldr	r2, [pc, #80]	; (801830c <DMA_CalcBaseAndBitshift+0x64>)
 80182ba:	fba2 2303 	umull	r2, r3, r2, r3
 80182be:	091b      	lsrs	r3, r3, #4
 80182c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80182c2:	4a13      	ldr	r2, [pc, #76]	; (8018310 <DMA_CalcBaseAndBitshift+0x68>)
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	4413      	add	r3, r2
 80182c8:	781b      	ldrb	r3, [r3, #0]
 80182ca:	461a      	mov	r2, r3
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	2b03      	cmp	r3, #3
 80182d4:	d909      	bls.n	80182ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80182de:	f023 0303 	bic.w	r3, r3, #3
 80182e2:	1d1a      	adds	r2, r3, #4
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	659a      	str	r2, [r3, #88]	; 0x58
 80182e8:	e007      	b.n	80182fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80182f2:	f023 0303 	bic.w	r3, r3, #3
 80182f6:	687a      	ldr	r2, [r7, #4]
 80182f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80182fe:	4618      	mov	r0, r3
 8018300:	3714      	adds	r7, #20
 8018302:	46bd      	mov	sp, r7
 8018304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018308:	4770      	bx	lr
 801830a:	bf00      	nop
 801830c:	aaaaaaab 	.word	0xaaaaaaab
 8018310:	080206a0 	.word	0x080206a0

08018314 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8018314:	b480      	push	{r7}
 8018316:	b085      	sub	sp, #20
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801831c:	2300      	movs	r3, #0
 801831e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018324:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8018326:	687b      	ldr	r3, [r7, #4]
 8018328:	699b      	ldr	r3, [r3, #24]
 801832a:	2b00      	cmp	r3, #0
 801832c:	d11f      	bne.n	801836e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	2b03      	cmp	r3, #3
 8018332:	d855      	bhi.n	80183e0 <DMA_CheckFifoParam+0xcc>
 8018334:	a201      	add	r2, pc, #4	; (adr r2, 801833c <DMA_CheckFifoParam+0x28>)
 8018336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801833a:	bf00      	nop
 801833c:	0801834d 	.word	0x0801834d
 8018340:	0801835f 	.word	0x0801835f
 8018344:	0801834d 	.word	0x0801834d
 8018348:	080183e1 	.word	0x080183e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018354:	2b00      	cmp	r3, #0
 8018356:	d045      	beq.n	80183e4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8018358:	2301      	movs	r3, #1
 801835a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801835c:	e042      	b.n	80183e4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018362:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8018366:	d13f      	bne.n	80183e8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8018368:	2301      	movs	r3, #1
 801836a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801836c:	e03c      	b.n	80183e8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	699b      	ldr	r3, [r3, #24]
 8018372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8018376:	d121      	bne.n	80183bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	2b03      	cmp	r3, #3
 801837c:	d836      	bhi.n	80183ec <DMA_CheckFifoParam+0xd8>
 801837e:	a201      	add	r2, pc, #4	; (adr r2, 8018384 <DMA_CheckFifoParam+0x70>)
 8018380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018384:	08018395 	.word	0x08018395
 8018388:	0801839b 	.word	0x0801839b
 801838c:	08018395 	.word	0x08018395
 8018390:	080183ad 	.word	0x080183ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8018394:	2301      	movs	r3, #1
 8018396:	73fb      	strb	r3, [r7, #15]
      break;
 8018398:	e02f      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801839e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d024      	beq.n	80183f0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80183a6:	2301      	movs	r3, #1
 80183a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80183aa:	e021      	b.n	80183f0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80183b4:	d11e      	bne.n	80183f4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80183b6:	2301      	movs	r3, #1
 80183b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80183ba:	e01b      	b.n	80183f4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80183bc:	68bb      	ldr	r3, [r7, #8]
 80183be:	2b02      	cmp	r3, #2
 80183c0:	d902      	bls.n	80183c8 <DMA_CheckFifoParam+0xb4>
 80183c2:	2b03      	cmp	r3, #3
 80183c4:	d003      	beq.n	80183ce <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80183c6:	e018      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80183c8:	2301      	movs	r3, #1
 80183ca:	73fb      	strb	r3, [r7, #15]
      break;
 80183cc:	e015      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80183d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80183d6:	2b00      	cmp	r3, #0
 80183d8:	d00e      	beq.n	80183f8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80183da:	2301      	movs	r3, #1
 80183dc:	73fb      	strb	r3, [r7, #15]
      break;
 80183de:	e00b      	b.n	80183f8 <DMA_CheckFifoParam+0xe4>
      break;
 80183e0:	bf00      	nop
 80183e2:	e00a      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;
 80183e4:	bf00      	nop
 80183e6:	e008      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;
 80183e8:	bf00      	nop
 80183ea:	e006      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;
 80183ec:	bf00      	nop
 80183ee:	e004      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;
 80183f0:	bf00      	nop
 80183f2:	e002      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;   
 80183f4:	bf00      	nop
 80183f6:	e000      	b.n	80183fa <DMA_CheckFifoParam+0xe6>
      break;
 80183f8:	bf00      	nop
    }
  } 
  
  return status; 
 80183fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80183fc:	4618      	mov	r0, r3
 80183fe:	3714      	adds	r7, #20
 8018400:	46bd      	mov	sp, r7
 8018402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018406:	4770      	bx	lr

08018408 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8018408:	b580      	push	{r7, lr}
 801840a:	b086      	sub	sp, #24
 801840c:	af00      	add	r7, sp, #0
 801840e:	60f8      	str	r0, [r7, #12]
 8018410:	60b9      	str	r1, [r7, #8]
 8018412:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8018416:	2301      	movs	r3, #1
 8018418:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801841a:	4b23      	ldr	r3, [pc, #140]	; (80184a8 <HAL_FLASH_Program+0xa0>)
 801841c:	7e1b      	ldrb	r3, [r3, #24]
 801841e:	2b01      	cmp	r3, #1
 8018420:	d101      	bne.n	8018426 <HAL_FLASH_Program+0x1e>
 8018422:	2302      	movs	r3, #2
 8018424:	e03b      	b.n	801849e <HAL_FLASH_Program+0x96>
 8018426:	4b20      	ldr	r3, [pc, #128]	; (80184a8 <HAL_FLASH_Program+0xa0>)
 8018428:	2201      	movs	r2, #1
 801842a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801842c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018430:	f000 f870 	bl	8018514 <FLASH_WaitForLastOperation>
 8018434:	4603      	mov	r3, r0
 8018436:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8018438:	7dfb      	ldrb	r3, [r7, #23]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d12b      	bne.n	8018496 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	2b00      	cmp	r3, #0
 8018442:	d105      	bne.n	8018450 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8018444:	783b      	ldrb	r3, [r7, #0]
 8018446:	4619      	mov	r1, r3
 8018448:	68b8      	ldr	r0, [r7, #8]
 801844a:	f000 f919 	bl	8018680 <FLASH_Program_Byte>
 801844e:	e016      	b.n	801847e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2b01      	cmp	r3, #1
 8018454:	d105      	bne.n	8018462 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8018456:	883b      	ldrh	r3, [r7, #0]
 8018458:	4619      	mov	r1, r3
 801845a:	68b8      	ldr	r0, [r7, #8]
 801845c:	f000 f8ec 	bl	8018638 <FLASH_Program_HalfWord>
 8018460:	e00d      	b.n	801847e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	2b02      	cmp	r3, #2
 8018466:	d105      	bne.n	8018474 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	4619      	mov	r1, r3
 801846c:	68b8      	ldr	r0, [r7, #8]
 801846e:	f000 f8c1 	bl	80185f4 <FLASH_Program_Word>
 8018472:	e004      	b.n	801847e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8018474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018478:	68b8      	ldr	r0, [r7, #8]
 801847a:	f000 f88b 	bl	8018594 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801847e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8018482:	f000 f847 	bl	8018514 <FLASH_WaitForLastOperation>
 8018486:	4603      	mov	r3, r0
 8018488:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 801848a:	4b08      	ldr	r3, [pc, #32]	; (80184ac <HAL_FLASH_Program+0xa4>)
 801848c:	691b      	ldr	r3, [r3, #16]
 801848e:	4a07      	ldr	r2, [pc, #28]	; (80184ac <HAL_FLASH_Program+0xa4>)
 8018490:	f023 0301 	bic.w	r3, r3, #1
 8018494:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8018496:	4b04      	ldr	r3, [pc, #16]	; (80184a8 <HAL_FLASH_Program+0xa0>)
 8018498:	2200      	movs	r2, #0
 801849a:	761a      	strb	r2, [r3, #24]
  
  return status;
 801849c:	7dfb      	ldrb	r3, [r7, #23]
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3718      	adds	r7, #24
 80184a2:	46bd      	mov	sp, r7
 80184a4:	bd80      	pop	{r7, pc}
 80184a6:	bf00      	nop
 80184a8:	2001bc04 	.word	0x2001bc04
 80184ac:	40023c00 	.word	0x40023c00

080184b0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80184b0:	b480      	push	{r7}
 80184b2:	b083      	sub	sp, #12
 80184b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80184b6:	2300      	movs	r3, #0
 80184b8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80184ba:	4b0b      	ldr	r3, [pc, #44]	; (80184e8 <HAL_FLASH_Unlock+0x38>)
 80184bc:	691b      	ldr	r3, [r3, #16]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	da0b      	bge.n	80184da <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80184c2:	4b09      	ldr	r3, [pc, #36]	; (80184e8 <HAL_FLASH_Unlock+0x38>)
 80184c4:	4a09      	ldr	r2, [pc, #36]	; (80184ec <HAL_FLASH_Unlock+0x3c>)
 80184c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80184c8:	4b07      	ldr	r3, [pc, #28]	; (80184e8 <HAL_FLASH_Unlock+0x38>)
 80184ca:	4a09      	ldr	r2, [pc, #36]	; (80184f0 <HAL_FLASH_Unlock+0x40>)
 80184cc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80184ce:	4b06      	ldr	r3, [pc, #24]	; (80184e8 <HAL_FLASH_Unlock+0x38>)
 80184d0:	691b      	ldr	r3, [r3, #16]
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	da01      	bge.n	80184da <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80184d6:	2301      	movs	r3, #1
 80184d8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80184da:	79fb      	ldrb	r3, [r7, #7]
}
 80184dc:	4618      	mov	r0, r3
 80184de:	370c      	adds	r7, #12
 80184e0:	46bd      	mov	sp, r7
 80184e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184e6:	4770      	bx	lr
 80184e8:	40023c00 	.word	0x40023c00
 80184ec:	45670123 	.word	0x45670123
 80184f0:	cdef89ab 	.word	0xcdef89ab

080184f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80184f4:	b480      	push	{r7}
 80184f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80184f8:	4b05      	ldr	r3, [pc, #20]	; (8018510 <HAL_FLASH_Lock+0x1c>)
 80184fa:	691b      	ldr	r3, [r3, #16]
 80184fc:	4a04      	ldr	r2, [pc, #16]	; (8018510 <HAL_FLASH_Lock+0x1c>)
 80184fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8018502:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8018504:	2300      	movs	r3, #0
}
 8018506:	4618      	mov	r0, r3
 8018508:	46bd      	mov	sp, r7
 801850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801850e:	4770      	bx	lr
 8018510:	40023c00 	.word	0x40023c00

08018514 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8018514:	b580      	push	{r7, lr}
 8018516:	b084      	sub	sp, #16
 8018518:	af00      	add	r7, sp, #0
 801851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 801851c:	2300      	movs	r3, #0
 801851e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8018520:	4b1a      	ldr	r3, [pc, #104]	; (801858c <FLASH_WaitForLastOperation+0x78>)
 8018522:	2200      	movs	r2, #0
 8018524:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8018526:	f7fe fe5d 	bl	80171e4 <HAL_GetTick>
 801852a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 801852c:	e010      	b.n	8018550 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018534:	d00c      	beq.n	8018550 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d007      	beq.n	801854c <FLASH_WaitForLastOperation+0x38>
 801853c:	f7fe fe52 	bl	80171e4 <HAL_GetTick>
 8018540:	4602      	mov	r2, r0
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	1ad3      	subs	r3, r2, r3
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	429a      	cmp	r2, r3
 801854a:	d201      	bcs.n	8018550 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 801854c:	2303      	movs	r3, #3
 801854e:	e019      	b.n	8018584 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8018550:	4b0f      	ldr	r3, [pc, #60]	; (8018590 <FLASH_WaitForLastOperation+0x7c>)
 8018552:	68db      	ldr	r3, [r3, #12]
 8018554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018558:	2b00      	cmp	r3, #0
 801855a:	d1e8      	bne.n	801852e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 801855c:	4b0c      	ldr	r3, [pc, #48]	; (8018590 <FLASH_WaitForLastOperation+0x7c>)
 801855e:	68db      	ldr	r3, [r3, #12]
 8018560:	f003 0301 	and.w	r3, r3, #1
 8018564:	2b00      	cmp	r3, #0
 8018566:	d002      	beq.n	801856e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8018568:	4b09      	ldr	r3, [pc, #36]	; (8018590 <FLASH_WaitForLastOperation+0x7c>)
 801856a:	2201      	movs	r2, #1
 801856c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 801856e:	4b08      	ldr	r3, [pc, #32]	; (8018590 <FLASH_WaitForLastOperation+0x7c>)
 8018570:	68db      	ldr	r3, [r3, #12]
 8018572:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8018576:	2b00      	cmp	r3, #0
 8018578:	d003      	beq.n	8018582 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 801857a:	f000 f8a3 	bl	80186c4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 801857e:	2301      	movs	r3, #1
 8018580:	e000      	b.n	8018584 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8018582:	2300      	movs	r3, #0
  
}  
 8018584:	4618      	mov	r0, r3
 8018586:	3710      	adds	r7, #16
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}
 801858c:	2001bc04 	.word	0x2001bc04
 8018590:	40023c00 	.word	0x40023c00

08018594 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8018594:	b490      	push	{r4, r7}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	60f8      	str	r0, [r7, #12]
 801859c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80185a0:	4b13      	ldr	r3, [pc, #76]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185a2:	691b      	ldr	r3, [r3, #16]
 80185a4:	4a12      	ldr	r2, [pc, #72]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80185aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80185ac:	4b10      	ldr	r3, [pc, #64]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185ae:	691b      	ldr	r3, [r3, #16]
 80185b0:	4a0f      	ldr	r2, [pc, #60]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80185b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80185b8:	4b0d      	ldr	r3, [pc, #52]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185ba:	691b      	ldr	r3, [r3, #16]
 80185bc:	4a0c      	ldr	r2, [pc, #48]	; (80185f0 <FLASH_Program_DoubleWord+0x5c>)
 80185be:	f043 0301 	orr.w	r3, r3, #1
 80185c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80185c4:	68fb      	ldr	r3, [r7, #12]
 80185c6:	683a      	ldr	r2, [r7, #0]
 80185c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80185ca:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80185ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80185d2:	f04f 0300 	mov.w	r3, #0
 80185d6:	f04f 0400 	mov.w	r4, #0
 80185da:	0013      	movs	r3, r2
 80185dc:	2400      	movs	r4, #0
 80185de:	68fa      	ldr	r2, [r7, #12]
 80185e0:	3204      	adds	r2, #4
 80185e2:	6013      	str	r3, [r2, #0]
}
 80185e4:	bf00      	nop
 80185e6:	3710      	adds	r7, #16
 80185e8:	46bd      	mov	sp, r7
 80185ea:	bc90      	pop	{r4, r7}
 80185ec:	4770      	bx	lr
 80185ee:	bf00      	nop
 80185f0:	40023c00 	.word	0x40023c00

080185f4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80185f4:	b480      	push	{r7}
 80185f6:	b083      	sub	sp, #12
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
 80185fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80185fe:	4b0d      	ldr	r3, [pc, #52]	; (8018634 <FLASH_Program_Word+0x40>)
 8018600:	691b      	ldr	r3, [r3, #16]
 8018602:	4a0c      	ldr	r2, [pc, #48]	; (8018634 <FLASH_Program_Word+0x40>)
 8018604:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018608:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 801860a:	4b0a      	ldr	r3, [pc, #40]	; (8018634 <FLASH_Program_Word+0x40>)
 801860c:	691b      	ldr	r3, [r3, #16]
 801860e:	4a09      	ldr	r2, [pc, #36]	; (8018634 <FLASH_Program_Word+0x40>)
 8018610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8018616:	4b07      	ldr	r3, [pc, #28]	; (8018634 <FLASH_Program_Word+0x40>)
 8018618:	691b      	ldr	r3, [r3, #16]
 801861a:	4a06      	ldr	r2, [pc, #24]	; (8018634 <FLASH_Program_Word+0x40>)
 801861c:	f043 0301 	orr.w	r3, r3, #1
 8018620:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	683a      	ldr	r2, [r7, #0]
 8018626:	601a      	str	r2, [r3, #0]
}
 8018628:	bf00      	nop
 801862a:	370c      	adds	r7, #12
 801862c:	46bd      	mov	sp, r7
 801862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018632:	4770      	bx	lr
 8018634:	40023c00 	.word	0x40023c00

08018638 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8018638:	b480      	push	{r7}
 801863a:	b083      	sub	sp, #12
 801863c:	af00      	add	r7, sp, #0
 801863e:	6078      	str	r0, [r7, #4]
 8018640:	460b      	mov	r3, r1
 8018642:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8018644:	4b0d      	ldr	r3, [pc, #52]	; (801867c <FLASH_Program_HalfWord+0x44>)
 8018646:	691b      	ldr	r3, [r3, #16]
 8018648:	4a0c      	ldr	r2, [pc, #48]	; (801867c <FLASH_Program_HalfWord+0x44>)
 801864a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801864e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8018650:	4b0a      	ldr	r3, [pc, #40]	; (801867c <FLASH_Program_HalfWord+0x44>)
 8018652:	691b      	ldr	r3, [r3, #16]
 8018654:	4a09      	ldr	r2, [pc, #36]	; (801867c <FLASH_Program_HalfWord+0x44>)
 8018656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801865a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 801865c:	4b07      	ldr	r3, [pc, #28]	; (801867c <FLASH_Program_HalfWord+0x44>)
 801865e:	691b      	ldr	r3, [r3, #16]
 8018660:	4a06      	ldr	r2, [pc, #24]	; (801867c <FLASH_Program_HalfWord+0x44>)
 8018662:	f043 0301 	orr.w	r3, r3, #1
 8018666:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8018668:	687b      	ldr	r3, [r7, #4]
 801866a:	887a      	ldrh	r2, [r7, #2]
 801866c:	801a      	strh	r2, [r3, #0]
}
 801866e:	bf00      	nop
 8018670:	370c      	adds	r7, #12
 8018672:	46bd      	mov	sp, r7
 8018674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018678:	4770      	bx	lr
 801867a:	bf00      	nop
 801867c:	40023c00 	.word	0x40023c00

08018680 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8018680:	b480      	push	{r7}
 8018682:	b083      	sub	sp, #12
 8018684:	af00      	add	r7, sp, #0
 8018686:	6078      	str	r0, [r7, #4]
 8018688:	460b      	mov	r3, r1
 801868a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801868c:	4b0c      	ldr	r3, [pc, #48]	; (80186c0 <FLASH_Program_Byte+0x40>)
 801868e:	691b      	ldr	r3, [r3, #16]
 8018690:	4a0b      	ldr	r2, [pc, #44]	; (80186c0 <FLASH_Program_Byte+0x40>)
 8018692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018696:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8018698:	4b09      	ldr	r3, [pc, #36]	; (80186c0 <FLASH_Program_Byte+0x40>)
 801869a:	4a09      	ldr	r2, [pc, #36]	; (80186c0 <FLASH_Program_Byte+0x40>)
 801869c:	691b      	ldr	r3, [r3, #16]
 801869e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80186a0:	4b07      	ldr	r3, [pc, #28]	; (80186c0 <FLASH_Program_Byte+0x40>)
 80186a2:	691b      	ldr	r3, [r3, #16]
 80186a4:	4a06      	ldr	r2, [pc, #24]	; (80186c0 <FLASH_Program_Byte+0x40>)
 80186a6:	f043 0301 	orr.w	r3, r3, #1
 80186aa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	78fa      	ldrb	r2, [r7, #3]
 80186b0:	701a      	strb	r2, [r3, #0]
}
 80186b2:	bf00      	nop
 80186b4:	370c      	adds	r7, #12
 80186b6:	46bd      	mov	sp, r7
 80186b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186bc:	4770      	bx	lr
 80186be:	bf00      	nop
 80186c0:	40023c00 	.word	0x40023c00

080186c4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80186c4:	b480      	push	{r7}
 80186c6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80186c8:	4b2f      	ldr	r3, [pc, #188]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	f003 0310 	and.w	r3, r3, #16
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d008      	beq.n	80186e6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80186d4:	4b2d      	ldr	r3, [pc, #180]	; (801878c <FLASH_SetErrorCode+0xc8>)
 80186d6:	69db      	ldr	r3, [r3, #28]
 80186d8:	f043 0310 	orr.w	r3, r3, #16
 80186dc:	4a2b      	ldr	r2, [pc, #172]	; (801878c <FLASH_SetErrorCode+0xc8>)
 80186de:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80186e0:	4b29      	ldr	r3, [pc, #164]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 80186e2:	2210      	movs	r2, #16
 80186e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80186e6:	4b28      	ldr	r3, [pc, #160]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 80186e8:	68db      	ldr	r3, [r3, #12]
 80186ea:	f003 0320 	and.w	r3, r3, #32
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d008      	beq.n	8018704 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80186f2:	4b26      	ldr	r3, [pc, #152]	; (801878c <FLASH_SetErrorCode+0xc8>)
 80186f4:	69db      	ldr	r3, [r3, #28]
 80186f6:	f043 0308 	orr.w	r3, r3, #8
 80186fa:	4a24      	ldr	r2, [pc, #144]	; (801878c <FLASH_SetErrorCode+0xc8>)
 80186fc:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80186fe:	4b22      	ldr	r3, [pc, #136]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 8018700:	2220      	movs	r2, #32
 8018702:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8018704:	4b20      	ldr	r3, [pc, #128]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 8018706:	68db      	ldr	r3, [r3, #12]
 8018708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801870c:	2b00      	cmp	r3, #0
 801870e:	d008      	beq.n	8018722 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8018710:	4b1e      	ldr	r3, [pc, #120]	; (801878c <FLASH_SetErrorCode+0xc8>)
 8018712:	69db      	ldr	r3, [r3, #28]
 8018714:	f043 0304 	orr.w	r3, r3, #4
 8018718:	4a1c      	ldr	r2, [pc, #112]	; (801878c <FLASH_SetErrorCode+0xc8>)
 801871a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 801871c:	4b1a      	ldr	r3, [pc, #104]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 801871e:	2240      	movs	r2, #64	; 0x40
 8018720:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8018722:	4b19      	ldr	r3, [pc, #100]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 8018724:	68db      	ldr	r3, [r3, #12]
 8018726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801872a:	2b00      	cmp	r3, #0
 801872c:	d008      	beq.n	8018740 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801872e:	4b17      	ldr	r3, [pc, #92]	; (801878c <FLASH_SetErrorCode+0xc8>)
 8018730:	69db      	ldr	r3, [r3, #28]
 8018732:	f043 0302 	orr.w	r3, r3, #2
 8018736:	4a15      	ldr	r2, [pc, #84]	; (801878c <FLASH_SetErrorCode+0xc8>)
 8018738:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 801873a:	4b13      	ldr	r3, [pc, #76]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 801873c:	2280      	movs	r2, #128	; 0x80
 801873e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8018740:	4b11      	ldr	r3, [pc, #68]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 8018742:	68db      	ldr	r3, [r3, #12]
 8018744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018748:	2b00      	cmp	r3, #0
 801874a:	d009      	beq.n	8018760 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 801874c:	4b0f      	ldr	r3, [pc, #60]	; (801878c <FLASH_SetErrorCode+0xc8>)
 801874e:	69db      	ldr	r3, [r3, #28]
 8018750:	f043 0301 	orr.w	r3, r3, #1
 8018754:	4a0d      	ldr	r2, [pc, #52]	; (801878c <FLASH_SetErrorCode+0xc8>)
 8018756:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8018758:	4b0b      	ldr	r3, [pc, #44]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 801875a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801875e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8018760:	4b09      	ldr	r3, [pc, #36]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	f003 0302 	and.w	r3, r3, #2
 8018768:	2b00      	cmp	r3, #0
 801876a:	d008      	beq.n	801877e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 801876c:	4b07      	ldr	r3, [pc, #28]	; (801878c <FLASH_SetErrorCode+0xc8>)
 801876e:	69db      	ldr	r3, [r3, #28]
 8018770:	f043 0320 	orr.w	r3, r3, #32
 8018774:	4a05      	ldr	r2, [pc, #20]	; (801878c <FLASH_SetErrorCode+0xc8>)
 8018776:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8018778:	4b03      	ldr	r3, [pc, #12]	; (8018788 <FLASH_SetErrorCode+0xc4>)
 801877a:	2202      	movs	r2, #2
 801877c:	60da      	str	r2, [r3, #12]
  }
}
 801877e:	bf00      	nop
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr
 8018788:	40023c00 	.word	0x40023c00
 801878c:	2001bc04 	.word	0x2001bc04

08018790 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b084      	sub	sp, #16
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
 8018798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 801879a:	2301      	movs	r3, #1
 801879c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 801879e:	2300      	movs	r3, #0
 80187a0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80187a2:	4b31      	ldr	r3, [pc, #196]	; (8018868 <HAL_FLASHEx_Erase+0xd8>)
 80187a4:	7e1b      	ldrb	r3, [r3, #24]
 80187a6:	2b01      	cmp	r3, #1
 80187a8:	d101      	bne.n	80187ae <HAL_FLASHEx_Erase+0x1e>
 80187aa:	2302      	movs	r3, #2
 80187ac:	e058      	b.n	8018860 <HAL_FLASHEx_Erase+0xd0>
 80187ae:	4b2e      	ldr	r3, [pc, #184]	; (8018868 <HAL_FLASHEx_Erase+0xd8>)
 80187b0:	2201      	movs	r2, #1
 80187b2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80187b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80187b8:	f7ff feac 	bl	8018514 <FLASH_WaitForLastOperation>
 80187bc:	4603      	mov	r3, r0
 80187be:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80187c0:	7bfb      	ldrb	r3, [r7, #15]
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d148      	bne.n	8018858 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80187c6:	683b      	ldr	r3, [r7, #0]
 80187c8:	f04f 32ff 	mov.w	r2, #4294967295
 80187cc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	681b      	ldr	r3, [r3, #0]
 80187d2:	2b01      	cmp	r3, #1
 80187d4:	d115      	bne.n	8018802 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	691b      	ldr	r3, [r3, #16]
 80187da:	b2da      	uxtb	r2, r3
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	4619      	mov	r1, r3
 80187e2:	4610      	mov	r0, r2
 80187e4:	f000 f844 	bl	8018870 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80187e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80187ec:	f7ff fe92 	bl	8018514 <FLASH_WaitForLastOperation>
 80187f0:	4603      	mov	r3, r0
 80187f2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80187f4:	4b1d      	ldr	r3, [pc, #116]	; (801886c <HAL_FLASHEx_Erase+0xdc>)
 80187f6:	691b      	ldr	r3, [r3, #16]
 80187f8:	4a1c      	ldr	r2, [pc, #112]	; (801886c <HAL_FLASHEx_Erase+0xdc>)
 80187fa:	f023 0304 	bic.w	r3, r3, #4
 80187fe:	6113      	str	r3, [r2, #16]
 8018800:	e028      	b.n	8018854 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	689b      	ldr	r3, [r3, #8]
 8018806:	60bb      	str	r3, [r7, #8]
 8018808:	e01c      	b.n	8018844 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	691b      	ldr	r3, [r3, #16]
 801880e:	b2db      	uxtb	r3, r3
 8018810:	4619      	mov	r1, r3
 8018812:	68b8      	ldr	r0, [r7, #8]
 8018814:	f000 f850 	bl	80188b8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8018818:	f24c 3050 	movw	r0, #50000	; 0xc350
 801881c:	f7ff fe7a 	bl	8018514 <FLASH_WaitForLastOperation>
 8018820:	4603      	mov	r3, r0
 8018822:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8018824:	4b11      	ldr	r3, [pc, #68]	; (801886c <HAL_FLASHEx_Erase+0xdc>)
 8018826:	691b      	ldr	r3, [r3, #16]
 8018828:	4a10      	ldr	r2, [pc, #64]	; (801886c <HAL_FLASHEx_Erase+0xdc>)
 801882a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 801882e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8018830:	7bfb      	ldrb	r3, [r7, #15]
 8018832:	2b00      	cmp	r3, #0
 8018834:	d003      	beq.n	801883e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	68ba      	ldr	r2, [r7, #8]
 801883a:	601a      	str	r2, [r3, #0]
          break;
 801883c:	e00a      	b.n	8018854 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801883e:	68bb      	ldr	r3, [r7, #8]
 8018840:	3301      	adds	r3, #1
 8018842:	60bb      	str	r3, [r7, #8]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	68da      	ldr	r2, [r3, #12]
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	689b      	ldr	r3, [r3, #8]
 801884c:	4413      	add	r3, r2
 801884e:	68ba      	ldr	r2, [r7, #8]
 8018850:	429a      	cmp	r2, r3
 8018852:	d3da      	bcc.n	801880a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8018854:	f000 f878 	bl	8018948 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8018858:	4b03      	ldr	r3, [pc, #12]	; (8018868 <HAL_FLASHEx_Erase+0xd8>)
 801885a:	2200      	movs	r2, #0
 801885c:	761a      	strb	r2, [r3, #24]

  return status;
 801885e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018860:	4618      	mov	r0, r3
 8018862:	3710      	adds	r7, #16
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	2001bc04 	.word	0x2001bc04
 801886c:	40023c00 	.word	0x40023c00

08018870 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8018870:	b480      	push	{r7}
 8018872:	b083      	sub	sp, #12
 8018874:	af00      	add	r7, sp, #0
 8018876:	4603      	mov	r3, r0
 8018878:	6039      	str	r1, [r7, #0]
 801887a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801887c:	4b0d      	ldr	r3, [pc, #52]	; (80188b4 <FLASH_MassErase+0x44>)
 801887e:	691b      	ldr	r3, [r3, #16]
 8018880:	4a0c      	ldr	r2, [pc, #48]	; (80188b4 <FLASH_MassErase+0x44>)
 8018882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018886:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8018888:	4b0a      	ldr	r3, [pc, #40]	; (80188b4 <FLASH_MassErase+0x44>)
 801888a:	691b      	ldr	r3, [r3, #16]
 801888c:	4a09      	ldr	r2, [pc, #36]	; (80188b4 <FLASH_MassErase+0x44>)
 801888e:	f043 0304 	orr.w	r3, r3, #4
 8018892:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8018894:	4b07      	ldr	r3, [pc, #28]	; (80188b4 <FLASH_MassErase+0x44>)
 8018896:	691a      	ldr	r2, [r3, #16]
 8018898:	79fb      	ldrb	r3, [r7, #7]
 801889a:	021b      	lsls	r3, r3, #8
 801889c:	4313      	orrs	r3, r2
 801889e:	4a05      	ldr	r2, [pc, #20]	; (80188b4 <FLASH_MassErase+0x44>)
 80188a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80188a4:	6113      	str	r3, [r2, #16]
}
 80188a6:	bf00      	nop
 80188a8:	370c      	adds	r7, #12
 80188aa:	46bd      	mov	sp, r7
 80188ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b0:	4770      	bx	lr
 80188b2:	bf00      	nop
 80188b4:	40023c00 	.word	0x40023c00

080188b8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80188b8:	b480      	push	{r7}
 80188ba:	b085      	sub	sp, #20
 80188bc:	af00      	add	r7, sp, #0
 80188be:	6078      	str	r0, [r7, #4]
 80188c0:	460b      	mov	r3, r1
 80188c2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80188c4:	2300      	movs	r3, #0
 80188c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80188c8:	78fb      	ldrb	r3, [r7, #3]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d102      	bne.n	80188d4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80188ce:	2300      	movs	r3, #0
 80188d0:	60fb      	str	r3, [r7, #12]
 80188d2:	e010      	b.n	80188f6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80188d4:	78fb      	ldrb	r3, [r7, #3]
 80188d6:	2b01      	cmp	r3, #1
 80188d8:	d103      	bne.n	80188e2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80188da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80188de:	60fb      	str	r3, [r7, #12]
 80188e0:	e009      	b.n	80188f6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80188e2:	78fb      	ldrb	r3, [r7, #3]
 80188e4:	2b02      	cmp	r3, #2
 80188e6:	d103      	bne.n	80188f0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80188e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80188ec:	60fb      	str	r3, [r7, #12]
 80188ee:	e002      	b.n	80188f6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80188f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80188f4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80188f6:	4b13      	ldr	r3, [pc, #76]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 80188f8:	691b      	ldr	r3, [r3, #16]
 80188fa:	4a12      	ldr	r2, [pc, #72]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 80188fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8018900:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8018902:	4b10      	ldr	r3, [pc, #64]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018904:	691a      	ldr	r2, [r3, #16]
 8018906:	490f      	ldr	r1, [pc, #60]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	4313      	orrs	r3, r2
 801890c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 801890e:	4b0d      	ldr	r3, [pc, #52]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018910:	691b      	ldr	r3, [r3, #16]
 8018912:	4a0c      	ldr	r2, [pc, #48]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018914:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8018918:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 801891a:	4b0a      	ldr	r3, [pc, #40]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 801891c:	691a      	ldr	r2, [r3, #16]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	00db      	lsls	r3, r3, #3
 8018922:	4313      	orrs	r3, r2
 8018924:	4a07      	ldr	r2, [pc, #28]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018926:	f043 0302 	orr.w	r3, r3, #2
 801892a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 801892c:	4b05      	ldr	r3, [pc, #20]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 801892e:	691b      	ldr	r3, [r3, #16]
 8018930:	4a04      	ldr	r2, [pc, #16]	; (8018944 <FLASH_Erase_Sector+0x8c>)
 8018932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018936:	6113      	str	r3, [r2, #16]
}
 8018938:	bf00      	nop
 801893a:	3714      	adds	r7, #20
 801893c:	46bd      	mov	sp, r7
 801893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018942:	4770      	bx	lr
 8018944:	40023c00 	.word	0x40023c00

08018948 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8018948:	b480      	push	{r7}
 801894a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 801894c:	4b20      	ldr	r3, [pc, #128]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801894e:	681b      	ldr	r3, [r3, #0]
 8018950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018954:	2b00      	cmp	r3, #0
 8018956:	d017      	beq.n	8018988 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8018958:	4b1d      	ldr	r3, [pc, #116]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801895a:	681b      	ldr	r3, [r3, #0]
 801895c:	4a1c      	ldr	r2, [pc, #112]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801895e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8018962:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8018964:	4b1a      	ldr	r3, [pc, #104]	; (80189d0 <FLASH_FlushCaches+0x88>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	4a19      	ldr	r2, [pc, #100]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801896a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801896e:	6013      	str	r3, [r2, #0]
 8018970:	4b17      	ldr	r3, [pc, #92]	; (80189d0 <FLASH_FlushCaches+0x88>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	4a16      	ldr	r2, [pc, #88]	; (80189d0 <FLASH_FlushCaches+0x88>)
 8018976:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801897a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801897c:	4b14      	ldr	r3, [pc, #80]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	4a13      	ldr	r2, [pc, #76]	; (80189d0 <FLASH_FlushCaches+0x88>)
 8018982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018986:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8018988:	4b11      	ldr	r3, [pc, #68]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018990:	2b00      	cmp	r3, #0
 8018992:	d017      	beq.n	80189c4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8018994:	4b0e      	ldr	r3, [pc, #56]	; (80189d0 <FLASH_FlushCaches+0x88>)
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	4a0d      	ldr	r2, [pc, #52]	; (80189d0 <FLASH_FlushCaches+0x88>)
 801899a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801899e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80189a0:	4b0b      	ldr	r3, [pc, #44]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189a2:	681b      	ldr	r3, [r3, #0]
 80189a4:	4a0a      	ldr	r2, [pc, #40]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80189aa:	6013      	str	r3, [r2, #0]
 80189ac:	4b08      	ldr	r3, [pc, #32]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	4a07      	ldr	r2, [pc, #28]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80189b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80189b8:	4b05      	ldr	r3, [pc, #20]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	4a04      	ldr	r2, [pc, #16]	; (80189d0 <FLASH_FlushCaches+0x88>)
 80189be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80189c2:	6013      	str	r3, [r2, #0]
  }
}
 80189c4:	bf00      	nop
 80189c6:	46bd      	mov	sp, r7
 80189c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189cc:	4770      	bx	lr
 80189ce:	bf00      	nop
 80189d0:	40023c00 	.word	0x40023c00

080189d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80189d4:	b480      	push	{r7}
 80189d6:	b089      	sub	sp, #36	; 0x24
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80189de:	2300      	movs	r3, #0
 80189e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80189e2:	2300      	movs	r3, #0
 80189e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80189e6:	2300      	movs	r3, #0
 80189e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80189ea:	2300      	movs	r3, #0
 80189ec:	61fb      	str	r3, [r7, #28]
 80189ee:	e165      	b.n	8018cbc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80189f0:	2201      	movs	r2, #1
 80189f2:	69fb      	ldr	r3, [r7, #28]
 80189f4:	fa02 f303 	lsl.w	r3, r2, r3
 80189f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80189fa:	683b      	ldr	r3, [r7, #0]
 80189fc:	681b      	ldr	r3, [r3, #0]
 80189fe:	697a      	ldr	r2, [r7, #20]
 8018a00:	4013      	ands	r3, r2
 8018a02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8018a04:	693a      	ldr	r2, [r7, #16]
 8018a06:	697b      	ldr	r3, [r7, #20]
 8018a08:	429a      	cmp	r2, r3
 8018a0a:	f040 8154 	bne.w	8018cb6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8018a0e:	683b      	ldr	r3, [r7, #0]
 8018a10:	685b      	ldr	r3, [r3, #4]
 8018a12:	2b01      	cmp	r3, #1
 8018a14:	d00b      	beq.n	8018a2e <HAL_GPIO_Init+0x5a>
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	685b      	ldr	r3, [r3, #4]
 8018a1a:	2b02      	cmp	r3, #2
 8018a1c:	d007      	beq.n	8018a2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018a1e:	683b      	ldr	r3, [r7, #0]
 8018a20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8018a22:	2b11      	cmp	r3, #17
 8018a24:	d003      	beq.n	8018a2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018a26:	683b      	ldr	r3, [r7, #0]
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	2b12      	cmp	r3, #18
 8018a2c:	d130      	bne.n	8018a90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	689b      	ldr	r3, [r3, #8]
 8018a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8018a34:	69fb      	ldr	r3, [r7, #28]
 8018a36:	005b      	lsls	r3, r3, #1
 8018a38:	2203      	movs	r2, #3
 8018a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8018a3e:	43db      	mvns	r3, r3
 8018a40:	69ba      	ldr	r2, [r7, #24]
 8018a42:	4013      	ands	r3, r2
 8018a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	68da      	ldr	r2, [r3, #12]
 8018a4a:	69fb      	ldr	r3, [r7, #28]
 8018a4c:	005b      	lsls	r3, r3, #1
 8018a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8018a52:	69ba      	ldr	r2, [r7, #24]
 8018a54:	4313      	orrs	r3, r2
 8018a56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	69ba      	ldr	r2, [r7, #24]
 8018a5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	685b      	ldr	r3, [r3, #4]
 8018a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8018a64:	2201      	movs	r2, #1
 8018a66:	69fb      	ldr	r3, [r7, #28]
 8018a68:	fa02 f303 	lsl.w	r3, r2, r3
 8018a6c:	43db      	mvns	r3, r3
 8018a6e:	69ba      	ldr	r2, [r7, #24]
 8018a70:	4013      	ands	r3, r2
 8018a72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8018a74:	683b      	ldr	r3, [r7, #0]
 8018a76:	685b      	ldr	r3, [r3, #4]
 8018a78:	091b      	lsrs	r3, r3, #4
 8018a7a:	f003 0201 	and.w	r2, r3, #1
 8018a7e:	69fb      	ldr	r3, [r7, #28]
 8018a80:	fa02 f303 	lsl.w	r3, r2, r3
 8018a84:	69ba      	ldr	r2, [r7, #24]
 8018a86:	4313      	orrs	r3, r2
 8018a88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	69ba      	ldr	r2, [r7, #24]
 8018a8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	68db      	ldr	r3, [r3, #12]
 8018a94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8018a96:	69fb      	ldr	r3, [r7, #28]
 8018a98:	005b      	lsls	r3, r3, #1
 8018a9a:	2203      	movs	r2, #3
 8018a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8018aa0:	43db      	mvns	r3, r3
 8018aa2:	69ba      	ldr	r2, [r7, #24]
 8018aa4:	4013      	ands	r3, r2
 8018aa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	689a      	ldr	r2, [r3, #8]
 8018aac:	69fb      	ldr	r3, [r7, #28]
 8018aae:	005b      	lsls	r3, r3, #1
 8018ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8018ab4:	69ba      	ldr	r2, [r7, #24]
 8018ab6:	4313      	orrs	r3, r2
 8018ab8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	69ba      	ldr	r2, [r7, #24]
 8018abe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8018ac0:	683b      	ldr	r3, [r7, #0]
 8018ac2:	685b      	ldr	r3, [r3, #4]
 8018ac4:	2b02      	cmp	r3, #2
 8018ac6:	d003      	beq.n	8018ad0 <HAL_GPIO_Init+0xfc>
 8018ac8:	683b      	ldr	r3, [r7, #0]
 8018aca:	685b      	ldr	r3, [r3, #4]
 8018acc:	2b12      	cmp	r3, #18
 8018ace:	d123      	bne.n	8018b18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8018ad0:	69fb      	ldr	r3, [r7, #28]
 8018ad2:	08da      	lsrs	r2, r3, #3
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	3208      	adds	r2, #8
 8018ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8018ade:	69fb      	ldr	r3, [r7, #28]
 8018ae0:	f003 0307 	and.w	r3, r3, #7
 8018ae4:	009b      	lsls	r3, r3, #2
 8018ae6:	220f      	movs	r2, #15
 8018ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8018aec:	43db      	mvns	r3, r3
 8018aee:	69ba      	ldr	r2, [r7, #24]
 8018af0:	4013      	ands	r3, r2
 8018af2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8018af4:	683b      	ldr	r3, [r7, #0]
 8018af6:	691a      	ldr	r2, [r3, #16]
 8018af8:	69fb      	ldr	r3, [r7, #28]
 8018afa:	f003 0307 	and.w	r3, r3, #7
 8018afe:	009b      	lsls	r3, r3, #2
 8018b00:	fa02 f303 	lsl.w	r3, r2, r3
 8018b04:	69ba      	ldr	r2, [r7, #24]
 8018b06:	4313      	orrs	r3, r2
 8018b08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8018b0a:	69fb      	ldr	r3, [r7, #28]
 8018b0c:	08da      	lsrs	r2, r3, #3
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	3208      	adds	r2, #8
 8018b12:	69b9      	ldr	r1, [r7, #24]
 8018b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8018b1e:	69fb      	ldr	r3, [r7, #28]
 8018b20:	005b      	lsls	r3, r3, #1
 8018b22:	2203      	movs	r2, #3
 8018b24:	fa02 f303 	lsl.w	r3, r2, r3
 8018b28:	43db      	mvns	r3, r3
 8018b2a:	69ba      	ldr	r2, [r7, #24]
 8018b2c:	4013      	ands	r3, r2
 8018b2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8018b30:	683b      	ldr	r3, [r7, #0]
 8018b32:	685b      	ldr	r3, [r3, #4]
 8018b34:	f003 0203 	and.w	r2, r3, #3
 8018b38:	69fb      	ldr	r3, [r7, #28]
 8018b3a:	005b      	lsls	r3, r3, #1
 8018b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8018b40:	69ba      	ldr	r2, [r7, #24]
 8018b42:	4313      	orrs	r3, r2
 8018b44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	69ba      	ldr	r2, [r7, #24]
 8018b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8018b4c:	683b      	ldr	r3, [r7, #0]
 8018b4e:	685b      	ldr	r3, [r3, #4]
 8018b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	f000 80ae 	beq.w	8018cb6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	60fb      	str	r3, [r7, #12]
 8018b5e:	4b5c      	ldr	r3, [pc, #368]	; (8018cd0 <HAL_GPIO_Init+0x2fc>)
 8018b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b62:	4a5b      	ldr	r2, [pc, #364]	; (8018cd0 <HAL_GPIO_Init+0x2fc>)
 8018b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018b68:	6453      	str	r3, [r2, #68]	; 0x44
 8018b6a:	4b59      	ldr	r3, [pc, #356]	; (8018cd0 <HAL_GPIO_Init+0x2fc>)
 8018b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018b6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018b72:	60fb      	str	r3, [r7, #12]
 8018b74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8018b76:	4a57      	ldr	r2, [pc, #348]	; (8018cd4 <HAL_GPIO_Init+0x300>)
 8018b78:	69fb      	ldr	r3, [r7, #28]
 8018b7a:	089b      	lsrs	r3, r3, #2
 8018b7c:	3302      	adds	r3, #2
 8018b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8018b84:	69fb      	ldr	r3, [r7, #28]
 8018b86:	f003 0303 	and.w	r3, r3, #3
 8018b8a:	009b      	lsls	r3, r3, #2
 8018b8c:	220f      	movs	r2, #15
 8018b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8018b92:	43db      	mvns	r3, r3
 8018b94:	69ba      	ldr	r2, [r7, #24]
 8018b96:	4013      	ands	r3, r2
 8018b98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	4a4e      	ldr	r2, [pc, #312]	; (8018cd8 <HAL_GPIO_Init+0x304>)
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d025      	beq.n	8018bee <HAL_GPIO_Init+0x21a>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	4a4d      	ldr	r2, [pc, #308]	; (8018cdc <HAL_GPIO_Init+0x308>)
 8018ba6:	4293      	cmp	r3, r2
 8018ba8:	d01f      	beq.n	8018bea <HAL_GPIO_Init+0x216>
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	4a4c      	ldr	r2, [pc, #304]	; (8018ce0 <HAL_GPIO_Init+0x30c>)
 8018bae:	4293      	cmp	r3, r2
 8018bb0:	d019      	beq.n	8018be6 <HAL_GPIO_Init+0x212>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	4a4b      	ldr	r2, [pc, #300]	; (8018ce4 <HAL_GPIO_Init+0x310>)
 8018bb6:	4293      	cmp	r3, r2
 8018bb8:	d013      	beq.n	8018be2 <HAL_GPIO_Init+0x20e>
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	4a4a      	ldr	r2, [pc, #296]	; (8018ce8 <HAL_GPIO_Init+0x314>)
 8018bbe:	4293      	cmp	r3, r2
 8018bc0:	d00d      	beq.n	8018bde <HAL_GPIO_Init+0x20a>
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	4a49      	ldr	r2, [pc, #292]	; (8018cec <HAL_GPIO_Init+0x318>)
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	d007      	beq.n	8018bda <HAL_GPIO_Init+0x206>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	4a48      	ldr	r2, [pc, #288]	; (8018cf0 <HAL_GPIO_Init+0x31c>)
 8018bce:	4293      	cmp	r3, r2
 8018bd0:	d101      	bne.n	8018bd6 <HAL_GPIO_Init+0x202>
 8018bd2:	2306      	movs	r3, #6
 8018bd4:	e00c      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018bd6:	2307      	movs	r3, #7
 8018bd8:	e00a      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018bda:	2305      	movs	r3, #5
 8018bdc:	e008      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018bde:	2304      	movs	r3, #4
 8018be0:	e006      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018be2:	2303      	movs	r3, #3
 8018be4:	e004      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018be6:	2302      	movs	r3, #2
 8018be8:	e002      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018bea:	2301      	movs	r3, #1
 8018bec:	e000      	b.n	8018bf0 <HAL_GPIO_Init+0x21c>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	69fa      	ldr	r2, [r7, #28]
 8018bf2:	f002 0203 	and.w	r2, r2, #3
 8018bf6:	0092      	lsls	r2, r2, #2
 8018bf8:	4093      	lsls	r3, r2
 8018bfa:	69ba      	ldr	r2, [r7, #24]
 8018bfc:	4313      	orrs	r3, r2
 8018bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8018c00:	4934      	ldr	r1, [pc, #208]	; (8018cd4 <HAL_GPIO_Init+0x300>)
 8018c02:	69fb      	ldr	r3, [r7, #28]
 8018c04:	089b      	lsrs	r3, r3, #2
 8018c06:	3302      	adds	r3, #2
 8018c08:	69ba      	ldr	r2, [r7, #24]
 8018c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8018c0e:	4b39      	ldr	r3, [pc, #228]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	43db      	mvns	r3, r3
 8018c18:	69ba      	ldr	r2, [r7, #24]
 8018c1a:	4013      	ands	r3, r2
 8018c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8018c1e:	683b      	ldr	r3, [r7, #0]
 8018c20:	685b      	ldr	r3, [r3, #4]
 8018c22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d003      	beq.n	8018c32 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8018c2a:	69ba      	ldr	r2, [r7, #24]
 8018c2c:	693b      	ldr	r3, [r7, #16]
 8018c2e:	4313      	orrs	r3, r2
 8018c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8018c32:	4a30      	ldr	r2, [pc, #192]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c34:	69bb      	ldr	r3, [r7, #24]
 8018c36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8018c38:	4b2e      	ldr	r3, [pc, #184]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c3a:	685b      	ldr	r3, [r3, #4]
 8018c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018c3e:	693b      	ldr	r3, [r7, #16]
 8018c40:	43db      	mvns	r3, r3
 8018c42:	69ba      	ldr	r2, [r7, #24]
 8018c44:	4013      	ands	r3, r2
 8018c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8018c48:	683b      	ldr	r3, [r7, #0]
 8018c4a:	685b      	ldr	r3, [r3, #4]
 8018c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d003      	beq.n	8018c5c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8018c54:	69ba      	ldr	r2, [r7, #24]
 8018c56:	693b      	ldr	r3, [r7, #16]
 8018c58:	4313      	orrs	r3, r2
 8018c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8018c5c:	4a25      	ldr	r2, [pc, #148]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c5e:	69bb      	ldr	r3, [r7, #24]
 8018c60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8018c62:	4b24      	ldr	r3, [pc, #144]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c64:	689b      	ldr	r3, [r3, #8]
 8018c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018c68:	693b      	ldr	r3, [r7, #16]
 8018c6a:	43db      	mvns	r3, r3
 8018c6c:	69ba      	ldr	r2, [r7, #24]
 8018c6e:	4013      	ands	r3, r2
 8018c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8018c72:	683b      	ldr	r3, [r7, #0]
 8018c74:	685b      	ldr	r3, [r3, #4]
 8018c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d003      	beq.n	8018c86 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8018c7e:	69ba      	ldr	r2, [r7, #24]
 8018c80:	693b      	ldr	r3, [r7, #16]
 8018c82:	4313      	orrs	r3, r2
 8018c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8018c86:	4a1b      	ldr	r2, [pc, #108]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c88:	69bb      	ldr	r3, [r7, #24]
 8018c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8018c8c:	4b19      	ldr	r3, [pc, #100]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018c8e:	68db      	ldr	r3, [r3, #12]
 8018c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8018c92:	693b      	ldr	r3, [r7, #16]
 8018c94:	43db      	mvns	r3, r3
 8018c96:	69ba      	ldr	r2, [r7, #24]
 8018c98:	4013      	ands	r3, r2
 8018c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d003      	beq.n	8018cb0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8018ca8:	69ba      	ldr	r2, [r7, #24]
 8018caa:	693b      	ldr	r3, [r7, #16]
 8018cac:	4313      	orrs	r3, r2
 8018cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8018cb0:	4a10      	ldr	r2, [pc, #64]	; (8018cf4 <HAL_GPIO_Init+0x320>)
 8018cb2:	69bb      	ldr	r3, [r7, #24]
 8018cb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8018cb6:	69fb      	ldr	r3, [r7, #28]
 8018cb8:	3301      	adds	r3, #1
 8018cba:	61fb      	str	r3, [r7, #28]
 8018cbc:	69fb      	ldr	r3, [r7, #28]
 8018cbe:	2b0f      	cmp	r3, #15
 8018cc0:	f67f ae96 	bls.w	80189f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8018cc4:	bf00      	nop
 8018cc6:	3724      	adds	r7, #36	; 0x24
 8018cc8:	46bd      	mov	sp, r7
 8018cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cce:	4770      	bx	lr
 8018cd0:	40023800 	.word	0x40023800
 8018cd4:	40013800 	.word	0x40013800
 8018cd8:	40020000 	.word	0x40020000
 8018cdc:	40020400 	.word	0x40020400
 8018ce0:	40020800 	.word	0x40020800
 8018ce4:	40020c00 	.word	0x40020c00
 8018ce8:	40021000 	.word	0x40021000
 8018cec:	40021400 	.word	0x40021400
 8018cf0:	40021800 	.word	0x40021800
 8018cf4:	40013c00 	.word	0x40013c00

08018cf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018cf8:	b480      	push	{r7}
 8018cfa:	b085      	sub	sp, #20
 8018cfc:	af00      	add	r7, sp, #0
 8018cfe:	6078      	str	r0, [r7, #4]
 8018d00:	460b      	mov	r3, r1
 8018d02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	691a      	ldr	r2, [r3, #16]
 8018d08:	887b      	ldrh	r3, [r7, #2]
 8018d0a:	4013      	ands	r3, r2
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d002      	beq.n	8018d16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8018d10:	2301      	movs	r3, #1
 8018d12:	73fb      	strb	r3, [r7, #15]
 8018d14:	e001      	b.n	8018d1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8018d16:	2300      	movs	r3, #0
 8018d18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8018d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	3714      	adds	r7, #20
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr

08018d28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8018d28:	b480      	push	{r7}
 8018d2a:	b083      	sub	sp, #12
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
 8018d30:	460b      	mov	r3, r1
 8018d32:	807b      	strh	r3, [r7, #2]
 8018d34:	4613      	mov	r3, r2
 8018d36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8018d38:	787b      	ldrb	r3, [r7, #1]
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	d003      	beq.n	8018d46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8018d3e:	887a      	ldrh	r2, [r7, #2]
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8018d44:	e003      	b.n	8018d4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8018d46:	887b      	ldrh	r3, [r7, #2]
 8018d48:	041a      	lsls	r2, r3, #16
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	619a      	str	r2, [r3, #24]
}
 8018d4e:	bf00      	nop
 8018d50:	370c      	adds	r7, #12
 8018d52:	46bd      	mov	sp, r7
 8018d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d58:	4770      	bx	lr

08018d5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018d5a:	b480      	push	{r7}
 8018d5c:	b083      	sub	sp, #12
 8018d5e:	af00      	add	r7, sp, #0
 8018d60:	6078      	str	r0, [r7, #4]
 8018d62:	460b      	mov	r3, r1
 8018d64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	695a      	ldr	r2, [r3, #20]
 8018d6a:	887b      	ldrh	r3, [r7, #2]
 8018d6c:	401a      	ands	r2, r3
 8018d6e:	887b      	ldrh	r3, [r7, #2]
 8018d70:	429a      	cmp	r2, r3
 8018d72:	d104      	bne.n	8018d7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8018d74:	887b      	ldrh	r3, [r7, #2]
 8018d76:	041a      	lsls	r2, r3, #16
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8018d7c:	e002      	b.n	8018d84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8018d7e:	887a      	ldrh	r2, [r7, #2]
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	619a      	str	r2, [r3, #24]
}
 8018d84:	bf00      	nop
 8018d86:	370c      	adds	r7, #12
 8018d88:	46bd      	mov	sp, r7
 8018d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8e:	4770      	bx	lr

08018d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018d90:	b580      	push	{r7, lr}
 8018d92:	b084      	sub	sp, #16
 8018d94:	af00      	add	r7, sp, #0
 8018d96:	6078      	str	r0, [r7, #4]
 8018d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d101      	bne.n	8018da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8018da0:	2301      	movs	r3, #1
 8018da2:	e0cc      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8018da4:	4b68      	ldr	r3, [pc, #416]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	f003 030f 	and.w	r3, r3, #15
 8018dac:	683a      	ldr	r2, [r7, #0]
 8018dae:	429a      	cmp	r2, r3
 8018db0:	d90c      	bls.n	8018dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018db2:	4b65      	ldr	r3, [pc, #404]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018db4:	683a      	ldr	r2, [r7, #0]
 8018db6:	b2d2      	uxtb	r2, r2
 8018db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018dba:	4b63      	ldr	r3, [pc, #396]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	f003 030f 	and.w	r3, r3, #15
 8018dc2:	683a      	ldr	r2, [r7, #0]
 8018dc4:	429a      	cmp	r2, r3
 8018dc6:	d001      	beq.n	8018dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8018dc8:	2301      	movs	r3, #1
 8018dca:	e0b8      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	681b      	ldr	r3, [r3, #0]
 8018dd0:	f003 0302 	and.w	r3, r3, #2
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d020      	beq.n	8018e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	f003 0304 	and.w	r3, r3, #4
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d005      	beq.n	8018df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018de4:	4b59      	ldr	r3, [pc, #356]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018de6:	689b      	ldr	r3, [r3, #8]
 8018de8:	4a58      	ldr	r2, [pc, #352]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	f003 0308 	and.w	r3, r3, #8
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d005      	beq.n	8018e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018dfc:	4b53      	ldr	r3, [pc, #332]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018dfe:	689b      	ldr	r3, [r3, #8]
 8018e00:	4a52      	ldr	r2, [pc, #328]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018e08:	4b50      	ldr	r3, [pc, #320]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e0a:	689b      	ldr	r3, [r3, #8]
 8018e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	689b      	ldr	r3, [r3, #8]
 8018e14:	494d      	ldr	r1, [pc, #308]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e16:	4313      	orrs	r3, r2
 8018e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	681b      	ldr	r3, [r3, #0]
 8018e1e:	f003 0301 	and.w	r3, r3, #1
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d044      	beq.n	8018eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	685b      	ldr	r3, [r3, #4]
 8018e2a:	2b01      	cmp	r3, #1
 8018e2c:	d107      	bne.n	8018e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018e2e:	4b47      	ldr	r3, [pc, #284]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d119      	bne.n	8018e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018e3a:	2301      	movs	r3, #1
 8018e3c:	e07f      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	685b      	ldr	r3, [r3, #4]
 8018e42:	2b02      	cmp	r3, #2
 8018e44:	d003      	beq.n	8018e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8018e4a:	2b03      	cmp	r3, #3
 8018e4c:	d107      	bne.n	8018e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018e4e:	4b3f      	ldr	r3, [pc, #252]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d109      	bne.n	8018e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	e06f      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018e5e:	4b3b      	ldr	r3, [pc, #236]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	f003 0302 	and.w	r3, r3, #2
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d101      	bne.n	8018e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8018e6a:	2301      	movs	r3, #1
 8018e6c:	e067      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018e6e:	4b37      	ldr	r3, [pc, #220]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e70:	689b      	ldr	r3, [r3, #8]
 8018e72:	f023 0203 	bic.w	r2, r3, #3
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	685b      	ldr	r3, [r3, #4]
 8018e7a:	4934      	ldr	r1, [pc, #208]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018e7c:	4313      	orrs	r3, r2
 8018e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8018e80:	f7fe f9b0 	bl	80171e4 <HAL_GetTick>
 8018e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e86:	e00a      	b.n	8018e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018e88:	f7fe f9ac 	bl	80171e4 <HAL_GetTick>
 8018e8c:	4602      	mov	r2, r0
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	1ad3      	subs	r3, r2, r3
 8018e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8018e96:	4293      	cmp	r3, r2
 8018e98:	d901      	bls.n	8018e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8018e9a:	2303      	movs	r3, #3
 8018e9c:	e04f      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018e9e:	4b2b      	ldr	r3, [pc, #172]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018ea0:	689b      	ldr	r3, [r3, #8]
 8018ea2:	f003 020c 	and.w	r2, r3, #12
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	685b      	ldr	r3, [r3, #4]
 8018eaa:	009b      	lsls	r3, r3, #2
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d1eb      	bne.n	8018e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8018eb0:	4b25      	ldr	r3, [pc, #148]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	f003 030f 	and.w	r3, r3, #15
 8018eb8:	683a      	ldr	r2, [r7, #0]
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d20c      	bcs.n	8018ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018ebe:	4b22      	ldr	r3, [pc, #136]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018ec0:	683a      	ldr	r2, [r7, #0]
 8018ec2:	b2d2      	uxtb	r2, r2
 8018ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8018ec6:	4b20      	ldr	r3, [pc, #128]	; (8018f48 <HAL_RCC_ClockConfig+0x1b8>)
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	f003 030f 	and.w	r3, r3, #15
 8018ece:	683a      	ldr	r2, [r7, #0]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d001      	beq.n	8018ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e032      	b.n	8018f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	f003 0304 	and.w	r3, r3, #4
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d008      	beq.n	8018ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8018ee4:	4b19      	ldr	r3, [pc, #100]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018ee6:	689b      	ldr	r3, [r3, #8]
 8018ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	68db      	ldr	r3, [r3, #12]
 8018ef0:	4916      	ldr	r1, [pc, #88]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018ef2:	4313      	orrs	r3, r2
 8018ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	f003 0308 	and.w	r3, r3, #8
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d009      	beq.n	8018f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8018f02:	4b12      	ldr	r3, [pc, #72]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018f04:	689b      	ldr	r3, [r3, #8]
 8018f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	691b      	ldr	r3, [r3, #16]
 8018f0e:	00db      	lsls	r3, r3, #3
 8018f10:	490e      	ldr	r1, [pc, #56]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018f12:	4313      	orrs	r3, r2
 8018f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8018f16:	f000 f855 	bl	8018fc4 <HAL_RCC_GetSysClockFreq>
 8018f1a:	4601      	mov	r1, r0
 8018f1c:	4b0b      	ldr	r3, [pc, #44]	; (8018f4c <HAL_RCC_ClockConfig+0x1bc>)
 8018f1e:	689b      	ldr	r3, [r3, #8]
 8018f20:	091b      	lsrs	r3, r3, #4
 8018f22:	f003 030f 	and.w	r3, r3, #15
 8018f26:	4a0a      	ldr	r2, [pc, #40]	; (8018f50 <HAL_RCC_ClockConfig+0x1c0>)
 8018f28:	5cd3      	ldrb	r3, [r2, r3]
 8018f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8018f2e:	4a09      	ldr	r2, [pc, #36]	; (8018f54 <HAL_RCC_ClockConfig+0x1c4>)
 8018f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8018f32:	4b09      	ldr	r3, [pc, #36]	; (8018f58 <HAL_RCC_ClockConfig+0x1c8>)
 8018f34:	681b      	ldr	r3, [r3, #0]
 8018f36:	4618      	mov	r0, r3
 8018f38:	f7fe f910 	bl	801715c <HAL_InitTick>

  return HAL_OK;
 8018f3c:	2300      	movs	r3, #0
}
 8018f3e:	4618      	mov	r0, r3
 8018f40:	3710      	adds	r7, #16
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
 8018f46:	bf00      	nop
 8018f48:	40023c00 	.word	0x40023c00
 8018f4c:	40023800 	.word	0x40023800
 8018f50:	08020688 	.word	0x08020688
 8018f54:	20000014 	.word	0x20000014
 8018f58:	20000018 	.word	0x20000018

08018f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8018f5c:	b480      	push	{r7}
 8018f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8018f60:	4b03      	ldr	r3, [pc, #12]	; (8018f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8018f62:	681b      	ldr	r3, [r3, #0]
}
 8018f64:	4618      	mov	r0, r3
 8018f66:	46bd      	mov	sp, r7
 8018f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6c:	4770      	bx	lr
 8018f6e:	bf00      	nop
 8018f70:	20000014 	.word	0x20000014

08018f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8018f78:	f7ff fff0 	bl	8018f5c <HAL_RCC_GetHCLKFreq>
 8018f7c:	4601      	mov	r1, r0
 8018f7e:	4b05      	ldr	r3, [pc, #20]	; (8018f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8018f80:	689b      	ldr	r3, [r3, #8]
 8018f82:	0a9b      	lsrs	r3, r3, #10
 8018f84:	f003 0307 	and.w	r3, r3, #7
 8018f88:	4a03      	ldr	r2, [pc, #12]	; (8018f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8018f8a:	5cd3      	ldrb	r3, [r2, r3]
 8018f8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8018f90:	4618      	mov	r0, r3
 8018f92:	bd80      	pop	{r7, pc}
 8018f94:	40023800 	.word	0x40023800
 8018f98:	08020698 	.word	0x08020698

08018f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8018fa0:	f7ff ffdc 	bl	8018f5c <HAL_RCC_GetHCLKFreq>
 8018fa4:	4601      	mov	r1, r0
 8018fa6:	4b05      	ldr	r3, [pc, #20]	; (8018fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8018fa8:	689b      	ldr	r3, [r3, #8]
 8018faa:	0b5b      	lsrs	r3, r3, #13
 8018fac:	f003 0307 	and.w	r3, r3, #7
 8018fb0:	4a03      	ldr	r2, [pc, #12]	; (8018fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8018fb2:	5cd3      	ldrb	r3, [r2, r3]
 8018fb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8018fb8:	4618      	mov	r0, r3
 8018fba:	bd80      	pop	{r7, pc}
 8018fbc:	40023800 	.word	0x40023800
 8018fc0:	08020698 	.word	0x08020698

08018fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8018fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018fc6:	b087      	sub	sp, #28
 8018fc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8018fd2:	2300      	movs	r3, #0
 8018fd4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8018fd6:	2300      	movs	r3, #0
 8018fd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8018fde:	4b9f      	ldr	r3, [pc, #636]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8018fe0:	689b      	ldr	r3, [r3, #8]
 8018fe2:	f003 030c 	and.w	r3, r3, #12
 8018fe6:	2b0c      	cmp	r3, #12
 8018fe8:	f200 8130 	bhi.w	801924c <HAL_RCC_GetSysClockFreq+0x288>
 8018fec:	a201      	add	r2, pc, #4	; (adr r2, 8018ff4 <HAL_RCC_GetSysClockFreq+0x30>)
 8018fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ff2:	bf00      	nop
 8018ff4:	08019029 	.word	0x08019029
 8018ff8:	0801924d 	.word	0x0801924d
 8018ffc:	0801924d 	.word	0x0801924d
 8019000:	0801924d 	.word	0x0801924d
 8019004:	0801902f 	.word	0x0801902f
 8019008:	0801924d 	.word	0x0801924d
 801900c:	0801924d 	.word	0x0801924d
 8019010:	0801924d 	.word	0x0801924d
 8019014:	08019035 	.word	0x08019035
 8019018:	0801924d 	.word	0x0801924d
 801901c:	0801924d 	.word	0x0801924d
 8019020:	0801924d 	.word	0x0801924d
 8019024:	08019143 	.word	0x08019143
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019028:	4b8d      	ldr	r3, [pc, #564]	; (8019260 <HAL_RCC_GetSysClockFreq+0x29c>)
 801902a:	613b      	str	r3, [r7, #16]
       break;
 801902c:	e111      	b.n	8019252 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801902e:	4b8d      	ldr	r3, [pc, #564]	; (8019264 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8019030:	613b      	str	r3, [r7, #16]
      break;
 8019032:	e10e      	b.n	8019252 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019034:	4b89      	ldr	r3, [pc, #548]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019036:	685b      	ldr	r3, [r3, #4]
 8019038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801903c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801903e:	4b87      	ldr	r3, [pc, #540]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019040:	685b      	ldr	r3, [r3, #4]
 8019042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019046:	2b00      	cmp	r3, #0
 8019048:	d023      	beq.n	8019092 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801904a:	4b84      	ldr	r3, [pc, #528]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 801904c:	685b      	ldr	r3, [r3, #4]
 801904e:	099b      	lsrs	r3, r3, #6
 8019050:	f04f 0400 	mov.w	r4, #0
 8019054:	f240 11ff 	movw	r1, #511	; 0x1ff
 8019058:	f04f 0200 	mov.w	r2, #0
 801905c:	ea03 0501 	and.w	r5, r3, r1
 8019060:	ea04 0602 	and.w	r6, r4, r2
 8019064:	4a7f      	ldr	r2, [pc, #508]	; (8019264 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8019066:	fb02 f106 	mul.w	r1, r2, r6
 801906a:	2200      	movs	r2, #0
 801906c:	fb02 f205 	mul.w	r2, r2, r5
 8019070:	440a      	add	r2, r1
 8019072:	497c      	ldr	r1, [pc, #496]	; (8019264 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8019074:	fba5 0101 	umull	r0, r1, r5, r1
 8019078:	1853      	adds	r3, r2, r1
 801907a:	4619      	mov	r1, r3
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	f04f 0400 	mov.w	r4, #0
 8019082:	461a      	mov	r2, r3
 8019084:	4623      	mov	r3, r4
 8019086:	f7e7 fe1f 	bl	8000cc8 <__aeabi_uldivmod>
 801908a:	4603      	mov	r3, r0
 801908c:	460c      	mov	r4, r1
 801908e:	617b      	str	r3, [r7, #20]
 8019090:	e049      	b.n	8019126 <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019092:	4b72      	ldr	r3, [pc, #456]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	099b      	lsrs	r3, r3, #6
 8019098:	f04f 0400 	mov.w	r4, #0
 801909c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80190a0:	f04f 0200 	mov.w	r2, #0
 80190a4:	ea03 0501 	and.w	r5, r3, r1
 80190a8:	ea04 0602 	and.w	r6, r4, r2
 80190ac:	4629      	mov	r1, r5
 80190ae:	4632      	mov	r2, r6
 80190b0:	f04f 0300 	mov.w	r3, #0
 80190b4:	f04f 0400 	mov.w	r4, #0
 80190b8:	0154      	lsls	r4, r2, #5
 80190ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80190be:	014b      	lsls	r3, r1, #5
 80190c0:	4619      	mov	r1, r3
 80190c2:	4622      	mov	r2, r4
 80190c4:	1b49      	subs	r1, r1, r5
 80190c6:	eb62 0206 	sbc.w	r2, r2, r6
 80190ca:	f04f 0300 	mov.w	r3, #0
 80190ce:	f04f 0400 	mov.w	r4, #0
 80190d2:	0194      	lsls	r4, r2, #6
 80190d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80190d8:	018b      	lsls	r3, r1, #6
 80190da:	1a5b      	subs	r3, r3, r1
 80190dc:	eb64 0402 	sbc.w	r4, r4, r2
 80190e0:	f04f 0100 	mov.w	r1, #0
 80190e4:	f04f 0200 	mov.w	r2, #0
 80190e8:	00e2      	lsls	r2, r4, #3
 80190ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80190ee:	00d9      	lsls	r1, r3, #3
 80190f0:	460b      	mov	r3, r1
 80190f2:	4614      	mov	r4, r2
 80190f4:	195b      	adds	r3, r3, r5
 80190f6:	eb44 0406 	adc.w	r4, r4, r6
 80190fa:	f04f 0100 	mov.w	r1, #0
 80190fe:	f04f 0200 	mov.w	r2, #0
 8019102:	02a2      	lsls	r2, r4, #10
 8019104:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8019108:	0299      	lsls	r1, r3, #10
 801910a:	460b      	mov	r3, r1
 801910c:	4614      	mov	r4, r2
 801910e:	4618      	mov	r0, r3
 8019110:	4621      	mov	r1, r4
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	f04f 0400 	mov.w	r4, #0
 8019118:	461a      	mov	r2, r3
 801911a:	4623      	mov	r3, r4
 801911c:	f7e7 fdd4 	bl	8000cc8 <__aeabi_uldivmod>
 8019120:	4603      	mov	r3, r0
 8019122:	460c      	mov	r4, r1
 8019124:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8019126:	4b4d      	ldr	r3, [pc, #308]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019128:	685b      	ldr	r3, [r3, #4]
 801912a:	0c1b      	lsrs	r3, r3, #16
 801912c:	f003 0303 	and.w	r3, r3, #3
 8019130:	3301      	adds	r3, #1
 8019132:	005b      	lsls	r3, r3, #1
 8019134:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8019136:	697a      	ldr	r2, [r7, #20]
 8019138:	68bb      	ldr	r3, [r7, #8]
 801913a:	fbb2 f3f3 	udiv	r3, r2, r3
 801913e:	613b      	str	r3, [r7, #16]
      break;
 8019140:	e087      	b.n	8019252 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019142:	4b46      	ldr	r3, [pc, #280]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019144:	685b      	ldr	r3, [r3, #4]
 8019146:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801914a:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801914c:	4b43      	ldr	r3, [pc, #268]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019154:	2b00      	cmp	r3, #0
 8019156:	d023      	beq.n	80191a0 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019158:	4b40      	ldr	r3, [pc, #256]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 801915a:	685b      	ldr	r3, [r3, #4]
 801915c:	099b      	lsrs	r3, r3, #6
 801915e:	f04f 0400 	mov.w	r4, #0
 8019162:	f240 11ff 	movw	r1, #511	; 0x1ff
 8019166:	f04f 0200 	mov.w	r2, #0
 801916a:	ea03 0501 	and.w	r5, r3, r1
 801916e:	ea04 0602 	and.w	r6, r4, r2
 8019172:	4a3c      	ldr	r2, [pc, #240]	; (8019264 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8019174:	fb02 f106 	mul.w	r1, r2, r6
 8019178:	2200      	movs	r2, #0
 801917a:	fb02 f205 	mul.w	r2, r2, r5
 801917e:	440a      	add	r2, r1
 8019180:	4938      	ldr	r1, [pc, #224]	; (8019264 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8019182:	fba5 0101 	umull	r0, r1, r5, r1
 8019186:	1853      	adds	r3, r2, r1
 8019188:	4619      	mov	r1, r3
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	f04f 0400 	mov.w	r4, #0
 8019190:	461a      	mov	r2, r3
 8019192:	4623      	mov	r3, r4
 8019194:	f7e7 fd98 	bl	8000cc8 <__aeabi_uldivmod>
 8019198:	4603      	mov	r3, r0
 801919a:	460c      	mov	r4, r1
 801919c:	617b      	str	r3, [r7, #20]
 801919e:	e049      	b.n	8019234 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80191a0:	4b2e      	ldr	r3, [pc, #184]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 80191a2:	685b      	ldr	r3, [r3, #4]
 80191a4:	099b      	lsrs	r3, r3, #6
 80191a6:	f04f 0400 	mov.w	r4, #0
 80191aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80191ae:	f04f 0200 	mov.w	r2, #0
 80191b2:	ea03 0501 	and.w	r5, r3, r1
 80191b6:	ea04 0602 	and.w	r6, r4, r2
 80191ba:	4629      	mov	r1, r5
 80191bc:	4632      	mov	r2, r6
 80191be:	f04f 0300 	mov.w	r3, #0
 80191c2:	f04f 0400 	mov.w	r4, #0
 80191c6:	0154      	lsls	r4, r2, #5
 80191c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80191cc:	014b      	lsls	r3, r1, #5
 80191ce:	4619      	mov	r1, r3
 80191d0:	4622      	mov	r2, r4
 80191d2:	1b49      	subs	r1, r1, r5
 80191d4:	eb62 0206 	sbc.w	r2, r2, r6
 80191d8:	f04f 0300 	mov.w	r3, #0
 80191dc:	f04f 0400 	mov.w	r4, #0
 80191e0:	0194      	lsls	r4, r2, #6
 80191e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80191e6:	018b      	lsls	r3, r1, #6
 80191e8:	1a5b      	subs	r3, r3, r1
 80191ea:	eb64 0402 	sbc.w	r4, r4, r2
 80191ee:	f04f 0100 	mov.w	r1, #0
 80191f2:	f04f 0200 	mov.w	r2, #0
 80191f6:	00e2      	lsls	r2, r4, #3
 80191f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80191fc:	00d9      	lsls	r1, r3, #3
 80191fe:	460b      	mov	r3, r1
 8019200:	4614      	mov	r4, r2
 8019202:	195b      	adds	r3, r3, r5
 8019204:	eb44 0406 	adc.w	r4, r4, r6
 8019208:	f04f 0100 	mov.w	r1, #0
 801920c:	f04f 0200 	mov.w	r2, #0
 8019210:	02a2      	lsls	r2, r4, #10
 8019212:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8019216:	0299      	lsls	r1, r3, #10
 8019218:	460b      	mov	r3, r1
 801921a:	4614      	mov	r4, r2
 801921c:	4618      	mov	r0, r3
 801921e:	4621      	mov	r1, r4
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	f04f 0400 	mov.w	r4, #0
 8019226:	461a      	mov	r2, r3
 8019228:	4623      	mov	r3, r4
 801922a:	f7e7 fd4d 	bl	8000cc8 <__aeabi_uldivmod>
 801922e:	4603      	mov	r3, r0
 8019230:	460c      	mov	r4, r1
 8019232:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8019234:	4b09      	ldr	r3, [pc, #36]	; (801925c <HAL_RCC_GetSysClockFreq+0x298>)
 8019236:	685b      	ldr	r3, [r3, #4]
 8019238:	0f1b      	lsrs	r3, r3, #28
 801923a:	f003 0307 	and.w	r3, r3, #7
 801923e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8019240:	697a      	ldr	r2, [r7, #20]
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	fbb2 f3f3 	udiv	r3, r2, r3
 8019248:	613b      	str	r3, [r7, #16]
      break;
 801924a:	e002      	b.n	8019252 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801924c:	4b04      	ldr	r3, [pc, #16]	; (8019260 <HAL_RCC_GetSysClockFreq+0x29c>)
 801924e:	613b      	str	r3, [r7, #16]
      break;
 8019250:	bf00      	nop
    }
  }
  return sysclockfreq;
 8019252:	693b      	ldr	r3, [r7, #16]
}
 8019254:	4618      	mov	r0, r3
 8019256:	371c      	adds	r7, #28
 8019258:	46bd      	mov	sp, r7
 801925a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801925c:	40023800 	.word	0x40023800
 8019260:	00f42400 	.word	0x00f42400
 8019264:	017d7840 	.word	0x017d7840

08019268 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b086      	sub	sp, #24
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8019270:	2300      	movs	r3, #0
 8019272:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	f003 0301 	and.w	r3, r3, #1
 801927c:	2b00      	cmp	r3, #0
 801927e:	f000 8083 	beq.w	8019388 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8019282:	4b95      	ldr	r3, [pc, #596]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019284:	689b      	ldr	r3, [r3, #8]
 8019286:	f003 030c 	and.w	r3, r3, #12
 801928a:	2b04      	cmp	r3, #4
 801928c:	d019      	beq.n	80192c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801928e:	4b92      	ldr	r3, [pc, #584]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019290:	689b      	ldr	r3, [r3, #8]
 8019292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8019296:	2b08      	cmp	r3, #8
 8019298:	d106      	bne.n	80192a8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 801929a:	4b8f      	ldr	r3, [pc, #572]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80192a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80192a6:	d00c      	beq.n	80192c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80192a8:	4b8b      	ldr	r3, [pc, #556]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192aa:	689b      	ldr	r3, [r3, #8]
 80192ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80192b0:	2b0c      	cmp	r3, #12
 80192b2:	d112      	bne.n	80192da <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80192b4:	4b88      	ldr	r3, [pc, #544]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192b6:	685b      	ldr	r3, [r3, #4]
 80192b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80192bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80192c0:	d10b      	bne.n	80192da <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80192c2:	4b85      	ldr	r3, [pc, #532]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d05b      	beq.n	8019386 <HAL_RCC_OscConfig+0x11e>
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	685b      	ldr	r3, [r3, #4]
 80192d2:	2b00      	cmp	r3, #0
 80192d4:	d157      	bne.n	8019386 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80192d6:	2301      	movs	r3, #1
 80192d8:	e216      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	685b      	ldr	r3, [r3, #4]
 80192de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80192e2:	d106      	bne.n	80192f2 <HAL_RCC_OscConfig+0x8a>
 80192e4:	4b7c      	ldr	r3, [pc, #496]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	4a7b      	ldr	r2, [pc, #492]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80192ee:	6013      	str	r3, [r2, #0]
 80192f0:	e01d      	b.n	801932e <HAL_RCC_OscConfig+0xc6>
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	685b      	ldr	r3, [r3, #4]
 80192f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80192fa:	d10c      	bne.n	8019316 <HAL_RCC_OscConfig+0xae>
 80192fc:	4b76      	ldr	r3, [pc, #472]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	4a75      	ldr	r2, [pc, #468]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019302:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8019306:	6013      	str	r3, [r2, #0]
 8019308:	4b73      	ldr	r3, [pc, #460]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	4a72      	ldr	r2, [pc, #456]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801930e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019312:	6013      	str	r3, [r2, #0]
 8019314:	e00b      	b.n	801932e <HAL_RCC_OscConfig+0xc6>
 8019316:	4b70      	ldr	r3, [pc, #448]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4a6f      	ldr	r2, [pc, #444]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801931c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019320:	6013      	str	r3, [r2, #0]
 8019322:	4b6d      	ldr	r3, [pc, #436]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	4a6c      	ldr	r2, [pc, #432]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801932c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	685b      	ldr	r3, [r3, #4]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d013      	beq.n	801935e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019336:	f7fd ff55 	bl	80171e4 <HAL_GetTick>
 801933a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801933c:	e008      	b.n	8019350 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801933e:	f7fd ff51 	bl	80171e4 <HAL_GetTick>
 8019342:	4602      	mov	r2, r0
 8019344:	693b      	ldr	r3, [r7, #16]
 8019346:	1ad3      	subs	r3, r2, r3
 8019348:	2b64      	cmp	r3, #100	; 0x64
 801934a:	d901      	bls.n	8019350 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 801934c:	2303      	movs	r3, #3
 801934e:	e1db      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019350:	4b61      	ldr	r3, [pc, #388]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019358:	2b00      	cmp	r3, #0
 801935a:	d0f0      	beq.n	801933e <HAL_RCC_OscConfig+0xd6>
 801935c:	e014      	b.n	8019388 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801935e:	f7fd ff41 	bl	80171e4 <HAL_GetTick>
 8019362:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019364:	e008      	b.n	8019378 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8019366:	f7fd ff3d 	bl	80171e4 <HAL_GetTick>
 801936a:	4602      	mov	r2, r0
 801936c:	693b      	ldr	r3, [r7, #16]
 801936e:	1ad3      	subs	r3, r2, r3
 8019370:	2b64      	cmp	r3, #100	; 0x64
 8019372:	d901      	bls.n	8019378 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8019374:	2303      	movs	r3, #3
 8019376:	e1c7      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019378:	4b57      	ldr	r3, [pc, #348]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019380:	2b00      	cmp	r3, #0
 8019382:	d1f0      	bne.n	8019366 <HAL_RCC_OscConfig+0xfe>
 8019384:	e000      	b.n	8019388 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019386:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	681b      	ldr	r3, [r3, #0]
 801938c:	f003 0302 	and.w	r3, r3, #2
 8019390:	2b00      	cmp	r3, #0
 8019392:	d06f      	beq.n	8019474 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8019394:	4b50      	ldr	r3, [pc, #320]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019396:	689b      	ldr	r3, [r3, #8]
 8019398:	f003 030c 	and.w	r3, r3, #12
 801939c:	2b00      	cmp	r3, #0
 801939e:	d017      	beq.n	80193d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80193a0:	4b4d      	ldr	r3, [pc, #308]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193a2:	689b      	ldr	r3, [r3, #8]
 80193a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80193a8:	2b08      	cmp	r3, #8
 80193aa:	d105      	bne.n	80193b8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80193ac:	4b4a      	ldr	r3, [pc, #296]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193ae:	685b      	ldr	r3, [r3, #4]
 80193b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d00b      	beq.n	80193d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80193b8:	4b47      	ldr	r3, [pc, #284]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193ba:	689b      	ldr	r3, [r3, #8]
 80193bc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80193c0:	2b0c      	cmp	r3, #12
 80193c2:	d11c      	bne.n	80193fe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80193c4:	4b44      	ldr	r3, [pc, #272]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d116      	bne.n	80193fe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80193d0:	4b41      	ldr	r3, [pc, #260]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	f003 0302 	and.w	r3, r3, #2
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d005      	beq.n	80193e8 <HAL_RCC_OscConfig+0x180>
 80193dc:	687b      	ldr	r3, [r7, #4]
 80193de:	68db      	ldr	r3, [r3, #12]
 80193e0:	2b01      	cmp	r3, #1
 80193e2:	d001      	beq.n	80193e8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80193e4:	2301      	movs	r3, #1
 80193e6:	e18f      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80193e8:	4b3b      	ldr	r3, [pc, #236]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	691b      	ldr	r3, [r3, #16]
 80193f4:	00db      	lsls	r3, r3, #3
 80193f6:	4938      	ldr	r1, [pc, #224]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80193f8:	4313      	orrs	r3, r2
 80193fa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80193fc:	e03a      	b.n	8019474 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	68db      	ldr	r3, [r3, #12]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d020      	beq.n	8019448 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8019406:	4b35      	ldr	r3, [pc, #212]	; (80194dc <HAL_RCC_OscConfig+0x274>)
 8019408:	2201      	movs	r2, #1
 801940a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801940c:	f7fd feea 	bl	80171e4 <HAL_GetTick>
 8019410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019412:	e008      	b.n	8019426 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019414:	f7fd fee6 	bl	80171e4 <HAL_GetTick>
 8019418:	4602      	mov	r2, r0
 801941a:	693b      	ldr	r3, [r7, #16]
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	2b02      	cmp	r3, #2
 8019420:	d901      	bls.n	8019426 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8019422:	2303      	movs	r3, #3
 8019424:	e170      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8019426:	4b2c      	ldr	r3, [pc, #176]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	f003 0302 	and.w	r3, r3, #2
 801942e:	2b00      	cmp	r3, #0
 8019430:	d0f0      	beq.n	8019414 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8019432:	4b29      	ldr	r3, [pc, #164]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	691b      	ldr	r3, [r3, #16]
 801943e:	00db      	lsls	r3, r3, #3
 8019440:	4925      	ldr	r1, [pc, #148]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 8019442:	4313      	orrs	r3, r2
 8019444:	600b      	str	r3, [r1, #0]
 8019446:	e015      	b.n	8019474 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8019448:	4b24      	ldr	r3, [pc, #144]	; (80194dc <HAL_RCC_OscConfig+0x274>)
 801944a:	2200      	movs	r2, #0
 801944c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801944e:	f7fd fec9 	bl	80171e4 <HAL_GetTick>
 8019452:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019454:	e008      	b.n	8019468 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8019456:	f7fd fec5 	bl	80171e4 <HAL_GetTick>
 801945a:	4602      	mov	r2, r0
 801945c:	693b      	ldr	r3, [r7, #16]
 801945e:	1ad3      	subs	r3, r2, r3
 8019460:	2b02      	cmp	r3, #2
 8019462:	d901      	bls.n	8019468 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8019464:	2303      	movs	r3, #3
 8019466:	e14f      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019468:	4b1b      	ldr	r3, [pc, #108]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	f003 0302 	and.w	r3, r3, #2
 8019470:	2b00      	cmp	r3, #0
 8019472:	d1f0      	bne.n	8019456 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	f003 0308 	and.w	r3, r3, #8
 801947c:	2b00      	cmp	r3, #0
 801947e:	d037      	beq.n	80194f0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8019480:	687b      	ldr	r3, [r7, #4]
 8019482:	695b      	ldr	r3, [r3, #20]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d016      	beq.n	80194b6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019488:	4b15      	ldr	r3, [pc, #84]	; (80194e0 <HAL_RCC_OscConfig+0x278>)
 801948a:	2201      	movs	r2, #1
 801948c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801948e:	f7fd fea9 	bl	80171e4 <HAL_GetTick>
 8019492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019494:	e008      	b.n	80194a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8019496:	f7fd fea5 	bl	80171e4 <HAL_GetTick>
 801949a:	4602      	mov	r2, r0
 801949c:	693b      	ldr	r3, [r7, #16]
 801949e:	1ad3      	subs	r3, r2, r3
 80194a0:	2b02      	cmp	r3, #2
 80194a2:	d901      	bls.n	80194a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80194a4:	2303      	movs	r3, #3
 80194a6:	e12f      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80194a8:	4b0b      	ldr	r3, [pc, #44]	; (80194d8 <HAL_RCC_OscConfig+0x270>)
 80194aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194ac:	f003 0302 	and.w	r3, r3, #2
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	d0f0      	beq.n	8019496 <HAL_RCC_OscConfig+0x22e>
 80194b4:	e01c      	b.n	80194f0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80194b6:	4b0a      	ldr	r3, [pc, #40]	; (80194e0 <HAL_RCC_OscConfig+0x278>)
 80194b8:	2200      	movs	r2, #0
 80194ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80194bc:	f7fd fe92 	bl	80171e4 <HAL_GetTick>
 80194c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80194c2:	e00f      	b.n	80194e4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80194c4:	f7fd fe8e 	bl	80171e4 <HAL_GetTick>
 80194c8:	4602      	mov	r2, r0
 80194ca:	693b      	ldr	r3, [r7, #16]
 80194cc:	1ad3      	subs	r3, r2, r3
 80194ce:	2b02      	cmp	r3, #2
 80194d0:	d908      	bls.n	80194e4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80194d2:	2303      	movs	r3, #3
 80194d4:	e118      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
 80194d6:	bf00      	nop
 80194d8:	40023800 	.word	0x40023800
 80194dc:	42470000 	.word	0x42470000
 80194e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80194e4:	4b8a      	ldr	r3, [pc, #552]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80194e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194e8:	f003 0302 	and.w	r3, r3, #2
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d1e9      	bne.n	80194c4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	f003 0304 	and.w	r3, r3, #4
 80194f8:	2b00      	cmp	r3, #0
 80194fa:	f000 8097 	beq.w	801962c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80194fe:	2300      	movs	r3, #0
 8019500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8019502:	4b83      	ldr	r3, [pc, #524]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801950a:	2b00      	cmp	r3, #0
 801950c:	d10f      	bne.n	801952e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801950e:	2300      	movs	r3, #0
 8019510:	60fb      	str	r3, [r7, #12]
 8019512:	4b7f      	ldr	r3, [pc, #508]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019516:	4a7e      	ldr	r2, [pc, #504]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801951c:	6413      	str	r3, [r2, #64]	; 0x40
 801951e:	4b7c      	ldr	r3, [pc, #496]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019526:	60fb      	str	r3, [r7, #12]
 8019528:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801952a:	2301      	movs	r3, #1
 801952c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801952e:	4b79      	ldr	r3, [pc, #484]	; (8019714 <HAL_RCC_OscConfig+0x4ac>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019536:	2b00      	cmp	r3, #0
 8019538:	d118      	bne.n	801956c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 801953a:	4b76      	ldr	r3, [pc, #472]	; (8019714 <HAL_RCC_OscConfig+0x4ac>)
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	4a75      	ldr	r2, [pc, #468]	; (8019714 <HAL_RCC_OscConfig+0x4ac>)
 8019540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8019546:	f7fd fe4d 	bl	80171e4 <HAL_GetTick>
 801954a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801954c:	e008      	b.n	8019560 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801954e:	f7fd fe49 	bl	80171e4 <HAL_GetTick>
 8019552:	4602      	mov	r2, r0
 8019554:	693b      	ldr	r3, [r7, #16]
 8019556:	1ad3      	subs	r3, r2, r3
 8019558:	2b02      	cmp	r3, #2
 801955a:	d901      	bls.n	8019560 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801955c:	2303      	movs	r3, #3
 801955e:	e0d3      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8019560:	4b6c      	ldr	r3, [pc, #432]	; (8019714 <HAL_RCC_OscConfig+0x4ac>)
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019568:	2b00      	cmp	r3, #0
 801956a:	d0f0      	beq.n	801954e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	689b      	ldr	r3, [r3, #8]
 8019570:	2b01      	cmp	r3, #1
 8019572:	d106      	bne.n	8019582 <HAL_RCC_OscConfig+0x31a>
 8019574:	4b66      	ldr	r3, [pc, #408]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019578:	4a65      	ldr	r2, [pc, #404]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 801957a:	f043 0301 	orr.w	r3, r3, #1
 801957e:	6713      	str	r3, [r2, #112]	; 0x70
 8019580:	e01c      	b.n	80195bc <HAL_RCC_OscConfig+0x354>
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	689b      	ldr	r3, [r3, #8]
 8019586:	2b05      	cmp	r3, #5
 8019588:	d10c      	bne.n	80195a4 <HAL_RCC_OscConfig+0x33c>
 801958a:	4b61      	ldr	r3, [pc, #388]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 801958c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801958e:	4a60      	ldr	r2, [pc, #384]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019590:	f043 0304 	orr.w	r3, r3, #4
 8019594:	6713      	str	r3, [r2, #112]	; 0x70
 8019596:	4b5e      	ldr	r3, [pc, #376]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801959a:	4a5d      	ldr	r2, [pc, #372]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 801959c:	f043 0301 	orr.w	r3, r3, #1
 80195a0:	6713      	str	r3, [r2, #112]	; 0x70
 80195a2:	e00b      	b.n	80195bc <HAL_RCC_OscConfig+0x354>
 80195a4:	4b5a      	ldr	r3, [pc, #360]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80195a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195a8:	4a59      	ldr	r2, [pc, #356]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80195aa:	f023 0301 	bic.w	r3, r3, #1
 80195ae:	6713      	str	r3, [r2, #112]	; 0x70
 80195b0:	4b57      	ldr	r3, [pc, #348]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80195b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195b4:	4a56      	ldr	r2, [pc, #344]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80195b6:	f023 0304 	bic.w	r3, r3, #4
 80195ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80195bc:	687b      	ldr	r3, [r7, #4]
 80195be:	689b      	ldr	r3, [r3, #8]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d015      	beq.n	80195f0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80195c4:	f7fd fe0e 	bl	80171e4 <HAL_GetTick>
 80195c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80195ca:	e00a      	b.n	80195e2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80195cc:	f7fd fe0a 	bl	80171e4 <HAL_GetTick>
 80195d0:	4602      	mov	r2, r0
 80195d2:	693b      	ldr	r3, [r7, #16]
 80195d4:	1ad3      	subs	r3, r2, r3
 80195d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80195da:	4293      	cmp	r3, r2
 80195dc:	d901      	bls.n	80195e2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80195de:	2303      	movs	r3, #3
 80195e0:	e092      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80195e2:	4b4b      	ldr	r3, [pc, #300]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80195e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195e6:	f003 0302 	and.w	r3, r3, #2
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d0ee      	beq.n	80195cc <HAL_RCC_OscConfig+0x364>
 80195ee:	e014      	b.n	801961a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80195f0:	f7fd fdf8 	bl	80171e4 <HAL_GetTick>
 80195f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80195f6:	e00a      	b.n	801960e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80195f8:	f7fd fdf4 	bl	80171e4 <HAL_GetTick>
 80195fc:	4602      	mov	r2, r0
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	1ad3      	subs	r3, r2, r3
 8019602:	f241 3288 	movw	r2, #5000	; 0x1388
 8019606:	4293      	cmp	r3, r2
 8019608:	d901      	bls.n	801960e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 801960a:	2303      	movs	r3, #3
 801960c:	e07c      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801960e:	4b40      	ldr	r3, [pc, #256]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019612:	f003 0302 	and.w	r3, r3, #2
 8019616:	2b00      	cmp	r3, #0
 8019618:	d1ee      	bne.n	80195f8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801961a:	7dfb      	ldrb	r3, [r7, #23]
 801961c:	2b01      	cmp	r3, #1
 801961e:	d105      	bne.n	801962c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8019620:	4b3b      	ldr	r3, [pc, #236]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019624:	4a3a      	ldr	r2, [pc, #232]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801962a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	699b      	ldr	r3, [r3, #24]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d068      	beq.n	8019706 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8019634:	4b36      	ldr	r3, [pc, #216]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 8019636:	689b      	ldr	r3, [r3, #8]
 8019638:	f003 030c 	and.w	r3, r3, #12
 801963c:	2b08      	cmp	r3, #8
 801963e:	d060      	beq.n	8019702 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	699b      	ldr	r3, [r3, #24]
 8019644:	2b02      	cmp	r3, #2
 8019646:	d145      	bne.n	80196d4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019648:	4b33      	ldr	r3, [pc, #204]	; (8019718 <HAL_RCC_OscConfig+0x4b0>)
 801964a:	2200      	movs	r2, #0
 801964c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801964e:	f7fd fdc9 	bl	80171e4 <HAL_GetTick>
 8019652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019654:	e008      	b.n	8019668 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8019656:	f7fd fdc5 	bl	80171e4 <HAL_GetTick>
 801965a:	4602      	mov	r2, r0
 801965c:	693b      	ldr	r3, [r7, #16]
 801965e:	1ad3      	subs	r3, r2, r3
 8019660:	2b02      	cmp	r3, #2
 8019662:	d901      	bls.n	8019668 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8019664:	2303      	movs	r3, #3
 8019666:	e04f      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019668:	4b29      	ldr	r3, [pc, #164]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019670:	2b00      	cmp	r3, #0
 8019672:	d1f0      	bne.n	8019656 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	69da      	ldr	r2, [r3, #28]
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6a1b      	ldr	r3, [r3, #32]
 801967c:	431a      	orrs	r2, r3
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019682:	019b      	lsls	r3, r3, #6
 8019684:	431a      	orrs	r2, r3
 8019686:	687b      	ldr	r3, [r7, #4]
 8019688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801968a:	085b      	lsrs	r3, r3, #1
 801968c:	3b01      	subs	r3, #1
 801968e:	041b      	lsls	r3, r3, #16
 8019690:	431a      	orrs	r2, r3
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019696:	061b      	lsls	r3, r3, #24
 8019698:	431a      	orrs	r2, r3
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801969e:	071b      	lsls	r3, r3, #28
 80196a0:	491b      	ldr	r1, [pc, #108]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80196a2:	4313      	orrs	r3, r2
 80196a4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80196a6:	4b1c      	ldr	r3, [pc, #112]	; (8019718 <HAL_RCC_OscConfig+0x4b0>)
 80196a8:	2201      	movs	r2, #1
 80196aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80196ac:	f7fd fd9a 	bl	80171e4 <HAL_GetTick>
 80196b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80196b2:	e008      	b.n	80196c6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80196b4:	f7fd fd96 	bl	80171e4 <HAL_GetTick>
 80196b8:	4602      	mov	r2, r0
 80196ba:	693b      	ldr	r3, [r7, #16]
 80196bc:	1ad3      	subs	r3, r2, r3
 80196be:	2b02      	cmp	r3, #2
 80196c0:	d901      	bls.n	80196c6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80196c2:	2303      	movs	r3, #3
 80196c4:	e020      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80196c6:	4b12      	ldr	r3, [pc, #72]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d0f0      	beq.n	80196b4 <HAL_RCC_OscConfig+0x44c>
 80196d2:	e018      	b.n	8019706 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80196d4:	4b10      	ldr	r3, [pc, #64]	; (8019718 <HAL_RCC_OscConfig+0x4b0>)
 80196d6:	2200      	movs	r2, #0
 80196d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80196da:	f7fd fd83 	bl	80171e4 <HAL_GetTick>
 80196de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80196e0:	e008      	b.n	80196f4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80196e2:	f7fd fd7f 	bl	80171e4 <HAL_GetTick>
 80196e6:	4602      	mov	r2, r0
 80196e8:	693b      	ldr	r3, [r7, #16]
 80196ea:	1ad3      	subs	r3, r2, r3
 80196ec:	2b02      	cmp	r3, #2
 80196ee:	d901      	bls.n	80196f4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80196f0:	2303      	movs	r3, #3
 80196f2:	e009      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80196f4:	4b06      	ldr	r3, [pc, #24]	; (8019710 <HAL_RCC_OscConfig+0x4a8>)
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d1f0      	bne.n	80196e2 <HAL_RCC_OscConfig+0x47a>
 8019700:	e001      	b.n	8019706 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8019702:	2301      	movs	r3, #1
 8019704:	e000      	b.n	8019708 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8019706:	2300      	movs	r3, #0
}
 8019708:	4618      	mov	r0, r3
 801970a:	3718      	adds	r7, #24
 801970c:	46bd      	mov	sp, r7
 801970e:	bd80      	pop	{r7, pc}
 8019710:	40023800 	.word	0x40023800
 8019714:	40007000 	.word	0x40007000
 8019718:	42470060 	.word	0x42470060

0801971c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b082      	sub	sp, #8
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d101      	bne.n	801972e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801972a:	2301      	movs	r3, #1
 801972c:	e056      	b.n	80197dc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	2200      	movs	r2, #0
 8019732:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801973a:	b2db      	uxtb	r3, r3
 801973c:	2b00      	cmp	r3, #0
 801973e:	d106      	bne.n	801974e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	2200      	movs	r2, #0
 8019744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f7fc fdb7 	bl	80162bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	2202      	movs	r2, #2
 8019752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	681a      	ldr	r2, [r3, #0]
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019764:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	685a      	ldr	r2, [r3, #4]
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	689b      	ldr	r3, [r3, #8]
 801976e:	431a      	orrs	r2, r3
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	68db      	ldr	r3, [r3, #12]
 8019774:	431a      	orrs	r2, r3
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	691b      	ldr	r3, [r3, #16]
 801977a:	431a      	orrs	r2, r3
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	695b      	ldr	r3, [r3, #20]
 8019780:	431a      	orrs	r2, r3
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	699b      	ldr	r3, [r3, #24]
 8019786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801978a:	431a      	orrs	r2, r3
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	69db      	ldr	r3, [r3, #28]
 8019790:	431a      	orrs	r2, r3
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a1b      	ldr	r3, [r3, #32]
 8019796:	ea42 0103 	orr.w	r1, r2, r3
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	430a      	orrs	r2, r1
 80197a4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	699b      	ldr	r3, [r3, #24]
 80197aa:	0c1b      	lsrs	r3, r3, #16
 80197ac:	f003 0104 	and.w	r1, r3, #4
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	430a      	orrs	r2, r1
 80197ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	69da      	ldr	r2, [r3, #28]
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80197ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	2200      	movs	r2, #0
 80197d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	2201      	movs	r2, #1
 80197d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80197da:	2300      	movs	r3, #0
}
 80197dc:	4618      	mov	r0, r3
 80197de:	3708      	adds	r7, #8
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bd80      	pop	{r7, pc}

080197e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b088      	sub	sp, #32
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	603b      	str	r3, [r7, #0]
 80197f0:	4613      	mov	r3, r2
 80197f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80197f4:	2300      	movs	r3, #0
 80197f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80197fe:	2b01      	cmp	r3, #1
 8019800:	d101      	bne.n	8019806 <HAL_SPI_Transmit+0x22>
 8019802:	2302      	movs	r3, #2
 8019804:	e11e      	b.n	8019a44 <HAL_SPI_Transmit+0x260>
 8019806:	68fb      	ldr	r3, [r7, #12]
 8019808:	2201      	movs	r2, #1
 801980a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801980e:	f7fd fce9 	bl	80171e4 <HAL_GetTick>
 8019812:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8019814:	88fb      	ldrh	r3, [r7, #6]
 8019816:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801981e:	b2db      	uxtb	r3, r3
 8019820:	2b01      	cmp	r3, #1
 8019822:	d002      	beq.n	801982a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8019824:	2302      	movs	r3, #2
 8019826:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019828:	e103      	b.n	8019a32 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 801982a:	68bb      	ldr	r3, [r7, #8]
 801982c:	2b00      	cmp	r3, #0
 801982e:	d002      	beq.n	8019836 <HAL_SPI_Transmit+0x52>
 8019830:	88fb      	ldrh	r3, [r7, #6]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d102      	bne.n	801983c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8019836:	2301      	movs	r3, #1
 8019838:	77fb      	strb	r3, [r7, #31]
    goto error;
 801983a:	e0fa      	b.n	8019a32 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	2203      	movs	r2, #3
 8019840:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	2200      	movs	r2, #0
 8019848:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801984a:	68fb      	ldr	r3, [r7, #12]
 801984c:	68ba      	ldr	r2, [r7, #8]
 801984e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	88fa      	ldrh	r2, [r7, #6]
 8019854:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	88fa      	ldrh	r2, [r7, #6]
 801985a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	2200      	movs	r2, #0
 8019860:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8019862:	68fb      	ldr	r3, [r7, #12]
 8019864:	2200      	movs	r2, #0
 8019866:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	2200      	movs	r2, #0
 801986c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801986e:	68fb      	ldr	r3, [r7, #12]
 8019870:	2200      	movs	r2, #0
 8019872:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	2200      	movs	r2, #0
 8019878:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	689b      	ldr	r3, [r3, #8]
 801987e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019882:	d107      	bne.n	8019894 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8019884:	68fb      	ldr	r3, [r7, #12]
 8019886:	681b      	ldr	r3, [r3, #0]
 8019888:	681a      	ldr	r2, [r3, #0]
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	681b      	ldr	r3, [r3, #0]
 801988e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019892:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801989e:	2b40      	cmp	r3, #64	; 0x40
 80198a0:	d007      	beq.n	80198b2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80198a2:	68fb      	ldr	r3, [r7, #12]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	681a      	ldr	r2, [r3, #0]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80198b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80198b2:	68fb      	ldr	r3, [r7, #12]
 80198b4:	68db      	ldr	r3, [r3, #12]
 80198b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80198ba:	d14b      	bne.n	8019954 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80198bc:	68fb      	ldr	r3, [r7, #12]
 80198be:	685b      	ldr	r3, [r3, #4]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d002      	beq.n	80198ca <HAL_SPI_Transmit+0xe6>
 80198c4:	8afb      	ldrh	r3, [r7, #22]
 80198c6:	2b01      	cmp	r3, #1
 80198c8:	d13e      	bne.n	8019948 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198ce:	881a      	ldrh	r2, [r3, #0]
 80198d0:	68fb      	ldr	r3, [r7, #12]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198da:	1c9a      	adds	r2, r3, #2
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80198e4:	b29b      	uxth	r3, r3
 80198e6:	3b01      	subs	r3, #1
 80198e8:	b29a      	uxth	r2, r3
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80198ee:	e02b      	b.n	8019948 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	689b      	ldr	r3, [r3, #8]
 80198f6:	f003 0302 	and.w	r3, r3, #2
 80198fa:	2b02      	cmp	r3, #2
 80198fc:	d112      	bne.n	8019924 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019902:	881a      	ldrh	r2, [r3, #0]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	681b      	ldr	r3, [r3, #0]
 8019908:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801990e:	1c9a      	adds	r2, r3, #2
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8019914:	68fb      	ldr	r3, [r7, #12]
 8019916:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8019918:	b29b      	uxth	r3, r3
 801991a:	3b01      	subs	r3, #1
 801991c:	b29a      	uxth	r2, r3
 801991e:	68fb      	ldr	r3, [r7, #12]
 8019920:	86da      	strh	r2, [r3, #54]	; 0x36
 8019922:	e011      	b.n	8019948 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019924:	f7fd fc5e 	bl	80171e4 <HAL_GetTick>
 8019928:	4602      	mov	r2, r0
 801992a:	69bb      	ldr	r3, [r7, #24]
 801992c:	1ad3      	subs	r3, r2, r3
 801992e:	683a      	ldr	r2, [r7, #0]
 8019930:	429a      	cmp	r2, r3
 8019932:	d803      	bhi.n	801993c <HAL_SPI_Transmit+0x158>
 8019934:	683b      	ldr	r3, [r7, #0]
 8019936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801993a:	d102      	bne.n	8019942 <HAL_SPI_Transmit+0x15e>
 801993c:	683b      	ldr	r3, [r7, #0]
 801993e:	2b00      	cmp	r3, #0
 8019940:	d102      	bne.n	8019948 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8019942:	2303      	movs	r3, #3
 8019944:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019946:	e074      	b.n	8019a32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801994c:	b29b      	uxth	r3, r3
 801994e:	2b00      	cmp	r3, #0
 8019950:	d1ce      	bne.n	80198f0 <HAL_SPI_Transmit+0x10c>
 8019952:	e04c      	b.n	80199ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	685b      	ldr	r3, [r3, #4]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d002      	beq.n	8019962 <HAL_SPI_Transmit+0x17e>
 801995c:	8afb      	ldrh	r3, [r7, #22]
 801995e:	2b01      	cmp	r3, #1
 8019960:	d140      	bne.n	80199e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	330c      	adds	r3, #12
 801996c:	7812      	ldrb	r2, [r2, #0]
 801996e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019974:	1c5a      	adds	r2, r3, #1
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801997e:	b29b      	uxth	r3, r3
 8019980:	3b01      	subs	r3, #1
 8019982:	b29a      	uxth	r2, r3
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8019988:	e02c      	b.n	80199e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801998a:	68fb      	ldr	r3, [r7, #12]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	689b      	ldr	r3, [r3, #8]
 8019990:	f003 0302 	and.w	r3, r3, #2
 8019994:	2b02      	cmp	r3, #2
 8019996:	d113      	bne.n	80199c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019998:	68fb      	ldr	r3, [r7, #12]
 801999a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	681b      	ldr	r3, [r3, #0]
 80199a0:	330c      	adds	r3, #12
 80199a2:	7812      	ldrb	r2, [r2, #0]
 80199a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199aa:	1c5a      	adds	r2, r3, #1
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80199b0:	68fb      	ldr	r3, [r7, #12]
 80199b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80199b4:	b29b      	uxth	r3, r3
 80199b6:	3b01      	subs	r3, #1
 80199b8:	b29a      	uxth	r2, r3
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80199be:	e011      	b.n	80199e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80199c0:	f7fd fc10 	bl	80171e4 <HAL_GetTick>
 80199c4:	4602      	mov	r2, r0
 80199c6:	69bb      	ldr	r3, [r7, #24]
 80199c8:	1ad3      	subs	r3, r2, r3
 80199ca:	683a      	ldr	r2, [r7, #0]
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d803      	bhi.n	80199d8 <HAL_SPI_Transmit+0x1f4>
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199d6:	d102      	bne.n	80199de <HAL_SPI_Transmit+0x1fa>
 80199d8:	683b      	ldr	r3, [r7, #0]
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d102      	bne.n	80199e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80199de:	2303      	movs	r3, #3
 80199e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80199e2:	e026      	b.n	8019a32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80199e8:	b29b      	uxth	r3, r3
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d1cd      	bne.n	801998a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80199ee:	69ba      	ldr	r2, [r7, #24]
 80199f0:	6839      	ldr	r1, [r7, #0]
 80199f2:	68f8      	ldr	r0, [r7, #12]
 80199f4:	f000 fafc 	bl	8019ff0 <SPI_EndRxTxTransaction>
 80199f8:	4603      	mov	r3, r0
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d002      	beq.n	8019a04 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	2220      	movs	r2, #32
 8019a02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8019a04:	68fb      	ldr	r3, [r7, #12]
 8019a06:	689b      	ldr	r3, [r3, #8]
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d10a      	bne.n	8019a22 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8019a0c:	2300      	movs	r3, #0
 8019a0e:	613b      	str	r3, [r7, #16]
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	68db      	ldr	r3, [r3, #12]
 8019a16:	613b      	str	r3, [r7, #16]
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	689b      	ldr	r3, [r3, #8]
 8019a1e:	613b      	str	r3, [r7, #16]
 8019a20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a26:	2b00      	cmp	r3, #0
 8019a28:	d002      	beq.n	8019a30 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	77fb      	strb	r3, [r7, #31]
 8019a2e:	e000      	b.n	8019a32 <HAL_SPI_Transmit+0x24e>
  }

error:
 8019a30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	2201      	movs	r2, #1
 8019a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	2200      	movs	r2, #0
 8019a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8019a42:	7ffb      	ldrb	r3, [r7, #31]
}
 8019a44:	4618      	mov	r0, r3
 8019a46:	3720      	adds	r7, #32
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	bd80      	pop	{r7, pc}

08019a4c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b086      	sub	sp, #24
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	60f8      	str	r0, [r7, #12]
 8019a54:	60b9      	str	r1, [r7, #8]
 8019a56:	607a      	str	r2, [r7, #4]
 8019a58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019a5a:	2300      	movs	r3, #0
 8019a5c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8019a64:	2b01      	cmp	r3, #1
 8019a66:	d101      	bne.n	8019a6c <HAL_SPI_TransmitReceive_DMA+0x20>
 8019a68:	2302      	movs	r3, #2
 8019a6a:	e0e3      	b.n	8019c34 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	2201      	movs	r2, #1
 8019a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019a7a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8019a7c:	68fb      	ldr	r3, [r7, #12]
 8019a7e:	685b      	ldr	r3, [r3, #4]
 8019a80:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8019a82:	7dbb      	ldrb	r3, [r7, #22]
 8019a84:	2b01      	cmp	r3, #1
 8019a86:	d00d      	beq.n	8019aa4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8019a88:	693b      	ldr	r3, [r7, #16]
 8019a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019a8e:	d106      	bne.n	8019a9e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	689b      	ldr	r3, [r3, #8]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d102      	bne.n	8019a9e <HAL_SPI_TransmitReceive_DMA+0x52>
 8019a98:	7dbb      	ldrb	r3, [r7, #22]
 8019a9a:	2b04      	cmp	r3, #4
 8019a9c:	d002      	beq.n	8019aa4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8019a9e:	2302      	movs	r3, #2
 8019aa0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8019aa2:	e0c2      	b.n	8019c2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8019aa4:	68bb      	ldr	r3, [r7, #8]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d005      	beq.n	8019ab6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d002      	beq.n	8019ab6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8019ab0:	887b      	ldrh	r3, [r7, #2]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d102      	bne.n	8019abc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8019aba:	e0b6      	b.n	8019c2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019ac2:	b2db      	uxtb	r3, r3
 8019ac4:	2b04      	cmp	r3, #4
 8019ac6:	d003      	beq.n	8019ad0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8019ac8:	68fb      	ldr	r3, [r7, #12]
 8019aca:	2205      	movs	r2, #5
 8019acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	2200      	movs	r2, #0
 8019ad4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	68ba      	ldr	r2, [r7, #8]
 8019ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	887a      	ldrh	r2, [r7, #2]
 8019ae0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	887a      	ldrh	r2, [r7, #2]
 8019ae6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	887a      	ldrh	r2, [r7, #2]
 8019af2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	887a      	ldrh	r2, [r7, #2]
 8019af8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	2200      	movs	r2, #0
 8019afe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	2200      	movs	r2, #0
 8019b04:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8019b06:	68fb      	ldr	r3, [r7, #12]
 8019b08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8019b0c:	b2db      	uxtb	r3, r3
 8019b0e:	2b04      	cmp	r3, #4
 8019b10:	d108      	bne.n	8019b24 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b16:	4a49      	ldr	r2, [pc, #292]	; (8019c3c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8019b18:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b1e:	4a48      	ldr	r2, [pc, #288]	; (8019c40 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8019b20:	63da      	str	r2, [r3, #60]	; 0x3c
 8019b22:	e007      	b.n	8019b34 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b28:	4a46      	ldr	r2, [pc, #280]	; (8019c44 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8019b2a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b30:	4a45      	ldr	r2, [pc, #276]	; (8019c48 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8019b32:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b38:	4a44      	ldr	r2, [pc, #272]	; (8019c4c <HAL_SPI_TransmitReceive_DMA+0x200>)
 8019b3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b40:	2200      	movs	r2, #0
 8019b42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	681b      	ldr	r3, [r3, #0]
 8019b4c:	330c      	adds	r3, #12
 8019b4e:	4619      	mov	r1, r3
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019b54:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019b5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8019b5c:	f7fe f994 	bl	8017e88 <HAL_DMA_Start_IT>
 8019b60:	4603      	mov	r3, r0
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d00c      	beq.n	8019b80 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b6a:	f043 0210 	orr.w	r2, r3, #16
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8019b72:	2301      	movs	r3, #1
 8019b74:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	2201      	movs	r2, #1
 8019b7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8019b7e:	e054      	b.n	8019c2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	685a      	ldr	r2, [r3, #4]
 8019b86:	68fb      	ldr	r3, [r7, #12]
 8019b88:	681b      	ldr	r3, [r3, #0]
 8019b8a:	f042 0201 	orr.w	r2, r2, #1
 8019b8e:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b94:	2200      	movs	r2, #0
 8019b96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8019b98:	68fb      	ldr	r3, [r7, #12]
 8019b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b9c:	2200      	movs	r2, #0
 8019b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8019ba0:	68fb      	ldr	r3, [r7, #12]
 8019ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019bac:	2200      	movs	r2, #0
 8019bae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019bb8:	4619      	mov	r1, r3
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	330c      	adds	r3, #12
 8019bc0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8019bc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8019bc8:	f7fe f95e 	bl	8017e88 <HAL_DMA_Start_IT>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d00c      	beq.n	8019bec <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bd6:	f043 0210 	orr.w	r2, r3, #16
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8019bde:	2301      	movs	r3, #1
 8019be0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	2201      	movs	r2, #1
 8019be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8019bea:	e01e      	b.n	8019c2a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019bec:	68fb      	ldr	r3, [r7, #12]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019bf6:	2b40      	cmp	r3, #64	; 0x40
 8019bf8:	d007      	beq.n	8019c0a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	681a      	ldr	r2, [r3, #0]
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019c08:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	685a      	ldr	r2, [r3, #4]
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	f042 0220 	orr.w	r2, r2, #32
 8019c18:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	685a      	ldr	r2, [r3, #4]
 8019c20:	68fb      	ldr	r3, [r7, #12]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	f042 0202 	orr.w	r2, r2, #2
 8019c28:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8019c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8019c34:	4618      	mov	r0, r3
 8019c36:	3718      	adds	r7, #24
 8019c38:	46bd      	mov	sp, r7
 8019c3a:	bd80      	pop	{r7, pc}
 8019c3c:	08019dd9 	.word	0x08019dd9
 8019c40:	08019ca1 	.word	0x08019ca1
 8019c44:	08019df5 	.word	0x08019df5
 8019c48:	08019d49 	.word	0x08019d49
 8019c4c:	08019e11 	.word	0x08019e11

08019c50 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8019c50:	b480      	push	{r7}
 8019c52:	b083      	sub	sp, #12
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8019c58:	bf00      	nop
 8019c5a:	370c      	adds	r7, #12
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c62:	4770      	bx	lr

08019c64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8019c64:	b480      	push	{r7}
 8019c66:	b083      	sub	sp, #12
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8019c6c:	bf00      	nop
 8019c6e:	370c      	adds	r7, #12
 8019c70:	46bd      	mov	sp, r7
 8019c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c76:	4770      	bx	lr

08019c78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8019c78:	b480      	push	{r7}
 8019c7a:	b083      	sub	sp, #12
 8019c7c:	af00      	add	r7, sp, #0
 8019c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8019c80:	bf00      	nop
 8019c82:	370c      	adds	r7, #12
 8019c84:	46bd      	mov	sp, r7
 8019c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8a:	4770      	bx	lr

08019c8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8019c8c:	b480      	push	{r7}
 8019c8e:	b083      	sub	sp, #12
 8019c90:	af00      	add	r7, sp, #0
 8019c92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8019c94:	bf00      	nop
 8019c96:	370c      	adds	r7, #12
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c9e:	4770      	bx	lr

08019ca0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b084      	sub	sp, #16
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019cac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019cae:	f7fd fa99 	bl	80171e4 <HAL_GetTick>
 8019cb2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	681b      	ldr	r3, [r3, #0]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019cc2:	d03b      	beq.n	8019d3c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8019cc4:	68fb      	ldr	r3, [r7, #12]
 8019cc6:	681b      	ldr	r3, [r3, #0]
 8019cc8:	685a      	ldr	r2, [r3, #4]
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	f022 0220 	bic.w	r2, r2, #32
 8019cd2:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	689b      	ldr	r3, [r3, #8]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d10d      	bne.n	8019cf8 <SPI_DMAReceiveCplt+0x58>
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019ce4:	d108      	bne.n	8019cf8 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	685a      	ldr	r2, [r3, #4]
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	f022 0203 	bic.w	r2, r2, #3
 8019cf4:	605a      	str	r2, [r3, #4]
 8019cf6:	e007      	b.n	8019d08 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8019cf8:	68fb      	ldr	r3, [r7, #12]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	685a      	ldr	r2, [r3, #4]
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	681b      	ldr	r3, [r3, #0]
 8019d02:	f022 0201 	bic.w	r2, r2, #1
 8019d06:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8019d08:	68ba      	ldr	r2, [r7, #8]
 8019d0a:	2164      	movs	r1, #100	; 0x64
 8019d0c:	68f8      	ldr	r0, [r7, #12]
 8019d0e:	f000 f909 	bl	8019f24 <SPI_EndRxTransaction>
 8019d12:	4603      	mov	r3, r0
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d002      	beq.n	8019d1e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	2220      	movs	r2, #32
 8019d1c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	2200      	movs	r2, #0
 8019d22:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	2201      	movs	r2, #1
 8019d28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019d2c:	68fb      	ldr	r3, [r7, #12]
 8019d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d003      	beq.n	8019d3c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8019d34:	68f8      	ldr	r0, [r7, #12]
 8019d36:	f7ff ffa9 	bl	8019c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8019d3a:	e002      	b.n	8019d42 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8019d3c:	68f8      	ldr	r0, [r7, #12]
 8019d3e:	f7ff ff87 	bl	8019c50 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019d42:	3710      	adds	r7, #16
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd80      	pop	{r7, pc}

08019d48 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019d48:	b580      	push	{r7, lr}
 8019d4a:	b084      	sub	sp, #16
 8019d4c:	af00      	add	r7, sp, #0
 8019d4e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019d54:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019d56:	f7fd fa45 	bl	80171e4 <HAL_GetTick>
 8019d5a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019d6a:	d02f      	beq.n	8019dcc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8019d6c:	68fb      	ldr	r3, [r7, #12]
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	685a      	ldr	r2, [r3, #4]
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	681b      	ldr	r3, [r3, #0]
 8019d76:	f022 0220 	bic.w	r2, r2, #32
 8019d7a:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8019d7c:	68ba      	ldr	r2, [r7, #8]
 8019d7e:	2164      	movs	r1, #100	; 0x64
 8019d80:	68f8      	ldr	r0, [r7, #12]
 8019d82:	f000 f935 	bl	8019ff0 <SPI_EndRxTxTransaction>
 8019d86:	4603      	mov	r3, r0
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d005      	beq.n	8019d98 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d90:	f043 0220 	orr.w	r2, r3, #32
 8019d94:	68fb      	ldr	r3, [r7, #12]
 8019d96:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8019d98:	68fb      	ldr	r3, [r7, #12]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	685a      	ldr	r2, [r3, #4]
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	f022 0203 	bic.w	r2, r2, #3
 8019da6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8019da8:	68fb      	ldr	r3, [r7, #12]
 8019daa:	2200      	movs	r2, #0
 8019dac:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8019dae:	68fb      	ldr	r3, [r7, #12]
 8019db0:	2200      	movs	r2, #0
 8019db2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8019db4:	68fb      	ldr	r3, [r7, #12]
 8019db6:	2201      	movs	r2, #1
 8019db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8019dbc:	68fb      	ldr	r3, [r7, #12]
 8019dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d003      	beq.n	8019dcc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8019dc4:	68f8      	ldr	r0, [r7, #12]
 8019dc6:	f7ff ff61 	bl	8019c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8019dca:	e002      	b.n	8019dd2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8019dcc:	68f8      	ldr	r0, [r7, #12]
 8019dce:	f7f0 fbdd 	bl	800a58c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019dd2:	3710      	adds	r7, #16
 8019dd4:	46bd      	mov	sp, r7
 8019dd6:	bd80      	pop	{r7, pc}

08019dd8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019dd8:	b580      	push	{r7, lr}
 8019dda:	b084      	sub	sp, #16
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019de4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8019de6:	68f8      	ldr	r0, [r7, #12]
 8019de8:	f7ff ff3c 	bl	8019c64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019dec:	bf00      	nop
 8019dee:	3710      	adds	r7, #16
 8019df0:	46bd      	mov	sp, r7
 8019df2:	bd80      	pop	{r7, pc}

08019df4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8019df4:	b580      	push	{r7, lr}
 8019df6:	b084      	sub	sp, #16
 8019df8:	af00      	add	r7, sp, #0
 8019dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e00:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8019e02:	68f8      	ldr	r0, [r7, #12]
 8019e04:	f7ff ff38 	bl	8019c78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019e08:	bf00      	nop
 8019e0a:	3710      	adds	r7, #16
 8019e0c:	46bd      	mov	sp, r7
 8019e0e:	bd80      	pop	{r7, pc}

08019e10 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b084      	sub	sp, #16
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e1c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	685a      	ldr	r2, [r3, #4]
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	f022 0203 	bic.w	r2, r2, #3
 8019e2c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8019e2e:	68fb      	ldr	r3, [r7, #12]
 8019e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e32:	f043 0210 	orr.w	r2, r3, #16
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8019e42:	68f8      	ldr	r0, [r7, #12]
 8019e44:	f7ff ff22 	bl	8019c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8019e48:	bf00      	nop
 8019e4a:	3710      	adds	r7, #16
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	bd80      	pop	{r7, pc}

08019e50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b084      	sub	sp, #16
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	60f8      	str	r0, [r7, #12]
 8019e58:	60b9      	str	r1, [r7, #8]
 8019e5a:	603b      	str	r3, [r7, #0]
 8019e5c:	4613      	mov	r3, r2
 8019e5e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019e60:	e04c      	b.n	8019efc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8019e62:	683b      	ldr	r3, [r7, #0]
 8019e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019e68:	d048      	beq.n	8019efc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8019e6a:	f7fd f9bb 	bl	80171e4 <HAL_GetTick>
 8019e6e:	4602      	mov	r2, r0
 8019e70:	69bb      	ldr	r3, [r7, #24]
 8019e72:	1ad3      	subs	r3, r2, r3
 8019e74:	683a      	ldr	r2, [r7, #0]
 8019e76:	429a      	cmp	r2, r3
 8019e78:	d902      	bls.n	8019e80 <SPI_WaitFlagStateUntilTimeout+0x30>
 8019e7a:	683b      	ldr	r3, [r7, #0]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d13d      	bne.n	8019efc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8019e80:	68fb      	ldr	r3, [r7, #12]
 8019e82:	681b      	ldr	r3, [r3, #0]
 8019e84:	685a      	ldr	r2, [r3, #4]
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8019e8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	685b      	ldr	r3, [r3, #4]
 8019e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019e98:	d111      	bne.n	8019ebe <SPI_WaitFlagStateUntilTimeout+0x6e>
 8019e9a:	68fb      	ldr	r3, [r7, #12]
 8019e9c:	689b      	ldr	r3, [r3, #8]
 8019e9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019ea2:	d004      	beq.n	8019eae <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	689b      	ldr	r3, [r3, #8]
 8019ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019eac:	d107      	bne.n	8019ebe <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	681a      	ldr	r2, [r3, #0]
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019ebc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8019ebe:	68fb      	ldr	r3, [r7, #12]
 8019ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019ec6:	d10f      	bne.n	8019ee8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	681a      	ldr	r2, [r3, #0]
 8019ece:	68fb      	ldr	r3, [r7, #12]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8019ed6:	601a      	str	r2, [r3, #0]
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	681a      	ldr	r2, [r3, #0]
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8019ee6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8019ee8:	68fb      	ldr	r3, [r7, #12]
 8019eea:	2201      	movs	r2, #1
 8019eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8019ef8:	2303      	movs	r3, #3
 8019efa:	e00f      	b.n	8019f1c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	689a      	ldr	r2, [r3, #8]
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	4013      	ands	r3, r2
 8019f06:	68ba      	ldr	r2, [r7, #8]
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	bf0c      	ite	eq
 8019f0c:	2301      	moveq	r3, #1
 8019f0e:	2300      	movne	r3, #0
 8019f10:	b2db      	uxtb	r3, r3
 8019f12:	461a      	mov	r2, r3
 8019f14:	79fb      	ldrb	r3, [r7, #7]
 8019f16:	429a      	cmp	r2, r3
 8019f18:	d1a3      	bne.n	8019e62 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8019f1a:	2300      	movs	r3, #0
}
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	3710      	adds	r7, #16
 8019f20:	46bd      	mov	sp, r7
 8019f22:	bd80      	pop	{r7, pc}

08019f24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b086      	sub	sp, #24
 8019f28:	af02      	add	r7, sp, #8
 8019f2a:	60f8      	str	r0, [r7, #12]
 8019f2c:	60b9      	str	r1, [r7, #8]
 8019f2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	685b      	ldr	r3, [r3, #4]
 8019f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f38:	d111      	bne.n	8019f5e <SPI_EndRxTransaction+0x3a>
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	689b      	ldr	r3, [r3, #8]
 8019f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019f42:	d004      	beq.n	8019f4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8019f44:	68fb      	ldr	r3, [r7, #12]
 8019f46:	689b      	ldr	r3, [r3, #8]
 8019f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f4c:	d107      	bne.n	8019f5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	681a      	ldr	r2, [r3, #0]
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019f5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	685b      	ldr	r3, [r3, #4]
 8019f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019f66:	d12a      	bne.n	8019fbe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8019f68:	68fb      	ldr	r3, [r7, #12]
 8019f6a:	689b      	ldr	r3, [r3, #8]
 8019f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8019f70:	d012      	beq.n	8019f98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	9300      	str	r3, [sp, #0]
 8019f76:	68bb      	ldr	r3, [r7, #8]
 8019f78:	2200      	movs	r2, #0
 8019f7a:	2180      	movs	r1, #128	; 0x80
 8019f7c:	68f8      	ldr	r0, [r7, #12]
 8019f7e:	f7ff ff67 	bl	8019e50 <SPI_WaitFlagStateUntilTimeout>
 8019f82:	4603      	mov	r3, r0
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d02d      	beq.n	8019fe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f8c:	f043 0220 	orr.w	r2, r3, #32
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8019f94:	2303      	movs	r3, #3
 8019f96:	e026      	b.n	8019fe6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	9300      	str	r3, [sp, #0]
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	2101      	movs	r1, #1
 8019fa2:	68f8      	ldr	r0, [r7, #12]
 8019fa4:	f7ff ff54 	bl	8019e50 <SPI_WaitFlagStateUntilTimeout>
 8019fa8:	4603      	mov	r3, r0
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d01a      	beq.n	8019fe4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fb2:	f043 0220 	orr.w	r2, r3, #32
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8019fba:	2303      	movs	r3, #3
 8019fbc:	e013      	b.n	8019fe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	9300      	str	r3, [sp, #0]
 8019fc2:	68bb      	ldr	r3, [r7, #8]
 8019fc4:	2200      	movs	r2, #0
 8019fc6:	2101      	movs	r1, #1
 8019fc8:	68f8      	ldr	r0, [r7, #12]
 8019fca:	f7ff ff41 	bl	8019e50 <SPI_WaitFlagStateUntilTimeout>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d007      	beq.n	8019fe4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8019fd4:	68fb      	ldr	r3, [r7, #12]
 8019fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fd8:	f043 0220 	orr.w	r2, r3, #32
 8019fdc:	68fb      	ldr	r3, [r7, #12]
 8019fde:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8019fe0:	2303      	movs	r3, #3
 8019fe2:	e000      	b.n	8019fe6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8019fe4:	2300      	movs	r3, #0
}
 8019fe6:	4618      	mov	r0, r3
 8019fe8:	3710      	adds	r7, #16
 8019fea:	46bd      	mov	sp, r7
 8019fec:	bd80      	pop	{r7, pc}
	...

08019ff0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	b088      	sub	sp, #32
 8019ff4:	af02      	add	r7, sp, #8
 8019ff6:	60f8      	str	r0, [r7, #12]
 8019ff8:	60b9      	str	r1, [r7, #8]
 8019ffa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8019ffc:	4b1b      	ldr	r3, [pc, #108]	; (801a06c <SPI_EndRxTxTransaction+0x7c>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	4a1b      	ldr	r2, [pc, #108]	; (801a070 <SPI_EndRxTxTransaction+0x80>)
 801a002:	fba2 2303 	umull	r2, r3, r2, r3
 801a006:	0d5b      	lsrs	r3, r3, #21
 801a008:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a00c:	fb02 f303 	mul.w	r3, r2, r3
 801a010:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	685b      	ldr	r3, [r3, #4]
 801a016:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a01a:	d112      	bne.n	801a042 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	9300      	str	r3, [sp, #0]
 801a020:	68bb      	ldr	r3, [r7, #8]
 801a022:	2200      	movs	r2, #0
 801a024:	2180      	movs	r1, #128	; 0x80
 801a026:	68f8      	ldr	r0, [r7, #12]
 801a028:	f7ff ff12 	bl	8019e50 <SPI_WaitFlagStateUntilTimeout>
 801a02c:	4603      	mov	r3, r0
 801a02e:	2b00      	cmp	r3, #0
 801a030:	d016      	beq.n	801a060 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a036:	f043 0220 	orr.w	r2, r3, #32
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 801a03e:	2303      	movs	r3, #3
 801a040:	e00f      	b.n	801a062 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801a042:	697b      	ldr	r3, [r7, #20]
 801a044:	2b00      	cmp	r3, #0
 801a046:	d00a      	beq.n	801a05e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801a048:	697b      	ldr	r3, [r7, #20]
 801a04a:	3b01      	subs	r3, #1
 801a04c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	689b      	ldr	r3, [r3, #8]
 801a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a058:	2b80      	cmp	r3, #128	; 0x80
 801a05a:	d0f2      	beq.n	801a042 <SPI_EndRxTxTransaction+0x52>
 801a05c:	e000      	b.n	801a060 <SPI_EndRxTxTransaction+0x70>
        break;
 801a05e:	bf00      	nop
  }

  return HAL_OK;
 801a060:	2300      	movs	r3, #0
}
 801a062:	4618      	mov	r0, r3
 801a064:	3718      	adds	r7, #24
 801a066:	46bd      	mov	sp, r7
 801a068:	bd80      	pop	{r7, pc}
 801a06a:	bf00      	nop
 801a06c:	20000014 	.word	0x20000014
 801a070:	165e9f81 	.word	0x165e9f81

0801a074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b082      	sub	sp, #8
 801a078:	af00      	add	r7, sp, #0
 801a07a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d101      	bne.n	801a086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801a082:	2301      	movs	r3, #1
 801a084:	e01d      	b.n	801a0c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a08c:	b2db      	uxtb	r3, r3
 801a08e:	2b00      	cmp	r3, #0
 801a090:	d106      	bne.n	801a0a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	2200      	movs	r2, #0
 801a096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801a09a:	6878      	ldr	r0, [r7, #4]
 801a09c:	f7fc fdee 	bl	8016c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2202      	movs	r2, #2
 801a0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	681a      	ldr	r2, [r3, #0]
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	3304      	adds	r3, #4
 801a0b0:	4619      	mov	r1, r3
 801a0b2:	4610      	mov	r0, r2
 801a0b4:	f000 fc70 	bl	801a998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2201      	movs	r2, #1
 801a0bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a0c0:	2300      	movs	r3, #0
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3708      	adds	r7, #8
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}

0801a0ca <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801a0ca:	b480      	push	{r7}
 801a0cc:	b085      	sub	sp, #20
 801a0ce:	af00      	add	r7, sp, #0
 801a0d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	68da      	ldr	r2, [r3, #12]
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f042 0201 	orr.w	r2, r2, #1
 801a0e0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	689b      	ldr	r3, [r3, #8]
 801a0e8:	f003 0307 	and.w	r3, r3, #7
 801a0ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	2b06      	cmp	r3, #6
 801a0f2:	d007      	beq.n	801a104 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	681a      	ldr	r2, [r3, #0]
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	f042 0201 	orr.w	r2, r2, #1
 801a102:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a104:	2300      	movs	r3, #0
}
 801a106:	4618      	mov	r0, r3
 801a108:	3714      	adds	r7, #20
 801a10a:	46bd      	mov	sp, r7
 801a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a110:	4770      	bx	lr

0801a112 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801a112:	b580      	push	{r7, lr}
 801a114:	b082      	sub	sp, #8
 801a116:	af00      	add	r7, sp, #0
 801a118:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d101      	bne.n	801a124 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801a120:	2301      	movs	r3, #1
 801a122:	e01d      	b.n	801a160 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a12a:	b2db      	uxtb	r3, r3
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d106      	bne.n	801a13e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2200      	movs	r2, #0
 801a134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f000 f815 	bl	801a168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	2202      	movs	r2, #2
 801a142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681a      	ldr	r2, [r3, #0]
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	3304      	adds	r3, #4
 801a14e:	4619      	mov	r1, r3
 801a150:	4610      	mov	r0, r2
 801a152:	f000 fc21 	bl	801a998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	2201      	movs	r2, #1
 801a15a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a15e:	2300      	movs	r3, #0
}
 801a160:	4618      	mov	r0, r3
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801a168:	b480      	push	{r7}
 801a16a:	b083      	sub	sp, #12
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801a170:	bf00      	nop
 801a172:	370c      	adds	r7, #12
 801a174:	46bd      	mov	sp, r7
 801a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17a:	4770      	bx	lr

0801a17c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a17c:	b580      	push	{r7, lr}
 801a17e:	b084      	sub	sp, #16
 801a180:	af00      	add	r7, sp, #0
 801a182:	6078      	str	r0, [r7, #4]
 801a184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801a186:	687b      	ldr	r3, [r7, #4]
 801a188:	681b      	ldr	r3, [r3, #0]
 801a18a:	2201      	movs	r2, #1
 801a18c:	6839      	ldr	r1, [r7, #0]
 801a18e:	4618      	mov	r0, r3
 801a190:	f000 feec 	bl	801af6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	681b      	ldr	r3, [r3, #0]
 801a198:	4a15      	ldr	r2, [pc, #84]	; (801a1f0 <HAL_TIM_PWM_Start+0x74>)
 801a19a:	4293      	cmp	r3, r2
 801a19c:	d004      	beq.n	801a1a8 <HAL_TIM_PWM_Start+0x2c>
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	4a14      	ldr	r2, [pc, #80]	; (801a1f4 <HAL_TIM_PWM_Start+0x78>)
 801a1a4:	4293      	cmp	r3, r2
 801a1a6:	d101      	bne.n	801a1ac <HAL_TIM_PWM_Start+0x30>
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	e000      	b.n	801a1ae <HAL_TIM_PWM_Start+0x32>
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d007      	beq.n	801a1c2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801a1c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	689b      	ldr	r3, [r3, #8]
 801a1c8:	f003 0307 	and.w	r3, r3, #7
 801a1cc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	2b06      	cmp	r3, #6
 801a1d2:	d007      	beq.n	801a1e4 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	681a      	ldr	r2, [r3, #0]
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f042 0201 	orr.w	r2, r2, #1
 801a1e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801a1e4:	2300      	movs	r3, #0
}
 801a1e6:	4618      	mov	r0, r3
 801a1e8:	3710      	adds	r7, #16
 801a1ea:	46bd      	mov	sp, r7
 801a1ec:	bd80      	pop	{r7, pc}
 801a1ee:	bf00      	nop
 801a1f0:	40010000 	.word	0x40010000
 801a1f4:	40010400 	.word	0x40010400

0801a1f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b082      	sub	sp, #8
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
 801a200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	2200      	movs	r2, #0
 801a208:	6839      	ldr	r1, [r7, #0]
 801a20a:	4618      	mov	r0, r3
 801a20c:	f000 feae 	bl	801af6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	4a22      	ldr	r2, [pc, #136]	; (801a2a0 <HAL_TIM_PWM_Stop+0xa8>)
 801a216:	4293      	cmp	r3, r2
 801a218:	d004      	beq.n	801a224 <HAL_TIM_PWM_Stop+0x2c>
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4a21      	ldr	r2, [pc, #132]	; (801a2a4 <HAL_TIM_PWM_Stop+0xac>)
 801a220:	4293      	cmp	r3, r2
 801a222:	d101      	bne.n	801a228 <HAL_TIM_PWM_Stop+0x30>
 801a224:	2301      	movs	r3, #1
 801a226:	e000      	b.n	801a22a <HAL_TIM_PWM_Stop+0x32>
 801a228:	2300      	movs	r3, #0
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d017      	beq.n	801a25e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	6a1a      	ldr	r2, [r3, #32]
 801a234:	f241 1311 	movw	r3, #4369	; 0x1111
 801a238:	4013      	ands	r3, r2
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d10f      	bne.n	801a25e <HAL_TIM_PWM_Stop+0x66>
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	6a1a      	ldr	r2, [r3, #32]
 801a244:	f240 4344 	movw	r3, #1092	; 0x444
 801a248:	4013      	ands	r3, r2
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d107      	bne.n	801a25e <HAL_TIM_PWM_Stop+0x66>
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801a25c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	6a1a      	ldr	r2, [r3, #32]
 801a264:	f241 1311 	movw	r3, #4369	; 0x1111
 801a268:	4013      	ands	r3, r2
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d10f      	bne.n	801a28e <HAL_TIM_PWM_Stop+0x96>
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	6a1a      	ldr	r2, [r3, #32]
 801a274:	f240 4344 	movw	r3, #1092	; 0x444
 801a278:	4013      	ands	r3, r2
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d107      	bne.n	801a28e <HAL_TIM_PWM_Stop+0x96>
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	681a      	ldr	r2, [r3, #0]
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	f022 0201 	bic.w	r2, r2, #1
 801a28c:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801a28e:	687b      	ldr	r3, [r7, #4]
 801a290:	2201      	movs	r2, #1
 801a292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801a296:	2300      	movs	r3, #0
}
 801a298:	4618      	mov	r0, r3
 801a29a:	3708      	adds	r7, #8
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}
 801a2a0:	40010000 	.word	0x40010000
 801a2a4:	40010400 	.word	0x40010400

0801a2a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 801a2a8:	b580      	push	{r7, lr}
 801a2aa:	b086      	sub	sp, #24
 801a2ac:	af00      	add	r7, sp, #0
 801a2ae:	6078      	str	r0, [r7, #4]
 801a2b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d101      	bne.n	801a2bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 801a2b8:	2301      	movs	r3, #1
 801a2ba:	e083      	b.n	801a3c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801a2c2:	b2db      	uxtb	r3, r3
 801a2c4:	2b00      	cmp	r3, #0
 801a2c6:	d106      	bne.n	801a2d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2200      	movs	r2, #0
 801a2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 801a2d0:	6878      	ldr	r0, [r7, #4]
 801a2d2:	f7fc fda7 	bl	8016e24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2202      	movs	r2, #2
 801a2da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	689b      	ldr	r3, [r3, #8]
 801a2e4:	687a      	ldr	r2, [r7, #4]
 801a2e6:	6812      	ldr	r2, [r2, #0]
 801a2e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801a2ec:	f023 0307 	bic.w	r3, r3, #7
 801a2f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	681a      	ldr	r2, [r3, #0]
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	3304      	adds	r3, #4
 801a2fa:	4619      	mov	r1, r3
 801a2fc:	4610      	mov	r0, r2
 801a2fe:	f000 fb4b 	bl	801a998 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	689b      	ldr	r3, [r3, #8]
 801a308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	699b      	ldr	r3, [r3, #24]
 801a310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	6a1b      	ldr	r3, [r3, #32]
 801a318:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	697a      	ldr	r2, [r7, #20]
 801a320:	4313      	orrs	r3, r2
 801a322:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 801a324:	693b      	ldr	r3, [r7, #16]
 801a326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801a32a:	f023 0303 	bic.w	r3, r3, #3
 801a32e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801a330:	683b      	ldr	r3, [r7, #0]
 801a332:	689a      	ldr	r2, [r3, #8]
 801a334:	683b      	ldr	r3, [r7, #0]
 801a336:	699b      	ldr	r3, [r3, #24]
 801a338:	021b      	lsls	r3, r3, #8
 801a33a:	4313      	orrs	r3, r2
 801a33c:	693a      	ldr	r2, [r7, #16]
 801a33e:	4313      	orrs	r3, r2
 801a340:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801a342:	693b      	ldr	r3, [r7, #16]
 801a344:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801a348:	f023 030c 	bic.w	r3, r3, #12
 801a34c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801a34e:	693b      	ldr	r3, [r7, #16]
 801a350:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801a354:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801a358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801a35a:	683b      	ldr	r3, [r7, #0]
 801a35c:	68da      	ldr	r2, [r3, #12]
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	69db      	ldr	r3, [r3, #28]
 801a362:	021b      	lsls	r3, r3, #8
 801a364:	4313      	orrs	r3, r2
 801a366:	693a      	ldr	r2, [r7, #16]
 801a368:	4313      	orrs	r3, r2
 801a36a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801a36c:	683b      	ldr	r3, [r7, #0]
 801a36e:	691b      	ldr	r3, [r3, #16]
 801a370:	011a      	lsls	r2, r3, #4
 801a372:	683b      	ldr	r3, [r7, #0]
 801a374:	6a1b      	ldr	r3, [r3, #32]
 801a376:	031b      	lsls	r3, r3, #12
 801a378:	4313      	orrs	r3, r2
 801a37a:	693a      	ldr	r2, [r7, #16]
 801a37c:	4313      	orrs	r3, r2
 801a37e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801a386:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801a38e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801a390:	683b      	ldr	r3, [r7, #0]
 801a392:	685a      	ldr	r2, [r3, #4]
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	695b      	ldr	r3, [r3, #20]
 801a398:	011b      	lsls	r3, r3, #4
 801a39a:	4313      	orrs	r3, r2
 801a39c:	68fa      	ldr	r2, [r7, #12]
 801a39e:	4313      	orrs	r3, r2
 801a3a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	697a      	ldr	r2, [r7, #20]
 801a3a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	693a      	ldr	r2, [r7, #16]
 801a3b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	68fa      	ldr	r2, [r7, #12]
 801a3b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	2201      	movs	r2, #1
 801a3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801a3c2:	2300      	movs	r3, #0
}
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	3718      	adds	r7, #24
 801a3c8:	46bd      	mov	sp, r7
 801a3ca:	bd80      	pop	{r7, pc}

0801a3cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b082      	sub	sp, #8
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	6078      	str	r0, [r7, #4]
 801a3d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 801a3d6:	683b      	ldr	r3, [r7, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d002      	beq.n	801a3e2 <HAL_TIM_Encoder_Start+0x16>
 801a3dc:	2b04      	cmp	r3, #4
 801a3de:	d008      	beq.n	801a3f2 <HAL_TIM_Encoder_Start+0x26>
 801a3e0:	e00f      	b.n	801a402 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	2201      	movs	r2, #1
 801a3e8:	2100      	movs	r1, #0
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	f000 fdbe 	bl	801af6c <TIM_CCxChannelCmd>
      break;
 801a3f0:	e016      	b.n	801a420 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	2201      	movs	r2, #1
 801a3f8:	2104      	movs	r1, #4
 801a3fa:	4618      	mov	r0, r3
 801a3fc:	f000 fdb6 	bl	801af6c <TIM_CCxChannelCmd>
      break;
 801a400:	e00e      	b.n	801a420 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	2201      	movs	r2, #1
 801a408:	2100      	movs	r1, #0
 801a40a:	4618      	mov	r0, r3
 801a40c:	f000 fdae 	bl	801af6c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	681b      	ldr	r3, [r3, #0]
 801a414:	2201      	movs	r2, #1
 801a416:	2104      	movs	r1, #4
 801a418:	4618      	mov	r0, r3
 801a41a:	f000 fda7 	bl	801af6c <TIM_CCxChannelCmd>
      break;
 801a41e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	681a      	ldr	r2, [r3, #0]
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	f042 0201 	orr.w	r2, r2, #1
 801a42e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801a430:	2300      	movs	r3, #0
}
 801a432:	4618      	mov	r0, r3
 801a434:	3708      	adds	r7, #8
 801a436:	46bd      	mov	sp, r7
 801a438:	bd80      	pop	{r7, pc}

0801a43a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801a43a:	b580      	push	{r7, lr}
 801a43c:	b082      	sub	sp, #8
 801a43e:	af00      	add	r7, sp, #0
 801a440:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	691b      	ldr	r3, [r3, #16]
 801a448:	f003 0302 	and.w	r3, r3, #2
 801a44c:	2b02      	cmp	r3, #2
 801a44e:	d122      	bne.n	801a496 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	68db      	ldr	r3, [r3, #12]
 801a456:	f003 0302 	and.w	r3, r3, #2
 801a45a:	2b02      	cmp	r3, #2
 801a45c:	d11b      	bne.n	801a496 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	681b      	ldr	r3, [r3, #0]
 801a462:	f06f 0202 	mvn.w	r2, #2
 801a466:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	2201      	movs	r2, #1
 801a46c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	699b      	ldr	r3, [r3, #24]
 801a474:	f003 0303 	and.w	r3, r3, #3
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d003      	beq.n	801a484 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801a47c:	6878      	ldr	r0, [r7, #4]
 801a47e:	f000 fa6c 	bl	801a95a <HAL_TIM_IC_CaptureCallback>
 801a482:	e005      	b.n	801a490 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801a484:	6878      	ldr	r0, [r7, #4]
 801a486:	f000 fa5e 	bl	801a946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a48a:	6878      	ldr	r0, [r7, #4]
 801a48c:	f000 fa6f 	bl	801a96e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	2200      	movs	r2, #0
 801a494:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	691b      	ldr	r3, [r3, #16]
 801a49c:	f003 0304 	and.w	r3, r3, #4
 801a4a0:	2b04      	cmp	r3, #4
 801a4a2:	d122      	bne.n	801a4ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	68db      	ldr	r3, [r3, #12]
 801a4aa:	f003 0304 	and.w	r3, r3, #4
 801a4ae:	2b04      	cmp	r3, #4
 801a4b0:	d11b      	bne.n	801a4ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	f06f 0204 	mvn.w	r2, #4
 801a4ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	2202      	movs	r2, #2
 801a4c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	699b      	ldr	r3, [r3, #24]
 801a4c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d003      	beq.n	801a4d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a4d0:	6878      	ldr	r0, [r7, #4]
 801a4d2:	f000 fa42 	bl	801a95a <HAL_TIM_IC_CaptureCallback>
 801a4d6:	e005      	b.n	801a4e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f000 fa34 	bl	801a946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a4de:	6878      	ldr	r0, [r7, #4]
 801a4e0:	f000 fa45 	bl	801a96e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a4e4:	687b      	ldr	r3, [r7, #4]
 801a4e6:	2200      	movs	r2, #0
 801a4e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	691b      	ldr	r3, [r3, #16]
 801a4f0:	f003 0308 	and.w	r3, r3, #8
 801a4f4:	2b08      	cmp	r3, #8
 801a4f6:	d122      	bne.n	801a53e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	68db      	ldr	r3, [r3, #12]
 801a4fe:	f003 0308 	and.w	r3, r3, #8
 801a502:	2b08      	cmp	r3, #8
 801a504:	d11b      	bne.n	801a53e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	f06f 0208 	mvn.w	r2, #8
 801a50e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	2204      	movs	r2, #4
 801a514:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	69db      	ldr	r3, [r3, #28]
 801a51c:	f003 0303 	and.w	r3, r3, #3
 801a520:	2b00      	cmp	r3, #0
 801a522:	d003      	beq.n	801a52c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a524:	6878      	ldr	r0, [r7, #4]
 801a526:	f000 fa18 	bl	801a95a <HAL_TIM_IC_CaptureCallback>
 801a52a:	e005      	b.n	801a538 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a52c:	6878      	ldr	r0, [r7, #4]
 801a52e:	f000 fa0a 	bl	801a946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a532:	6878      	ldr	r0, [r7, #4]
 801a534:	f000 fa1b 	bl	801a96e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2200      	movs	r2, #0
 801a53c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	681b      	ldr	r3, [r3, #0]
 801a542:	691b      	ldr	r3, [r3, #16]
 801a544:	f003 0310 	and.w	r3, r3, #16
 801a548:	2b10      	cmp	r3, #16
 801a54a:	d122      	bne.n	801a592 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	68db      	ldr	r3, [r3, #12]
 801a552:	f003 0310 	and.w	r3, r3, #16
 801a556:	2b10      	cmp	r3, #16
 801a558:	d11b      	bne.n	801a592 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	f06f 0210 	mvn.w	r2, #16
 801a562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	2208      	movs	r2, #8
 801a568:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	69db      	ldr	r3, [r3, #28]
 801a570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801a574:	2b00      	cmp	r3, #0
 801a576:	d003      	beq.n	801a580 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801a578:	6878      	ldr	r0, [r7, #4]
 801a57a:	f000 f9ee 	bl	801a95a <HAL_TIM_IC_CaptureCallback>
 801a57e:	e005      	b.n	801a58c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	f000 f9e0 	bl	801a946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801a586:	6878      	ldr	r0, [r7, #4]
 801a588:	f000 f9f1 	bl	801a96e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2200      	movs	r2, #0
 801a590:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	691b      	ldr	r3, [r3, #16]
 801a598:	f003 0301 	and.w	r3, r3, #1
 801a59c:	2b01      	cmp	r3, #1
 801a59e:	d10e      	bne.n	801a5be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	68db      	ldr	r3, [r3, #12]
 801a5a6:	f003 0301 	and.w	r3, r3, #1
 801a5aa:	2b01      	cmp	r3, #1
 801a5ac:	d107      	bne.n	801a5be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	681b      	ldr	r3, [r3, #0]
 801a5b2:	f06f 0201 	mvn.w	r2, #1
 801a5b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801a5b8:	6878      	ldr	r0, [r7, #4]
 801a5ba:	f7f0 fad3 	bl	800ab64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	691b      	ldr	r3, [r3, #16]
 801a5c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a5c8:	2b80      	cmp	r3, #128	; 0x80
 801a5ca:	d10e      	bne.n	801a5ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	68db      	ldr	r3, [r3, #12]
 801a5d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a5d6:	2b80      	cmp	r3, #128	; 0x80
 801a5d8:	d107      	bne.n	801a5ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801a5e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801a5e4:	6878      	ldr	r0, [r7, #4]
 801a5e6:	f000 fdbf 	bl	801b168 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	691b      	ldr	r3, [r3, #16]
 801a5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a5f4:	2b40      	cmp	r3, #64	; 0x40
 801a5f6:	d10e      	bne.n	801a616 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	68db      	ldr	r3, [r3, #12]
 801a5fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a602:	2b40      	cmp	r3, #64	; 0x40
 801a604:	d107      	bne.n	801a616 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801a606:	687b      	ldr	r3, [r7, #4]
 801a608:	681b      	ldr	r3, [r3, #0]
 801a60a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801a60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801a610:	6878      	ldr	r0, [r7, #4]
 801a612:	f000 f9b6 	bl	801a982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	691b      	ldr	r3, [r3, #16]
 801a61c:	f003 0320 	and.w	r3, r3, #32
 801a620:	2b20      	cmp	r3, #32
 801a622:	d10e      	bne.n	801a642 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	68db      	ldr	r3, [r3, #12]
 801a62a:	f003 0320 	and.w	r3, r3, #32
 801a62e:	2b20      	cmp	r3, #32
 801a630:	d107      	bne.n	801a642 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	f06f 0220 	mvn.w	r2, #32
 801a63a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801a63c:	6878      	ldr	r0, [r7, #4]
 801a63e:	f000 fd89 	bl	801b154 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801a642:	bf00      	nop
 801a644:	3708      	adds	r7, #8
 801a646:	46bd      	mov	sp, r7
 801a648:	bd80      	pop	{r7, pc}
	...

0801a64c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801a64c:	b580      	push	{r7, lr}
 801a64e:	b084      	sub	sp, #16
 801a650:	af00      	add	r7, sp, #0
 801a652:	60f8      	str	r0, [r7, #12]
 801a654:	60b9      	str	r1, [r7, #8]
 801a656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a65e:	2b01      	cmp	r3, #1
 801a660:	d101      	bne.n	801a666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 801a662:	2302      	movs	r3, #2
 801a664:	e0b4      	b.n	801a7d0 <HAL_TIM_PWM_ConfigChannel+0x184>
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	2201      	movs	r2, #1
 801a66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a66e:	68fb      	ldr	r3, [r7, #12]
 801a670:	2202      	movs	r2, #2
 801a672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	2b0c      	cmp	r3, #12
 801a67a:	f200 809f 	bhi.w	801a7bc <HAL_TIM_PWM_ConfigChannel+0x170>
 801a67e:	a201      	add	r2, pc, #4	; (adr r2, 801a684 <HAL_TIM_PWM_ConfigChannel+0x38>)
 801a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a684:	0801a6b9 	.word	0x0801a6b9
 801a688:	0801a7bd 	.word	0x0801a7bd
 801a68c:	0801a7bd 	.word	0x0801a7bd
 801a690:	0801a7bd 	.word	0x0801a7bd
 801a694:	0801a6f9 	.word	0x0801a6f9
 801a698:	0801a7bd 	.word	0x0801a7bd
 801a69c:	0801a7bd 	.word	0x0801a7bd
 801a6a0:	0801a7bd 	.word	0x0801a7bd
 801a6a4:	0801a73b 	.word	0x0801a73b
 801a6a8:	0801a7bd 	.word	0x0801a7bd
 801a6ac:	0801a7bd 	.word	0x0801a7bd
 801a6b0:	0801a7bd 	.word	0x0801a7bd
 801a6b4:	0801a77b 	.word	0x0801a77b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	68b9      	ldr	r1, [r7, #8]
 801a6be:	4618      	mov	r0, r3
 801a6c0:	f000 fa0a 	bl	801aad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801a6c4:	68fb      	ldr	r3, [r7, #12]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	699a      	ldr	r2, [r3, #24]
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	f042 0208 	orr.w	r2, r2, #8
 801a6d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801a6d4:	68fb      	ldr	r3, [r7, #12]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	699a      	ldr	r2, [r3, #24]
 801a6da:	68fb      	ldr	r3, [r7, #12]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	f022 0204 	bic.w	r2, r2, #4
 801a6e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	6999      	ldr	r1, [r3, #24]
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	691a      	ldr	r2, [r3, #16]
 801a6ee:	68fb      	ldr	r3, [r7, #12]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	430a      	orrs	r2, r1
 801a6f4:	619a      	str	r2, [r3, #24]
      break;
 801a6f6:	e062      	b.n	801a7be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801a6f8:	68fb      	ldr	r3, [r7, #12]
 801a6fa:	681b      	ldr	r3, [r3, #0]
 801a6fc:	68b9      	ldr	r1, [r7, #8]
 801a6fe:	4618      	mov	r0, r3
 801a700:	f000 fa5a 	bl	801abb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	699a      	ldr	r2, [r3, #24]
 801a70a:	68fb      	ldr	r3, [r7, #12]
 801a70c:	681b      	ldr	r3, [r3, #0]
 801a70e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	699a      	ldr	r2, [r3, #24]
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801a724:	68fb      	ldr	r3, [r7, #12]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	6999      	ldr	r1, [r3, #24]
 801a72a:	68bb      	ldr	r3, [r7, #8]
 801a72c:	691b      	ldr	r3, [r3, #16]
 801a72e:	021a      	lsls	r2, r3, #8
 801a730:	68fb      	ldr	r3, [r7, #12]
 801a732:	681b      	ldr	r3, [r3, #0]
 801a734:	430a      	orrs	r2, r1
 801a736:	619a      	str	r2, [r3, #24]
      break;
 801a738:	e041      	b.n	801a7be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801a73a:	68fb      	ldr	r3, [r7, #12]
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	68b9      	ldr	r1, [r7, #8]
 801a740:	4618      	mov	r0, r3
 801a742:	f000 faaf 	bl	801aca4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	681b      	ldr	r3, [r3, #0]
 801a74a:	69da      	ldr	r2, [r3, #28]
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	f042 0208 	orr.w	r2, r2, #8
 801a754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801a756:	68fb      	ldr	r3, [r7, #12]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	69da      	ldr	r2, [r3, #28]
 801a75c:	68fb      	ldr	r3, [r7, #12]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	f022 0204 	bic.w	r2, r2, #4
 801a764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801a766:	68fb      	ldr	r3, [r7, #12]
 801a768:	681b      	ldr	r3, [r3, #0]
 801a76a:	69d9      	ldr	r1, [r3, #28]
 801a76c:	68bb      	ldr	r3, [r7, #8]
 801a76e:	691a      	ldr	r2, [r3, #16]
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	430a      	orrs	r2, r1
 801a776:	61da      	str	r2, [r3, #28]
      break;
 801a778:	e021      	b.n	801a7be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	68b9      	ldr	r1, [r7, #8]
 801a780:	4618      	mov	r0, r3
 801a782:	f000 fb03 	bl	801ad8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	69da      	ldr	r2, [r3, #28]
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801a794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	69da      	ldr	r2, [r3, #28]
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801a7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	69d9      	ldr	r1, [r3, #28]
 801a7ac:	68bb      	ldr	r3, [r7, #8]
 801a7ae:	691b      	ldr	r3, [r3, #16]
 801a7b0:	021a      	lsls	r2, r3, #8
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	430a      	orrs	r2, r1
 801a7b8:	61da      	str	r2, [r3, #28]
      break;
 801a7ba:	e000      	b.n	801a7be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 801a7bc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 801a7be:	68fb      	ldr	r3, [r7, #12]
 801a7c0:	2201      	movs	r2, #1
 801a7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a7c6:	68fb      	ldr	r3, [r7, #12]
 801a7c8:	2200      	movs	r2, #0
 801a7ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a7ce:	2300      	movs	r3, #0
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	3710      	adds	r7, #16
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd80      	pop	{r7, pc}

0801a7d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801a7d8:	b580      	push	{r7, lr}
 801a7da:	b084      	sub	sp, #16
 801a7dc:	af00      	add	r7, sp, #0
 801a7de:	6078      	str	r0, [r7, #4]
 801a7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801a7e8:	2b01      	cmp	r3, #1
 801a7ea:	d101      	bne.n	801a7f0 <HAL_TIM_ConfigClockSource+0x18>
 801a7ec:	2302      	movs	r3, #2
 801a7ee:	e0a6      	b.n	801a93e <HAL_TIM_ConfigClockSource+0x166>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	2201      	movs	r2, #1
 801a7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	2202      	movs	r2, #2
 801a7fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	689b      	ldr	r3, [r3, #8]
 801a806:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801a80e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801a816:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	68fa      	ldr	r2, [r7, #12]
 801a81e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801a820:	683b      	ldr	r3, [r7, #0]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	2b40      	cmp	r3, #64	; 0x40
 801a826:	d067      	beq.n	801a8f8 <HAL_TIM_ConfigClockSource+0x120>
 801a828:	2b40      	cmp	r3, #64	; 0x40
 801a82a:	d80b      	bhi.n	801a844 <HAL_TIM_ConfigClockSource+0x6c>
 801a82c:	2b10      	cmp	r3, #16
 801a82e:	d073      	beq.n	801a918 <HAL_TIM_ConfigClockSource+0x140>
 801a830:	2b10      	cmp	r3, #16
 801a832:	d802      	bhi.n	801a83a <HAL_TIM_ConfigClockSource+0x62>
 801a834:	2b00      	cmp	r3, #0
 801a836:	d06f      	beq.n	801a918 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 801a838:	e078      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801a83a:	2b20      	cmp	r3, #32
 801a83c:	d06c      	beq.n	801a918 <HAL_TIM_ConfigClockSource+0x140>
 801a83e:	2b30      	cmp	r3, #48	; 0x30
 801a840:	d06a      	beq.n	801a918 <HAL_TIM_ConfigClockSource+0x140>
      break;
 801a842:	e073      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801a844:	2b70      	cmp	r3, #112	; 0x70
 801a846:	d00d      	beq.n	801a864 <HAL_TIM_ConfigClockSource+0x8c>
 801a848:	2b70      	cmp	r3, #112	; 0x70
 801a84a:	d804      	bhi.n	801a856 <HAL_TIM_ConfigClockSource+0x7e>
 801a84c:	2b50      	cmp	r3, #80	; 0x50
 801a84e:	d033      	beq.n	801a8b8 <HAL_TIM_ConfigClockSource+0xe0>
 801a850:	2b60      	cmp	r3, #96	; 0x60
 801a852:	d041      	beq.n	801a8d8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 801a854:	e06a      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 801a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a85a:	d066      	beq.n	801a92a <HAL_TIM_ConfigClockSource+0x152>
 801a85c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a860:	d017      	beq.n	801a892 <HAL_TIM_ConfigClockSource+0xba>
      break;
 801a862:	e063      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	6818      	ldr	r0, [r3, #0]
 801a868:	683b      	ldr	r3, [r7, #0]
 801a86a:	6899      	ldr	r1, [r3, #8]
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	685a      	ldr	r2, [r3, #4]
 801a870:	683b      	ldr	r3, [r7, #0]
 801a872:	68db      	ldr	r3, [r3, #12]
 801a874:	f000 fb5a 	bl	801af2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	689b      	ldr	r3, [r3, #8]
 801a87e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801a886:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	681b      	ldr	r3, [r3, #0]
 801a88c:	68fa      	ldr	r2, [r7, #12]
 801a88e:	609a      	str	r2, [r3, #8]
      break;
 801a890:	e04c      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	6818      	ldr	r0, [r3, #0]
 801a896:	683b      	ldr	r3, [r7, #0]
 801a898:	6899      	ldr	r1, [r3, #8]
 801a89a:	683b      	ldr	r3, [r7, #0]
 801a89c:	685a      	ldr	r2, [r3, #4]
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	68db      	ldr	r3, [r3, #12]
 801a8a2:	f000 fb43 	bl	801af2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	689a      	ldr	r2, [r3, #8]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a8b4:	609a      	str	r2, [r3, #8]
      break;
 801a8b6:	e039      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6818      	ldr	r0, [r3, #0]
 801a8bc:	683b      	ldr	r3, [r7, #0]
 801a8be:	6859      	ldr	r1, [r3, #4]
 801a8c0:	683b      	ldr	r3, [r7, #0]
 801a8c2:	68db      	ldr	r3, [r3, #12]
 801a8c4:	461a      	mov	r2, r3
 801a8c6:	f000 fab7 	bl	801ae38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	2150      	movs	r1, #80	; 0x50
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f000 fb10 	bl	801aef6 <TIM_ITRx_SetConfig>
      break;
 801a8d6:	e029      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6818      	ldr	r0, [r3, #0]
 801a8dc:	683b      	ldr	r3, [r7, #0]
 801a8de:	6859      	ldr	r1, [r3, #4]
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	68db      	ldr	r3, [r3, #12]
 801a8e4:	461a      	mov	r2, r3
 801a8e6:	f000 fad6 	bl	801ae96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	2160      	movs	r1, #96	; 0x60
 801a8f0:	4618      	mov	r0, r3
 801a8f2:	f000 fb00 	bl	801aef6 <TIM_ITRx_SetConfig>
      break;
 801a8f6:	e019      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	6818      	ldr	r0, [r3, #0]
 801a8fc:	683b      	ldr	r3, [r7, #0]
 801a8fe:	6859      	ldr	r1, [r3, #4]
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	68db      	ldr	r3, [r3, #12]
 801a904:	461a      	mov	r2, r3
 801a906:	f000 fa97 	bl	801ae38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	2140      	movs	r1, #64	; 0x40
 801a910:	4618      	mov	r0, r3
 801a912:	f000 faf0 	bl	801aef6 <TIM_ITRx_SetConfig>
      break;
 801a916:	e009      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681a      	ldr	r2, [r3, #0]
 801a91c:	683b      	ldr	r3, [r7, #0]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	4619      	mov	r1, r3
 801a922:	4610      	mov	r0, r2
 801a924:	f000 fae7 	bl	801aef6 <TIM_ITRx_SetConfig>
      break;
 801a928:	e000      	b.n	801a92c <HAL_TIM_ConfigClockSource+0x154>
      break;
 801a92a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	2201      	movs	r2, #1
 801a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801a934:	687b      	ldr	r3, [r7, #4]
 801a936:	2200      	movs	r2, #0
 801a938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801a93c:	2300      	movs	r3, #0
}
 801a93e:	4618      	mov	r0, r3
 801a940:	3710      	adds	r7, #16
 801a942:	46bd      	mov	sp, r7
 801a944:	bd80      	pop	{r7, pc}

0801a946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801a946:	b480      	push	{r7}
 801a948:	b083      	sub	sp, #12
 801a94a:	af00      	add	r7, sp, #0
 801a94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801a94e:	bf00      	nop
 801a950:	370c      	adds	r7, #12
 801a952:	46bd      	mov	sp, r7
 801a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a958:	4770      	bx	lr

0801a95a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801a95a:	b480      	push	{r7}
 801a95c:	b083      	sub	sp, #12
 801a95e:	af00      	add	r7, sp, #0
 801a960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801a962:	bf00      	nop
 801a964:	370c      	adds	r7, #12
 801a966:	46bd      	mov	sp, r7
 801a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96c:	4770      	bx	lr

0801a96e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801a96e:	b480      	push	{r7}
 801a970:	b083      	sub	sp, #12
 801a972:	af00      	add	r7, sp, #0
 801a974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801a976:	bf00      	nop
 801a978:	370c      	adds	r7, #12
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr

0801a982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801a982:	b480      	push	{r7}
 801a984:	b083      	sub	sp, #12
 801a986:	af00      	add	r7, sp, #0
 801a988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801a98a:	bf00      	nop
 801a98c:	370c      	adds	r7, #12
 801a98e:	46bd      	mov	sp, r7
 801a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a994:	4770      	bx	lr
	...

0801a998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801a998:	b480      	push	{r7}
 801a99a:	b085      	sub	sp, #20
 801a99c:	af00      	add	r7, sp, #0
 801a99e:	6078      	str	r0, [r7, #4]
 801a9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801a9a2:	687b      	ldr	r3, [r7, #4]
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	4a40      	ldr	r2, [pc, #256]	; (801aaac <TIM_Base_SetConfig+0x114>)
 801a9ac:	4293      	cmp	r3, r2
 801a9ae:	d013      	beq.n	801a9d8 <TIM_Base_SetConfig+0x40>
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a9b6:	d00f      	beq.n	801a9d8 <TIM_Base_SetConfig+0x40>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	4a3d      	ldr	r2, [pc, #244]	; (801aab0 <TIM_Base_SetConfig+0x118>)
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	d00b      	beq.n	801a9d8 <TIM_Base_SetConfig+0x40>
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	4a3c      	ldr	r2, [pc, #240]	; (801aab4 <TIM_Base_SetConfig+0x11c>)
 801a9c4:	4293      	cmp	r3, r2
 801a9c6:	d007      	beq.n	801a9d8 <TIM_Base_SetConfig+0x40>
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	4a3b      	ldr	r2, [pc, #236]	; (801aab8 <TIM_Base_SetConfig+0x120>)
 801a9cc:	4293      	cmp	r3, r2
 801a9ce:	d003      	beq.n	801a9d8 <TIM_Base_SetConfig+0x40>
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	4a3a      	ldr	r2, [pc, #232]	; (801aabc <TIM_Base_SetConfig+0x124>)
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	d108      	bne.n	801a9ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a9de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801a9e0:	683b      	ldr	r3, [r7, #0]
 801a9e2:	685b      	ldr	r3, [r3, #4]
 801a9e4:	68fa      	ldr	r2, [r7, #12]
 801a9e6:	4313      	orrs	r3, r2
 801a9e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	4a2f      	ldr	r2, [pc, #188]	; (801aaac <TIM_Base_SetConfig+0x114>)
 801a9ee:	4293      	cmp	r3, r2
 801a9f0:	d02b      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801a9f8:	d027      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	4a2c      	ldr	r2, [pc, #176]	; (801aab0 <TIM_Base_SetConfig+0x118>)
 801a9fe:	4293      	cmp	r3, r2
 801aa00:	d023      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	4a2b      	ldr	r2, [pc, #172]	; (801aab4 <TIM_Base_SetConfig+0x11c>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d01f      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	4a2a      	ldr	r2, [pc, #168]	; (801aab8 <TIM_Base_SetConfig+0x120>)
 801aa0e:	4293      	cmp	r3, r2
 801aa10:	d01b      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	4a29      	ldr	r2, [pc, #164]	; (801aabc <TIM_Base_SetConfig+0x124>)
 801aa16:	4293      	cmp	r3, r2
 801aa18:	d017      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	4a28      	ldr	r2, [pc, #160]	; (801aac0 <TIM_Base_SetConfig+0x128>)
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	d013      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa22:	687b      	ldr	r3, [r7, #4]
 801aa24:	4a27      	ldr	r2, [pc, #156]	; (801aac4 <TIM_Base_SetConfig+0x12c>)
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d00f      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	4a26      	ldr	r2, [pc, #152]	; (801aac8 <TIM_Base_SetConfig+0x130>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d00b      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	4a25      	ldr	r2, [pc, #148]	; (801aacc <TIM_Base_SetConfig+0x134>)
 801aa36:	4293      	cmp	r3, r2
 801aa38:	d007      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	4a24      	ldr	r2, [pc, #144]	; (801aad0 <TIM_Base_SetConfig+0x138>)
 801aa3e:	4293      	cmp	r3, r2
 801aa40:	d003      	beq.n	801aa4a <TIM_Base_SetConfig+0xb2>
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	4a23      	ldr	r2, [pc, #140]	; (801aad4 <TIM_Base_SetConfig+0x13c>)
 801aa46:	4293      	cmp	r3, r2
 801aa48:	d108      	bne.n	801aa5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801aa4a:	68fb      	ldr	r3, [r7, #12]
 801aa4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801aa50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801aa52:	683b      	ldr	r3, [r7, #0]
 801aa54:	68db      	ldr	r3, [r3, #12]
 801aa56:	68fa      	ldr	r2, [r7, #12]
 801aa58:	4313      	orrs	r3, r2
 801aa5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801aa5c:	68fb      	ldr	r3, [r7, #12]
 801aa5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	695b      	ldr	r3, [r3, #20]
 801aa66:	4313      	orrs	r3, r2
 801aa68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	68fa      	ldr	r2, [r7, #12]
 801aa6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	689a      	ldr	r2, [r3, #8]
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801aa78:	683b      	ldr	r3, [r7, #0]
 801aa7a:	681a      	ldr	r2, [r3, #0]
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	4a0a      	ldr	r2, [pc, #40]	; (801aaac <TIM_Base_SetConfig+0x114>)
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d003      	beq.n	801aa90 <TIM_Base_SetConfig+0xf8>
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	4a0c      	ldr	r2, [pc, #48]	; (801aabc <TIM_Base_SetConfig+0x124>)
 801aa8c:	4293      	cmp	r3, r2
 801aa8e:	d103      	bne.n	801aa98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801aa90:	683b      	ldr	r3, [r7, #0]
 801aa92:	691a      	ldr	r2, [r3, #16]
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2201      	movs	r2, #1
 801aa9c:	615a      	str	r2, [r3, #20]
}
 801aa9e:	bf00      	nop
 801aaa0:	3714      	adds	r7, #20
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaa8:	4770      	bx	lr
 801aaaa:	bf00      	nop
 801aaac:	40010000 	.word	0x40010000
 801aab0:	40000400 	.word	0x40000400
 801aab4:	40000800 	.word	0x40000800
 801aab8:	40000c00 	.word	0x40000c00
 801aabc:	40010400 	.word	0x40010400
 801aac0:	40014000 	.word	0x40014000
 801aac4:	40014400 	.word	0x40014400
 801aac8:	40014800 	.word	0x40014800
 801aacc:	40001800 	.word	0x40001800
 801aad0:	40001c00 	.word	0x40001c00
 801aad4:	40002000 	.word	0x40002000

0801aad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801aad8:	b480      	push	{r7}
 801aada:	b087      	sub	sp, #28
 801aadc:	af00      	add	r7, sp, #0
 801aade:	6078      	str	r0, [r7, #4]
 801aae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	6a1b      	ldr	r3, [r3, #32]
 801aae6:	f023 0201 	bic.w	r2, r3, #1
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6a1b      	ldr	r3, [r3, #32]
 801aaf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	699b      	ldr	r3, [r3, #24]
 801aafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ab00:	68fb      	ldr	r3, [r7, #12]
 801ab02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ab06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	f023 0303 	bic.w	r3, r3, #3
 801ab0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ab10:	683b      	ldr	r3, [r7, #0]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	68fa      	ldr	r2, [r7, #12]
 801ab16:	4313      	orrs	r3, r2
 801ab18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ab1a:	697b      	ldr	r3, [r7, #20]
 801ab1c:	f023 0302 	bic.w	r3, r3, #2
 801ab20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ab22:	683b      	ldr	r3, [r7, #0]
 801ab24:	689b      	ldr	r3, [r3, #8]
 801ab26:	697a      	ldr	r2, [r7, #20]
 801ab28:	4313      	orrs	r3, r2
 801ab2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	4a20      	ldr	r2, [pc, #128]	; (801abb0 <TIM_OC1_SetConfig+0xd8>)
 801ab30:	4293      	cmp	r3, r2
 801ab32:	d003      	beq.n	801ab3c <TIM_OC1_SetConfig+0x64>
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	4a1f      	ldr	r2, [pc, #124]	; (801abb4 <TIM_OC1_SetConfig+0xdc>)
 801ab38:	4293      	cmp	r3, r2
 801ab3a:	d10c      	bne.n	801ab56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801ab3c:	697b      	ldr	r3, [r7, #20]
 801ab3e:	f023 0308 	bic.w	r3, r3, #8
 801ab42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ab44:	683b      	ldr	r3, [r7, #0]
 801ab46:	68db      	ldr	r3, [r3, #12]
 801ab48:	697a      	ldr	r2, [r7, #20]
 801ab4a:	4313      	orrs	r3, r2
 801ab4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ab4e:	697b      	ldr	r3, [r7, #20]
 801ab50:	f023 0304 	bic.w	r3, r3, #4
 801ab54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	4a15      	ldr	r2, [pc, #84]	; (801abb0 <TIM_OC1_SetConfig+0xd8>)
 801ab5a:	4293      	cmp	r3, r2
 801ab5c:	d003      	beq.n	801ab66 <TIM_OC1_SetConfig+0x8e>
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	4a14      	ldr	r2, [pc, #80]	; (801abb4 <TIM_OC1_SetConfig+0xdc>)
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d111      	bne.n	801ab8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ab66:	693b      	ldr	r3, [r7, #16]
 801ab68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ab6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ab6e:	693b      	ldr	r3, [r7, #16]
 801ab70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ab74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ab76:	683b      	ldr	r3, [r7, #0]
 801ab78:	695b      	ldr	r3, [r3, #20]
 801ab7a:	693a      	ldr	r2, [r7, #16]
 801ab7c:	4313      	orrs	r3, r2
 801ab7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	699b      	ldr	r3, [r3, #24]
 801ab84:	693a      	ldr	r2, [r7, #16]
 801ab86:	4313      	orrs	r3, r2
 801ab88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	693a      	ldr	r2, [r7, #16]
 801ab8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	68fa      	ldr	r2, [r7, #12]
 801ab94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	685a      	ldr	r2, [r3, #4]
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	697a      	ldr	r2, [r7, #20]
 801aba2:	621a      	str	r2, [r3, #32]
}
 801aba4:	bf00      	nop
 801aba6:	371c      	adds	r7, #28
 801aba8:	46bd      	mov	sp, r7
 801abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abae:	4770      	bx	lr
 801abb0:	40010000 	.word	0x40010000
 801abb4:	40010400 	.word	0x40010400

0801abb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801abb8:	b480      	push	{r7}
 801abba:	b087      	sub	sp, #28
 801abbc:	af00      	add	r7, sp, #0
 801abbe:	6078      	str	r0, [r7, #4]
 801abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	6a1b      	ldr	r3, [r3, #32]
 801abc6:	f023 0210 	bic.w	r2, r3, #16
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	6a1b      	ldr	r3, [r3, #32]
 801abd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	685b      	ldr	r3, [r3, #4]
 801abd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	699b      	ldr	r3, [r3, #24]
 801abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801abe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801abee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801abf0:	683b      	ldr	r3, [r7, #0]
 801abf2:	681b      	ldr	r3, [r3, #0]
 801abf4:	021b      	lsls	r3, r3, #8
 801abf6:	68fa      	ldr	r2, [r7, #12]
 801abf8:	4313      	orrs	r3, r2
 801abfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801abfc:	697b      	ldr	r3, [r7, #20]
 801abfe:	f023 0320 	bic.w	r3, r3, #32
 801ac02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ac04:	683b      	ldr	r3, [r7, #0]
 801ac06:	689b      	ldr	r3, [r3, #8]
 801ac08:	011b      	lsls	r3, r3, #4
 801ac0a:	697a      	ldr	r2, [r7, #20]
 801ac0c:	4313      	orrs	r3, r2
 801ac0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	4a22      	ldr	r2, [pc, #136]	; (801ac9c <TIM_OC2_SetConfig+0xe4>)
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d003      	beq.n	801ac20 <TIM_OC2_SetConfig+0x68>
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	4a21      	ldr	r2, [pc, #132]	; (801aca0 <TIM_OC2_SetConfig+0xe8>)
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d10d      	bne.n	801ac3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ac20:	697b      	ldr	r3, [r7, #20]
 801ac22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ac26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ac28:	683b      	ldr	r3, [r7, #0]
 801ac2a:	68db      	ldr	r3, [r3, #12]
 801ac2c:	011b      	lsls	r3, r3, #4
 801ac2e:	697a      	ldr	r2, [r7, #20]
 801ac30:	4313      	orrs	r3, r2
 801ac32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ac34:	697b      	ldr	r3, [r7, #20]
 801ac36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ac3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	4a17      	ldr	r2, [pc, #92]	; (801ac9c <TIM_OC2_SetConfig+0xe4>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d003      	beq.n	801ac4c <TIM_OC2_SetConfig+0x94>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	4a16      	ldr	r2, [pc, #88]	; (801aca0 <TIM_OC2_SetConfig+0xe8>)
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	d113      	bne.n	801ac74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ac4c:	693b      	ldr	r3, [r7, #16]
 801ac4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ac52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ac54:	693b      	ldr	r3, [r7, #16]
 801ac56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ac5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ac5c:	683b      	ldr	r3, [r7, #0]
 801ac5e:	695b      	ldr	r3, [r3, #20]
 801ac60:	009b      	lsls	r3, r3, #2
 801ac62:	693a      	ldr	r2, [r7, #16]
 801ac64:	4313      	orrs	r3, r2
 801ac66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ac68:	683b      	ldr	r3, [r7, #0]
 801ac6a:	699b      	ldr	r3, [r3, #24]
 801ac6c:	009b      	lsls	r3, r3, #2
 801ac6e:	693a      	ldr	r2, [r7, #16]
 801ac70:	4313      	orrs	r3, r2
 801ac72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	693a      	ldr	r2, [r7, #16]
 801ac78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	68fa      	ldr	r2, [r7, #12]
 801ac7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ac80:	683b      	ldr	r3, [r7, #0]
 801ac82:	685a      	ldr	r2, [r3, #4]
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	697a      	ldr	r2, [r7, #20]
 801ac8c:	621a      	str	r2, [r3, #32]
}
 801ac8e:	bf00      	nop
 801ac90:	371c      	adds	r7, #28
 801ac92:	46bd      	mov	sp, r7
 801ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac98:	4770      	bx	lr
 801ac9a:	bf00      	nop
 801ac9c:	40010000 	.word	0x40010000
 801aca0:	40010400 	.word	0x40010400

0801aca4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801aca4:	b480      	push	{r7}
 801aca6:	b087      	sub	sp, #28
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	6078      	str	r0, [r7, #4]
 801acac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	6a1b      	ldr	r3, [r3, #32]
 801acb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	6a1b      	ldr	r3, [r3, #32]
 801acbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	69db      	ldr	r3, [r3, #28]
 801acca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801accc:	68fb      	ldr	r3, [r7, #12]
 801acce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801acd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801acd4:	68fb      	ldr	r3, [r7, #12]
 801acd6:	f023 0303 	bic.w	r3, r3, #3
 801acda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801acdc:	683b      	ldr	r3, [r7, #0]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	68fa      	ldr	r2, [r7, #12]
 801ace2:	4313      	orrs	r3, r2
 801ace4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ace6:	697b      	ldr	r3, [r7, #20]
 801ace8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801acec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	689b      	ldr	r3, [r3, #8]
 801acf2:	021b      	lsls	r3, r3, #8
 801acf4:	697a      	ldr	r2, [r7, #20]
 801acf6:	4313      	orrs	r3, r2
 801acf8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	4a21      	ldr	r2, [pc, #132]	; (801ad84 <TIM_OC3_SetConfig+0xe0>)
 801acfe:	4293      	cmp	r3, r2
 801ad00:	d003      	beq.n	801ad0a <TIM_OC3_SetConfig+0x66>
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	4a20      	ldr	r2, [pc, #128]	; (801ad88 <TIM_OC3_SetConfig+0xe4>)
 801ad06:	4293      	cmp	r3, r2
 801ad08:	d10d      	bne.n	801ad26 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ad0a:	697b      	ldr	r3, [r7, #20]
 801ad0c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ad10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ad12:	683b      	ldr	r3, [r7, #0]
 801ad14:	68db      	ldr	r3, [r3, #12]
 801ad16:	021b      	lsls	r3, r3, #8
 801ad18:	697a      	ldr	r2, [r7, #20]
 801ad1a:	4313      	orrs	r3, r2
 801ad1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ad1e:	697b      	ldr	r3, [r7, #20]
 801ad20:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ad24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ad26:	687b      	ldr	r3, [r7, #4]
 801ad28:	4a16      	ldr	r2, [pc, #88]	; (801ad84 <TIM_OC3_SetConfig+0xe0>)
 801ad2a:	4293      	cmp	r3, r2
 801ad2c:	d003      	beq.n	801ad36 <TIM_OC3_SetConfig+0x92>
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	4a15      	ldr	r2, [pc, #84]	; (801ad88 <TIM_OC3_SetConfig+0xe4>)
 801ad32:	4293      	cmp	r3, r2
 801ad34:	d113      	bne.n	801ad5e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ad36:	693b      	ldr	r3, [r7, #16]
 801ad38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ad3e:	693b      	ldr	r3, [r7, #16]
 801ad40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ad44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ad46:	683b      	ldr	r3, [r7, #0]
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	011b      	lsls	r3, r3, #4
 801ad4c:	693a      	ldr	r2, [r7, #16]
 801ad4e:	4313      	orrs	r3, r2
 801ad50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ad52:	683b      	ldr	r3, [r7, #0]
 801ad54:	699b      	ldr	r3, [r3, #24]
 801ad56:	011b      	lsls	r3, r3, #4
 801ad58:	693a      	ldr	r2, [r7, #16]
 801ad5a:	4313      	orrs	r3, r2
 801ad5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	693a      	ldr	r2, [r7, #16]
 801ad62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	68fa      	ldr	r2, [r7, #12]
 801ad68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	685a      	ldr	r2, [r3, #4]
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	697a      	ldr	r2, [r7, #20]
 801ad76:	621a      	str	r2, [r3, #32]
}
 801ad78:	bf00      	nop
 801ad7a:	371c      	adds	r7, #28
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr
 801ad84:	40010000 	.word	0x40010000
 801ad88:	40010400 	.word	0x40010400

0801ad8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ad8c:	b480      	push	{r7}
 801ad8e:	b087      	sub	sp, #28
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
 801ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	6a1b      	ldr	r3, [r3, #32]
 801ad9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	6a1b      	ldr	r3, [r3, #32]
 801ada6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	685b      	ldr	r3, [r3, #4]
 801adac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	69db      	ldr	r3, [r3, #28]
 801adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801adbc:	68fb      	ldr	r3, [r7, #12]
 801adbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801adc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801adc4:	683b      	ldr	r3, [r7, #0]
 801adc6:	681b      	ldr	r3, [r3, #0]
 801adc8:	021b      	lsls	r3, r3, #8
 801adca:	68fa      	ldr	r2, [r7, #12]
 801adcc:	4313      	orrs	r3, r2
 801adce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801add0:	693b      	ldr	r3, [r7, #16]
 801add2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801add6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801add8:	683b      	ldr	r3, [r7, #0]
 801adda:	689b      	ldr	r3, [r3, #8]
 801addc:	031b      	lsls	r3, r3, #12
 801adde:	693a      	ldr	r2, [r7, #16]
 801ade0:	4313      	orrs	r3, r2
 801ade2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	4a12      	ldr	r2, [pc, #72]	; (801ae30 <TIM_OC4_SetConfig+0xa4>)
 801ade8:	4293      	cmp	r3, r2
 801adea:	d003      	beq.n	801adf4 <TIM_OC4_SetConfig+0x68>
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	4a11      	ldr	r2, [pc, #68]	; (801ae34 <TIM_OC4_SetConfig+0xa8>)
 801adf0:	4293      	cmp	r3, r2
 801adf2:	d109      	bne.n	801ae08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801adf4:	697b      	ldr	r3, [r7, #20]
 801adf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801adfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801adfc:	683b      	ldr	r3, [r7, #0]
 801adfe:	695b      	ldr	r3, [r3, #20]
 801ae00:	019b      	lsls	r3, r3, #6
 801ae02:	697a      	ldr	r2, [r7, #20]
 801ae04:	4313      	orrs	r3, r2
 801ae06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	697a      	ldr	r2, [r7, #20]
 801ae0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	68fa      	ldr	r2, [r7, #12]
 801ae12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ae14:	683b      	ldr	r3, [r7, #0]
 801ae16:	685a      	ldr	r2, [r3, #4]
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	693a      	ldr	r2, [r7, #16]
 801ae20:	621a      	str	r2, [r3, #32]
}
 801ae22:	bf00      	nop
 801ae24:	371c      	adds	r7, #28
 801ae26:	46bd      	mov	sp, r7
 801ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae2c:	4770      	bx	lr
 801ae2e:	bf00      	nop
 801ae30:	40010000 	.word	0x40010000
 801ae34:	40010400 	.word	0x40010400

0801ae38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ae38:	b480      	push	{r7}
 801ae3a:	b087      	sub	sp, #28
 801ae3c:	af00      	add	r7, sp, #0
 801ae3e:	60f8      	str	r0, [r7, #12]
 801ae40:	60b9      	str	r1, [r7, #8]
 801ae42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	6a1b      	ldr	r3, [r3, #32]
 801ae48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	6a1b      	ldr	r3, [r3, #32]
 801ae4e:	f023 0201 	bic.w	r2, r3, #1
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	699b      	ldr	r3, [r3, #24]
 801ae5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ae5c:	693b      	ldr	r3, [r7, #16]
 801ae5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ae62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	011b      	lsls	r3, r3, #4
 801ae68:	693a      	ldr	r2, [r7, #16]
 801ae6a:	4313      	orrs	r3, r2
 801ae6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ae6e:	697b      	ldr	r3, [r7, #20]
 801ae70:	f023 030a 	bic.w	r3, r3, #10
 801ae74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ae76:	697a      	ldr	r2, [r7, #20]
 801ae78:	68bb      	ldr	r3, [r7, #8]
 801ae7a:	4313      	orrs	r3, r2
 801ae7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	693a      	ldr	r2, [r7, #16]
 801ae82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	697a      	ldr	r2, [r7, #20]
 801ae88:	621a      	str	r2, [r3, #32]
}
 801ae8a:	bf00      	nop
 801ae8c:	371c      	adds	r7, #28
 801ae8e:	46bd      	mov	sp, r7
 801ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae94:	4770      	bx	lr

0801ae96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ae96:	b480      	push	{r7}
 801ae98:	b087      	sub	sp, #28
 801ae9a:	af00      	add	r7, sp, #0
 801ae9c:	60f8      	str	r0, [r7, #12]
 801ae9e:	60b9      	str	r1, [r7, #8]
 801aea0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801aea2:	68fb      	ldr	r3, [r7, #12]
 801aea4:	6a1b      	ldr	r3, [r3, #32]
 801aea6:	f023 0210 	bic.w	r2, r3, #16
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	699b      	ldr	r3, [r3, #24]
 801aeb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	6a1b      	ldr	r3, [r3, #32]
 801aeb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801aeba:	697b      	ldr	r3, [r7, #20]
 801aebc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801aec0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	031b      	lsls	r3, r3, #12
 801aec6:	697a      	ldr	r2, [r7, #20]
 801aec8:	4313      	orrs	r3, r2
 801aeca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801aed2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801aed4:	68bb      	ldr	r3, [r7, #8]
 801aed6:	011b      	lsls	r3, r3, #4
 801aed8:	693a      	ldr	r2, [r7, #16]
 801aeda:	4313      	orrs	r3, r2
 801aedc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801aede:	68fb      	ldr	r3, [r7, #12]
 801aee0:	697a      	ldr	r2, [r7, #20]
 801aee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801aee4:	68fb      	ldr	r3, [r7, #12]
 801aee6:	693a      	ldr	r2, [r7, #16]
 801aee8:	621a      	str	r2, [r3, #32]
}
 801aeea:	bf00      	nop
 801aeec:	371c      	adds	r7, #28
 801aeee:	46bd      	mov	sp, r7
 801aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef4:	4770      	bx	lr

0801aef6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801aef6:	b480      	push	{r7}
 801aef8:	b085      	sub	sp, #20
 801aefa:	af00      	add	r7, sp, #0
 801aefc:	6078      	str	r0, [r7, #4]
 801aefe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	689b      	ldr	r3, [r3, #8]
 801af04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801af06:	68fb      	ldr	r3, [r7, #12]
 801af08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801af0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801af0e:	683a      	ldr	r2, [r7, #0]
 801af10:	68fb      	ldr	r3, [r7, #12]
 801af12:	4313      	orrs	r3, r2
 801af14:	f043 0307 	orr.w	r3, r3, #7
 801af18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	68fa      	ldr	r2, [r7, #12]
 801af1e:	609a      	str	r2, [r3, #8]
}
 801af20:	bf00      	nop
 801af22:	3714      	adds	r7, #20
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801af2c:	b480      	push	{r7}
 801af2e:	b087      	sub	sp, #28
 801af30:	af00      	add	r7, sp, #0
 801af32:	60f8      	str	r0, [r7, #12]
 801af34:	60b9      	str	r1, [r7, #8]
 801af36:	607a      	str	r2, [r7, #4]
 801af38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801af3a:	68fb      	ldr	r3, [r7, #12]
 801af3c:	689b      	ldr	r3, [r3, #8]
 801af3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801af46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801af48:	683b      	ldr	r3, [r7, #0]
 801af4a:	021a      	lsls	r2, r3, #8
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	431a      	orrs	r2, r3
 801af50:	68bb      	ldr	r3, [r7, #8]
 801af52:	4313      	orrs	r3, r2
 801af54:	697a      	ldr	r2, [r7, #20]
 801af56:	4313      	orrs	r3, r2
 801af58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	697a      	ldr	r2, [r7, #20]
 801af5e:	609a      	str	r2, [r3, #8]
}
 801af60:	bf00      	nop
 801af62:	371c      	adds	r7, #28
 801af64:	46bd      	mov	sp, r7
 801af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af6a:	4770      	bx	lr

0801af6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801af6c:	b480      	push	{r7}
 801af6e:	b087      	sub	sp, #28
 801af70:	af00      	add	r7, sp, #0
 801af72:	60f8      	str	r0, [r7, #12]
 801af74:	60b9      	str	r1, [r7, #8]
 801af76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	f003 031f 	and.w	r3, r3, #31
 801af7e:	2201      	movs	r2, #1
 801af80:	fa02 f303 	lsl.w	r3, r2, r3
 801af84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	6a1a      	ldr	r2, [r3, #32]
 801af8a:	697b      	ldr	r3, [r7, #20]
 801af8c:	43db      	mvns	r3, r3
 801af8e:	401a      	ands	r2, r3
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	6a1a      	ldr	r2, [r3, #32]
 801af98:	68bb      	ldr	r3, [r7, #8]
 801af9a:	f003 031f 	and.w	r3, r3, #31
 801af9e:	6879      	ldr	r1, [r7, #4]
 801afa0:	fa01 f303 	lsl.w	r3, r1, r3
 801afa4:	431a      	orrs	r2, r3
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	621a      	str	r2, [r3, #32]
}
 801afaa:	bf00      	nop
 801afac:	371c      	adds	r7, #28
 801afae:	46bd      	mov	sp, r7
 801afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb4:	4770      	bx	lr
	...

0801afb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801afb8:	b480      	push	{r7}
 801afba:	b085      	sub	sp, #20
 801afbc:	af00      	add	r7, sp, #0
 801afbe:	6078      	str	r0, [r7, #4]
 801afc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801afc8:	2b01      	cmp	r3, #1
 801afca:	d101      	bne.n	801afd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801afcc:	2302      	movs	r3, #2
 801afce:	e05a      	b.n	801b086 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	2201      	movs	r2, #1
 801afd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	2202      	movs	r2, #2
 801afdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	685b      	ldr	r3, [r3, #4]
 801afe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	681b      	ldr	r3, [r3, #0]
 801afec:	689b      	ldr	r3, [r3, #8]
 801afee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801aff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801aff8:	683b      	ldr	r3, [r7, #0]
 801affa:	681b      	ldr	r3, [r3, #0]
 801affc:	68fa      	ldr	r2, [r7, #12]
 801affe:	4313      	orrs	r3, r2
 801b000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	68fa      	ldr	r2, [r7, #12]
 801b008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	4a21      	ldr	r2, [pc, #132]	; (801b094 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 801b010:	4293      	cmp	r3, r2
 801b012:	d022      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801b01c:	d01d      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4a1d      	ldr	r2, [pc, #116]	; (801b098 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 801b024:	4293      	cmp	r3, r2
 801b026:	d018      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4a1b      	ldr	r2, [pc, #108]	; (801b09c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801b02e:	4293      	cmp	r3, r2
 801b030:	d013      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	4a1a      	ldr	r2, [pc, #104]	; (801b0a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801b038:	4293      	cmp	r3, r2
 801b03a:	d00e      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	4a18      	ldr	r2, [pc, #96]	; (801b0a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801b042:	4293      	cmp	r3, r2
 801b044:	d009      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4a17      	ldr	r2, [pc, #92]	; (801b0a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 801b04c:	4293      	cmp	r3, r2
 801b04e:	d004      	beq.n	801b05a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	4a15      	ldr	r2, [pc, #84]	; (801b0ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d10c      	bne.n	801b074 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801b05a:	68bb      	ldr	r3, [r7, #8]
 801b05c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b060:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801b062:	683b      	ldr	r3, [r7, #0]
 801b064:	685b      	ldr	r3, [r3, #4]
 801b066:	68ba      	ldr	r2, [r7, #8]
 801b068:	4313      	orrs	r3, r2
 801b06a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801b06c:	687b      	ldr	r3, [r7, #4]
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	68ba      	ldr	r2, [r7, #8]
 801b072:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	2201      	movs	r2, #1
 801b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2200      	movs	r2, #0
 801b080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b084:	2300      	movs	r3, #0
}
 801b086:	4618      	mov	r0, r3
 801b088:	3714      	adds	r7, #20
 801b08a:	46bd      	mov	sp, r7
 801b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b090:	4770      	bx	lr
 801b092:	bf00      	nop
 801b094:	40010000 	.word	0x40010000
 801b098:	40000400 	.word	0x40000400
 801b09c:	40000800 	.word	0x40000800
 801b0a0:	40000c00 	.word	0x40000c00
 801b0a4:	40010400 	.word	0x40010400
 801b0a8:	40014000 	.word	0x40014000
 801b0ac:	40001800 	.word	0x40001800

0801b0b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801b0b0:	b480      	push	{r7}
 801b0b2:	b085      	sub	sp, #20
 801b0b4:	af00      	add	r7, sp, #0
 801b0b6:	6078      	str	r0, [r7, #4]
 801b0b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801b0be:	687b      	ldr	r3, [r7, #4]
 801b0c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801b0c4:	2b01      	cmp	r3, #1
 801b0c6:	d101      	bne.n	801b0cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801b0c8:	2302      	movs	r3, #2
 801b0ca:	e03d      	b.n	801b148 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	2201      	movs	r2, #1
 801b0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801b0da:	683b      	ldr	r3, [r7, #0]
 801b0dc:	68db      	ldr	r3, [r3, #12]
 801b0de:	4313      	orrs	r3, r2
 801b0e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b0e8:	683b      	ldr	r3, [r7, #0]
 801b0ea:	689b      	ldr	r3, [r3, #8]
 801b0ec:	4313      	orrs	r3, r2
 801b0ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801b0f0:	68fb      	ldr	r3, [r7, #12]
 801b0f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801b0f6:	683b      	ldr	r3, [r7, #0]
 801b0f8:	685b      	ldr	r3, [r3, #4]
 801b0fa:	4313      	orrs	r3, r2
 801b0fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801b0fe:	68fb      	ldr	r3, [r7, #12]
 801b100:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801b104:	683b      	ldr	r3, [r7, #0]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4313      	orrs	r3, r2
 801b10a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801b10c:	68fb      	ldr	r3, [r7, #12]
 801b10e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801b112:	683b      	ldr	r3, [r7, #0]
 801b114:	691b      	ldr	r3, [r3, #16]
 801b116:	4313      	orrs	r3, r2
 801b118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801b120:	683b      	ldr	r3, [r7, #0]
 801b122:	695b      	ldr	r3, [r3, #20]
 801b124:	4313      	orrs	r3, r2
 801b126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801b12e:	683b      	ldr	r3, [r7, #0]
 801b130:	69db      	ldr	r3, [r3, #28]
 801b132:	4313      	orrs	r3, r2
 801b134:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	68fa      	ldr	r2, [r7, #12]
 801b13c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	2200      	movs	r2, #0
 801b142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801b146:	2300      	movs	r3, #0
}
 801b148:	4618      	mov	r0, r3
 801b14a:	3714      	adds	r7, #20
 801b14c:	46bd      	mov	sp, r7
 801b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b152:	4770      	bx	lr

0801b154 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801b154:	b480      	push	{r7}
 801b156:	b083      	sub	sp, #12
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801b15c:	bf00      	nop
 801b15e:	370c      	adds	r7, #12
 801b160:	46bd      	mov	sp, r7
 801b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b166:	4770      	bx	lr

0801b168 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801b168:	b480      	push	{r7}
 801b16a:	b083      	sub	sp, #12
 801b16c:	af00      	add	r7, sp, #0
 801b16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801b170:	bf00      	nop
 801b172:	370c      	adds	r7, #12
 801b174:	46bd      	mov	sp, r7
 801b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b17a:	4770      	bx	lr

0801b17c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b082      	sub	sp, #8
 801b180:	af00      	add	r7, sp, #0
 801b182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b184:	687b      	ldr	r3, [r7, #4]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d101      	bne.n	801b18e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b18a:	2301      	movs	r3, #1
 801b18c:	e03f      	b.n	801b20e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b194:	b2db      	uxtb	r3, r3
 801b196:	2b00      	cmp	r3, #0
 801b198:	d106      	bne.n	801b1a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2200      	movs	r2, #0
 801b19e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801b1a2:	6878      	ldr	r0, [r7, #4]
 801b1a4:	f7fb ff46 	bl	8017034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	2224      	movs	r2, #36	; 0x24
 801b1ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	68da      	ldr	r2, [r3, #12]
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	681b      	ldr	r3, [r3, #0]
 801b1ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801b1be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 801b1c0:	6878      	ldr	r0, [r7, #4]
 801b1c2:	f000 f90b 	bl	801b3dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	691a      	ldr	r2, [r3, #16]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b1d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	695a      	ldr	r2, [r3, #20]
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b1e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	68da      	ldr	r2, [r3, #12]
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801b1f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	2220      	movs	r2, #32
 801b200:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	2220      	movs	r2, #32
 801b208:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 801b20c:	2300      	movs	r3, #0
}
 801b20e:	4618      	mov	r0, r3
 801b210:	3708      	adds	r7, #8
 801b212:	46bd      	mov	sp, r7
 801b214:	bd80      	pop	{r7, pc}

0801b216 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b216:	b580      	push	{r7, lr}
 801b218:	b088      	sub	sp, #32
 801b21a:	af02      	add	r7, sp, #8
 801b21c:	60f8      	str	r0, [r7, #12]
 801b21e:	60b9      	str	r1, [r7, #8]
 801b220:	603b      	str	r3, [r7, #0]
 801b222:	4613      	mov	r3, r2
 801b224:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 801b226:	2300      	movs	r3, #0
 801b228:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 801b230:	b2db      	uxtb	r3, r3
 801b232:	2b20      	cmp	r3, #32
 801b234:	f040 8083 	bne.w	801b33e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 801b238:	68bb      	ldr	r3, [r7, #8]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d002      	beq.n	801b244 <HAL_UART_Transmit+0x2e>
 801b23e:	88fb      	ldrh	r3, [r7, #6]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d101      	bne.n	801b248 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 801b244:	2301      	movs	r3, #1
 801b246:	e07b      	b.n	801b340 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 801b248:	68fb      	ldr	r3, [r7, #12]
 801b24a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b24e:	2b01      	cmp	r3, #1
 801b250:	d101      	bne.n	801b256 <HAL_UART_Transmit+0x40>
 801b252:	2302      	movs	r3, #2
 801b254:	e074      	b.n	801b340 <HAL_UART_Transmit+0x12a>
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	2201      	movs	r2, #1
 801b25a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b25e:	68fb      	ldr	r3, [r7, #12]
 801b260:	2200      	movs	r2, #0
 801b262:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b264:	68fb      	ldr	r3, [r7, #12]
 801b266:	2221      	movs	r2, #33	; 0x21
 801b268:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 801b26c:	f7fb ffba 	bl	80171e4 <HAL_GetTick>
 801b270:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 801b272:	68fb      	ldr	r3, [r7, #12]
 801b274:	88fa      	ldrh	r2, [r7, #6]
 801b276:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 801b278:	68fb      	ldr	r3, [r7, #12]
 801b27a:	88fa      	ldrh	r2, [r7, #6]
 801b27c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801b27e:	68fb      	ldr	r3, [r7, #12]
 801b280:	2200      	movs	r2, #0
 801b282:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 801b286:	e042      	b.n	801b30e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 801b288:	68fb      	ldr	r3, [r7, #12]
 801b28a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b28c:	b29b      	uxth	r3, r3
 801b28e:	3b01      	subs	r3, #1
 801b290:	b29a      	uxth	r2, r3
 801b292:	68fb      	ldr	r3, [r7, #12]
 801b294:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 801b296:	68fb      	ldr	r3, [r7, #12]
 801b298:	689b      	ldr	r3, [r3, #8]
 801b29a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b29e:	d122      	bne.n	801b2e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b2a0:	683b      	ldr	r3, [r7, #0]
 801b2a2:	9300      	str	r3, [sp, #0]
 801b2a4:	697b      	ldr	r3, [r7, #20]
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	2180      	movs	r1, #128	; 0x80
 801b2aa:	68f8      	ldr	r0, [r7, #12]
 801b2ac:	f000 f84c 	bl	801b348 <UART_WaitOnFlagUntilTimeout>
 801b2b0:	4603      	mov	r3, r0
 801b2b2:	2b00      	cmp	r3, #0
 801b2b4:	d001      	beq.n	801b2ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 801b2b6:	2303      	movs	r3, #3
 801b2b8:	e042      	b.n	801b340 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 801b2ba:	68bb      	ldr	r3, [r7, #8]
 801b2bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 801b2be:	693b      	ldr	r3, [r7, #16]
 801b2c0:	881b      	ldrh	r3, [r3, #0]
 801b2c2:	461a      	mov	r2, r3
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b2cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 801b2ce:	68fb      	ldr	r3, [r7, #12]
 801b2d0:	691b      	ldr	r3, [r3, #16]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d103      	bne.n	801b2de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 801b2d6:	68bb      	ldr	r3, [r7, #8]
 801b2d8:	3302      	adds	r3, #2
 801b2da:	60bb      	str	r3, [r7, #8]
 801b2dc:	e017      	b.n	801b30e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 801b2de:	68bb      	ldr	r3, [r7, #8]
 801b2e0:	3301      	adds	r3, #1
 801b2e2:	60bb      	str	r3, [r7, #8]
 801b2e4:	e013      	b.n	801b30e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b2e6:	683b      	ldr	r3, [r7, #0]
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	697b      	ldr	r3, [r7, #20]
 801b2ec:	2200      	movs	r2, #0
 801b2ee:	2180      	movs	r1, #128	; 0x80
 801b2f0:	68f8      	ldr	r0, [r7, #12]
 801b2f2:	f000 f829 	bl	801b348 <UART_WaitOnFlagUntilTimeout>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d001      	beq.n	801b300 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 801b2fc:	2303      	movs	r3, #3
 801b2fe:	e01f      	b.n	801b340 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 801b300:	68bb      	ldr	r3, [r7, #8]
 801b302:	1c5a      	adds	r2, r3, #1
 801b304:	60ba      	str	r2, [r7, #8]
 801b306:	781a      	ldrb	r2, [r3, #0]
 801b308:	68fb      	ldr	r3, [r7, #12]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 801b30e:	68fb      	ldr	r3, [r7, #12]
 801b310:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801b312:	b29b      	uxth	r3, r3
 801b314:	2b00      	cmp	r3, #0
 801b316:	d1b7      	bne.n	801b288 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b318:	683b      	ldr	r3, [r7, #0]
 801b31a:	9300      	str	r3, [sp, #0]
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	2200      	movs	r2, #0
 801b320:	2140      	movs	r1, #64	; 0x40
 801b322:	68f8      	ldr	r0, [r7, #12]
 801b324:	f000 f810 	bl	801b348 <UART_WaitOnFlagUntilTimeout>
 801b328:	4603      	mov	r3, r0
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d001      	beq.n	801b332 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 801b32e:	2303      	movs	r3, #3
 801b330:	e006      	b.n	801b340 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	2220      	movs	r2, #32
 801b336:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 801b33a:	2300      	movs	r3, #0
 801b33c:	e000      	b.n	801b340 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 801b33e:	2302      	movs	r3, #2
  }
}
 801b340:	4618      	mov	r0, r3
 801b342:	3718      	adds	r7, #24
 801b344:	46bd      	mov	sp, r7
 801b346:	bd80      	pop	{r7, pc}

0801b348 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b084      	sub	sp, #16
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	60f8      	str	r0, [r7, #12]
 801b350:	60b9      	str	r1, [r7, #8]
 801b352:	603b      	str	r3, [r7, #0]
 801b354:	4613      	mov	r3, r2
 801b356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b358:	e02c      	b.n	801b3b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801b35a:	69bb      	ldr	r3, [r7, #24]
 801b35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b360:	d028      	beq.n	801b3b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 801b362:	69bb      	ldr	r3, [r7, #24]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d007      	beq.n	801b378 <UART_WaitOnFlagUntilTimeout+0x30>
 801b368:	f7fb ff3c 	bl	80171e4 <HAL_GetTick>
 801b36c:	4602      	mov	r2, r0
 801b36e:	683b      	ldr	r3, [r7, #0]
 801b370:	1ad3      	subs	r3, r2, r3
 801b372:	69ba      	ldr	r2, [r7, #24]
 801b374:	429a      	cmp	r2, r3
 801b376:	d21d      	bcs.n	801b3b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801b378:	68fb      	ldr	r3, [r7, #12]
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	68da      	ldr	r2, [r3, #12]
 801b37e:	68fb      	ldr	r3, [r7, #12]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801b386:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	695a      	ldr	r2, [r3, #20]
 801b38e:	68fb      	ldr	r3, [r7, #12]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	f022 0201 	bic.w	r2, r2, #1
 801b396:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 801b398:	68fb      	ldr	r3, [r7, #12]
 801b39a:	2220      	movs	r2, #32
 801b39c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	2220      	movs	r2, #32
 801b3a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 801b3b0:	2303      	movs	r3, #3
 801b3b2:	e00f      	b.n	801b3d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801b3b4:	68fb      	ldr	r3, [r7, #12]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	681a      	ldr	r2, [r3, #0]
 801b3ba:	68bb      	ldr	r3, [r7, #8]
 801b3bc:	4013      	ands	r3, r2
 801b3be:	68ba      	ldr	r2, [r7, #8]
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	bf0c      	ite	eq
 801b3c4:	2301      	moveq	r3, #1
 801b3c6:	2300      	movne	r3, #0
 801b3c8:	b2db      	uxtb	r3, r3
 801b3ca:	461a      	mov	r2, r3
 801b3cc:	79fb      	ldrb	r3, [r7, #7]
 801b3ce:	429a      	cmp	r2, r3
 801b3d0:	d0c3      	beq.n	801b35a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801b3d2:	2300      	movs	r3, #0
}
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	3710      	adds	r7, #16
 801b3d8:	46bd      	mov	sp, r7
 801b3da:	bd80      	pop	{r7, pc}

0801b3dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3e0:	b085      	sub	sp, #20
 801b3e2:	af00      	add	r7, sp, #0
 801b3e4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	691b      	ldr	r3, [r3, #16]
 801b3ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	68da      	ldr	r2, [r3, #12]
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	430a      	orrs	r2, r1
 801b3fa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	689a      	ldr	r2, [r3, #8]
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	691b      	ldr	r3, [r3, #16]
 801b404:	431a      	orrs	r2, r3
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	695b      	ldr	r3, [r3, #20]
 801b40a:	431a      	orrs	r2, r3
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	69db      	ldr	r3, [r3, #28]
 801b410:	4313      	orrs	r3, r2
 801b412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	68db      	ldr	r3, [r3, #12]
 801b41a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801b41e:	f023 030c 	bic.w	r3, r3, #12
 801b422:	687a      	ldr	r2, [r7, #4]
 801b424:	6812      	ldr	r2, [r2, #0]
 801b426:	68f9      	ldr	r1, [r7, #12]
 801b428:	430b      	orrs	r3, r1
 801b42a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	695b      	ldr	r3, [r3, #20]
 801b432:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	699a      	ldr	r2, [r3, #24]
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	430a      	orrs	r2, r1
 801b440:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	69db      	ldr	r3, [r3, #28]
 801b446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b44a:	f040 818b 	bne.w	801b764 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	4ac1      	ldr	r2, [pc, #772]	; (801b758 <UART_SetConfig+0x37c>)
 801b454:	4293      	cmp	r3, r2
 801b456:	d005      	beq.n	801b464 <UART_SetConfig+0x88>
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	4abf      	ldr	r2, [pc, #764]	; (801b75c <UART_SetConfig+0x380>)
 801b45e:	4293      	cmp	r3, r2
 801b460:	f040 80bd 	bne.w	801b5de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 801b464:	f7fd fd9a 	bl	8018f9c <HAL_RCC_GetPCLK2Freq>
 801b468:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801b46a:	68bb      	ldr	r3, [r7, #8]
 801b46c:	461d      	mov	r5, r3
 801b46e:	f04f 0600 	mov.w	r6, #0
 801b472:	46a8      	mov	r8, r5
 801b474:	46b1      	mov	r9, r6
 801b476:	eb18 0308 	adds.w	r3, r8, r8
 801b47a:	eb49 0409 	adc.w	r4, r9, r9
 801b47e:	4698      	mov	r8, r3
 801b480:	46a1      	mov	r9, r4
 801b482:	eb18 0805 	adds.w	r8, r8, r5
 801b486:	eb49 0906 	adc.w	r9, r9, r6
 801b48a:	f04f 0100 	mov.w	r1, #0
 801b48e:	f04f 0200 	mov.w	r2, #0
 801b492:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801b496:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801b49a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801b49e:	4688      	mov	r8, r1
 801b4a0:	4691      	mov	r9, r2
 801b4a2:	eb18 0005 	adds.w	r0, r8, r5
 801b4a6:	eb49 0106 	adc.w	r1, r9, r6
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	461d      	mov	r5, r3
 801b4b0:	f04f 0600 	mov.w	r6, #0
 801b4b4:	196b      	adds	r3, r5, r5
 801b4b6:	eb46 0406 	adc.w	r4, r6, r6
 801b4ba:	461a      	mov	r2, r3
 801b4bc:	4623      	mov	r3, r4
 801b4be:	f7e5 fc03 	bl	8000cc8 <__aeabi_uldivmod>
 801b4c2:	4603      	mov	r3, r0
 801b4c4:	460c      	mov	r4, r1
 801b4c6:	461a      	mov	r2, r3
 801b4c8:	4ba5      	ldr	r3, [pc, #660]	; (801b760 <UART_SetConfig+0x384>)
 801b4ca:	fba3 2302 	umull	r2, r3, r3, r2
 801b4ce:	095b      	lsrs	r3, r3, #5
 801b4d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801b4d4:	68bb      	ldr	r3, [r7, #8]
 801b4d6:	461d      	mov	r5, r3
 801b4d8:	f04f 0600 	mov.w	r6, #0
 801b4dc:	46a9      	mov	r9, r5
 801b4de:	46b2      	mov	sl, r6
 801b4e0:	eb19 0309 	adds.w	r3, r9, r9
 801b4e4:	eb4a 040a 	adc.w	r4, sl, sl
 801b4e8:	4699      	mov	r9, r3
 801b4ea:	46a2      	mov	sl, r4
 801b4ec:	eb19 0905 	adds.w	r9, r9, r5
 801b4f0:	eb4a 0a06 	adc.w	sl, sl, r6
 801b4f4:	f04f 0100 	mov.w	r1, #0
 801b4f8:	f04f 0200 	mov.w	r2, #0
 801b4fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b500:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b504:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b508:	4689      	mov	r9, r1
 801b50a:	4692      	mov	sl, r2
 801b50c:	eb19 0005 	adds.w	r0, r9, r5
 801b510:	eb4a 0106 	adc.w	r1, sl, r6
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	685b      	ldr	r3, [r3, #4]
 801b518:	461d      	mov	r5, r3
 801b51a:	f04f 0600 	mov.w	r6, #0
 801b51e:	196b      	adds	r3, r5, r5
 801b520:	eb46 0406 	adc.w	r4, r6, r6
 801b524:	461a      	mov	r2, r3
 801b526:	4623      	mov	r3, r4
 801b528:	f7e5 fbce 	bl	8000cc8 <__aeabi_uldivmod>
 801b52c:	4603      	mov	r3, r0
 801b52e:	460c      	mov	r4, r1
 801b530:	461a      	mov	r2, r3
 801b532:	4b8b      	ldr	r3, [pc, #556]	; (801b760 <UART_SetConfig+0x384>)
 801b534:	fba3 1302 	umull	r1, r3, r3, r2
 801b538:	095b      	lsrs	r3, r3, #5
 801b53a:	2164      	movs	r1, #100	; 0x64
 801b53c:	fb01 f303 	mul.w	r3, r1, r3
 801b540:	1ad3      	subs	r3, r2, r3
 801b542:	00db      	lsls	r3, r3, #3
 801b544:	3332      	adds	r3, #50	; 0x32
 801b546:	4a86      	ldr	r2, [pc, #536]	; (801b760 <UART_SetConfig+0x384>)
 801b548:	fba2 2303 	umull	r2, r3, r2, r3
 801b54c:	095b      	lsrs	r3, r3, #5
 801b54e:	005b      	lsls	r3, r3, #1
 801b550:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801b554:	4498      	add	r8, r3
 801b556:	68bb      	ldr	r3, [r7, #8]
 801b558:	461d      	mov	r5, r3
 801b55a:	f04f 0600 	mov.w	r6, #0
 801b55e:	46a9      	mov	r9, r5
 801b560:	46b2      	mov	sl, r6
 801b562:	eb19 0309 	adds.w	r3, r9, r9
 801b566:	eb4a 040a 	adc.w	r4, sl, sl
 801b56a:	4699      	mov	r9, r3
 801b56c:	46a2      	mov	sl, r4
 801b56e:	eb19 0905 	adds.w	r9, r9, r5
 801b572:	eb4a 0a06 	adc.w	sl, sl, r6
 801b576:	f04f 0100 	mov.w	r1, #0
 801b57a:	f04f 0200 	mov.w	r2, #0
 801b57e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b582:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b586:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b58a:	4689      	mov	r9, r1
 801b58c:	4692      	mov	sl, r2
 801b58e:	eb19 0005 	adds.w	r0, r9, r5
 801b592:	eb4a 0106 	adc.w	r1, sl, r6
 801b596:	687b      	ldr	r3, [r7, #4]
 801b598:	685b      	ldr	r3, [r3, #4]
 801b59a:	461d      	mov	r5, r3
 801b59c:	f04f 0600 	mov.w	r6, #0
 801b5a0:	196b      	adds	r3, r5, r5
 801b5a2:	eb46 0406 	adc.w	r4, r6, r6
 801b5a6:	461a      	mov	r2, r3
 801b5a8:	4623      	mov	r3, r4
 801b5aa:	f7e5 fb8d 	bl	8000cc8 <__aeabi_uldivmod>
 801b5ae:	4603      	mov	r3, r0
 801b5b0:	460c      	mov	r4, r1
 801b5b2:	461a      	mov	r2, r3
 801b5b4:	4b6a      	ldr	r3, [pc, #424]	; (801b760 <UART_SetConfig+0x384>)
 801b5b6:	fba3 1302 	umull	r1, r3, r3, r2
 801b5ba:	095b      	lsrs	r3, r3, #5
 801b5bc:	2164      	movs	r1, #100	; 0x64
 801b5be:	fb01 f303 	mul.w	r3, r1, r3
 801b5c2:	1ad3      	subs	r3, r2, r3
 801b5c4:	00db      	lsls	r3, r3, #3
 801b5c6:	3332      	adds	r3, #50	; 0x32
 801b5c8:	4a65      	ldr	r2, [pc, #404]	; (801b760 <UART_SetConfig+0x384>)
 801b5ca:	fba2 2303 	umull	r2, r3, r2, r3
 801b5ce:	095b      	lsrs	r3, r3, #5
 801b5d0:	f003 0207 	and.w	r2, r3, #7
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4442      	add	r2, r8
 801b5da:	609a      	str	r2, [r3, #8]
 801b5dc:	e26f      	b.n	801babe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801b5de:	f7fd fcc9 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 801b5e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801b5e4:	68bb      	ldr	r3, [r7, #8]
 801b5e6:	461d      	mov	r5, r3
 801b5e8:	f04f 0600 	mov.w	r6, #0
 801b5ec:	46a8      	mov	r8, r5
 801b5ee:	46b1      	mov	r9, r6
 801b5f0:	eb18 0308 	adds.w	r3, r8, r8
 801b5f4:	eb49 0409 	adc.w	r4, r9, r9
 801b5f8:	4698      	mov	r8, r3
 801b5fa:	46a1      	mov	r9, r4
 801b5fc:	eb18 0805 	adds.w	r8, r8, r5
 801b600:	eb49 0906 	adc.w	r9, r9, r6
 801b604:	f04f 0100 	mov.w	r1, #0
 801b608:	f04f 0200 	mov.w	r2, #0
 801b60c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801b610:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801b614:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801b618:	4688      	mov	r8, r1
 801b61a:	4691      	mov	r9, r2
 801b61c:	eb18 0005 	adds.w	r0, r8, r5
 801b620:	eb49 0106 	adc.w	r1, r9, r6
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	685b      	ldr	r3, [r3, #4]
 801b628:	461d      	mov	r5, r3
 801b62a:	f04f 0600 	mov.w	r6, #0
 801b62e:	196b      	adds	r3, r5, r5
 801b630:	eb46 0406 	adc.w	r4, r6, r6
 801b634:	461a      	mov	r2, r3
 801b636:	4623      	mov	r3, r4
 801b638:	f7e5 fb46 	bl	8000cc8 <__aeabi_uldivmod>
 801b63c:	4603      	mov	r3, r0
 801b63e:	460c      	mov	r4, r1
 801b640:	461a      	mov	r2, r3
 801b642:	4b47      	ldr	r3, [pc, #284]	; (801b760 <UART_SetConfig+0x384>)
 801b644:	fba3 2302 	umull	r2, r3, r3, r2
 801b648:	095b      	lsrs	r3, r3, #5
 801b64a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801b64e:	68bb      	ldr	r3, [r7, #8]
 801b650:	461d      	mov	r5, r3
 801b652:	f04f 0600 	mov.w	r6, #0
 801b656:	46a9      	mov	r9, r5
 801b658:	46b2      	mov	sl, r6
 801b65a:	eb19 0309 	adds.w	r3, r9, r9
 801b65e:	eb4a 040a 	adc.w	r4, sl, sl
 801b662:	4699      	mov	r9, r3
 801b664:	46a2      	mov	sl, r4
 801b666:	eb19 0905 	adds.w	r9, r9, r5
 801b66a:	eb4a 0a06 	adc.w	sl, sl, r6
 801b66e:	f04f 0100 	mov.w	r1, #0
 801b672:	f04f 0200 	mov.w	r2, #0
 801b676:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b67a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b67e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b682:	4689      	mov	r9, r1
 801b684:	4692      	mov	sl, r2
 801b686:	eb19 0005 	adds.w	r0, r9, r5
 801b68a:	eb4a 0106 	adc.w	r1, sl, r6
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	685b      	ldr	r3, [r3, #4]
 801b692:	461d      	mov	r5, r3
 801b694:	f04f 0600 	mov.w	r6, #0
 801b698:	196b      	adds	r3, r5, r5
 801b69a:	eb46 0406 	adc.w	r4, r6, r6
 801b69e:	461a      	mov	r2, r3
 801b6a0:	4623      	mov	r3, r4
 801b6a2:	f7e5 fb11 	bl	8000cc8 <__aeabi_uldivmod>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	460c      	mov	r4, r1
 801b6aa:	461a      	mov	r2, r3
 801b6ac:	4b2c      	ldr	r3, [pc, #176]	; (801b760 <UART_SetConfig+0x384>)
 801b6ae:	fba3 1302 	umull	r1, r3, r3, r2
 801b6b2:	095b      	lsrs	r3, r3, #5
 801b6b4:	2164      	movs	r1, #100	; 0x64
 801b6b6:	fb01 f303 	mul.w	r3, r1, r3
 801b6ba:	1ad3      	subs	r3, r2, r3
 801b6bc:	00db      	lsls	r3, r3, #3
 801b6be:	3332      	adds	r3, #50	; 0x32
 801b6c0:	4a27      	ldr	r2, [pc, #156]	; (801b760 <UART_SetConfig+0x384>)
 801b6c2:	fba2 2303 	umull	r2, r3, r2, r3
 801b6c6:	095b      	lsrs	r3, r3, #5
 801b6c8:	005b      	lsls	r3, r3, #1
 801b6ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801b6ce:	4498      	add	r8, r3
 801b6d0:	68bb      	ldr	r3, [r7, #8]
 801b6d2:	461d      	mov	r5, r3
 801b6d4:	f04f 0600 	mov.w	r6, #0
 801b6d8:	46a9      	mov	r9, r5
 801b6da:	46b2      	mov	sl, r6
 801b6dc:	eb19 0309 	adds.w	r3, r9, r9
 801b6e0:	eb4a 040a 	adc.w	r4, sl, sl
 801b6e4:	4699      	mov	r9, r3
 801b6e6:	46a2      	mov	sl, r4
 801b6e8:	eb19 0905 	adds.w	r9, r9, r5
 801b6ec:	eb4a 0a06 	adc.w	sl, sl, r6
 801b6f0:	f04f 0100 	mov.w	r1, #0
 801b6f4:	f04f 0200 	mov.w	r2, #0
 801b6f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b6fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b700:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b704:	4689      	mov	r9, r1
 801b706:	4692      	mov	sl, r2
 801b708:	eb19 0005 	adds.w	r0, r9, r5
 801b70c:	eb4a 0106 	adc.w	r1, sl, r6
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	685b      	ldr	r3, [r3, #4]
 801b714:	461d      	mov	r5, r3
 801b716:	f04f 0600 	mov.w	r6, #0
 801b71a:	196b      	adds	r3, r5, r5
 801b71c:	eb46 0406 	adc.w	r4, r6, r6
 801b720:	461a      	mov	r2, r3
 801b722:	4623      	mov	r3, r4
 801b724:	f7e5 fad0 	bl	8000cc8 <__aeabi_uldivmod>
 801b728:	4603      	mov	r3, r0
 801b72a:	460c      	mov	r4, r1
 801b72c:	461a      	mov	r2, r3
 801b72e:	4b0c      	ldr	r3, [pc, #48]	; (801b760 <UART_SetConfig+0x384>)
 801b730:	fba3 1302 	umull	r1, r3, r3, r2
 801b734:	095b      	lsrs	r3, r3, #5
 801b736:	2164      	movs	r1, #100	; 0x64
 801b738:	fb01 f303 	mul.w	r3, r1, r3
 801b73c:	1ad3      	subs	r3, r2, r3
 801b73e:	00db      	lsls	r3, r3, #3
 801b740:	3332      	adds	r3, #50	; 0x32
 801b742:	4a07      	ldr	r2, [pc, #28]	; (801b760 <UART_SetConfig+0x384>)
 801b744:	fba2 2303 	umull	r2, r3, r2, r3
 801b748:	095b      	lsrs	r3, r3, #5
 801b74a:	f003 0207 	and.w	r2, r3, #7
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	4442      	add	r2, r8
 801b754:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801b756:	e1b2      	b.n	801babe <UART_SetConfig+0x6e2>
 801b758:	40011000 	.word	0x40011000
 801b75c:	40011400 	.word	0x40011400
 801b760:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	4ad7      	ldr	r2, [pc, #860]	; (801bac8 <UART_SetConfig+0x6ec>)
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d005      	beq.n	801b77a <UART_SetConfig+0x39e>
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	681b      	ldr	r3, [r3, #0]
 801b772:	4ad6      	ldr	r2, [pc, #856]	; (801bacc <UART_SetConfig+0x6f0>)
 801b774:	4293      	cmp	r3, r2
 801b776:	f040 80d1 	bne.w	801b91c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801b77a:	f7fd fc0f 	bl	8018f9c <HAL_RCC_GetPCLK2Freq>
 801b77e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b780:	68bb      	ldr	r3, [r7, #8]
 801b782:	469a      	mov	sl, r3
 801b784:	f04f 0b00 	mov.w	fp, #0
 801b788:	46d0      	mov	r8, sl
 801b78a:	46d9      	mov	r9, fp
 801b78c:	eb18 0308 	adds.w	r3, r8, r8
 801b790:	eb49 0409 	adc.w	r4, r9, r9
 801b794:	4698      	mov	r8, r3
 801b796:	46a1      	mov	r9, r4
 801b798:	eb18 080a 	adds.w	r8, r8, sl
 801b79c:	eb49 090b 	adc.w	r9, r9, fp
 801b7a0:	f04f 0100 	mov.w	r1, #0
 801b7a4:	f04f 0200 	mov.w	r2, #0
 801b7a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801b7ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801b7b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801b7b4:	4688      	mov	r8, r1
 801b7b6:	4691      	mov	r9, r2
 801b7b8:	eb1a 0508 	adds.w	r5, sl, r8
 801b7bc:	eb4b 0609 	adc.w	r6, fp, r9
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	685b      	ldr	r3, [r3, #4]
 801b7c4:	4619      	mov	r1, r3
 801b7c6:	f04f 0200 	mov.w	r2, #0
 801b7ca:	f04f 0300 	mov.w	r3, #0
 801b7ce:	f04f 0400 	mov.w	r4, #0
 801b7d2:	0094      	lsls	r4, r2, #2
 801b7d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801b7d8:	008b      	lsls	r3, r1, #2
 801b7da:	461a      	mov	r2, r3
 801b7dc:	4623      	mov	r3, r4
 801b7de:	4628      	mov	r0, r5
 801b7e0:	4631      	mov	r1, r6
 801b7e2:	f7e5 fa71 	bl	8000cc8 <__aeabi_uldivmod>
 801b7e6:	4603      	mov	r3, r0
 801b7e8:	460c      	mov	r4, r1
 801b7ea:	461a      	mov	r2, r3
 801b7ec:	4bb8      	ldr	r3, [pc, #736]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b7ee:	fba3 2302 	umull	r2, r3, r3, r2
 801b7f2:	095b      	lsrs	r3, r3, #5
 801b7f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	469b      	mov	fp, r3
 801b7fc:	f04f 0c00 	mov.w	ip, #0
 801b800:	46d9      	mov	r9, fp
 801b802:	46e2      	mov	sl, ip
 801b804:	eb19 0309 	adds.w	r3, r9, r9
 801b808:	eb4a 040a 	adc.w	r4, sl, sl
 801b80c:	4699      	mov	r9, r3
 801b80e:	46a2      	mov	sl, r4
 801b810:	eb19 090b 	adds.w	r9, r9, fp
 801b814:	eb4a 0a0c 	adc.w	sl, sl, ip
 801b818:	f04f 0100 	mov.w	r1, #0
 801b81c:	f04f 0200 	mov.w	r2, #0
 801b820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b82c:	4689      	mov	r9, r1
 801b82e:	4692      	mov	sl, r2
 801b830:	eb1b 0509 	adds.w	r5, fp, r9
 801b834:	eb4c 060a 	adc.w	r6, ip, sl
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	4619      	mov	r1, r3
 801b83e:	f04f 0200 	mov.w	r2, #0
 801b842:	f04f 0300 	mov.w	r3, #0
 801b846:	f04f 0400 	mov.w	r4, #0
 801b84a:	0094      	lsls	r4, r2, #2
 801b84c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801b850:	008b      	lsls	r3, r1, #2
 801b852:	461a      	mov	r2, r3
 801b854:	4623      	mov	r3, r4
 801b856:	4628      	mov	r0, r5
 801b858:	4631      	mov	r1, r6
 801b85a:	f7e5 fa35 	bl	8000cc8 <__aeabi_uldivmod>
 801b85e:	4603      	mov	r3, r0
 801b860:	460c      	mov	r4, r1
 801b862:	461a      	mov	r2, r3
 801b864:	4b9a      	ldr	r3, [pc, #616]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b866:	fba3 1302 	umull	r1, r3, r3, r2
 801b86a:	095b      	lsrs	r3, r3, #5
 801b86c:	2164      	movs	r1, #100	; 0x64
 801b86e:	fb01 f303 	mul.w	r3, r1, r3
 801b872:	1ad3      	subs	r3, r2, r3
 801b874:	011b      	lsls	r3, r3, #4
 801b876:	3332      	adds	r3, #50	; 0x32
 801b878:	4a95      	ldr	r2, [pc, #596]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b87a:	fba2 2303 	umull	r2, r3, r2, r3
 801b87e:	095b      	lsrs	r3, r3, #5
 801b880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b884:	4498      	add	r8, r3
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	469b      	mov	fp, r3
 801b88a:	f04f 0c00 	mov.w	ip, #0
 801b88e:	46d9      	mov	r9, fp
 801b890:	46e2      	mov	sl, ip
 801b892:	eb19 0309 	adds.w	r3, r9, r9
 801b896:	eb4a 040a 	adc.w	r4, sl, sl
 801b89a:	4699      	mov	r9, r3
 801b89c:	46a2      	mov	sl, r4
 801b89e:	eb19 090b 	adds.w	r9, r9, fp
 801b8a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 801b8a6:	f04f 0100 	mov.w	r1, #0
 801b8aa:	f04f 0200 	mov.w	r2, #0
 801b8ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b8b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b8b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b8ba:	4689      	mov	r9, r1
 801b8bc:	4692      	mov	sl, r2
 801b8be:	eb1b 0509 	adds.w	r5, fp, r9
 801b8c2:	eb4c 060a 	adc.w	r6, ip, sl
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	685b      	ldr	r3, [r3, #4]
 801b8ca:	4619      	mov	r1, r3
 801b8cc:	f04f 0200 	mov.w	r2, #0
 801b8d0:	f04f 0300 	mov.w	r3, #0
 801b8d4:	f04f 0400 	mov.w	r4, #0
 801b8d8:	0094      	lsls	r4, r2, #2
 801b8da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801b8de:	008b      	lsls	r3, r1, #2
 801b8e0:	461a      	mov	r2, r3
 801b8e2:	4623      	mov	r3, r4
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	4631      	mov	r1, r6
 801b8e8:	f7e5 f9ee 	bl	8000cc8 <__aeabi_uldivmod>
 801b8ec:	4603      	mov	r3, r0
 801b8ee:	460c      	mov	r4, r1
 801b8f0:	461a      	mov	r2, r3
 801b8f2:	4b77      	ldr	r3, [pc, #476]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b8f4:	fba3 1302 	umull	r1, r3, r3, r2
 801b8f8:	095b      	lsrs	r3, r3, #5
 801b8fa:	2164      	movs	r1, #100	; 0x64
 801b8fc:	fb01 f303 	mul.w	r3, r1, r3
 801b900:	1ad3      	subs	r3, r2, r3
 801b902:	011b      	lsls	r3, r3, #4
 801b904:	3332      	adds	r3, #50	; 0x32
 801b906:	4a72      	ldr	r2, [pc, #456]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b908:	fba2 2303 	umull	r2, r3, r2, r3
 801b90c:	095b      	lsrs	r3, r3, #5
 801b90e:	f003 020f 	and.w	r2, r3, #15
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	681b      	ldr	r3, [r3, #0]
 801b916:	4442      	add	r2, r8
 801b918:	609a      	str	r2, [r3, #8]
 801b91a:	e0d0      	b.n	801babe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 801b91c:	f7fd fb2a 	bl	8018f74 <HAL_RCC_GetPCLK1Freq>
 801b920:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801b922:	68bb      	ldr	r3, [r7, #8]
 801b924:	469a      	mov	sl, r3
 801b926:	f04f 0b00 	mov.w	fp, #0
 801b92a:	46d0      	mov	r8, sl
 801b92c:	46d9      	mov	r9, fp
 801b92e:	eb18 0308 	adds.w	r3, r8, r8
 801b932:	eb49 0409 	adc.w	r4, r9, r9
 801b936:	4698      	mov	r8, r3
 801b938:	46a1      	mov	r9, r4
 801b93a:	eb18 080a 	adds.w	r8, r8, sl
 801b93e:	eb49 090b 	adc.w	r9, r9, fp
 801b942:	f04f 0100 	mov.w	r1, #0
 801b946:	f04f 0200 	mov.w	r2, #0
 801b94a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801b94e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801b952:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801b956:	4688      	mov	r8, r1
 801b958:	4691      	mov	r9, r2
 801b95a:	eb1a 0508 	adds.w	r5, sl, r8
 801b95e:	eb4b 0609 	adc.w	r6, fp, r9
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	4619      	mov	r1, r3
 801b968:	f04f 0200 	mov.w	r2, #0
 801b96c:	f04f 0300 	mov.w	r3, #0
 801b970:	f04f 0400 	mov.w	r4, #0
 801b974:	0094      	lsls	r4, r2, #2
 801b976:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801b97a:	008b      	lsls	r3, r1, #2
 801b97c:	461a      	mov	r2, r3
 801b97e:	4623      	mov	r3, r4
 801b980:	4628      	mov	r0, r5
 801b982:	4631      	mov	r1, r6
 801b984:	f7e5 f9a0 	bl	8000cc8 <__aeabi_uldivmod>
 801b988:	4603      	mov	r3, r0
 801b98a:	460c      	mov	r4, r1
 801b98c:	461a      	mov	r2, r3
 801b98e:	4b50      	ldr	r3, [pc, #320]	; (801bad0 <UART_SetConfig+0x6f4>)
 801b990:	fba3 2302 	umull	r2, r3, r3, r2
 801b994:	095b      	lsrs	r3, r3, #5
 801b996:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	469b      	mov	fp, r3
 801b99e:	f04f 0c00 	mov.w	ip, #0
 801b9a2:	46d9      	mov	r9, fp
 801b9a4:	46e2      	mov	sl, ip
 801b9a6:	eb19 0309 	adds.w	r3, r9, r9
 801b9aa:	eb4a 040a 	adc.w	r4, sl, sl
 801b9ae:	4699      	mov	r9, r3
 801b9b0:	46a2      	mov	sl, r4
 801b9b2:	eb19 090b 	adds.w	r9, r9, fp
 801b9b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 801b9ba:	f04f 0100 	mov.w	r1, #0
 801b9be:	f04f 0200 	mov.w	r2, #0
 801b9c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801b9c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801b9ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801b9ce:	4689      	mov	r9, r1
 801b9d0:	4692      	mov	sl, r2
 801b9d2:	eb1b 0509 	adds.w	r5, fp, r9
 801b9d6:	eb4c 060a 	adc.w	r6, ip, sl
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	685b      	ldr	r3, [r3, #4]
 801b9de:	4619      	mov	r1, r3
 801b9e0:	f04f 0200 	mov.w	r2, #0
 801b9e4:	f04f 0300 	mov.w	r3, #0
 801b9e8:	f04f 0400 	mov.w	r4, #0
 801b9ec:	0094      	lsls	r4, r2, #2
 801b9ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801b9f2:	008b      	lsls	r3, r1, #2
 801b9f4:	461a      	mov	r2, r3
 801b9f6:	4623      	mov	r3, r4
 801b9f8:	4628      	mov	r0, r5
 801b9fa:	4631      	mov	r1, r6
 801b9fc:	f7e5 f964 	bl	8000cc8 <__aeabi_uldivmod>
 801ba00:	4603      	mov	r3, r0
 801ba02:	460c      	mov	r4, r1
 801ba04:	461a      	mov	r2, r3
 801ba06:	4b32      	ldr	r3, [pc, #200]	; (801bad0 <UART_SetConfig+0x6f4>)
 801ba08:	fba3 1302 	umull	r1, r3, r3, r2
 801ba0c:	095b      	lsrs	r3, r3, #5
 801ba0e:	2164      	movs	r1, #100	; 0x64
 801ba10:	fb01 f303 	mul.w	r3, r1, r3
 801ba14:	1ad3      	subs	r3, r2, r3
 801ba16:	011b      	lsls	r3, r3, #4
 801ba18:	3332      	adds	r3, #50	; 0x32
 801ba1a:	4a2d      	ldr	r2, [pc, #180]	; (801bad0 <UART_SetConfig+0x6f4>)
 801ba1c:	fba2 2303 	umull	r2, r3, r2, r3
 801ba20:	095b      	lsrs	r3, r3, #5
 801ba22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ba26:	4498      	add	r8, r3
 801ba28:	68bb      	ldr	r3, [r7, #8]
 801ba2a:	469b      	mov	fp, r3
 801ba2c:	f04f 0c00 	mov.w	ip, #0
 801ba30:	46d9      	mov	r9, fp
 801ba32:	46e2      	mov	sl, ip
 801ba34:	eb19 0309 	adds.w	r3, r9, r9
 801ba38:	eb4a 040a 	adc.w	r4, sl, sl
 801ba3c:	4699      	mov	r9, r3
 801ba3e:	46a2      	mov	sl, r4
 801ba40:	eb19 090b 	adds.w	r9, r9, fp
 801ba44:	eb4a 0a0c 	adc.w	sl, sl, ip
 801ba48:	f04f 0100 	mov.w	r1, #0
 801ba4c:	f04f 0200 	mov.w	r2, #0
 801ba50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801ba54:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801ba58:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801ba5c:	4689      	mov	r9, r1
 801ba5e:	4692      	mov	sl, r2
 801ba60:	eb1b 0509 	adds.w	r5, fp, r9
 801ba64:	eb4c 060a 	adc.w	r6, ip, sl
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	685b      	ldr	r3, [r3, #4]
 801ba6c:	4619      	mov	r1, r3
 801ba6e:	f04f 0200 	mov.w	r2, #0
 801ba72:	f04f 0300 	mov.w	r3, #0
 801ba76:	f04f 0400 	mov.w	r4, #0
 801ba7a:	0094      	lsls	r4, r2, #2
 801ba7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801ba80:	008b      	lsls	r3, r1, #2
 801ba82:	461a      	mov	r2, r3
 801ba84:	4623      	mov	r3, r4
 801ba86:	4628      	mov	r0, r5
 801ba88:	4631      	mov	r1, r6
 801ba8a:	f7e5 f91d 	bl	8000cc8 <__aeabi_uldivmod>
 801ba8e:	4603      	mov	r3, r0
 801ba90:	460c      	mov	r4, r1
 801ba92:	461a      	mov	r2, r3
 801ba94:	4b0e      	ldr	r3, [pc, #56]	; (801bad0 <UART_SetConfig+0x6f4>)
 801ba96:	fba3 1302 	umull	r1, r3, r3, r2
 801ba9a:	095b      	lsrs	r3, r3, #5
 801ba9c:	2164      	movs	r1, #100	; 0x64
 801ba9e:	fb01 f303 	mul.w	r3, r1, r3
 801baa2:	1ad3      	subs	r3, r2, r3
 801baa4:	011b      	lsls	r3, r3, #4
 801baa6:	3332      	adds	r3, #50	; 0x32
 801baa8:	4a09      	ldr	r2, [pc, #36]	; (801bad0 <UART_SetConfig+0x6f4>)
 801baaa:	fba2 2303 	umull	r2, r3, r2, r3
 801baae:	095b      	lsrs	r3, r3, #5
 801bab0:	f003 020f 	and.w	r2, r3, #15
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	681b      	ldr	r3, [r3, #0]
 801bab8:	4442      	add	r2, r8
 801baba:	609a      	str	r2, [r3, #8]
}
 801babc:	e7ff      	b.n	801babe <UART_SetConfig+0x6e2>
 801babe:	bf00      	nop
 801bac0:	3714      	adds	r7, #20
 801bac2:	46bd      	mov	sp, r7
 801bac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bac8:	40011000 	.word	0x40011000
 801bacc:	40011400 	.word	0x40011400
 801bad0:	51eb851f 	.word	0x51eb851f

0801bad4 <__errno>:
 801bad4:	4b01      	ldr	r3, [pc, #4]	; (801badc <__errno+0x8>)
 801bad6:	6818      	ldr	r0, [r3, #0]
 801bad8:	4770      	bx	lr
 801bada:	bf00      	nop
 801badc:	20000020 	.word	0x20000020

0801bae0 <__libc_init_array>:
 801bae0:	b570      	push	{r4, r5, r6, lr}
 801bae2:	4e0d      	ldr	r6, [pc, #52]	; (801bb18 <__libc_init_array+0x38>)
 801bae4:	4c0d      	ldr	r4, [pc, #52]	; (801bb1c <__libc_init_array+0x3c>)
 801bae6:	1ba4      	subs	r4, r4, r6
 801bae8:	10a4      	asrs	r4, r4, #2
 801baea:	2500      	movs	r5, #0
 801baec:	42a5      	cmp	r5, r4
 801baee:	d109      	bne.n	801bb04 <__libc_init_array+0x24>
 801baf0:	4e0b      	ldr	r6, [pc, #44]	; (801bb20 <__libc_init_array+0x40>)
 801baf2:	4c0c      	ldr	r4, [pc, #48]	; (801bb24 <__libc_init_array+0x44>)
 801baf4:	f002 fc64 	bl	801e3c0 <_init>
 801baf8:	1ba4      	subs	r4, r4, r6
 801bafa:	10a4      	asrs	r4, r4, #2
 801bafc:	2500      	movs	r5, #0
 801bafe:	42a5      	cmp	r5, r4
 801bb00:	d105      	bne.n	801bb0e <__libc_init_array+0x2e>
 801bb02:	bd70      	pop	{r4, r5, r6, pc}
 801bb04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801bb08:	4798      	blx	r3
 801bb0a:	3501      	adds	r5, #1
 801bb0c:	e7ee      	b.n	801baec <__libc_init_array+0xc>
 801bb0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801bb12:	4798      	blx	r3
 801bb14:	3501      	adds	r5, #1
 801bb16:	e7f2      	b.n	801bafe <__libc_init_array+0x1e>
 801bb18:	08020970 	.word	0x08020970
 801bb1c:	08020970 	.word	0x08020970
 801bb20:	08020970 	.word	0x08020970
 801bb24:	08020974 	.word	0x08020974

0801bb28 <memcpy>:
 801bb28:	b510      	push	{r4, lr}
 801bb2a:	1e43      	subs	r3, r0, #1
 801bb2c:	440a      	add	r2, r1
 801bb2e:	4291      	cmp	r1, r2
 801bb30:	d100      	bne.n	801bb34 <memcpy+0xc>
 801bb32:	bd10      	pop	{r4, pc}
 801bb34:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb38:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb3c:	e7f7      	b.n	801bb2e <memcpy+0x6>

0801bb3e <memset>:
 801bb3e:	4402      	add	r2, r0
 801bb40:	4603      	mov	r3, r0
 801bb42:	4293      	cmp	r3, r2
 801bb44:	d100      	bne.n	801bb48 <memset+0xa>
 801bb46:	4770      	bx	lr
 801bb48:	f803 1b01 	strb.w	r1, [r3], #1
 801bb4c:	e7f9      	b.n	801bb42 <memset+0x4>

0801bb4e <__cvt>:
 801bb4e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb52:	ec55 4b10 	vmov	r4, r5, d0
 801bb56:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801bb58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801bb5c:	2d00      	cmp	r5, #0
 801bb5e:	460e      	mov	r6, r1
 801bb60:	4691      	mov	r9, r2
 801bb62:	4619      	mov	r1, r3
 801bb64:	bfb8      	it	lt
 801bb66:	4622      	movlt	r2, r4
 801bb68:	462b      	mov	r3, r5
 801bb6a:	f027 0720 	bic.w	r7, r7, #32
 801bb6e:	bfbb      	ittet	lt
 801bb70:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801bb74:	461d      	movlt	r5, r3
 801bb76:	2300      	movge	r3, #0
 801bb78:	232d      	movlt	r3, #45	; 0x2d
 801bb7a:	bfb8      	it	lt
 801bb7c:	4614      	movlt	r4, r2
 801bb7e:	2f46      	cmp	r7, #70	; 0x46
 801bb80:	700b      	strb	r3, [r1, #0]
 801bb82:	d004      	beq.n	801bb8e <__cvt+0x40>
 801bb84:	2f45      	cmp	r7, #69	; 0x45
 801bb86:	d100      	bne.n	801bb8a <__cvt+0x3c>
 801bb88:	3601      	adds	r6, #1
 801bb8a:	2102      	movs	r1, #2
 801bb8c:	e000      	b.n	801bb90 <__cvt+0x42>
 801bb8e:	2103      	movs	r1, #3
 801bb90:	ab03      	add	r3, sp, #12
 801bb92:	9301      	str	r3, [sp, #4]
 801bb94:	ab02      	add	r3, sp, #8
 801bb96:	9300      	str	r3, [sp, #0]
 801bb98:	4632      	mov	r2, r6
 801bb9a:	4653      	mov	r3, sl
 801bb9c:	ec45 4b10 	vmov	d0, r4, r5
 801bba0:	f000 feb2 	bl	801c908 <_dtoa_r>
 801bba4:	2f47      	cmp	r7, #71	; 0x47
 801bba6:	4680      	mov	r8, r0
 801bba8:	d102      	bne.n	801bbb0 <__cvt+0x62>
 801bbaa:	f019 0f01 	tst.w	r9, #1
 801bbae:	d026      	beq.n	801bbfe <__cvt+0xb0>
 801bbb0:	2f46      	cmp	r7, #70	; 0x46
 801bbb2:	eb08 0906 	add.w	r9, r8, r6
 801bbb6:	d111      	bne.n	801bbdc <__cvt+0x8e>
 801bbb8:	f898 3000 	ldrb.w	r3, [r8]
 801bbbc:	2b30      	cmp	r3, #48	; 0x30
 801bbbe:	d10a      	bne.n	801bbd6 <__cvt+0x88>
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	2300      	movs	r3, #0
 801bbc4:	4620      	mov	r0, r4
 801bbc6:	4629      	mov	r1, r5
 801bbc8:	f7e4 ff9e 	bl	8000b08 <__aeabi_dcmpeq>
 801bbcc:	b918      	cbnz	r0, 801bbd6 <__cvt+0x88>
 801bbce:	f1c6 0601 	rsb	r6, r6, #1
 801bbd2:	f8ca 6000 	str.w	r6, [sl]
 801bbd6:	f8da 3000 	ldr.w	r3, [sl]
 801bbda:	4499      	add	r9, r3
 801bbdc:	2200      	movs	r2, #0
 801bbde:	2300      	movs	r3, #0
 801bbe0:	4620      	mov	r0, r4
 801bbe2:	4629      	mov	r1, r5
 801bbe4:	f7e4 ff90 	bl	8000b08 <__aeabi_dcmpeq>
 801bbe8:	b938      	cbnz	r0, 801bbfa <__cvt+0xac>
 801bbea:	2230      	movs	r2, #48	; 0x30
 801bbec:	9b03      	ldr	r3, [sp, #12]
 801bbee:	454b      	cmp	r3, r9
 801bbf0:	d205      	bcs.n	801bbfe <__cvt+0xb0>
 801bbf2:	1c59      	adds	r1, r3, #1
 801bbf4:	9103      	str	r1, [sp, #12]
 801bbf6:	701a      	strb	r2, [r3, #0]
 801bbf8:	e7f8      	b.n	801bbec <__cvt+0x9e>
 801bbfa:	f8cd 900c 	str.w	r9, [sp, #12]
 801bbfe:	9b03      	ldr	r3, [sp, #12]
 801bc00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bc02:	eba3 0308 	sub.w	r3, r3, r8
 801bc06:	4640      	mov	r0, r8
 801bc08:	6013      	str	r3, [r2, #0]
 801bc0a:	b004      	add	sp, #16
 801bc0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801bc10 <__exponent>:
 801bc10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bc12:	2900      	cmp	r1, #0
 801bc14:	4604      	mov	r4, r0
 801bc16:	bfba      	itte	lt
 801bc18:	4249      	neglt	r1, r1
 801bc1a:	232d      	movlt	r3, #45	; 0x2d
 801bc1c:	232b      	movge	r3, #43	; 0x2b
 801bc1e:	2909      	cmp	r1, #9
 801bc20:	f804 2b02 	strb.w	r2, [r4], #2
 801bc24:	7043      	strb	r3, [r0, #1]
 801bc26:	dd20      	ble.n	801bc6a <__exponent+0x5a>
 801bc28:	f10d 0307 	add.w	r3, sp, #7
 801bc2c:	461f      	mov	r7, r3
 801bc2e:	260a      	movs	r6, #10
 801bc30:	fb91 f5f6 	sdiv	r5, r1, r6
 801bc34:	fb06 1115 	mls	r1, r6, r5, r1
 801bc38:	3130      	adds	r1, #48	; 0x30
 801bc3a:	2d09      	cmp	r5, #9
 801bc3c:	f803 1c01 	strb.w	r1, [r3, #-1]
 801bc40:	f103 32ff 	add.w	r2, r3, #4294967295
 801bc44:	4629      	mov	r1, r5
 801bc46:	dc09      	bgt.n	801bc5c <__exponent+0x4c>
 801bc48:	3130      	adds	r1, #48	; 0x30
 801bc4a:	3b02      	subs	r3, #2
 801bc4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 801bc50:	42bb      	cmp	r3, r7
 801bc52:	4622      	mov	r2, r4
 801bc54:	d304      	bcc.n	801bc60 <__exponent+0x50>
 801bc56:	1a10      	subs	r0, r2, r0
 801bc58:	b003      	add	sp, #12
 801bc5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bc5c:	4613      	mov	r3, r2
 801bc5e:	e7e7      	b.n	801bc30 <__exponent+0x20>
 801bc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc64:	f804 2b01 	strb.w	r2, [r4], #1
 801bc68:	e7f2      	b.n	801bc50 <__exponent+0x40>
 801bc6a:	2330      	movs	r3, #48	; 0x30
 801bc6c:	4419      	add	r1, r3
 801bc6e:	7083      	strb	r3, [r0, #2]
 801bc70:	1d02      	adds	r2, r0, #4
 801bc72:	70c1      	strb	r1, [r0, #3]
 801bc74:	e7ef      	b.n	801bc56 <__exponent+0x46>
	...

0801bc78 <_printf_float>:
 801bc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc7c:	b08d      	sub	sp, #52	; 0x34
 801bc7e:	460c      	mov	r4, r1
 801bc80:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801bc84:	4616      	mov	r6, r2
 801bc86:	461f      	mov	r7, r3
 801bc88:	4605      	mov	r5, r0
 801bc8a:	f001 fd6f 	bl	801d76c <_localeconv_r>
 801bc8e:	6803      	ldr	r3, [r0, #0]
 801bc90:	9304      	str	r3, [sp, #16]
 801bc92:	4618      	mov	r0, r3
 801bc94:	f7e4 fabc 	bl	8000210 <strlen>
 801bc98:	2300      	movs	r3, #0
 801bc9a:	930a      	str	r3, [sp, #40]	; 0x28
 801bc9c:	f8d8 3000 	ldr.w	r3, [r8]
 801bca0:	9005      	str	r0, [sp, #20]
 801bca2:	3307      	adds	r3, #7
 801bca4:	f023 0307 	bic.w	r3, r3, #7
 801bca8:	f103 0208 	add.w	r2, r3, #8
 801bcac:	f894 a018 	ldrb.w	sl, [r4, #24]
 801bcb0:	f8d4 b000 	ldr.w	fp, [r4]
 801bcb4:	f8c8 2000 	str.w	r2, [r8]
 801bcb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcbc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801bcc0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801bcc4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801bcc8:	9307      	str	r3, [sp, #28]
 801bcca:	f8cd 8018 	str.w	r8, [sp, #24]
 801bcce:	f04f 32ff 	mov.w	r2, #4294967295
 801bcd2:	4ba7      	ldr	r3, [pc, #668]	; (801bf70 <_printf_float+0x2f8>)
 801bcd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bcd8:	f7e4 ff48 	bl	8000b6c <__aeabi_dcmpun>
 801bcdc:	bb70      	cbnz	r0, 801bd3c <_printf_float+0xc4>
 801bcde:	f04f 32ff 	mov.w	r2, #4294967295
 801bce2:	4ba3      	ldr	r3, [pc, #652]	; (801bf70 <_printf_float+0x2f8>)
 801bce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bce8:	f7e4 ff22 	bl	8000b30 <__aeabi_dcmple>
 801bcec:	bb30      	cbnz	r0, 801bd3c <_printf_float+0xc4>
 801bcee:	2200      	movs	r2, #0
 801bcf0:	2300      	movs	r3, #0
 801bcf2:	4640      	mov	r0, r8
 801bcf4:	4649      	mov	r1, r9
 801bcf6:	f7e4 ff11 	bl	8000b1c <__aeabi_dcmplt>
 801bcfa:	b110      	cbz	r0, 801bd02 <_printf_float+0x8a>
 801bcfc:	232d      	movs	r3, #45	; 0x2d
 801bcfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bd02:	4a9c      	ldr	r2, [pc, #624]	; (801bf74 <_printf_float+0x2fc>)
 801bd04:	4b9c      	ldr	r3, [pc, #624]	; (801bf78 <_printf_float+0x300>)
 801bd06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801bd0a:	bf8c      	ite	hi
 801bd0c:	4690      	movhi	r8, r2
 801bd0e:	4698      	movls	r8, r3
 801bd10:	2303      	movs	r3, #3
 801bd12:	f02b 0204 	bic.w	r2, fp, #4
 801bd16:	6123      	str	r3, [r4, #16]
 801bd18:	6022      	str	r2, [r4, #0]
 801bd1a:	f04f 0900 	mov.w	r9, #0
 801bd1e:	9700      	str	r7, [sp, #0]
 801bd20:	4633      	mov	r3, r6
 801bd22:	aa0b      	add	r2, sp, #44	; 0x2c
 801bd24:	4621      	mov	r1, r4
 801bd26:	4628      	mov	r0, r5
 801bd28:	f000 f9e6 	bl	801c0f8 <_printf_common>
 801bd2c:	3001      	adds	r0, #1
 801bd2e:	f040 808d 	bne.w	801be4c <_printf_float+0x1d4>
 801bd32:	f04f 30ff 	mov.w	r0, #4294967295
 801bd36:	b00d      	add	sp, #52	; 0x34
 801bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd3c:	4642      	mov	r2, r8
 801bd3e:	464b      	mov	r3, r9
 801bd40:	4640      	mov	r0, r8
 801bd42:	4649      	mov	r1, r9
 801bd44:	f7e4 ff12 	bl	8000b6c <__aeabi_dcmpun>
 801bd48:	b110      	cbz	r0, 801bd50 <_printf_float+0xd8>
 801bd4a:	4a8c      	ldr	r2, [pc, #560]	; (801bf7c <_printf_float+0x304>)
 801bd4c:	4b8c      	ldr	r3, [pc, #560]	; (801bf80 <_printf_float+0x308>)
 801bd4e:	e7da      	b.n	801bd06 <_printf_float+0x8e>
 801bd50:	6861      	ldr	r1, [r4, #4]
 801bd52:	1c4b      	adds	r3, r1, #1
 801bd54:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 801bd58:	a80a      	add	r0, sp, #40	; 0x28
 801bd5a:	d13e      	bne.n	801bdda <_printf_float+0x162>
 801bd5c:	2306      	movs	r3, #6
 801bd5e:	6063      	str	r3, [r4, #4]
 801bd60:	2300      	movs	r3, #0
 801bd62:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801bd66:	ab09      	add	r3, sp, #36	; 0x24
 801bd68:	9300      	str	r3, [sp, #0]
 801bd6a:	ec49 8b10 	vmov	d0, r8, r9
 801bd6e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801bd72:	6022      	str	r2, [r4, #0]
 801bd74:	f8cd a004 	str.w	sl, [sp, #4]
 801bd78:	6861      	ldr	r1, [r4, #4]
 801bd7a:	4628      	mov	r0, r5
 801bd7c:	f7ff fee7 	bl	801bb4e <__cvt>
 801bd80:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801bd84:	2b47      	cmp	r3, #71	; 0x47
 801bd86:	4680      	mov	r8, r0
 801bd88:	d109      	bne.n	801bd9e <_printf_float+0x126>
 801bd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd8c:	1cd8      	adds	r0, r3, #3
 801bd8e:	db02      	blt.n	801bd96 <_printf_float+0x11e>
 801bd90:	6862      	ldr	r2, [r4, #4]
 801bd92:	4293      	cmp	r3, r2
 801bd94:	dd47      	ble.n	801be26 <_printf_float+0x1ae>
 801bd96:	f1aa 0a02 	sub.w	sl, sl, #2
 801bd9a:	fa5f fa8a 	uxtb.w	sl, sl
 801bd9e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801bda2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bda4:	d824      	bhi.n	801bdf0 <_printf_float+0x178>
 801bda6:	3901      	subs	r1, #1
 801bda8:	4652      	mov	r2, sl
 801bdaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801bdae:	9109      	str	r1, [sp, #36]	; 0x24
 801bdb0:	f7ff ff2e 	bl	801bc10 <__exponent>
 801bdb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bdb6:	1813      	adds	r3, r2, r0
 801bdb8:	2a01      	cmp	r2, #1
 801bdba:	4681      	mov	r9, r0
 801bdbc:	6123      	str	r3, [r4, #16]
 801bdbe:	dc02      	bgt.n	801bdc6 <_printf_float+0x14e>
 801bdc0:	6822      	ldr	r2, [r4, #0]
 801bdc2:	07d1      	lsls	r1, r2, #31
 801bdc4:	d501      	bpl.n	801bdca <_printf_float+0x152>
 801bdc6:	3301      	adds	r3, #1
 801bdc8:	6123      	str	r3, [r4, #16]
 801bdca:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d0a5      	beq.n	801bd1e <_printf_float+0xa6>
 801bdd2:	232d      	movs	r3, #45	; 0x2d
 801bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bdd8:	e7a1      	b.n	801bd1e <_printf_float+0xa6>
 801bdda:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801bdde:	f000 8177 	beq.w	801c0d0 <_printf_float+0x458>
 801bde2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801bde6:	d1bb      	bne.n	801bd60 <_printf_float+0xe8>
 801bde8:	2900      	cmp	r1, #0
 801bdea:	d1b9      	bne.n	801bd60 <_printf_float+0xe8>
 801bdec:	2301      	movs	r3, #1
 801bdee:	e7b6      	b.n	801bd5e <_printf_float+0xe6>
 801bdf0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801bdf4:	d119      	bne.n	801be2a <_printf_float+0x1b2>
 801bdf6:	2900      	cmp	r1, #0
 801bdf8:	6863      	ldr	r3, [r4, #4]
 801bdfa:	dd0c      	ble.n	801be16 <_printf_float+0x19e>
 801bdfc:	6121      	str	r1, [r4, #16]
 801bdfe:	b913      	cbnz	r3, 801be06 <_printf_float+0x18e>
 801be00:	6822      	ldr	r2, [r4, #0]
 801be02:	07d2      	lsls	r2, r2, #31
 801be04:	d502      	bpl.n	801be0c <_printf_float+0x194>
 801be06:	3301      	adds	r3, #1
 801be08:	440b      	add	r3, r1
 801be0a:	6123      	str	r3, [r4, #16]
 801be0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be0e:	65a3      	str	r3, [r4, #88]	; 0x58
 801be10:	f04f 0900 	mov.w	r9, #0
 801be14:	e7d9      	b.n	801bdca <_printf_float+0x152>
 801be16:	b913      	cbnz	r3, 801be1e <_printf_float+0x1a6>
 801be18:	6822      	ldr	r2, [r4, #0]
 801be1a:	07d0      	lsls	r0, r2, #31
 801be1c:	d501      	bpl.n	801be22 <_printf_float+0x1aa>
 801be1e:	3302      	adds	r3, #2
 801be20:	e7f3      	b.n	801be0a <_printf_float+0x192>
 801be22:	2301      	movs	r3, #1
 801be24:	e7f1      	b.n	801be0a <_printf_float+0x192>
 801be26:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801be2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801be2e:	4293      	cmp	r3, r2
 801be30:	db05      	blt.n	801be3e <_printf_float+0x1c6>
 801be32:	6822      	ldr	r2, [r4, #0]
 801be34:	6123      	str	r3, [r4, #16]
 801be36:	07d1      	lsls	r1, r2, #31
 801be38:	d5e8      	bpl.n	801be0c <_printf_float+0x194>
 801be3a:	3301      	adds	r3, #1
 801be3c:	e7e5      	b.n	801be0a <_printf_float+0x192>
 801be3e:	2b00      	cmp	r3, #0
 801be40:	bfd4      	ite	le
 801be42:	f1c3 0302 	rsble	r3, r3, #2
 801be46:	2301      	movgt	r3, #1
 801be48:	4413      	add	r3, r2
 801be4a:	e7de      	b.n	801be0a <_printf_float+0x192>
 801be4c:	6823      	ldr	r3, [r4, #0]
 801be4e:	055a      	lsls	r2, r3, #21
 801be50:	d407      	bmi.n	801be62 <_printf_float+0x1ea>
 801be52:	6923      	ldr	r3, [r4, #16]
 801be54:	4642      	mov	r2, r8
 801be56:	4631      	mov	r1, r6
 801be58:	4628      	mov	r0, r5
 801be5a:	47b8      	blx	r7
 801be5c:	3001      	adds	r0, #1
 801be5e:	d12b      	bne.n	801beb8 <_printf_float+0x240>
 801be60:	e767      	b.n	801bd32 <_printf_float+0xba>
 801be62:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801be66:	f240 80dc 	bls.w	801c022 <_printf_float+0x3aa>
 801be6a:	2200      	movs	r2, #0
 801be6c:	2300      	movs	r3, #0
 801be6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801be72:	f7e4 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 801be76:	2800      	cmp	r0, #0
 801be78:	d033      	beq.n	801bee2 <_printf_float+0x26a>
 801be7a:	2301      	movs	r3, #1
 801be7c:	4a41      	ldr	r2, [pc, #260]	; (801bf84 <_printf_float+0x30c>)
 801be7e:	4631      	mov	r1, r6
 801be80:	4628      	mov	r0, r5
 801be82:	47b8      	blx	r7
 801be84:	3001      	adds	r0, #1
 801be86:	f43f af54 	beq.w	801bd32 <_printf_float+0xba>
 801be8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801be8e:	429a      	cmp	r2, r3
 801be90:	db02      	blt.n	801be98 <_printf_float+0x220>
 801be92:	6823      	ldr	r3, [r4, #0]
 801be94:	07d8      	lsls	r0, r3, #31
 801be96:	d50f      	bpl.n	801beb8 <_printf_float+0x240>
 801be98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801be9c:	4631      	mov	r1, r6
 801be9e:	4628      	mov	r0, r5
 801bea0:	47b8      	blx	r7
 801bea2:	3001      	adds	r0, #1
 801bea4:	f43f af45 	beq.w	801bd32 <_printf_float+0xba>
 801bea8:	f04f 0800 	mov.w	r8, #0
 801beac:	f104 091a 	add.w	r9, r4, #26
 801beb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801beb2:	3b01      	subs	r3, #1
 801beb4:	4543      	cmp	r3, r8
 801beb6:	dc09      	bgt.n	801becc <_printf_float+0x254>
 801beb8:	6823      	ldr	r3, [r4, #0]
 801beba:	079b      	lsls	r3, r3, #30
 801bebc:	f100 8103 	bmi.w	801c0c6 <_printf_float+0x44e>
 801bec0:	68e0      	ldr	r0, [r4, #12]
 801bec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bec4:	4298      	cmp	r0, r3
 801bec6:	bfb8      	it	lt
 801bec8:	4618      	movlt	r0, r3
 801beca:	e734      	b.n	801bd36 <_printf_float+0xbe>
 801becc:	2301      	movs	r3, #1
 801bece:	464a      	mov	r2, r9
 801bed0:	4631      	mov	r1, r6
 801bed2:	4628      	mov	r0, r5
 801bed4:	47b8      	blx	r7
 801bed6:	3001      	adds	r0, #1
 801bed8:	f43f af2b 	beq.w	801bd32 <_printf_float+0xba>
 801bedc:	f108 0801 	add.w	r8, r8, #1
 801bee0:	e7e6      	b.n	801beb0 <_printf_float+0x238>
 801bee2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bee4:	2b00      	cmp	r3, #0
 801bee6:	dc2b      	bgt.n	801bf40 <_printf_float+0x2c8>
 801bee8:	2301      	movs	r3, #1
 801beea:	4a26      	ldr	r2, [pc, #152]	; (801bf84 <_printf_float+0x30c>)
 801beec:	4631      	mov	r1, r6
 801beee:	4628      	mov	r0, r5
 801bef0:	47b8      	blx	r7
 801bef2:	3001      	adds	r0, #1
 801bef4:	f43f af1d 	beq.w	801bd32 <_printf_float+0xba>
 801bef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801befa:	b923      	cbnz	r3, 801bf06 <_printf_float+0x28e>
 801befc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801befe:	b913      	cbnz	r3, 801bf06 <_printf_float+0x28e>
 801bf00:	6823      	ldr	r3, [r4, #0]
 801bf02:	07d9      	lsls	r1, r3, #31
 801bf04:	d5d8      	bpl.n	801beb8 <_printf_float+0x240>
 801bf06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf0a:	4631      	mov	r1, r6
 801bf0c:	4628      	mov	r0, r5
 801bf0e:	47b8      	blx	r7
 801bf10:	3001      	adds	r0, #1
 801bf12:	f43f af0e 	beq.w	801bd32 <_printf_float+0xba>
 801bf16:	f04f 0900 	mov.w	r9, #0
 801bf1a:	f104 0a1a 	add.w	sl, r4, #26
 801bf1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf20:	425b      	negs	r3, r3
 801bf22:	454b      	cmp	r3, r9
 801bf24:	dc01      	bgt.n	801bf2a <_printf_float+0x2b2>
 801bf26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf28:	e794      	b.n	801be54 <_printf_float+0x1dc>
 801bf2a:	2301      	movs	r3, #1
 801bf2c:	4652      	mov	r2, sl
 801bf2e:	4631      	mov	r1, r6
 801bf30:	4628      	mov	r0, r5
 801bf32:	47b8      	blx	r7
 801bf34:	3001      	adds	r0, #1
 801bf36:	f43f aefc 	beq.w	801bd32 <_printf_float+0xba>
 801bf3a:	f109 0901 	add.w	r9, r9, #1
 801bf3e:	e7ee      	b.n	801bf1e <_printf_float+0x2a6>
 801bf40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bf42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801bf44:	429a      	cmp	r2, r3
 801bf46:	bfa8      	it	ge
 801bf48:	461a      	movge	r2, r3
 801bf4a:	2a00      	cmp	r2, #0
 801bf4c:	4691      	mov	r9, r2
 801bf4e:	dd07      	ble.n	801bf60 <_printf_float+0x2e8>
 801bf50:	4613      	mov	r3, r2
 801bf52:	4631      	mov	r1, r6
 801bf54:	4642      	mov	r2, r8
 801bf56:	4628      	mov	r0, r5
 801bf58:	47b8      	blx	r7
 801bf5a:	3001      	adds	r0, #1
 801bf5c:	f43f aee9 	beq.w	801bd32 <_printf_float+0xba>
 801bf60:	f104 031a 	add.w	r3, r4, #26
 801bf64:	f04f 0b00 	mov.w	fp, #0
 801bf68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801bf6c:	9306      	str	r3, [sp, #24]
 801bf6e:	e015      	b.n	801bf9c <_printf_float+0x324>
 801bf70:	7fefffff 	.word	0x7fefffff
 801bf74:	080206b0 	.word	0x080206b0
 801bf78:	080206ac 	.word	0x080206ac
 801bf7c:	080206b8 	.word	0x080206b8
 801bf80:	080206b4 	.word	0x080206b4
 801bf84:	080206bc 	.word	0x080206bc
 801bf88:	2301      	movs	r3, #1
 801bf8a:	9a06      	ldr	r2, [sp, #24]
 801bf8c:	4631      	mov	r1, r6
 801bf8e:	4628      	mov	r0, r5
 801bf90:	47b8      	blx	r7
 801bf92:	3001      	adds	r0, #1
 801bf94:	f43f aecd 	beq.w	801bd32 <_printf_float+0xba>
 801bf98:	f10b 0b01 	add.w	fp, fp, #1
 801bf9c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801bfa0:	ebaa 0309 	sub.w	r3, sl, r9
 801bfa4:	455b      	cmp	r3, fp
 801bfa6:	dcef      	bgt.n	801bf88 <_printf_float+0x310>
 801bfa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801bfac:	429a      	cmp	r2, r3
 801bfae:	44d0      	add	r8, sl
 801bfb0:	db15      	blt.n	801bfde <_printf_float+0x366>
 801bfb2:	6823      	ldr	r3, [r4, #0]
 801bfb4:	07da      	lsls	r2, r3, #31
 801bfb6:	d412      	bmi.n	801bfde <_printf_float+0x366>
 801bfb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bfba:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bfbc:	eba3 020a 	sub.w	r2, r3, sl
 801bfc0:	eba3 0a01 	sub.w	sl, r3, r1
 801bfc4:	4592      	cmp	sl, r2
 801bfc6:	bfa8      	it	ge
 801bfc8:	4692      	movge	sl, r2
 801bfca:	f1ba 0f00 	cmp.w	sl, #0
 801bfce:	dc0e      	bgt.n	801bfee <_printf_float+0x376>
 801bfd0:	f04f 0800 	mov.w	r8, #0
 801bfd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bfd8:	f104 091a 	add.w	r9, r4, #26
 801bfdc:	e019      	b.n	801c012 <_printf_float+0x39a>
 801bfde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bfe2:	4631      	mov	r1, r6
 801bfe4:	4628      	mov	r0, r5
 801bfe6:	47b8      	blx	r7
 801bfe8:	3001      	adds	r0, #1
 801bfea:	d1e5      	bne.n	801bfb8 <_printf_float+0x340>
 801bfec:	e6a1      	b.n	801bd32 <_printf_float+0xba>
 801bfee:	4653      	mov	r3, sl
 801bff0:	4642      	mov	r2, r8
 801bff2:	4631      	mov	r1, r6
 801bff4:	4628      	mov	r0, r5
 801bff6:	47b8      	blx	r7
 801bff8:	3001      	adds	r0, #1
 801bffa:	d1e9      	bne.n	801bfd0 <_printf_float+0x358>
 801bffc:	e699      	b.n	801bd32 <_printf_float+0xba>
 801bffe:	2301      	movs	r3, #1
 801c000:	464a      	mov	r2, r9
 801c002:	4631      	mov	r1, r6
 801c004:	4628      	mov	r0, r5
 801c006:	47b8      	blx	r7
 801c008:	3001      	adds	r0, #1
 801c00a:	f43f ae92 	beq.w	801bd32 <_printf_float+0xba>
 801c00e:	f108 0801 	add.w	r8, r8, #1
 801c012:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c016:	1a9b      	subs	r3, r3, r2
 801c018:	eba3 030a 	sub.w	r3, r3, sl
 801c01c:	4543      	cmp	r3, r8
 801c01e:	dcee      	bgt.n	801bffe <_printf_float+0x386>
 801c020:	e74a      	b.n	801beb8 <_printf_float+0x240>
 801c022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c024:	2a01      	cmp	r2, #1
 801c026:	dc01      	bgt.n	801c02c <_printf_float+0x3b4>
 801c028:	07db      	lsls	r3, r3, #31
 801c02a:	d53a      	bpl.n	801c0a2 <_printf_float+0x42a>
 801c02c:	2301      	movs	r3, #1
 801c02e:	4642      	mov	r2, r8
 801c030:	4631      	mov	r1, r6
 801c032:	4628      	mov	r0, r5
 801c034:	47b8      	blx	r7
 801c036:	3001      	adds	r0, #1
 801c038:	f43f ae7b 	beq.w	801bd32 <_printf_float+0xba>
 801c03c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801c040:	4631      	mov	r1, r6
 801c042:	4628      	mov	r0, r5
 801c044:	47b8      	blx	r7
 801c046:	3001      	adds	r0, #1
 801c048:	f108 0801 	add.w	r8, r8, #1
 801c04c:	f43f ae71 	beq.w	801bd32 <_printf_float+0xba>
 801c050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c052:	2200      	movs	r2, #0
 801c054:	f103 3aff 	add.w	sl, r3, #4294967295
 801c058:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c05c:	2300      	movs	r3, #0
 801c05e:	f7e4 fd53 	bl	8000b08 <__aeabi_dcmpeq>
 801c062:	b9c8      	cbnz	r0, 801c098 <_printf_float+0x420>
 801c064:	4653      	mov	r3, sl
 801c066:	4642      	mov	r2, r8
 801c068:	4631      	mov	r1, r6
 801c06a:	4628      	mov	r0, r5
 801c06c:	47b8      	blx	r7
 801c06e:	3001      	adds	r0, #1
 801c070:	d10e      	bne.n	801c090 <_printf_float+0x418>
 801c072:	e65e      	b.n	801bd32 <_printf_float+0xba>
 801c074:	2301      	movs	r3, #1
 801c076:	4652      	mov	r2, sl
 801c078:	4631      	mov	r1, r6
 801c07a:	4628      	mov	r0, r5
 801c07c:	47b8      	blx	r7
 801c07e:	3001      	adds	r0, #1
 801c080:	f43f ae57 	beq.w	801bd32 <_printf_float+0xba>
 801c084:	f108 0801 	add.w	r8, r8, #1
 801c088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c08a:	3b01      	subs	r3, #1
 801c08c:	4543      	cmp	r3, r8
 801c08e:	dcf1      	bgt.n	801c074 <_printf_float+0x3fc>
 801c090:	464b      	mov	r3, r9
 801c092:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c096:	e6de      	b.n	801be56 <_printf_float+0x1de>
 801c098:	f04f 0800 	mov.w	r8, #0
 801c09c:	f104 0a1a 	add.w	sl, r4, #26
 801c0a0:	e7f2      	b.n	801c088 <_printf_float+0x410>
 801c0a2:	2301      	movs	r3, #1
 801c0a4:	e7df      	b.n	801c066 <_printf_float+0x3ee>
 801c0a6:	2301      	movs	r3, #1
 801c0a8:	464a      	mov	r2, r9
 801c0aa:	4631      	mov	r1, r6
 801c0ac:	4628      	mov	r0, r5
 801c0ae:	47b8      	blx	r7
 801c0b0:	3001      	adds	r0, #1
 801c0b2:	f43f ae3e 	beq.w	801bd32 <_printf_float+0xba>
 801c0b6:	f108 0801 	add.w	r8, r8, #1
 801c0ba:	68e3      	ldr	r3, [r4, #12]
 801c0bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801c0be:	1a9b      	subs	r3, r3, r2
 801c0c0:	4543      	cmp	r3, r8
 801c0c2:	dcf0      	bgt.n	801c0a6 <_printf_float+0x42e>
 801c0c4:	e6fc      	b.n	801bec0 <_printf_float+0x248>
 801c0c6:	f04f 0800 	mov.w	r8, #0
 801c0ca:	f104 0919 	add.w	r9, r4, #25
 801c0ce:	e7f4      	b.n	801c0ba <_printf_float+0x442>
 801c0d0:	2900      	cmp	r1, #0
 801c0d2:	f43f ae8b 	beq.w	801bdec <_printf_float+0x174>
 801c0d6:	2300      	movs	r3, #0
 801c0d8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801c0dc:	ab09      	add	r3, sp, #36	; 0x24
 801c0de:	9300      	str	r3, [sp, #0]
 801c0e0:	ec49 8b10 	vmov	d0, r8, r9
 801c0e4:	6022      	str	r2, [r4, #0]
 801c0e6:	f8cd a004 	str.w	sl, [sp, #4]
 801c0ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c0ee:	4628      	mov	r0, r5
 801c0f0:	f7ff fd2d 	bl	801bb4e <__cvt>
 801c0f4:	4680      	mov	r8, r0
 801c0f6:	e648      	b.n	801bd8a <_printf_float+0x112>

0801c0f8 <_printf_common>:
 801c0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c0fc:	4691      	mov	r9, r2
 801c0fe:	461f      	mov	r7, r3
 801c100:	688a      	ldr	r2, [r1, #8]
 801c102:	690b      	ldr	r3, [r1, #16]
 801c104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c108:	4293      	cmp	r3, r2
 801c10a:	bfb8      	it	lt
 801c10c:	4613      	movlt	r3, r2
 801c10e:	f8c9 3000 	str.w	r3, [r9]
 801c112:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c116:	4606      	mov	r6, r0
 801c118:	460c      	mov	r4, r1
 801c11a:	b112      	cbz	r2, 801c122 <_printf_common+0x2a>
 801c11c:	3301      	adds	r3, #1
 801c11e:	f8c9 3000 	str.w	r3, [r9]
 801c122:	6823      	ldr	r3, [r4, #0]
 801c124:	0699      	lsls	r1, r3, #26
 801c126:	bf42      	ittt	mi
 801c128:	f8d9 3000 	ldrmi.w	r3, [r9]
 801c12c:	3302      	addmi	r3, #2
 801c12e:	f8c9 3000 	strmi.w	r3, [r9]
 801c132:	6825      	ldr	r5, [r4, #0]
 801c134:	f015 0506 	ands.w	r5, r5, #6
 801c138:	d107      	bne.n	801c14a <_printf_common+0x52>
 801c13a:	f104 0a19 	add.w	sl, r4, #25
 801c13e:	68e3      	ldr	r3, [r4, #12]
 801c140:	f8d9 2000 	ldr.w	r2, [r9]
 801c144:	1a9b      	subs	r3, r3, r2
 801c146:	42ab      	cmp	r3, r5
 801c148:	dc28      	bgt.n	801c19c <_printf_common+0xa4>
 801c14a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801c14e:	6822      	ldr	r2, [r4, #0]
 801c150:	3300      	adds	r3, #0
 801c152:	bf18      	it	ne
 801c154:	2301      	movne	r3, #1
 801c156:	0692      	lsls	r2, r2, #26
 801c158:	d42d      	bmi.n	801c1b6 <_printf_common+0xbe>
 801c15a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c15e:	4639      	mov	r1, r7
 801c160:	4630      	mov	r0, r6
 801c162:	47c0      	blx	r8
 801c164:	3001      	adds	r0, #1
 801c166:	d020      	beq.n	801c1aa <_printf_common+0xb2>
 801c168:	6823      	ldr	r3, [r4, #0]
 801c16a:	68e5      	ldr	r5, [r4, #12]
 801c16c:	f8d9 2000 	ldr.w	r2, [r9]
 801c170:	f003 0306 	and.w	r3, r3, #6
 801c174:	2b04      	cmp	r3, #4
 801c176:	bf08      	it	eq
 801c178:	1aad      	subeq	r5, r5, r2
 801c17a:	68a3      	ldr	r3, [r4, #8]
 801c17c:	6922      	ldr	r2, [r4, #16]
 801c17e:	bf0c      	ite	eq
 801c180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c184:	2500      	movne	r5, #0
 801c186:	4293      	cmp	r3, r2
 801c188:	bfc4      	itt	gt
 801c18a:	1a9b      	subgt	r3, r3, r2
 801c18c:	18ed      	addgt	r5, r5, r3
 801c18e:	f04f 0900 	mov.w	r9, #0
 801c192:	341a      	adds	r4, #26
 801c194:	454d      	cmp	r5, r9
 801c196:	d11a      	bne.n	801c1ce <_printf_common+0xd6>
 801c198:	2000      	movs	r0, #0
 801c19a:	e008      	b.n	801c1ae <_printf_common+0xb6>
 801c19c:	2301      	movs	r3, #1
 801c19e:	4652      	mov	r2, sl
 801c1a0:	4639      	mov	r1, r7
 801c1a2:	4630      	mov	r0, r6
 801c1a4:	47c0      	blx	r8
 801c1a6:	3001      	adds	r0, #1
 801c1a8:	d103      	bne.n	801c1b2 <_printf_common+0xba>
 801c1aa:	f04f 30ff 	mov.w	r0, #4294967295
 801c1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1b2:	3501      	adds	r5, #1
 801c1b4:	e7c3      	b.n	801c13e <_printf_common+0x46>
 801c1b6:	18e1      	adds	r1, r4, r3
 801c1b8:	1c5a      	adds	r2, r3, #1
 801c1ba:	2030      	movs	r0, #48	; 0x30
 801c1bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c1c0:	4422      	add	r2, r4
 801c1c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c1c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c1ca:	3302      	adds	r3, #2
 801c1cc:	e7c5      	b.n	801c15a <_printf_common+0x62>
 801c1ce:	2301      	movs	r3, #1
 801c1d0:	4622      	mov	r2, r4
 801c1d2:	4639      	mov	r1, r7
 801c1d4:	4630      	mov	r0, r6
 801c1d6:	47c0      	blx	r8
 801c1d8:	3001      	adds	r0, #1
 801c1da:	d0e6      	beq.n	801c1aa <_printf_common+0xb2>
 801c1dc:	f109 0901 	add.w	r9, r9, #1
 801c1e0:	e7d8      	b.n	801c194 <_printf_common+0x9c>
	...

0801c1e4 <_printf_i>:
 801c1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c1e8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801c1ec:	460c      	mov	r4, r1
 801c1ee:	7e09      	ldrb	r1, [r1, #24]
 801c1f0:	b085      	sub	sp, #20
 801c1f2:	296e      	cmp	r1, #110	; 0x6e
 801c1f4:	4617      	mov	r7, r2
 801c1f6:	4606      	mov	r6, r0
 801c1f8:	4698      	mov	r8, r3
 801c1fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c1fc:	f000 80b3 	beq.w	801c366 <_printf_i+0x182>
 801c200:	d822      	bhi.n	801c248 <_printf_i+0x64>
 801c202:	2963      	cmp	r1, #99	; 0x63
 801c204:	d036      	beq.n	801c274 <_printf_i+0x90>
 801c206:	d80a      	bhi.n	801c21e <_printf_i+0x3a>
 801c208:	2900      	cmp	r1, #0
 801c20a:	f000 80b9 	beq.w	801c380 <_printf_i+0x19c>
 801c20e:	2958      	cmp	r1, #88	; 0x58
 801c210:	f000 8083 	beq.w	801c31a <_printf_i+0x136>
 801c214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c218:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801c21c:	e032      	b.n	801c284 <_printf_i+0xa0>
 801c21e:	2964      	cmp	r1, #100	; 0x64
 801c220:	d001      	beq.n	801c226 <_printf_i+0x42>
 801c222:	2969      	cmp	r1, #105	; 0x69
 801c224:	d1f6      	bne.n	801c214 <_printf_i+0x30>
 801c226:	6820      	ldr	r0, [r4, #0]
 801c228:	6813      	ldr	r3, [r2, #0]
 801c22a:	0605      	lsls	r5, r0, #24
 801c22c:	f103 0104 	add.w	r1, r3, #4
 801c230:	d52a      	bpl.n	801c288 <_printf_i+0xa4>
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	6011      	str	r1, [r2, #0]
 801c236:	2b00      	cmp	r3, #0
 801c238:	da03      	bge.n	801c242 <_printf_i+0x5e>
 801c23a:	222d      	movs	r2, #45	; 0x2d
 801c23c:	425b      	negs	r3, r3
 801c23e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801c242:	486f      	ldr	r0, [pc, #444]	; (801c400 <_printf_i+0x21c>)
 801c244:	220a      	movs	r2, #10
 801c246:	e039      	b.n	801c2bc <_printf_i+0xd8>
 801c248:	2973      	cmp	r1, #115	; 0x73
 801c24a:	f000 809d 	beq.w	801c388 <_printf_i+0x1a4>
 801c24e:	d808      	bhi.n	801c262 <_printf_i+0x7e>
 801c250:	296f      	cmp	r1, #111	; 0x6f
 801c252:	d020      	beq.n	801c296 <_printf_i+0xb2>
 801c254:	2970      	cmp	r1, #112	; 0x70
 801c256:	d1dd      	bne.n	801c214 <_printf_i+0x30>
 801c258:	6823      	ldr	r3, [r4, #0]
 801c25a:	f043 0320 	orr.w	r3, r3, #32
 801c25e:	6023      	str	r3, [r4, #0]
 801c260:	e003      	b.n	801c26a <_printf_i+0x86>
 801c262:	2975      	cmp	r1, #117	; 0x75
 801c264:	d017      	beq.n	801c296 <_printf_i+0xb2>
 801c266:	2978      	cmp	r1, #120	; 0x78
 801c268:	d1d4      	bne.n	801c214 <_printf_i+0x30>
 801c26a:	2378      	movs	r3, #120	; 0x78
 801c26c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c270:	4864      	ldr	r0, [pc, #400]	; (801c404 <_printf_i+0x220>)
 801c272:	e055      	b.n	801c320 <_printf_i+0x13c>
 801c274:	6813      	ldr	r3, [r2, #0]
 801c276:	1d19      	adds	r1, r3, #4
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	6011      	str	r1, [r2, #0]
 801c27c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c284:	2301      	movs	r3, #1
 801c286:	e08c      	b.n	801c3a2 <_printf_i+0x1be>
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	6011      	str	r1, [r2, #0]
 801c28c:	f010 0f40 	tst.w	r0, #64	; 0x40
 801c290:	bf18      	it	ne
 801c292:	b21b      	sxthne	r3, r3
 801c294:	e7cf      	b.n	801c236 <_printf_i+0x52>
 801c296:	6813      	ldr	r3, [r2, #0]
 801c298:	6825      	ldr	r5, [r4, #0]
 801c29a:	1d18      	adds	r0, r3, #4
 801c29c:	6010      	str	r0, [r2, #0]
 801c29e:	0628      	lsls	r0, r5, #24
 801c2a0:	d501      	bpl.n	801c2a6 <_printf_i+0xc2>
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	e002      	b.n	801c2ac <_printf_i+0xc8>
 801c2a6:	0668      	lsls	r0, r5, #25
 801c2a8:	d5fb      	bpl.n	801c2a2 <_printf_i+0xbe>
 801c2aa:	881b      	ldrh	r3, [r3, #0]
 801c2ac:	4854      	ldr	r0, [pc, #336]	; (801c400 <_printf_i+0x21c>)
 801c2ae:	296f      	cmp	r1, #111	; 0x6f
 801c2b0:	bf14      	ite	ne
 801c2b2:	220a      	movne	r2, #10
 801c2b4:	2208      	moveq	r2, #8
 801c2b6:	2100      	movs	r1, #0
 801c2b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c2bc:	6865      	ldr	r5, [r4, #4]
 801c2be:	60a5      	str	r5, [r4, #8]
 801c2c0:	2d00      	cmp	r5, #0
 801c2c2:	f2c0 8095 	blt.w	801c3f0 <_printf_i+0x20c>
 801c2c6:	6821      	ldr	r1, [r4, #0]
 801c2c8:	f021 0104 	bic.w	r1, r1, #4
 801c2cc:	6021      	str	r1, [r4, #0]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d13d      	bne.n	801c34e <_printf_i+0x16a>
 801c2d2:	2d00      	cmp	r5, #0
 801c2d4:	f040 808e 	bne.w	801c3f4 <_printf_i+0x210>
 801c2d8:	4665      	mov	r5, ip
 801c2da:	2a08      	cmp	r2, #8
 801c2dc:	d10b      	bne.n	801c2f6 <_printf_i+0x112>
 801c2de:	6823      	ldr	r3, [r4, #0]
 801c2e0:	07db      	lsls	r3, r3, #31
 801c2e2:	d508      	bpl.n	801c2f6 <_printf_i+0x112>
 801c2e4:	6923      	ldr	r3, [r4, #16]
 801c2e6:	6862      	ldr	r2, [r4, #4]
 801c2e8:	429a      	cmp	r2, r3
 801c2ea:	bfde      	ittt	le
 801c2ec:	2330      	movle	r3, #48	; 0x30
 801c2ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c2f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 801c2f6:	ebac 0305 	sub.w	r3, ip, r5
 801c2fa:	6123      	str	r3, [r4, #16]
 801c2fc:	f8cd 8000 	str.w	r8, [sp]
 801c300:	463b      	mov	r3, r7
 801c302:	aa03      	add	r2, sp, #12
 801c304:	4621      	mov	r1, r4
 801c306:	4630      	mov	r0, r6
 801c308:	f7ff fef6 	bl	801c0f8 <_printf_common>
 801c30c:	3001      	adds	r0, #1
 801c30e:	d14d      	bne.n	801c3ac <_printf_i+0x1c8>
 801c310:	f04f 30ff 	mov.w	r0, #4294967295
 801c314:	b005      	add	sp, #20
 801c316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c31a:	4839      	ldr	r0, [pc, #228]	; (801c400 <_printf_i+0x21c>)
 801c31c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801c320:	6813      	ldr	r3, [r2, #0]
 801c322:	6821      	ldr	r1, [r4, #0]
 801c324:	1d1d      	adds	r5, r3, #4
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	6015      	str	r5, [r2, #0]
 801c32a:	060a      	lsls	r2, r1, #24
 801c32c:	d50b      	bpl.n	801c346 <_printf_i+0x162>
 801c32e:	07ca      	lsls	r2, r1, #31
 801c330:	bf44      	itt	mi
 801c332:	f041 0120 	orrmi.w	r1, r1, #32
 801c336:	6021      	strmi	r1, [r4, #0]
 801c338:	b91b      	cbnz	r3, 801c342 <_printf_i+0x15e>
 801c33a:	6822      	ldr	r2, [r4, #0]
 801c33c:	f022 0220 	bic.w	r2, r2, #32
 801c340:	6022      	str	r2, [r4, #0]
 801c342:	2210      	movs	r2, #16
 801c344:	e7b7      	b.n	801c2b6 <_printf_i+0xd2>
 801c346:	064d      	lsls	r5, r1, #25
 801c348:	bf48      	it	mi
 801c34a:	b29b      	uxthmi	r3, r3
 801c34c:	e7ef      	b.n	801c32e <_printf_i+0x14a>
 801c34e:	4665      	mov	r5, ip
 801c350:	fbb3 f1f2 	udiv	r1, r3, r2
 801c354:	fb02 3311 	mls	r3, r2, r1, r3
 801c358:	5cc3      	ldrb	r3, [r0, r3]
 801c35a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801c35e:	460b      	mov	r3, r1
 801c360:	2900      	cmp	r1, #0
 801c362:	d1f5      	bne.n	801c350 <_printf_i+0x16c>
 801c364:	e7b9      	b.n	801c2da <_printf_i+0xf6>
 801c366:	6813      	ldr	r3, [r2, #0]
 801c368:	6825      	ldr	r5, [r4, #0]
 801c36a:	6961      	ldr	r1, [r4, #20]
 801c36c:	1d18      	adds	r0, r3, #4
 801c36e:	6010      	str	r0, [r2, #0]
 801c370:	0628      	lsls	r0, r5, #24
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	d501      	bpl.n	801c37a <_printf_i+0x196>
 801c376:	6019      	str	r1, [r3, #0]
 801c378:	e002      	b.n	801c380 <_printf_i+0x19c>
 801c37a:	066a      	lsls	r2, r5, #25
 801c37c:	d5fb      	bpl.n	801c376 <_printf_i+0x192>
 801c37e:	8019      	strh	r1, [r3, #0]
 801c380:	2300      	movs	r3, #0
 801c382:	6123      	str	r3, [r4, #16]
 801c384:	4665      	mov	r5, ip
 801c386:	e7b9      	b.n	801c2fc <_printf_i+0x118>
 801c388:	6813      	ldr	r3, [r2, #0]
 801c38a:	1d19      	adds	r1, r3, #4
 801c38c:	6011      	str	r1, [r2, #0]
 801c38e:	681d      	ldr	r5, [r3, #0]
 801c390:	6862      	ldr	r2, [r4, #4]
 801c392:	2100      	movs	r1, #0
 801c394:	4628      	mov	r0, r5
 801c396:	f7e3 ff43 	bl	8000220 <memchr>
 801c39a:	b108      	cbz	r0, 801c3a0 <_printf_i+0x1bc>
 801c39c:	1b40      	subs	r0, r0, r5
 801c39e:	6060      	str	r0, [r4, #4]
 801c3a0:	6863      	ldr	r3, [r4, #4]
 801c3a2:	6123      	str	r3, [r4, #16]
 801c3a4:	2300      	movs	r3, #0
 801c3a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c3aa:	e7a7      	b.n	801c2fc <_printf_i+0x118>
 801c3ac:	6923      	ldr	r3, [r4, #16]
 801c3ae:	462a      	mov	r2, r5
 801c3b0:	4639      	mov	r1, r7
 801c3b2:	4630      	mov	r0, r6
 801c3b4:	47c0      	blx	r8
 801c3b6:	3001      	adds	r0, #1
 801c3b8:	d0aa      	beq.n	801c310 <_printf_i+0x12c>
 801c3ba:	6823      	ldr	r3, [r4, #0]
 801c3bc:	079b      	lsls	r3, r3, #30
 801c3be:	d413      	bmi.n	801c3e8 <_printf_i+0x204>
 801c3c0:	68e0      	ldr	r0, [r4, #12]
 801c3c2:	9b03      	ldr	r3, [sp, #12]
 801c3c4:	4298      	cmp	r0, r3
 801c3c6:	bfb8      	it	lt
 801c3c8:	4618      	movlt	r0, r3
 801c3ca:	e7a3      	b.n	801c314 <_printf_i+0x130>
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	464a      	mov	r2, r9
 801c3d0:	4639      	mov	r1, r7
 801c3d2:	4630      	mov	r0, r6
 801c3d4:	47c0      	blx	r8
 801c3d6:	3001      	adds	r0, #1
 801c3d8:	d09a      	beq.n	801c310 <_printf_i+0x12c>
 801c3da:	3501      	adds	r5, #1
 801c3dc:	68e3      	ldr	r3, [r4, #12]
 801c3de:	9a03      	ldr	r2, [sp, #12]
 801c3e0:	1a9b      	subs	r3, r3, r2
 801c3e2:	42ab      	cmp	r3, r5
 801c3e4:	dcf2      	bgt.n	801c3cc <_printf_i+0x1e8>
 801c3e6:	e7eb      	b.n	801c3c0 <_printf_i+0x1dc>
 801c3e8:	2500      	movs	r5, #0
 801c3ea:	f104 0919 	add.w	r9, r4, #25
 801c3ee:	e7f5      	b.n	801c3dc <_printf_i+0x1f8>
 801c3f0:	2b00      	cmp	r3, #0
 801c3f2:	d1ac      	bne.n	801c34e <_printf_i+0x16a>
 801c3f4:	7803      	ldrb	r3, [r0, #0]
 801c3f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c3fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c3fe:	e76c      	b.n	801c2da <_printf_i+0xf6>
 801c400:	080206be 	.word	0x080206be
 801c404:	080206cf 	.word	0x080206cf

0801c408 <iprintf>:
 801c408:	b40f      	push	{r0, r1, r2, r3}
 801c40a:	4b0a      	ldr	r3, [pc, #40]	; (801c434 <iprintf+0x2c>)
 801c40c:	b513      	push	{r0, r1, r4, lr}
 801c40e:	681c      	ldr	r4, [r3, #0]
 801c410:	b124      	cbz	r4, 801c41c <iprintf+0x14>
 801c412:	69a3      	ldr	r3, [r4, #24]
 801c414:	b913      	cbnz	r3, 801c41c <iprintf+0x14>
 801c416:	4620      	mov	r0, r4
 801c418:	f001 f91e 	bl	801d658 <__sinit>
 801c41c:	ab05      	add	r3, sp, #20
 801c41e:	9a04      	ldr	r2, [sp, #16]
 801c420:	68a1      	ldr	r1, [r4, #8]
 801c422:	9301      	str	r3, [sp, #4]
 801c424:	4620      	mov	r0, r4
 801c426:	f001 fdd7 	bl	801dfd8 <_vfiprintf_r>
 801c42a:	b002      	add	sp, #8
 801c42c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c430:	b004      	add	sp, #16
 801c432:	4770      	bx	lr
 801c434:	20000020 	.word	0x20000020

0801c438 <_puts_r>:
 801c438:	b570      	push	{r4, r5, r6, lr}
 801c43a:	460e      	mov	r6, r1
 801c43c:	4605      	mov	r5, r0
 801c43e:	b118      	cbz	r0, 801c448 <_puts_r+0x10>
 801c440:	6983      	ldr	r3, [r0, #24]
 801c442:	b90b      	cbnz	r3, 801c448 <_puts_r+0x10>
 801c444:	f001 f908 	bl	801d658 <__sinit>
 801c448:	69ab      	ldr	r3, [r5, #24]
 801c44a:	68ac      	ldr	r4, [r5, #8]
 801c44c:	b913      	cbnz	r3, 801c454 <_puts_r+0x1c>
 801c44e:	4628      	mov	r0, r5
 801c450:	f001 f902 	bl	801d658 <__sinit>
 801c454:	4b23      	ldr	r3, [pc, #140]	; (801c4e4 <_puts_r+0xac>)
 801c456:	429c      	cmp	r4, r3
 801c458:	d117      	bne.n	801c48a <_puts_r+0x52>
 801c45a:	686c      	ldr	r4, [r5, #4]
 801c45c:	89a3      	ldrh	r3, [r4, #12]
 801c45e:	071b      	lsls	r3, r3, #28
 801c460:	d51d      	bpl.n	801c49e <_puts_r+0x66>
 801c462:	6923      	ldr	r3, [r4, #16]
 801c464:	b1db      	cbz	r3, 801c49e <_puts_r+0x66>
 801c466:	3e01      	subs	r6, #1
 801c468:	68a3      	ldr	r3, [r4, #8]
 801c46a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c46e:	3b01      	subs	r3, #1
 801c470:	60a3      	str	r3, [r4, #8]
 801c472:	b9e9      	cbnz	r1, 801c4b0 <_puts_r+0x78>
 801c474:	2b00      	cmp	r3, #0
 801c476:	da2e      	bge.n	801c4d6 <_puts_r+0x9e>
 801c478:	4622      	mov	r2, r4
 801c47a:	210a      	movs	r1, #10
 801c47c:	4628      	mov	r0, r5
 801c47e:	f000 f8f5 	bl	801c66c <__swbuf_r>
 801c482:	3001      	adds	r0, #1
 801c484:	d011      	beq.n	801c4aa <_puts_r+0x72>
 801c486:	200a      	movs	r0, #10
 801c488:	e011      	b.n	801c4ae <_puts_r+0x76>
 801c48a:	4b17      	ldr	r3, [pc, #92]	; (801c4e8 <_puts_r+0xb0>)
 801c48c:	429c      	cmp	r4, r3
 801c48e:	d101      	bne.n	801c494 <_puts_r+0x5c>
 801c490:	68ac      	ldr	r4, [r5, #8]
 801c492:	e7e3      	b.n	801c45c <_puts_r+0x24>
 801c494:	4b15      	ldr	r3, [pc, #84]	; (801c4ec <_puts_r+0xb4>)
 801c496:	429c      	cmp	r4, r3
 801c498:	bf08      	it	eq
 801c49a:	68ec      	ldreq	r4, [r5, #12]
 801c49c:	e7de      	b.n	801c45c <_puts_r+0x24>
 801c49e:	4621      	mov	r1, r4
 801c4a0:	4628      	mov	r0, r5
 801c4a2:	f000 f935 	bl	801c710 <__swsetup_r>
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	d0dd      	beq.n	801c466 <_puts_r+0x2e>
 801c4aa:	f04f 30ff 	mov.w	r0, #4294967295
 801c4ae:	bd70      	pop	{r4, r5, r6, pc}
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	da04      	bge.n	801c4be <_puts_r+0x86>
 801c4b4:	69a2      	ldr	r2, [r4, #24]
 801c4b6:	429a      	cmp	r2, r3
 801c4b8:	dc06      	bgt.n	801c4c8 <_puts_r+0x90>
 801c4ba:	290a      	cmp	r1, #10
 801c4bc:	d004      	beq.n	801c4c8 <_puts_r+0x90>
 801c4be:	6823      	ldr	r3, [r4, #0]
 801c4c0:	1c5a      	adds	r2, r3, #1
 801c4c2:	6022      	str	r2, [r4, #0]
 801c4c4:	7019      	strb	r1, [r3, #0]
 801c4c6:	e7cf      	b.n	801c468 <_puts_r+0x30>
 801c4c8:	4622      	mov	r2, r4
 801c4ca:	4628      	mov	r0, r5
 801c4cc:	f000 f8ce 	bl	801c66c <__swbuf_r>
 801c4d0:	3001      	adds	r0, #1
 801c4d2:	d1c9      	bne.n	801c468 <_puts_r+0x30>
 801c4d4:	e7e9      	b.n	801c4aa <_puts_r+0x72>
 801c4d6:	6823      	ldr	r3, [r4, #0]
 801c4d8:	200a      	movs	r0, #10
 801c4da:	1c5a      	adds	r2, r3, #1
 801c4dc:	6022      	str	r2, [r4, #0]
 801c4de:	7018      	strb	r0, [r3, #0]
 801c4e0:	e7e5      	b.n	801c4ae <_puts_r+0x76>
 801c4e2:	bf00      	nop
 801c4e4:	08020710 	.word	0x08020710
 801c4e8:	08020730 	.word	0x08020730
 801c4ec:	080206f0 	.word	0x080206f0

0801c4f0 <puts>:
 801c4f0:	4b02      	ldr	r3, [pc, #8]	; (801c4fc <puts+0xc>)
 801c4f2:	4601      	mov	r1, r0
 801c4f4:	6818      	ldr	r0, [r3, #0]
 801c4f6:	f7ff bf9f 	b.w	801c438 <_puts_r>
 801c4fa:	bf00      	nop
 801c4fc:	20000020 	.word	0x20000020

0801c500 <setbuf>:
 801c500:	2900      	cmp	r1, #0
 801c502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c506:	bf0c      	ite	eq
 801c508:	2202      	moveq	r2, #2
 801c50a:	2200      	movne	r2, #0
 801c50c:	f000 b800 	b.w	801c510 <setvbuf>

0801c510 <setvbuf>:
 801c510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c514:	461d      	mov	r5, r3
 801c516:	4b51      	ldr	r3, [pc, #324]	; (801c65c <setvbuf+0x14c>)
 801c518:	681e      	ldr	r6, [r3, #0]
 801c51a:	4604      	mov	r4, r0
 801c51c:	460f      	mov	r7, r1
 801c51e:	4690      	mov	r8, r2
 801c520:	b126      	cbz	r6, 801c52c <setvbuf+0x1c>
 801c522:	69b3      	ldr	r3, [r6, #24]
 801c524:	b913      	cbnz	r3, 801c52c <setvbuf+0x1c>
 801c526:	4630      	mov	r0, r6
 801c528:	f001 f896 	bl	801d658 <__sinit>
 801c52c:	4b4c      	ldr	r3, [pc, #304]	; (801c660 <setvbuf+0x150>)
 801c52e:	429c      	cmp	r4, r3
 801c530:	d152      	bne.n	801c5d8 <setvbuf+0xc8>
 801c532:	6874      	ldr	r4, [r6, #4]
 801c534:	f1b8 0f02 	cmp.w	r8, #2
 801c538:	d006      	beq.n	801c548 <setvbuf+0x38>
 801c53a:	f1b8 0f01 	cmp.w	r8, #1
 801c53e:	f200 8089 	bhi.w	801c654 <setvbuf+0x144>
 801c542:	2d00      	cmp	r5, #0
 801c544:	f2c0 8086 	blt.w	801c654 <setvbuf+0x144>
 801c548:	4621      	mov	r1, r4
 801c54a:	4630      	mov	r0, r6
 801c54c:	f001 f81a 	bl	801d584 <_fflush_r>
 801c550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c552:	b141      	cbz	r1, 801c566 <setvbuf+0x56>
 801c554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c558:	4299      	cmp	r1, r3
 801c55a:	d002      	beq.n	801c562 <setvbuf+0x52>
 801c55c:	4630      	mov	r0, r6
 801c55e:	f001 fc69 	bl	801de34 <_free_r>
 801c562:	2300      	movs	r3, #0
 801c564:	6363      	str	r3, [r4, #52]	; 0x34
 801c566:	2300      	movs	r3, #0
 801c568:	61a3      	str	r3, [r4, #24]
 801c56a:	6063      	str	r3, [r4, #4]
 801c56c:	89a3      	ldrh	r3, [r4, #12]
 801c56e:	061b      	lsls	r3, r3, #24
 801c570:	d503      	bpl.n	801c57a <setvbuf+0x6a>
 801c572:	6921      	ldr	r1, [r4, #16]
 801c574:	4630      	mov	r0, r6
 801c576:	f001 fc5d 	bl	801de34 <_free_r>
 801c57a:	89a3      	ldrh	r3, [r4, #12]
 801c57c:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801c580:	f023 0303 	bic.w	r3, r3, #3
 801c584:	f1b8 0f02 	cmp.w	r8, #2
 801c588:	81a3      	strh	r3, [r4, #12]
 801c58a:	d05d      	beq.n	801c648 <setvbuf+0x138>
 801c58c:	ab01      	add	r3, sp, #4
 801c58e:	466a      	mov	r2, sp
 801c590:	4621      	mov	r1, r4
 801c592:	4630      	mov	r0, r6
 801c594:	f001 f8f8 	bl	801d788 <__swhatbuf_r>
 801c598:	89a3      	ldrh	r3, [r4, #12]
 801c59a:	4318      	orrs	r0, r3
 801c59c:	81a0      	strh	r0, [r4, #12]
 801c59e:	bb2d      	cbnz	r5, 801c5ec <setvbuf+0xdc>
 801c5a0:	9d00      	ldr	r5, [sp, #0]
 801c5a2:	4628      	mov	r0, r5
 801c5a4:	f001 f954 	bl	801d850 <malloc>
 801c5a8:	4607      	mov	r7, r0
 801c5aa:	2800      	cmp	r0, #0
 801c5ac:	d14e      	bne.n	801c64c <setvbuf+0x13c>
 801c5ae:	f8dd 9000 	ldr.w	r9, [sp]
 801c5b2:	45a9      	cmp	r9, r5
 801c5b4:	d13c      	bne.n	801c630 <setvbuf+0x120>
 801c5b6:	f04f 30ff 	mov.w	r0, #4294967295
 801c5ba:	89a3      	ldrh	r3, [r4, #12]
 801c5bc:	f043 0302 	orr.w	r3, r3, #2
 801c5c0:	81a3      	strh	r3, [r4, #12]
 801c5c2:	2300      	movs	r3, #0
 801c5c4:	60a3      	str	r3, [r4, #8]
 801c5c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c5ca:	6023      	str	r3, [r4, #0]
 801c5cc:	6123      	str	r3, [r4, #16]
 801c5ce:	2301      	movs	r3, #1
 801c5d0:	6163      	str	r3, [r4, #20]
 801c5d2:	b003      	add	sp, #12
 801c5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5d8:	4b22      	ldr	r3, [pc, #136]	; (801c664 <setvbuf+0x154>)
 801c5da:	429c      	cmp	r4, r3
 801c5dc:	d101      	bne.n	801c5e2 <setvbuf+0xd2>
 801c5de:	68b4      	ldr	r4, [r6, #8]
 801c5e0:	e7a8      	b.n	801c534 <setvbuf+0x24>
 801c5e2:	4b21      	ldr	r3, [pc, #132]	; (801c668 <setvbuf+0x158>)
 801c5e4:	429c      	cmp	r4, r3
 801c5e6:	bf08      	it	eq
 801c5e8:	68f4      	ldreq	r4, [r6, #12]
 801c5ea:	e7a3      	b.n	801c534 <setvbuf+0x24>
 801c5ec:	2f00      	cmp	r7, #0
 801c5ee:	d0d8      	beq.n	801c5a2 <setvbuf+0x92>
 801c5f0:	69b3      	ldr	r3, [r6, #24]
 801c5f2:	b913      	cbnz	r3, 801c5fa <setvbuf+0xea>
 801c5f4:	4630      	mov	r0, r6
 801c5f6:	f001 f82f 	bl	801d658 <__sinit>
 801c5fa:	f1b8 0f01 	cmp.w	r8, #1
 801c5fe:	bf08      	it	eq
 801c600:	89a3      	ldrheq	r3, [r4, #12]
 801c602:	6027      	str	r7, [r4, #0]
 801c604:	bf04      	itt	eq
 801c606:	f043 0301 	orreq.w	r3, r3, #1
 801c60a:	81a3      	strheq	r3, [r4, #12]
 801c60c:	89a3      	ldrh	r3, [r4, #12]
 801c60e:	f013 0008 	ands.w	r0, r3, #8
 801c612:	e9c4 7504 	strd	r7, r5, [r4, #16]
 801c616:	d01b      	beq.n	801c650 <setvbuf+0x140>
 801c618:	f013 0001 	ands.w	r0, r3, #1
 801c61c:	bf18      	it	ne
 801c61e:	426d      	negne	r5, r5
 801c620:	f04f 0300 	mov.w	r3, #0
 801c624:	bf1d      	ittte	ne
 801c626:	60a3      	strne	r3, [r4, #8]
 801c628:	61a5      	strne	r5, [r4, #24]
 801c62a:	4618      	movne	r0, r3
 801c62c:	60a5      	streq	r5, [r4, #8]
 801c62e:	e7d0      	b.n	801c5d2 <setvbuf+0xc2>
 801c630:	4648      	mov	r0, r9
 801c632:	f001 f90d 	bl	801d850 <malloc>
 801c636:	4607      	mov	r7, r0
 801c638:	2800      	cmp	r0, #0
 801c63a:	d0bc      	beq.n	801c5b6 <setvbuf+0xa6>
 801c63c:	89a3      	ldrh	r3, [r4, #12]
 801c63e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c642:	81a3      	strh	r3, [r4, #12]
 801c644:	464d      	mov	r5, r9
 801c646:	e7d3      	b.n	801c5f0 <setvbuf+0xe0>
 801c648:	2000      	movs	r0, #0
 801c64a:	e7b6      	b.n	801c5ba <setvbuf+0xaa>
 801c64c:	46a9      	mov	r9, r5
 801c64e:	e7f5      	b.n	801c63c <setvbuf+0x12c>
 801c650:	60a0      	str	r0, [r4, #8]
 801c652:	e7be      	b.n	801c5d2 <setvbuf+0xc2>
 801c654:	f04f 30ff 	mov.w	r0, #4294967295
 801c658:	e7bb      	b.n	801c5d2 <setvbuf+0xc2>
 801c65a:	bf00      	nop
 801c65c:	20000020 	.word	0x20000020
 801c660:	08020710 	.word	0x08020710
 801c664:	08020730 	.word	0x08020730
 801c668:	080206f0 	.word	0x080206f0

0801c66c <__swbuf_r>:
 801c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c66e:	460e      	mov	r6, r1
 801c670:	4614      	mov	r4, r2
 801c672:	4605      	mov	r5, r0
 801c674:	b118      	cbz	r0, 801c67e <__swbuf_r+0x12>
 801c676:	6983      	ldr	r3, [r0, #24]
 801c678:	b90b      	cbnz	r3, 801c67e <__swbuf_r+0x12>
 801c67a:	f000 ffed 	bl	801d658 <__sinit>
 801c67e:	4b21      	ldr	r3, [pc, #132]	; (801c704 <__swbuf_r+0x98>)
 801c680:	429c      	cmp	r4, r3
 801c682:	d12a      	bne.n	801c6da <__swbuf_r+0x6e>
 801c684:	686c      	ldr	r4, [r5, #4]
 801c686:	69a3      	ldr	r3, [r4, #24]
 801c688:	60a3      	str	r3, [r4, #8]
 801c68a:	89a3      	ldrh	r3, [r4, #12]
 801c68c:	071a      	lsls	r2, r3, #28
 801c68e:	d52e      	bpl.n	801c6ee <__swbuf_r+0x82>
 801c690:	6923      	ldr	r3, [r4, #16]
 801c692:	b363      	cbz	r3, 801c6ee <__swbuf_r+0x82>
 801c694:	6923      	ldr	r3, [r4, #16]
 801c696:	6820      	ldr	r0, [r4, #0]
 801c698:	1ac0      	subs	r0, r0, r3
 801c69a:	6963      	ldr	r3, [r4, #20]
 801c69c:	b2f6      	uxtb	r6, r6
 801c69e:	4283      	cmp	r3, r0
 801c6a0:	4637      	mov	r7, r6
 801c6a2:	dc04      	bgt.n	801c6ae <__swbuf_r+0x42>
 801c6a4:	4621      	mov	r1, r4
 801c6a6:	4628      	mov	r0, r5
 801c6a8:	f000 ff6c 	bl	801d584 <_fflush_r>
 801c6ac:	bb28      	cbnz	r0, 801c6fa <__swbuf_r+0x8e>
 801c6ae:	68a3      	ldr	r3, [r4, #8]
 801c6b0:	3b01      	subs	r3, #1
 801c6b2:	60a3      	str	r3, [r4, #8]
 801c6b4:	6823      	ldr	r3, [r4, #0]
 801c6b6:	1c5a      	adds	r2, r3, #1
 801c6b8:	6022      	str	r2, [r4, #0]
 801c6ba:	701e      	strb	r6, [r3, #0]
 801c6bc:	6963      	ldr	r3, [r4, #20]
 801c6be:	3001      	adds	r0, #1
 801c6c0:	4283      	cmp	r3, r0
 801c6c2:	d004      	beq.n	801c6ce <__swbuf_r+0x62>
 801c6c4:	89a3      	ldrh	r3, [r4, #12]
 801c6c6:	07db      	lsls	r3, r3, #31
 801c6c8:	d519      	bpl.n	801c6fe <__swbuf_r+0x92>
 801c6ca:	2e0a      	cmp	r6, #10
 801c6cc:	d117      	bne.n	801c6fe <__swbuf_r+0x92>
 801c6ce:	4621      	mov	r1, r4
 801c6d0:	4628      	mov	r0, r5
 801c6d2:	f000 ff57 	bl	801d584 <_fflush_r>
 801c6d6:	b190      	cbz	r0, 801c6fe <__swbuf_r+0x92>
 801c6d8:	e00f      	b.n	801c6fa <__swbuf_r+0x8e>
 801c6da:	4b0b      	ldr	r3, [pc, #44]	; (801c708 <__swbuf_r+0x9c>)
 801c6dc:	429c      	cmp	r4, r3
 801c6de:	d101      	bne.n	801c6e4 <__swbuf_r+0x78>
 801c6e0:	68ac      	ldr	r4, [r5, #8]
 801c6e2:	e7d0      	b.n	801c686 <__swbuf_r+0x1a>
 801c6e4:	4b09      	ldr	r3, [pc, #36]	; (801c70c <__swbuf_r+0xa0>)
 801c6e6:	429c      	cmp	r4, r3
 801c6e8:	bf08      	it	eq
 801c6ea:	68ec      	ldreq	r4, [r5, #12]
 801c6ec:	e7cb      	b.n	801c686 <__swbuf_r+0x1a>
 801c6ee:	4621      	mov	r1, r4
 801c6f0:	4628      	mov	r0, r5
 801c6f2:	f000 f80d 	bl	801c710 <__swsetup_r>
 801c6f6:	2800      	cmp	r0, #0
 801c6f8:	d0cc      	beq.n	801c694 <__swbuf_r+0x28>
 801c6fa:	f04f 37ff 	mov.w	r7, #4294967295
 801c6fe:	4638      	mov	r0, r7
 801c700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c702:	bf00      	nop
 801c704:	08020710 	.word	0x08020710
 801c708:	08020730 	.word	0x08020730
 801c70c:	080206f0 	.word	0x080206f0

0801c710 <__swsetup_r>:
 801c710:	4b32      	ldr	r3, [pc, #200]	; (801c7dc <__swsetup_r+0xcc>)
 801c712:	b570      	push	{r4, r5, r6, lr}
 801c714:	681d      	ldr	r5, [r3, #0]
 801c716:	4606      	mov	r6, r0
 801c718:	460c      	mov	r4, r1
 801c71a:	b125      	cbz	r5, 801c726 <__swsetup_r+0x16>
 801c71c:	69ab      	ldr	r3, [r5, #24]
 801c71e:	b913      	cbnz	r3, 801c726 <__swsetup_r+0x16>
 801c720:	4628      	mov	r0, r5
 801c722:	f000 ff99 	bl	801d658 <__sinit>
 801c726:	4b2e      	ldr	r3, [pc, #184]	; (801c7e0 <__swsetup_r+0xd0>)
 801c728:	429c      	cmp	r4, r3
 801c72a:	d10f      	bne.n	801c74c <__swsetup_r+0x3c>
 801c72c:	686c      	ldr	r4, [r5, #4]
 801c72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c732:	b29a      	uxth	r2, r3
 801c734:	0715      	lsls	r5, r2, #28
 801c736:	d42c      	bmi.n	801c792 <__swsetup_r+0x82>
 801c738:	06d0      	lsls	r0, r2, #27
 801c73a:	d411      	bmi.n	801c760 <__swsetup_r+0x50>
 801c73c:	2209      	movs	r2, #9
 801c73e:	6032      	str	r2, [r6, #0]
 801c740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c744:	81a3      	strh	r3, [r4, #12]
 801c746:	f04f 30ff 	mov.w	r0, #4294967295
 801c74a:	e03e      	b.n	801c7ca <__swsetup_r+0xba>
 801c74c:	4b25      	ldr	r3, [pc, #148]	; (801c7e4 <__swsetup_r+0xd4>)
 801c74e:	429c      	cmp	r4, r3
 801c750:	d101      	bne.n	801c756 <__swsetup_r+0x46>
 801c752:	68ac      	ldr	r4, [r5, #8]
 801c754:	e7eb      	b.n	801c72e <__swsetup_r+0x1e>
 801c756:	4b24      	ldr	r3, [pc, #144]	; (801c7e8 <__swsetup_r+0xd8>)
 801c758:	429c      	cmp	r4, r3
 801c75a:	bf08      	it	eq
 801c75c:	68ec      	ldreq	r4, [r5, #12]
 801c75e:	e7e6      	b.n	801c72e <__swsetup_r+0x1e>
 801c760:	0751      	lsls	r1, r2, #29
 801c762:	d512      	bpl.n	801c78a <__swsetup_r+0x7a>
 801c764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c766:	b141      	cbz	r1, 801c77a <__swsetup_r+0x6a>
 801c768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c76c:	4299      	cmp	r1, r3
 801c76e:	d002      	beq.n	801c776 <__swsetup_r+0x66>
 801c770:	4630      	mov	r0, r6
 801c772:	f001 fb5f 	bl	801de34 <_free_r>
 801c776:	2300      	movs	r3, #0
 801c778:	6363      	str	r3, [r4, #52]	; 0x34
 801c77a:	89a3      	ldrh	r3, [r4, #12]
 801c77c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c780:	81a3      	strh	r3, [r4, #12]
 801c782:	2300      	movs	r3, #0
 801c784:	6063      	str	r3, [r4, #4]
 801c786:	6923      	ldr	r3, [r4, #16]
 801c788:	6023      	str	r3, [r4, #0]
 801c78a:	89a3      	ldrh	r3, [r4, #12]
 801c78c:	f043 0308 	orr.w	r3, r3, #8
 801c790:	81a3      	strh	r3, [r4, #12]
 801c792:	6923      	ldr	r3, [r4, #16]
 801c794:	b94b      	cbnz	r3, 801c7aa <__swsetup_r+0x9a>
 801c796:	89a3      	ldrh	r3, [r4, #12]
 801c798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c7a0:	d003      	beq.n	801c7aa <__swsetup_r+0x9a>
 801c7a2:	4621      	mov	r1, r4
 801c7a4:	4630      	mov	r0, r6
 801c7a6:	f001 f813 	bl	801d7d0 <__smakebuf_r>
 801c7aa:	89a2      	ldrh	r2, [r4, #12]
 801c7ac:	f012 0301 	ands.w	r3, r2, #1
 801c7b0:	d00c      	beq.n	801c7cc <__swsetup_r+0xbc>
 801c7b2:	2300      	movs	r3, #0
 801c7b4:	60a3      	str	r3, [r4, #8]
 801c7b6:	6963      	ldr	r3, [r4, #20]
 801c7b8:	425b      	negs	r3, r3
 801c7ba:	61a3      	str	r3, [r4, #24]
 801c7bc:	6923      	ldr	r3, [r4, #16]
 801c7be:	b953      	cbnz	r3, 801c7d6 <__swsetup_r+0xc6>
 801c7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c7c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801c7c8:	d1ba      	bne.n	801c740 <__swsetup_r+0x30>
 801c7ca:	bd70      	pop	{r4, r5, r6, pc}
 801c7cc:	0792      	lsls	r2, r2, #30
 801c7ce:	bf58      	it	pl
 801c7d0:	6963      	ldrpl	r3, [r4, #20]
 801c7d2:	60a3      	str	r3, [r4, #8]
 801c7d4:	e7f2      	b.n	801c7bc <__swsetup_r+0xac>
 801c7d6:	2000      	movs	r0, #0
 801c7d8:	e7f7      	b.n	801c7ca <__swsetup_r+0xba>
 801c7da:	bf00      	nop
 801c7dc:	20000020 	.word	0x20000020
 801c7e0:	08020710 	.word	0x08020710
 801c7e4:	08020730 	.word	0x08020730
 801c7e8:	080206f0 	.word	0x080206f0

0801c7ec <quorem>:
 801c7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c7f0:	6903      	ldr	r3, [r0, #16]
 801c7f2:	690c      	ldr	r4, [r1, #16]
 801c7f4:	42a3      	cmp	r3, r4
 801c7f6:	4680      	mov	r8, r0
 801c7f8:	f2c0 8082 	blt.w	801c900 <quorem+0x114>
 801c7fc:	3c01      	subs	r4, #1
 801c7fe:	f101 0714 	add.w	r7, r1, #20
 801c802:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801c806:	f100 0614 	add.w	r6, r0, #20
 801c80a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801c80e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801c812:	eb06 030c 	add.w	r3, r6, ip
 801c816:	3501      	adds	r5, #1
 801c818:	eb07 090c 	add.w	r9, r7, ip
 801c81c:	9301      	str	r3, [sp, #4]
 801c81e:	fbb0 f5f5 	udiv	r5, r0, r5
 801c822:	b395      	cbz	r5, 801c88a <quorem+0x9e>
 801c824:	f04f 0a00 	mov.w	sl, #0
 801c828:	4638      	mov	r0, r7
 801c82a:	46b6      	mov	lr, r6
 801c82c:	46d3      	mov	fp, sl
 801c82e:	f850 2b04 	ldr.w	r2, [r0], #4
 801c832:	b293      	uxth	r3, r2
 801c834:	fb05 a303 	mla	r3, r5, r3, sl
 801c838:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c83c:	b29b      	uxth	r3, r3
 801c83e:	ebab 0303 	sub.w	r3, fp, r3
 801c842:	0c12      	lsrs	r2, r2, #16
 801c844:	f8de b000 	ldr.w	fp, [lr]
 801c848:	fb05 a202 	mla	r2, r5, r2, sl
 801c84c:	fa13 f38b 	uxtah	r3, r3, fp
 801c850:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801c854:	fa1f fb82 	uxth.w	fp, r2
 801c858:	f8de 2000 	ldr.w	r2, [lr]
 801c85c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801c860:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c864:	b29b      	uxth	r3, r3
 801c866:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c86a:	4581      	cmp	r9, r0
 801c86c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801c870:	f84e 3b04 	str.w	r3, [lr], #4
 801c874:	d2db      	bcs.n	801c82e <quorem+0x42>
 801c876:	f856 300c 	ldr.w	r3, [r6, ip]
 801c87a:	b933      	cbnz	r3, 801c88a <quorem+0x9e>
 801c87c:	9b01      	ldr	r3, [sp, #4]
 801c87e:	3b04      	subs	r3, #4
 801c880:	429e      	cmp	r6, r3
 801c882:	461a      	mov	r2, r3
 801c884:	d330      	bcc.n	801c8e8 <quorem+0xfc>
 801c886:	f8c8 4010 	str.w	r4, [r8, #16]
 801c88a:	4640      	mov	r0, r8
 801c88c:	f001 f9fe 	bl	801dc8c <__mcmp>
 801c890:	2800      	cmp	r0, #0
 801c892:	db25      	blt.n	801c8e0 <quorem+0xf4>
 801c894:	3501      	adds	r5, #1
 801c896:	4630      	mov	r0, r6
 801c898:	f04f 0c00 	mov.w	ip, #0
 801c89c:	f857 2b04 	ldr.w	r2, [r7], #4
 801c8a0:	f8d0 e000 	ldr.w	lr, [r0]
 801c8a4:	b293      	uxth	r3, r2
 801c8a6:	ebac 0303 	sub.w	r3, ip, r3
 801c8aa:	0c12      	lsrs	r2, r2, #16
 801c8ac:	fa13 f38e 	uxtah	r3, r3, lr
 801c8b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c8b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8b8:	b29b      	uxth	r3, r3
 801c8ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8be:	45b9      	cmp	r9, r7
 801c8c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c8c4:	f840 3b04 	str.w	r3, [r0], #4
 801c8c8:	d2e8      	bcs.n	801c89c <quorem+0xb0>
 801c8ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801c8ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801c8d2:	b92a      	cbnz	r2, 801c8e0 <quorem+0xf4>
 801c8d4:	3b04      	subs	r3, #4
 801c8d6:	429e      	cmp	r6, r3
 801c8d8:	461a      	mov	r2, r3
 801c8da:	d30b      	bcc.n	801c8f4 <quorem+0x108>
 801c8dc:	f8c8 4010 	str.w	r4, [r8, #16]
 801c8e0:	4628      	mov	r0, r5
 801c8e2:	b003      	add	sp, #12
 801c8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8e8:	6812      	ldr	r2, [r2, #0]
 801c8ea:	3b04      	subs	r3, #4
 801c8ec:	2a00      	cmp	r2, #0
 801c8ee:	d1ca      	bne.n	801c886 <quorem+0x9a>
 801c8f0:	3c01      	subs	r4, #1
 801c8f2:	e7c5      	b.n	801c880 <quorem+0x94>
 801c8f4:	6812      	ldr	r2, [r2, #0]
 801c8f6:	3b04      	subs	r3, #4
 801c8f8:	2a00      	cmp	r2, #0
 801c8fa:	d1ef      	bne.n	801c8dc <quorem+0xf0>
 801c8fc:	3c01      	subs	r4, #1
 801c8fe:	e7ea      	b.n	801c8d6 <quorem+0xea>
 801c900:	2000      	movs	r0, #0
 801c902:	e7ee      	b.n	801c8e2 <quorem+0xf6>
 801c904:	0000      	movs	r0, r0
	...

0801c908 <_dtoa_r>:
 801c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c90c:	ec57 6b10 	vmov	r6, r7, d0
 801c910:	b097      	sub	sp, #92	; 0x5c
 801c912:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c914:	9106      	str	r1, [sp, #24]
 801c916:	4604      	mov	r4, r0
 801c918:	920b      	str	r2, [sp, #44]	; 0x2c
 801c91a:	9312      	str	r3, [sp, #72]	; 0x48
 801c91c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801c920:	e9cd 6700 	strd	r6, r7, [sp]
 801c924:	b93d      	cbnz	r5, 801c936 <_dtoa_r+0x2e>
 801c926:	2010      	movs	r0, #16
 801c928:	f000 ff92 	bl	801d850 <malloc>
 801c92c:	6260      	str	r0, [r4, #36]	; 0x24
 801c92e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c932:	6005      	str	r5, [r0, #0]
 801c934:	60c5      	str	r5, [r0, #12]
 801c936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c938:	6819      	ldr	r1, [r3, #0]
 801c93a:	b151      	cbz	r1, 801c952 <_dtoa_r+0x4a>
 801c93c:	685a      	ldr	r2, [r3, #4]
 801c93e:	604a      	str	r2, [r1, #4]
 801c940:	2301      	movs	r3, #1
 801c942:	4093      	lsls	r3, r2
 801c944:	608b      	str	r3, [r1, #8]
 801c946:	4620      	mov	r0, r4
 801c948:	f000 ffbe 	bl	801d8c8 <_Bfree>
 801c94c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c94e:	2200      	movs	r2, #0
 801c950:	601a      	str	r2, [r3, #0]
 801c952:	1e3b      	subs	r3, r7, #0
 801c954:	bfbb      	ittet	lt
 801c956:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c95a:	9301      	strlt	r3, [sp, #4]
 801c95c:	2300      	movge	r3, #0
 801c95e:	2201      	movlt	r2, #1
 801c960:	bfac      	ite	ge
 801c962:	f8c8 3000 	strge.w	r3, [r8]
 801c966:	f8c8 2000 	strlt.w	r2, [r8]
 801c96a:	4baf      	ldr	r3, [pc, #700]	; (801cc28 <_dtoa_r+0x320>)
 801c96c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c970:	ea33 0308 	bics.w	r3, r3, r8
 801c974:	d114      	bne.n	801c9a0 <_dtoa_r+0x98>
 801c976:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c978:	f242 730f 	movw	r3, #9999	; 0x270f
 801c97c:	6013      	str	r3, [r2, #0]
 801c97e:	9b00      	ldr	r3, [sp, #0]
 801c980:	b923      	cbnz	r3, 801c98c <_dtoa_r+0x84>
 801c982:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801c986:	2800      	cmp	r0, #0
 801c988:	f000 8542 	beq.w	801d410 <_dtoa_r+0xb08>
 801c98c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c98e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801cc3c <_dtoa_r+0x334>
 801c992:	2b00      	cmp	r3, #0
 801c994:	f000 8544 	beq.w	801d420 <_dtoa_r+0xb18>
 801c998:	f10b 0303 	add.w	r3, fp, #3
 801c99c:	f000 bd3e 	b.w	801d41c <_dtoa_r+0xb14>
 801c9a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 801c9a4:	2200      	movs	r2, #0
 801c9a6:	2300      	movs	r3, #0
 801c9a8:	4630      	mov	r0, r6
 801c9aa:	4639      	mov	r1, r7
 801c9ac:	f7e4 f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 801c9b0:	4681      	mov	r9, r0
 801c9b2:	b168      	cbz	r0, 801c9d0 <_dtoa_r+0xc8>
 801c9b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c9b6:	2301      	movs	r3, #1
 801c9b8:	6013      	str	r3, [r2, #0]
 801c9ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	f000 8524 	beq.w	801d40a <_dtoa_r+0xb02>
 801c9c2:	4b9a      	ldr	r3, [pc, #616]	; (801cc2c <_dtoa_r+0x324>)
 801c9c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c9c6:	f103 3bff 	add.w	fp, r3, #4294967295
 801c9ca:	6013      	str	r3, [r2, #0]
 801c9cc:	f000 bd28 	b.w	801d420 <_dtoa_r+0xb18>
 801c9d0:	aa14      	add	r2, sp, #80	; 0x50
 801c9d2:	a915      	add	r1, sp, #84	; 0x54
 801c9d4:	ec47 6b10 	vmov	d0, r6, r7
 801c9d8:	4620      	mov	r0, r4
 801c9da:	f001 f9ce 	bl	801dd7a <__d2b>
 801c9de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801c9e2:	9004      	str	r0, [sp, #16]
 801c9e4:	2d00      	cmp	r5, #0
 801c9e6:	d07c      	beq.n	801cae2 <_dtoa_r+0x1da>
 801c9e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c9ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 801c9f0:	46b2      	mov	sl, r6
 801c9f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801c9f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801c9fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801c9fe:	2200      	movs	r2, #0
 801ca00:	4b8b      	ldr	r3, [pc, #556]	; (801cc30 <_dtoa_r+0x328>)
 801ca02:	4650      	mov	r0, sl
 801ca04:	4659      	mov	r1, fp
 801ca06:	f7e3 fc5f 	bl	80002c8 <__aeabi_dsub>
 801ca0a:	a381      	add	r3, pc, #516	; (adr r3, 801cc10 <_dtoa_r+0x308>)
 801ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca10:	f7e3 fe12 	bl	8000638 <__aeabi_dmul>
 801ca14:	a380      	add	r3, pc, #512	; (adr r3, 801cc18 <_dtoa_r+0x310>)
 801ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1a:	f7e3 fc57 	bl	80002cc <__adddf3>
 801ca1e:	4606      	mov	r6, r0
 801ca20:	4628      	mov	r0, r5
 801ca22:	460f      	mov	r7, r1
 801ca24:	f7e3 fd9e 	bl	8000564 <__aeabi_i2d>
 801ca28:	a37d      	add	r3, pc, #500	; (adr r3, 801cc20 <_dtoa_r+0x318>)
 801ca2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca2e:	f7e3 fe03 	bl	8000638 <__aeabi_dmul>
 801ca32:	4602      	mov	r2, r0
 801ca34:	460b      	mov	r3, r1
 801ca36:	4630      	mov	r0, r6
 801ca38:	4639      	mov	r1, r7
 801ca3a:	f7e3 fc47 	bl	80002cc <__adddf3>
 801ca3e:	4606      	mov	r6, r0
 801ca40:	460f      	mov	r7, r1
 801ca42:	f7e4 f8a9 	bl	8000b98 <__aeabi_d2iz>
 801ca46:	2200      	movs	r2, #0
 801ca48:	4682      	mov	sl, r0
 801ca4a:	2300      	movs	r3, #0
 801ca4c:	4630      	mov	r0, r6
 801ca4e:	4639      	mov	r1, r7
 801ca50:	f7e4 f864 	bl	8000b1c <__aeabi_dcmplt>
 801ca54:	b148      	cbz	r0, 801ca6a <_dtoa_r+0x162>
 801ca56:	4650      	mov	r0, sl
 801ca58:	f7e3 fd84 	bl	8000564 <__aeabi_i2d>
 801ca5c:	4632      	mov	r2, r6
 801ca5e:	463b      	mov	r3, r7
 801ca60:	f7e4 f852 	bl	8000b08 <__aeabi_dcmpeq>
 801ca64:	b908      	cbnz	r0, 801ca6a <_dtoa_r+0x162>
 801ca66:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca6a:	f1ba 0f16 	cmp.w	sl, #22
 801ca6e:	d859      	bhi.n	801cb24 <_dtoa_r+0x21c>
 801ca70:	4970      	ldr	r1, [pc, #448]	; (801cc34 <_dtoa_r+0x32c>)
 801ca72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ca76:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ca7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ca7e:	f7e4 f86b 	bl	8000b58 <__aeabi_dcmpgt>
 801ca82:	2800      	cmp	r0, #0
 801ca84:	d050      	beq.n	801cb28 <_dtoa_r+0x220>
 801ca86:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ca8a:	2300      	movs	r3, #0
 801ca8c:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801ca90:	1b5d      	subs	r5, r3, r5
 801ca92:	f1b5 0801 	subs.w	r8, r5, #1
 801ca96:	bf49      	itett	mi
 801ca98:	f1c5 0301 	rsbmi	r3, r5, #1
 801ca9c:	2300      	movpl	r3, #0
 801ca9e:	9305      	strmi	r3, [sp, #20]
 801caa0:	f04f 0800 	movmi.w	r8, #0
 801caa4:	bf58      	it	pl
 801caa6:	9305      	strpl	r3, [sp, #20]
 801caa8:	f1ba 0f00 	cmp.w	sl, #0
 801caac:	db3e      	blt.n	801cb2c <_dtoa_r+0x224>
 801caae:	2300      	movs	r3, #0
 801cab0:	44d0      	add	r8, sl
 801cab2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801cab6:	9307      	str	r3, [sp, #28]
 801cab8:	9b06      	ldr	r3, [sp, #24]
 801caba:	2b09      	cmp	r3, #9
 801cabc:	f200 8090 	bhi.w	801cbe0 <_dtoa_r+0x2d8>
 801cac0:	2b05      	cmp	r3, #5
 801cac2:	bfc4      	itt	gt
 801cac4:	3b04      	subgt	r3, #4
 801cac6:	9306      	strgt	r3, [sp, #24]
 801cac8:	9b06      	ldr	r3, [sp, #24]
 801caca:	f1a3 0302 	sub.w	r3, r3, #2
 801cace:	bfcc      	ite	gt
 801cad0:	2500      	movgt	r5, #0
 801cad2:	2501      	movle	r5, #1
 801cad4:	2b03      	cmp	r3, #3
 801cad6:	f200 808f 	bhi.w	801cbf8 <_dtoa_r+0x2f0>
 801cada:	e8df f003 	tbb	[pc, r3]
 801cade:	7f7d      	.short	0x7f7d
 801cae0:	7131      	.short	0x7131
 801cae2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801cae6:	441d      	add	r5, r3
 801cae8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801caec:	2820      	cmp	r0, #32
 801caee:	dd13      	ble.n	801cb18 <_dtoa_r+0x210>
 801caf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801caf4:	9b00      	ldr	r3, [sp, #0]
 801caf6:	fa08 f800 	lsl.w	r8, r8, r0
 801cafa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801cafe:	fa23 f000 	lsr.w	r0, r3, r0
 801cb02:	ea48 0000 	orr.w	r0, r8, r0
 801cb06:	f7e3 fd1d 	bl	8000544 <__aeabi_ui2d>
 801cb0a:	2301      	movs	r3, #1
 801cb0c:	4682      	mov	sl, r0
 801cb0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801cb12:	3d01      	subs	r5, #1
 801cb14:	9313      	str	r3, [sp, #76]	; 0x4c
 801cb16:	e772      	b.n	801c9fe <_dtoa_r+0xf6>
 801cb18:	9b00      	ldr	r3, [sp, #0]
 801cb1a:	f1c0 0020 	rsb	r0, r0, #32
 801cb1e:	fa03 f000 	lsl.w	r0, r3, r0
 801cb22:	e7f0      	b.n	801cb06 <_dtoa_r+0x1fe>
 801cb24:	2301      	movs	r3, #1
 801cb26:	e7b1      	b.n	801ca8c <_dtoa_r+0x184>
 801cb28:	900f      	str	r0, [sp, #60]	; 0x3c
 801cb2a:	e7b0      	b.n	801ca8e <_dtoa_r+0x186>
 801cb2c:	9b05      	ldr	r3, [sp, #20]
 801cb2e:	eba3 030a 	sub.w	r3, r3, sl
 801cb32:	9305      	str	r3, [sp, #20]
 801cb34:	f1ca 0300 	rsb	r3, sl, #0
 801cb38:	9307      	str	r3, [sp, #28]
 801cb3a:	2300      	movs	r3, #0
 801cb3c:	930e      	str	r3, [sp, #56]	; 0x38
 801cb3e:	e7bb      	b.n	801cab8 <_dtoa_r+0x1b0>
 801cb40:	2301      	movs	r3, #1
 801cb42:	930a      	str	r3, [sp, #40]	; 0x28
 801cb44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	dd59      	ble.n	801cbfe <_dtoa_r+0x2f6>
 801cb4a:	9302      	str	r3, [sp, #8]
 801cb4c:	4699      	mov	r9, r3
 801cb4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801cb50:	2200      	movs	r2, #0
 801cb52:	6072      	str	r2, [r6, #4]
 801cb54:	2204      	movs	r2, #4
 801cb56:	f102 0014 	add.w	r0, r2, #20
 801cb5a:	4298      	cmp	r0, r3
 801cb5c:	6871      	ldr	r1, [r6, #4]
 801cb5e:	d953      	bls.n	801cc08 <_dtoa_r+0x300>
 801cb60:	4620      	mov	r0, r4
 801cb62:	f000 fe7d 	bl	801d860 <_Balloc>
 801cb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cb68:	6030      	str	r0, [r6, #0]
 801cb6a:	f1b9 0f0e 	cmp.w	r9, #14
 801cb6e:	f8d3 b000 	ldr.w	fp, [r3]
 801cb72:	f200 80e6 	bhi.w	801cd42 <_dtoa_r+0x43a>
 801cb76:	2d00      	cmp	r5, #0
 801cb78:	f000 80e3 	beq.w	801cd42 <_dtoa_r+0x43a>
 801cb7c:	ed9d 7b00 	vldr	d7, [sp]
 801cb80:	f1ba 0f00 	cmp.w	sl, #0
 801cb84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 801cb88:	dd74      	ble.n	801cc74 <_dtoa_r+0x36c>
 801cb8a:	4a2a      	ldr	r2, [pc, #168]	; (801cc34 <_dtoa_r+0x32c>)
 801cb8c:	f00a 030f 	and.w	r3, sl, #15
 801cb90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801cb94:	ed93 7b00 	vldr	d7, [r3]
 801cb98:	ea4f 162a 	mov.w	r6, sl, asr #4
 801cb9c:	06f0      	lsls	r0, r6, #27
 801cb9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 801cba2:	d565      	bpl.n	801cc70 <_dtoa_r+0x368>
 801cba4:	4b24      	ldr	r3, [pc, #144]	; (801cc38 <_dtoa_r+0x330>)
 801cba6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cbaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801cbae:	f7e3 fe6d 	bl	800088c <__aeabi_ddiv>
 801cbb2:	e9cd 0100 	strd	r0, r1, [sp]
 801cbb6:	f006 060f 	and.w	r6, r6, #15
 801cbba:	2503      	movs	r5, #3
 801cbbc:	4f1e      	ldr	r7, [pc, #120]	; (801cc38 <_dtoa_r+0x330>)
 801cbbe:	e04c      	b.n	801cc5a <_dtoa_r+0x352>
 801cbc0:	2301      	movs	r3, #1
 801cbc2:	930a      	str	r3, [sp, #40]	; 0x28
 801cbc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cbc6:	4453      	add	r3, sl
 801cbc8:	f103 0901 	add.w	r9, r3, #1
 801cbcc:	9302      	str	r3, [sp, #8]
 801cbce:	464b      	mov	r3, r9
 801cbd0:	2b01      	cmp	r3, #1
 801cbd2:	bfb8      	it	lt
 801cbd4:	2301      	movlt	r3, #1
 801cbd6:	e7ba      	b.n	801cb4e <_dtoa_r+0x246>
 801cbd8:	2300      	movs	r3, #0
 801cbda:	e7b2      	b.n	801cb42 <_dtoa_r+0x23a>
 801cbdc:	2300      	movs	r3, #0
 801cbde:	e7f0      	b.n	801cbc2 <_dtoa_r+0x2ba>
 801cbe0:	2501      	movs	r5, #1
 801cbe2:	2300      	movs	r3, #0
 801cbe4:	9306      	str	r3, [sp, #24]
 801cbe6:	950a      	str	r5, [sp, #40]	; 0x28
 801cbe8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbec:	9302      	str	r3, [sp, #8]
 801cbee:	4699      	mov	r9, r3
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	2312      	movs	r3, #18
 801cbf4:	920b      	str	r2, [sp, #44]	; 0x2c
 801cbf6:	e7aa      	b.n	801cb4e <_dtoa_r+0x246>
 801cbf8:	2301      	movs	r3, #1
 801cbfa:	930a      	str	r3, [sp, #40]	; 0x28
 801cbfc:	e7f4      	b.n	801cbe8 <_dtoa_r+0x2e0>
 801cbfe:	2301      	movs	r3, #1
 801cc00:	9302      	str	r3, [sp, #8]
 801cc02:	4699      	mov	r9, r3
 801cc04:	461a      	mov	r2, r3
 801cc06:	e7f5      	b.n	801cbf4 <_dtoa_r+0x2ec>
 801cc08:	3101      	adds	r1, #1
 801cc0a:	6071      	str	r1, [r6, #4]
 801cc0c:	0052      	lsls	r2, r2, #1
 801cc0e:	e7a2      	b.n	801cb56 <_dtoa_r+0x24e>
 801cc10:	636f4361 	.word	0x636f4361
 801cc14:	3fd287a7 	.word	0x3fd287a7
 801cc18:	8b60c8b3 	.word	0x8b60c8b3
 801cc1c:	3fc68a28 	.word	0x3fc68a28
 801cc20:	509f79fb 	.word	0x509f79fb
 801cc24:	3fd34413 	.word	0x3fd34413
 801cc28:	7ff00000 	.word	0x7ff00000
 801cc2c:	080206bd 	.word	0x080206bd
 801cc30:	3ff80000 	.word	0x3ff80000
 801cc34:	08020778 	.word	0x08020778
 801cc38:	08020750 	.word	0x08020750
 801cc3c:	080206e9 	.word	0x080206e9
 801cc40:	07f1      	lsls	r1, r6, #31
 801cc42:	d508      	bpl.n	801cc56 <_dtoa_r+0x34e>
 801cc44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801cc48:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cc4c:	f7e3 fcf4 	bl	8000638 <__aeabi_dmul>
 801cc50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801cc54:	3501      	adds	r5, #1
 801cc56:	1076      	asrs	r6, r6, #1
 801cc58:	3708      	adds	r7, #8
 801cc5a:	2e00      	cmp	r6, #0
 801cc5c:	d1f0      	bne.n	801cc40 <_dtoa_r+0x338>
 801cc5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801cc62:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cc66:	f7e3 fe11 	bl	800088c <__aeabi_ddiv>
 801cc6a:	e9cd 0100 	strd	r0, r1, [sp]
 801cc6e:	e01a      	b.n	801cca6 <_dtoa_r+0x39e>
 801cc70:	2502      	movs	r5, #2
 801cc72:	e7a3      	b.n	801cbbc <_dtoa_r+0x2b4>
 801cc74:	f000 80a0 	beq.w	801cdb8 <_dtoa_r+0x4b0>
 801cc78:	f1ca 0600 	rsb	r6, sl, #0
 801cc7c:	4b9f      	ldr	r3, [pc, #636]	; (801cefc <_dtoa_r+0x5f4>)
 801cc7e:	4fa0      	ldr	r7, [pc, #640]	; (801cf00 <_dtoa_r+0x5f8>)
 801cc80:	f006 020f 	and.w	r2, r6, #15
 801cc84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801cc90:	f7e3 fcd2 	bl	8000638 <__aeabi_dmul>
 801cc94:	e9cd 0100 	strd	r0, r1, [sp]
 801cc98:	1136      	asrs	r6, r6, #4
 801cc9a:	2300      	movs	r3, #0
 801cc9c:	2502      	movs	r5, #2
 801cc9e:	2e00      	cmp	r6, #0
 801cca0:	d17f      	bne.n	801cda2 <_dtoa_r+0x49a>
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d1e1      	bne.n	801cc6a <_dtoa_r+0x362>
 801cca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cca8:	2b00      	cmp	r3, #0
 801ccaa:	f000 8087 	beq.w	801cdbc <_dtoa_r+0x4b4>
 801ccae:	e9dd 6700 	ldrd	r6, r7, [sp]
 801ccb2:	2200      	movs	r2, #0
 801ccb4:	4b93      	ldr	r3, [pc, #588]	; (801cf04 <_dtoa_r+0x5fc>)
 801ccb6:	4630      	mov	r0, r6
 801ccb8:	4639      	mov	r1, r7
 801ccba:	f7e3 ff2f 	bl	8000b1c <__aeabi_dcmplt>
 801ccbe:	2800      	cmp	r0, #0
 801ccc0:	d07c      	beq.n	801cdbc <_dtoa_r+0x4b4>
 801ccc2:	f1b9 0f00 	cmp.w	r9, #0
 801ccc6:	d079      	beq.n	801cdbc <_dtoa_r+0x4b4>
 801ccc8:	9b02      	ldr	r3, [sp, #8]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	dd35      	ble.n	801cd3a <_dtoa_r+0x432>
 801ccce:	f10a 33ff 	add.w	r3, sl, #4294967295
 801ccd2:	9308      	str	r3, [sp, #32]
 801ccd4:	4639      	mov	r1, r7
 801ccd6:	2200      	movs	r2, #0
 801ccd8:	4b8b      	ldr	r3, [pc, #556]	; (801cf08 <_dtoa_r+0x600>)
 801ccda:	4630      	mov	r0, r6
 801ccdc:	f7e3 fcac 	bl	8000638 <__aeabi_dmul>
 801cce0:	e9cd 0100 	strd	r0, r1, [sp]
 801cce4:	9f02      	ldr	r7, [sp, #8]
 801cce6:	3501      	adds	r5, #1
 801cce8:	4628      	mov	r0, r5
 801ccea:	f7e3 fc3b 	bl	8000564 <__aeabi_i2d>
 801ccee:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ccf2:	f7e3 fca1 	bl	8000638 <__aeabi_dmul>
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	4b84      	ldr	r3, [pc, #528]	; (801cf0c <_dtoa_r+0x604>)
 801ccfa:	f7e3 fae7 	bl	80002cc <__adddf3>
 801ccfe:	4605      	mov	r5, r0
 801cd00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801cd04:	2f00      	cmp	r7, #0
 801cd06:	d15d      	bne.n	801cdc4 <_dtoa_r+0x4bc>
 801cd08:	2200      	movs	r2, #0
 801cd0a:	4b81      	ldr	r3, [pc, #516]	; (801cf10 <_dtoa_r+0x608>)
 801cd0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cd10:	f7e3 fada 	bl	80002c8 <__aeabi_dsub>
 801cd14:	462a      	mov	r2, r5
 801cd16:	4633      	mov	r3, r6
 801cd18:	e9cd 0100 	strd	r0, r1, [sp]
 801cd1c:	f7e3 ff1c 	bl	8000b58 <__aeabi_dcmpgt>
 801cd20:	2800      	cmp	r0, #0
 801cd22:	f040 8288 	bne.w	801d236 <_dtoa_r+0x92e>
 801cd26:	462a      	mov	r2, r5
 801cd28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801cd2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cd30:	f7e3 fef4 	bl	8000b1c <__aeabi_dcmplt>
 801cd34:	2800      	cmp	r0, #0
 801cd36:	f040 827c 	bne.w	801d232 <_dtoa_r+0x92a>
 801cd3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801cd3e:	e9cd 2300 	strd	r2, r3, [sp]
 801cd42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	f2c0 8150 	blt.w	801cfea <_dtoa_r+0x6e2>
 801cd4a:	f1ba 0f0e 	cmp.w	sl, #14
 801cd4e:	f300 814c 	bgt.w	801cfea <_dtoa_r+0x6e2>
 801cd52:	4b6a      	ldr	r3, [pc, #424]	; (801cefc <_dtoa_r+0x5f4>)
 801cd54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801cd58:	ed93 7b00 	vldr	d7, [r3]
 801cd5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd64:	f280 80d8 	bge.w	801cf18 <_dtoa_r+0x610>
 801cd68:	f1b9 0f00 	cmp.w	r9, #0
 801cd6c:	f300 80d4 	bgt.w	801cf18 <_dtoa_r+0x610>
 801cd70:	f040 825e 	bne.w	801d230 <_dtoa_r+0x928>
 801cd74:	2200      	movs	r2, #0
 801cd76:	4b66      	ldr	r3, [pc, #408]	; (801cf10 <_dtoa_r+0x608>)
 801cd78:	ec51 0b17 	vmov	r0, r1, d7
 801cd7c:	f7e3 fc5c 	bl	8000638 <__aeabi_dmul>
 801cd80:	e9dd 2300 	ldrd	r2, r3, [sp]
 801cd84:	f7e3 fede 	bl	8000b44 <__aeabi_dcmpge>
 801cd88:	464f      	mov	r7, r9
 801cd8a:	464e      	mov	r6, r9
 801cd8c:	2800      	cmp	r0, #0
 801cd8e:	f040 8234 	bne.w	801d1fa <_dtoa_r+0x8f2>
 801cd92:	2331      	movs	r3, #49	; 0x31
 801cd94:	f10b 0501 	add.w	r5, fp, #1
 801cd98:	f88b 3000 	strb.w	r3, [fp]
 801cd9c:	f10a 0a01 	add.w	sl, sl, #1
 801cda0:	e22f      	b.n	801d202 <_dtoa_r+0x8fa>
 801cda2:	07f2      	lsls	r2, r6, #31
 801cda4:	d505      	bpl.n	801cdb2 <_dtoa_r+0x4aa>
 801cda6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cdaa:	f7e3 fc45 	bl	8000638 <__aeabi_dmul>
 801cdae:	3501      	adds	r5, #1
 801cdb0:	2301      	movs	r3, #1
 801cdb2:	1076      	asrs	r6, r6, #1
 801cdb4:	3708      	adds	r7, #8
 801cdb6:	e772      	b.n	801cc9e <_dtoa_r+0x396>
 801cdb8:	2502      	movs	r5, #2
 801cdba:	e774      	b.n	801cca6 <_dtoa_r+0x39e>
 801cdbc:	f8cd a020 	str.w	sl, [sp, #32]
 801cdc0:	464f      	mov	r7, r9
 801cdc2:	e791      	b.n	801cce8 <_dtoa_r+0x3e0>
 801cdc4:	4b4d      	ldr	r3, [pc, #308]	; (801cefc <_dtoa_r+0x5f4>)
 801cdc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801cdca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801cdce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d047      	beq.n	801ce64 <_dtoa_r+0x55c>
 801cdd4:	4602      	mov	r2, r0
 801cdd6:	460b      	mov	r3, r1
 801cdd8:	2000      	movs	r0, #0
 801cdda:	494e      	ldr	r1, [pc, #312]	; (801cf14 <_dtoa_r+0x60c>)
 801cddc:	f7e3 fd56 	bl	800088c <__aeabi_ddiv>
 801cde0:	462a      	mov	r2, r5
 801cde2:	4633      	mov	r3, r6
 801cde4:	f7e3 fa70 	bl	80002c8 <__aeabi_dsub>
 801cde8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801cdec:	465d      	mov	r5, fp
 801cdee:	e9dd 0100 	ldrd	r0, r1, [sp]
 801cdf2:	f7e3 fed1 	bl	8000b98 <__aeabi_d2iz>
 801cdf6:	4606      	mov	r6, r0
 801cdf8:	f7e3 fbb4 	bl	8000564 <__aeabi_i2d>
 801cdfc:	4602      	mov	r2, r0
 801cdfe:	460b      	mov	r3, r1
 801ce00:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce04:	f7e3 fa60 	bl	80002c8 <__aeabi_dsub>
 801ce08:	3630      	adds	r6, #48	; 0x30
 801ce0a:	f805 6b01 	strb.w	r6, [r5], #1
 801ce0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ce12:	e9cd 0100 	strd	r0, r1, [sp]
 801ce16:	f7e3 fe81 	bl	8000b1c <__aeabi_dcmplt>
 801ce1a:	2800      	cmp	r0, #0
 801ce1c:	d163      	bne.n	801cee6 <_dtoa_r+0x5de>
 801ce1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ce22:	2000      	movs	r0, #0
 801ce24:	4937      	ldr	r1, [pc, #220]	; (801cf04 <_dtoa_r+0x5fc>)
 801ce26:	f7e3 fa4f 	bl	80002c8 <__aeabi_dsub>
 801ce2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801ce2e:	f7e3 fe75 	bl	8000b1c <__aeabi_dcmplt>
 801ce32:	2800      	cmp	r0, #0
 801ce34:	f040 80b7 	bne.w	801cfa6 <_dtoa_r+0x69e>
 801ce38:	eba5 030b 	sub.w	r3, r5, fp
 801ce3c:	429f      	cmp	r7, r3
 801ce3e:	f77f af7c 	ble.w	801cd3a <_dtoa_r+0x432>
 801ce42:	2200      	movs	r2, #0
 801ce44:	4b30      	ldr	r3, [pc, #192]	; (801cf08 <_dtoa_r+0x600>)
 801ce46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ce4a:	f7e3 fbf5 	bl	8000638 <__aeabi_dmul>
 801ce4e:	2200      	movs	r2, #0
 801ce50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ce54:	4b2c      	ldr	r3, [pc, #176]	; (801cf08 <_dtoa_r+0x600>)
 801ce56:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce5a:	f7e3 fbed 	bl	8000638 <__aeabi_dmul>
 801ce5e:	e9cd 0100 	strd	r0, r1, [sp]
 801ce62:	e7c4      	b.n	801cdee <_dtoa_r+0x4e6>
 801ce64:	462a      	mov	r2, r5
 801ce66:	4633      	mov	r3, r6
 801ce68:	f7e3 fbe6 	bl	8000638 <__aeabi_dmul>
 801ce6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801ce70:	eb0b 0507 	add.w	r5, fp, r7
 801ce74:	465e      	mov	r6, fp
 801ce76:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce7a:	f7e3 fe8d 	bl	8000b98 <__aeabi_d2iz>
 801ce7e:	4607      	mov	r7, r0
 801ce80:	f7e3 fb70 	bl	8000564 <__aeabi_i2d>
 801ce84:	3730      	adds	r7, #48	; 0x30
 801ce86:	4602      	mov	r2, r0
 801ce88:	460b      	mov	r3, r1
 801ce8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ce8e:	f7e3 fa1b 	bl	80002c8 <__aeabi_dsub>
 801ce92:	f806 7b01 	strb.w	r7, [r6], #1
 801ce96:	42ae      	cmp	r6, r5
 801ce98:	e9cd 0100 	strd	r0, r1, [sp]
 801ce9c:	f04f 0200 	mov.w	r2, #0
 801cea0:	d126      	bne.n	801cef0 <_dtoa_r+0x5e8>
 801cea2:	4b1c      	ldr	r3, [pc, #112]	; (801cf14 <_dtoa_r+0x60c>)
 801cea4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801cea8:	f7e3 fa10 	bl	80002cc <__adddf3>
 801ceac:	4602      	mov	r2, r0
 801ceae:	460b      	mov	r3, r1
 801ceb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ceb4:	f7e3 fe50 	bl	8000b58 <__aeabi_dcmpgt>
 801ceb8:	2800      	cmp	r0, #0
 801ceba:	d174      	bne.n	801cfa6 <_dtoa_r+0x69e>
 801cebc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801cec0:	2000      	movs	r0, #0
 801cec2:	4914      	ldr	r1, [pc, #80]	; (801cf14 <_dtoa_r+0x60c>)
 801cec4:	f7e3 fa00 	bl	80002c8 <__aeabi_dsub>
 801cec8:	4602      	mov	r2, r0
 801ceca:	460b      	mov	r3, r1
 801cecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ced0:	f7e3 fe24 	bl	8000b1c <__aeabi_dcmplt>
 801ced4:	2800      	cmp	r0, #0
 801ced6:	f43f af30 	beq.w	801cd3a <_dtoa_r+0x432>
 801ceda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801cede:	2b30      	cmp	r3, #48	; 0x30
 801cee0:	f105 32ff 	add.w	r2, r5, #4294967295
 801cee4:	d002      	beq.n	801ceec <_dtoa_r+0x5e4>
 801cee6:	f8dd a020 	ldr.w	sl, [sp, #32]
 801ceea:	e04a      	b.n	801cf82 <_dtoa_r+0x67a>
 801ceec:	4615      	mov	r5, r2
 801ceee:	e7f4      	b.n	801ceda <_dtoa_r+0x5d2>
 801cef0:	4b05      	ldr	r3, [pc, #20]	; (801cf08 <_dtoa_r+0x600>)
 801cef2:	f7e3 fba1 	bl	8000638 <__aeabi_dmul>
 801cef6:	e9cd 0100 	strd	r0, r1, [sp]
 801cefa:	e7bc      	b.n	801ce76 <_dtoa_r+0x56e>
 801cefc:	08020778 	.word	0x08020778
 801cf00:	08020750 	.word	0x08020750
 801cf04:	3ff00000 	.word	0x3ff00000
 801cf08:	40240000 	.word	0x40240000
 801cf0c:	401c0000 	.word	0x401c0000
 801cf10:	40140000 	.word	0x40140000
 801cf14:	3fe00000 	.word	0x3fe00000
 801cf18:	e9dd 6700 	ldrd	r6, r7, [sp]
 801cf1c:	465d      	mov	r5, fp
 801cf1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cf22:	4630      	mov	r0, r6
 801cf24:	4639      	mov	r1, r7
 801cf26:	f7e3 fcb1 	bl	800088c <__aeabi_ddiv>
 801cf2a:	f7e3 fe35 	bl	8000b98 <__aeabi_d2iz>
 801cf2e:	4680      	mov	r8, r0
 801cf30:	f7e3 fb18 	bl	8000564 <__aeabi_i2d>
 801cf34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cf38:	f7e3 fb7e 	bl	8000638 <__aeabi_dmul>
 801cf3c:	4602      	mov	r2, r0
 801cf3e:	460b      	mov	r3, r1
 801cf40:	4630      	mov	r0, r6
 801cf42:	4639      	mov	r1, r7
 801cf44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 801cf48:	f7e3 f9be 	bl	80002c8 <__aeabi_dsub>
 801cf4c:	f805 6b01 	strb.w	r6, [r5], #1
 801cf50:	eba5 060b 	sub.w	r6, r5, fp
 801cf54:	45b1      	cmp	r9, r6
 801cf56:	4602      	mov	r2, r0
 801cf58:	460b      	mov	r3, r1
 801cf5a:	d139      	bne.n	801cfd0 <_dtoa_r+0x6c8>
 801cf5c:	f7e3 f9b6 	bl	80002cc <__adddf3>
 801cf60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cf64:	4606      	mov	r6, r0
 801cf66:	460f      	mov	r7, r1
 801cf68:	f7e3 fdf6 	bl	8000b58 <__aeabi_dcmpgt>
 801cf6c:	b9c8      	cbnz	r0, 801cfa2 <_dtoa_r+0x69a>
 801cf6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801cf72:	4630      	mov	r0, r6
 801cf74:	4639      	mov	r1, r7
 801cf76:	f7e3 fdc7 	bl	8000b08 <__aeabi_dcmpeq>
 801cf7a:	b110      	cbz	r0, 801cf82 <_dtoa_r+0x67a>
 801cf7c:	f018 0f01 	tst.w	r8, #1
 801cf80:	d10f      	bne.n	801cfa2 <_dtoa_r+0x69a>
 801cf82:	9904      	ldr	r1, [sp, #16]
 801cf84:	4620      	mov	r0, r4
 801cf86:	f000 fc9f 	bl	801d8c8 <_Bfree>
 801cf8a:	2300      	movs	r3, #0
 801cf8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cf8e:	702b      	strb	r3, [r5, #0]
 801cf90:	f10a 0301 	add.w	r3, sl, #1
 801cf94:	6013      	str	r3, [r2, #0]
 801cf96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801cf98:	2b00      	cmp	r3, #0
 801cf9a:	f000 8241 	beq.w	801d420 <_dtoa_r+0xb18>
 801cf9e:	601d      	str	r5, [r3, #0]
 801cfa0:	e23e      	b.n	801d420 <_dtoa_r+0xb18>
 801cfa2:	f8cd a020 	str.w	sl, [sp, #32]
 801cfa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801cfaa:	2a39      	cmp	r2, #57	; 0x39
 801cfac:	f105 33ff 	add.w	r3, r5, #4294967295
 801cfb0:	d108      	bne.n	801cfc4 <_dtoa_r+0x6bc>
 801cfb2:	459b      	cmp	fp, r3
 801cfb4:	d10a      	bne.n	801cfcc <_dtoa_r+0x6c4>
 801cfb6:	9b08      	ldr	r3, [sp, #32]
 801cfb8:	3301      	adds	r3, #1
 801cfba:	9308      	str	r3, [sp, #32]
 801cfbc:	2330      	movs	r3, #48	; 0x30
 801cfbe:	f88b 3000 	strb.w	r3, [fp]
 801cfc2:	465b      	mov	r3, fp
 801cfc4:	781a      	ldrb	r2, [r3, #0]
 801cfc6:	3201      	adds	r2, #1
 801cfc8:	701a      	strb	r2, [r3, #0]
 801cfca:	e78c      	b.n	801cee6 <_dtoa_r+0x5de>
 801cfcc:	461d      	mov	r5, r3
 801cfce:	e7ea      	b.n	801cfa6 <_dtoa_r+0x69e>
 801cfd0:	2200      	movs	r2, #0
 801cfd2:	4b9b      	ldr	r3, [pc, #620]	; (801d240 <_dtoa_r+0x938>)
 801cfd4:	f7e3 fb30 	bl	8000638 <__aeabi_dmul>
 801cfd8:	2200      	movs	r2, #0
 801cfda:	2300      	movs	r3, #0
 801cfdc:	4606      	mov	r6, r0
 801cfde:	460f      	mov	r7, r1
 801cfe0:	f7e3 fd92 	bl	8000b08 <__aeabi_dcmpeq>
 801cfe4:	2800      	cmp	r0, #0
 801cfe6:	d09a      	beq.n	801cf1e <_dtoa_r+0x616>
 801cfe8:	e7cb      	b.n	801cf82 <_dtoa_r+0x67a>
 801cfea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cfec:	2a00      	cmp	r2, #0
 801cfee:	f000 808b 	beq.w	801d108 <_dtoa_r+0x800>
 801cff2:	9a06      	ldr	r2, [sp, #24]
 801cff4:	2a01      	cmp	r2, #1
 801cff6:	dc6e      	bgt.n	801d0d6 <_dtoa_r+0x7ce>
 801cff8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801cffa:	2a00      	cmp	r2, #0
 801cffc:	d067      	beq.n	801d0ce <_dtoa_r+0x7c6>
 801cffe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d002:	9f07      	ldr	r7, [sp, #28]
 801d004:	9d05      	ldr	r5, [sp, #20]
 801d006:	9a05      	ldr	r2, [sp, #20]
 801d008:	2101      	movs	r1, #1
 801d00a:	441a      	add	r2, r3
 801d00c:	4620      	mov	r0, r4
 801d00e:	9205      	str	r2, [sp, #20]
 801d010:	4498      	add	r8, r3
 801d012:	f000 fcf9 	bl	801da08 <__i2b>
 801d016:	4606      	mov	r6, r0
 801d018:	2d00      	cmp	r5, #0
 801d01a:	dd0c      	ble.n	801d036 <_dtoa_r+0x72e>
 801d01c:	f1b8 0f00 	cmp.w	r8, #0
 801d020:	dd09      	ble.n	801d036 <_dtoa_r+0x72e>
 801d022:	4545      	cmp	r5, r8
 801d024:	9a05      	ldr	r2, [sp, #20]
 801d026:	462b      	mov	r3, r5
 801d028:	bfa8      	it	ge
 801d02a:	4643      	movge	r3, r8
 801d02c:	1ad2      	subs	r2, r2, r3
 801d02e:	9205      	str	r2, [sp, #20]
 801d030:	1aed      	subs	r5, r5, r3
 801d032:	eba8 0803 	sub.w	r8, r8, r3
 801d036:	9b07      	ldr	r3, [sp, #28]
 801d038:	b1eb      	cbz	r3, 801d076 <_dtoa_r+0x76e>
 801d03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d067      	beq.n	801d110 <_dtoa_r+0x808>
 801d040:	b18f      	cbz	r7, 801d066 <_dtoa_r+0x75e>
 801d042:	4631      	mov	r1, r6
 801d044:	463a      	mov	r2, r7
 801d046:	4620      	mov	r0, r4
 801d048:	f000 fd7e 	bl	801db48 <__pow5mult>
 801d04c:	9a04      	ldr	r2, [sp, #16]
 801d04e:	4601      	mov	r1, r0
 801d050:	4606      	mov	r6, r0
 801d052:	4620      	mov	r0, r4
 801d054:	f000 fce1 	bl	801da1a <__multiply>
 801d058:	9904      	ldr	r1, [sp, #16]
 801d05a:	9008      	str	r0, [sp, #32]
 801d05c:	4620      	mov	r0, r4
 801d05e:	f000 fc33 	bl	801d8c8 <_Bfree>
 801d062:	9b08      	ldr	r3, [sp, #32]
 801d064:	9304      	str	r3, [sp, #16]
 801d066:	9b07      	ldr	r3, [sp, #28]
 801d068:	1bda      	subs	r2, r3, r7
 801d06a:	d004      	beq.n	801d076 <_dtoa_r+0x76e>
 801d06c:	9904      	ldr	r1, [sp, #16]
 801d06e:	4620      	mov	r0, r4
 801d070:	f000 fd6a 	bl	801db48 <__pow5mult>
 801d074:	9004      	str	r0, [sp, #16]
 801d076:	2101      	movs	r1, #1
 801d078:	4620      	mov	r0, r4
 801d07a:	f000 fcc5 	bl	801da08 <__i2b>
 801d07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d080:	4607      	mov	r7, r0
 801d082:	2b00      	cmp	r3, #0
 801d084:	f000 81d0 	beq.w	801d428 <_dtoa_r+0xb20>
 801d088:	461a      	mov	r2, r3
 801d08a:	4601      	mov	r1, r0
 801d08c:	4620      	mov	r0, r4
 801d08e:	f000 fd5b 	bl	801db48 <__pow5mult>
 801d092:	9b06      	ldr	r3, [sp, #24]
 801d094:	2b01      	cmp	r3, #1
 801d096:	4607      	mov	r7, r0
 801d098:	dc40      	bgt.n	801d11c <_dtoa_r+0x814>
 801d09a:	9b00      	ldr	r3, [sp, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	d139      	bne.n	801d114 <_dtoa_r+0x80c>
 801d0a0:	9b01      	ldr	r3, [sp, #4]
 801d0a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d136      	bne.n	801d118 <_dtoa_r+0x810>
 801d0aa:	9b01      	ldr	r3, [sp, #4]
 801d0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801d0b0:	0d1b      	lsrs	r3, r3, #20
 801d0b2:	051b      	lsls	r3, r3, #20
 801d0b4:	b12b      	cbz	r3, 801d0c2 <_dtoa_r+0x7ba>
 801d0b6:	9b05      	ldr	r3, [sp, #20]
 801d0b8:	3301      	adds	r3, #1
 801d0ba:	9305      	str	r3, [sp, #20]
 801d0bc:	f108 0801 	add.w	r8, r8, #1
 801d0c0:	2301      	movs	r3, #1
 801d0c2:	9307      	str	r3, [sp, #28]
 801d0c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d12a      	bne.n	801d120 <_dtoa_r+0x818>
 801d0ca:	2001      	movs	r0, #1
 801d0cc:	e030      	b.n	801d130 <_dtoa_r+0x828>
 801d0ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d0d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d0d4:	e795      	b.n	801d002 <_dtoa_r+0x6fa>
 801d0d6:	9b07      	ldr	r3, [sp, #28]
 801d0d8:	f109 37ff 	add.w	r7, r9, #4294967295
 801d0dc:	42bb      	cmp	r3, r7
 801d0de:	bfbf      	itttt	lt
 801d0e0:	9b07      	ldrlt	r3, [sp, #28]
 801d0e2:	9707      	strlt	r7, [sp, #28]
 801d0e4:	1afa      	sublt	r2, r7, r3
 801d0e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 801d0e8:	bfbb      	ittet	lt
 801d0ea:	189b      	addlt	r3, r3, r2
 801d0ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 801d0ee:	1bdf      	subge	r7, r3, r7
 801d0f0:	2700      	movlt	r7, #0
 801d0f2:	f1b9 0f00 	cmp.w	r9, #0
 801d0f6:	bfb5      	itete	lt
 801d0f8:	9b05      	ldrlt	r3, [sp, #20]
 801d0fa:	9d05      	ldrge	r5, [sp, #20]
 801d0fc:	eba3 0509 	sublt.w	r5, r3, r9
 801d100:	464b      	movge	r3, r9
 801d102:	bfb8      	it	lt
 801d104:	2300      	movlt	r3, #0
 801d106:	e77e      	b.n	801d006 <_dtoa_r+0x6fe>
 801d108:	9f07      	ldr	r7, [sp, #28]
 801d10a:	9d05      	ldr	r5, [sp, #20]
 801d10c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801d10e:	e783      	b.n	801d018 <_dtoa_r+0x710>
 801d110:	9a07      	ldr	r2, [sp, #28]
 801d112:	e7ab      	b.n	801d06c <_dtoa_r+0x764>
 801d114:	2300      	movs	r3, #0
 801d116:	e7d4      	b.n	801d0c2 <_dtoa_r+0x7ba>
 801d118:	9b00      	ldr	r3, [sp, #0]
 801d11a:	e7d2      	b.n	801d0c2 <_dtoa_r+0x7ba>
 801d11c:	2300      	movs	r3, #0
 801d11e:	9307      	str	r3, [sp, #28]
 801d120:	693b      	ldr	r3, [r7, #16]
 801d122:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801d126:	6918      	ldr	r0, [r3, #16]
 801d128:	f000 fc20 	bl	801d96c <__hi0bits>
 801d12c:	f1c0 0020 	rsb	r0, r0, #32
 801d130:	4440      	add	r0, r8
 801d132:	f010 001f 	ands.w	r0, r0, #31
 801d136:	d047      	beq.n	801d1c8 <_dtoa_r+0x8c0>
 801d138:	f1c0 0320 	rsb	r3, r0, #32
 801d13c:	2b04      	cmp	r3, #4
 801d13e:	dd3b      	ble.n	801d1b8 <_dtoa_r+0x8b0>
 801d140:	9b05      	ldr	r3, [sp, #20]
 801d142:	f1c0 001c 	rsb	r0, r0, #28
 801d146:	4403      	add	r3, r0
 801d148:	9305      	str	r3, [sp, #20]
 801d14a:	4405      	add	r5, r0
 801d14c:	4480      	add	r8, r0
 801d14e:	9b05      	ldr	r3, [sp, #20]
 801d150:	2b00      	cmp	r3, #0
 801d152:	dd05      	ble.n	801d160 <_dtoa_r+0x858>
 801d154:	461a      	mov	r2, r3
 801d156:	9904      	ldr	r1, [sp, #16]
 801d158:	4620      	mov	r0, r4
 801d15a:	f000 fd43 	bl	801dbe4 <__lshift>
 801d15e:	9004      	str	r0, [sp, #16]
 801d160:	f1b8 0f00 	cmp.w	r8, #0
 801d164:	dd05      	ble.n	801d172 <_dtoa_r+0x86a>
 801d166:	4639      	mov	r1, r7
 801d168:	4642      	mov	r2, r8
 801d16a:	4620      	mov	r0, r4
 801d16c:	f000 fd3a 	bl	801dbe4 <__lshift>
 801d170:	4607      	mov	r7, r0
 801d172:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d174:	b353      	cbz	r3, 801d1cc <_dtoa_r+0x8c4>
 801d176:	4639      	mov	r1, r7
 801d178:	9804      	ldr	r0, [sp, #16]
 801d17a:	f000 fd87 	bl	801dc8c <__mcmp>
 801d17e:	2800      	cmp	r0, #0
 801d180:	da24      	bge.n	801d1cc <_dtoa_r+0x8c4>
 801d182:	2300      	movs	r3, #0
 801d184:	220a      	movs	r2, #10
 801d186:	9904      	ldr	r1, [sp, #16]
 801d188:	4620      	mov	r0, r4
 801d18a:	f000 fbb4 	bl	801d8f6 <__multadd>
 801d18e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d190:	9004      	str	r0, [sp, #16]
 801d192:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d196:	2b00      	cmp	r3, #0
 801d198:	f000 814d 	beq.w	801d436 <_dtoa_r+0xb2e>
 801d19c:	2300      	movs	r3, #0
 801d19e:	4631      	mov	r1, r6
 801d1a0:	220a      	movs	r2, #10
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	f000 fba7 	bl	801d8f6 <__multadd>
 801d1a8:	9b02      	ldr	r3, [sp, #8]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	4606      	mov	r6, r0
 801d1ae:	dc4f      	bgt.n	801d250 <_dtoa_r+0x948>
 801d1b0:	9b06      	ldr	r3, [sp, #24]
 801d1b2:	2b02      	cmp	r3, #2
 801d1b4:	dd4c      	ble.n	801d250 <_dtoa_r+0x948>
 801d1b6:	e011      	b.n	801d1dc <_dtoa_r+0x8d4>
 801d1b8:	d0c9      	beq.n	801d14e <_dtoa_r+0x846>
 801d1ba:	9a05      	ldr	r2, [sp, #20]
 801d1bc:	331c      	adds	r3, #28
 801d1be:	441a      	add	r2, r3
 801d1c0:	9205      	str	r2, [sp, #20]
 801d1c2:	441d      	add	r5, r3
 801d1c4:	4498      	add	r8, r3
 801d1c6:	e7c2      	b.n	801d14e <_dtoa_r+0x846>
 801d1c8:	4603      	mov	r3, r0
 801d1ca:	e7f6      	b.n	801d1ba <_dtoa_r+0x8b2>
 801d1cc:	f1b9 0f00 	cmp.w	r9, #0
 801d1d0:	dc38      	bgt.n	801d244 <_dtoa_r+0x93c>
 801d1d2:	9b06      	ldr	r3, [sp, #24]
 801d1d4:	2b02      	cmp	r3, #2
 801d1d6:	dd35      	ble.n	801d244 <_dtoa_r+0x93c>
 801d1d8:	f8cd 9008 	str.w	r9, [sp, #8]
 801d1dc:	9b02      	ldr	r3, [sp, #8]
 801d1de:	b963      	cbnz	r3, 801d1fa <_dtoa_r+0x8f2>
 801d1e0:	4639      	mov	r1, r7
 801d1e2:	2205      	movs	r2, #5
 801d1e4:	4620      	mov	r0, r4
 801d1e6:	f000 fb86 	bl	801d8f6 <__multadd>
 801d1ea:	4601      	mov	r1, r0
 801d1ec:	4607      	mov	r7, r0
 801d1ee:	9804      	ldr	r0, [sp, #16]
 801d1f0:	f000 fd4c 	bl	801dc8c <__mcmp>
 801d1f4:	2800      	cmp	r0, #0
 801d1f6:	f73f adcc 	bgt.w	801cd92 <_dtoa_r+0x48a>
 801d1fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d1fc:	465d      	mov	r5, fp
 801d1fe:	ea6f 0a03 	mvn.w	sl, r3
 801d202:	f04f 0900 	mov.w	r9, #0
 801d206:	4639      	mov	r1, r7
 801d208:	4620      	mov	r0, r4
 801d20a:	f000 fb5d 	bl	801d8c8 <_Bfree>
 801d20e:	2e00      	cmp	r6, #0
 801d210:	f43f aeb7 	beq.w	801cf82 <_dtoa_r+0x67a>
 801d214:	f1b9 0f00 	cmp.w	r9, #0
 801d218:	d005      	beq.n	801d226 <_dtoa_r+0x91e>
 801d21a:	45b1      	cmp	r9, r6
 801d21c:	d003      	beq.n	801d226 <_dtoa_r+0x91e>
 801d21e:	4649      	mov	r1, r9
 801d220:	4620      	mov	r0, r4
 801d222:	f000 fb51 	bl	801d8c8 <_Bfree>
 801d226:	4631      	mov	r1, r6
 801d228:	4620      	mov	r0, r4
 801d22a:	f000 fb4d 	bl	801d8c8 <_Bfree>
 801d22e:	e6a8      	b.n	801cf82 <_dtoa_r+0x67a>
 801d230:	2700      	movs	r7, #0
 801d232:	463e      	mov	r6, r7
 801d234:	e7e1      	b.n	801d1fa <_dtoa_r+0x8f2>
 801d236:	f8dd a020 	ldr.w	sl, [sp, #32]
 801d23a:	463e      	mov	r6, r7
 801d23c:	e5a9      	b.n	801cd92 <_dtoa_r+0x48a>
 801d23e:	bf00      	nop
 801d240:	40240000 	.word	0x40240000
 801d244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d246:	f8cd 9008 	str.w	r9, [sp, #8]
 801d24a:	2b00      	cmp	r3, #0
 801d24c:	f000 80fa 	beq.w	801d444 <_dtoa_r+0xb3c>
 801d250:	2d00      	cmp	r5, #0
 801d252:	dd05      	ble.n	801d260 <_dtoa_r+0x958>
 801d254:	4631      	mov	r1, r6
 801d256:	462a      	mov	r2, r5
 801d258:	4620      	mov	r0, r4
 801d25a:	f000 fcc3 	bl	801dbe4 <__lshift>
 801d25e:	4606      	mov	r6, r0
 801d260:	9b07      	ldr	r3, [sp, #28]
 801d262:	2b00      	cmp	r3, #0
 801d264:	d04c      	beq.n	801d300 <_dtoa_r+0x9f8>
 801d266:	6871      	ldr	r1, [r6, #4]
 801d268:	4620      	mov	r0, r4
 801d26a:	f000 faf9 	bl	801d860 <_Balloc>
 801d26e:	6932      	ldr	r2, [r6, #16]
 801d270:	3202      	adds	r2, #2
 801d272:	4605      	mov	r5, r0
 801d274:	0092      	lsls	r2, r2, #2
 801d276:	f106 010c 	add.w	r1, r6, #12
 801d27a:	300c      	adds	r0, #12
 801d27c:	f7fe fc54 	bl	801bb28 <memcpy>
 801d280:	2201      	movs	r2, #1
 801d282:	4629      	mov	r1, r5
 801d284:	4620      	mov	r0, r4
 801d286:	f000 fcad 	bl	801dbe4 <__lshift>
 801d28a:	9b00      	ldr	r3, [sp, #0]
 801d28c:	f8cd b014 	str.w	fp, [sp, #20]
 801d290:	f003 0301 	and.w	r3, r3, #1
 801d294:	46b1      	mov	r9, r6
 801d296:	9307      	str	r3, [sp, #28]
 801d298:	4606      	mov	r6, r0
 801d29a:	4639      	mov	r1, r7
 801d29c:	9804      	ldr	r0, [sp, #16]
 801d29e:	f7ff faa5 	bl	801c7ec <quorem>
 801d2a2:	4649      	mov	r1, r9
 801d2a4:	4605      	mov	r5, r0
 801d2a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801d2aa:	9804      	ldr	r0, [sp, #16]
 801d2ac:	f000 fcee 	bl	801dc8c <__mcmp>
 801d2b0:	4632      	mov	r2, r6
 801d2b2:	9000      	str	r0, [sp, #0]
 801d2b4:	4639      	mov	r1, r7
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	f000 fd02 	bl	801dcc0 <__mdiff>
 801d2bc:	68c3      	ldr	r3, [r0, #12]
 801d2be:	4602      	mov	r2, r0
 801d2c0:	bb03      	cbnz	r3, 801d304 <_dtoa_r+0x9fc>
 801d2c2:	4601      	mov	r1, r0
 801d2c4:	9008      	str	r0, [sp, #32]
 801d2c6:	9804      	ldr	r0, [sp, #16]
 801d2c8:	f000 fce0 	bl	801dc8c <__mcmp>
 801d2cc:	9a08      	ldr	r2, [sp, #32]
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	4611      	mov	r1, r2
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	9308      	str	r3, [sp, #32]
 801d2d6:	f000 faf7 	bl	801d8c8 <_Bfree>
 801d2da:	9b08      	ldr	r3, [sp, #32]
 801d2dc:	b9a3      	cbnz	r3, 801d308 <_dtoa_r+0xa00>
 801d2de:	9a06      	ldr	r2, [sp, #24]
 801d2e0:	b992      	cbnz	r2, 801d308 <_dtoa_r+0xa00>
 801d2e2:	9a07      	ldr	r2, [sp, #28]
 801d2e4:	b982      	cbnz	r2, 801d308 <_dtoa_r+0xa00>
 801d2e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801d2ea:	d029      	beq.n	801d340 <_dtoa_r+0xa38>
 801d2ec:	9b00      	ldr	r3, [sp, #0]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	dd01      	ble.n	801d2f6 <_dtoa_r+0x9ee>
 801d2f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801d2f6:	9b05      	ldr	r3, [sp, #20]
 801d2f8:	1c5d      	adds	r5, r3, #1
 801d2fa:	f883 8000 	strb.w	r8, [r3]
 801d2fe:	e782      	b.n	801d206 <_dtoa_r+0x8fe>
 801d300:	4630      	mov	r0, r6
 801d302:	e7c2      	b.n	801d28a <_dtoa_r+0x982>
 801d304:	2301      	movs	r3, #1
 801d306:	e7e3      	b.n	801d2d0 <_dtoa_r+0x9c8>
 801d308:	9a00      	ldr	r2, [sp, #0]
 801d30a:	2a00      	cmp	r2, #0
 801d30c:	db04      	blt.n	801d318 <_dtoa_r+0xa10>
 801d30e:	d125      	bne.n	801d35c <_dtoa_r+0xa54>
 801d310:	9a06      	ldr	r2, [sp, #24]
 801d312:	bb1a      	cbnz	r2, 801d35c <_dtoa_r+0xa54>
 801d314:	9a07      	ldr	r2, [sp, #28]
 801d316:	bb0a      	cbnz	r2, 801d35c <_dtoa_r+0xa54>
 801d318:	2b00      	cmp	r3, #0
 801d31a:	ddec      	ble.n	801d2f6 <_dtoa_r+0x9ee>
 801d31c:	2201      	movs	r2, #1
 801d31e:	9904      	ldr	r1, [sp, #16]
 801d320:	4620      	mov	r0, r4
 801d322:	f000 fc5f 	bl	801dbe4 <__lshift>
 801d326:	4639      	mov	r1, r7
 801d328:	9004      	str	r0, [sp, #16]
 801d32a:	f000 fcaf 	bl	801dc8c <__mcmp>
 801d32e:	2800      	cmp	r0, #0
 801d330:	dc03      	bgt.n	801d33a <_dtoa_r+0xa32>
 801d332:	d1e0      	bne.n	801d2f6 <_dtoa_r+0x9ee>
 801d334:	f018 0f01 	tst.w	r8, #1
 801d338:	d0dd      	beq.n	801d2f6 <_dtoa_r+0x9ee>
 801d33a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801d33e:	d1d8      	bne.n	801d2f2 <_dtoa_r+0x9ea>
 801d340:	9b05      	ldr	r3, [sp, #20]
 801d342:	9a05      	ldr	r2, [sp, #20]
 801d344:	1c5d      	adds	r5, r3, #1
 801d346:	2339      	movs	r3, #57	; 0x39
 801d348:	7013      	strb	r3, [r2, #0]
 801d34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d34e:	2b39      	cmp	r3, #57	; 0x39
 801d350:	f105 32ff 	add.w	r2, r5, #4294967295
 801d354:	d04f      	beq.n	801d3f6 <_dtoa_r+0xaee>
 801d356:	3301      	adds	r3, #1
 801d358:	7013      	strb	r3, [r2, #0]
 801d35a:	e754      	b.n	801d206 <_dtoa_r+0x8fe>
 801d35c:	9a05      	ldr	r2, [sp, #20]
 801d35e:	2b00      	cmp	r3, #0
 801d360:	f102 0501 	add.w	r5, r2, #1
 801d364:	dd06      	ble.n	801d374 <_dtoa_r+0xa6c>
 801d366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801d36a:	d0e9      	beq.n	801d340 <_dtoa_r+0xa38>
 801d36c:	f108 0801 	add.w	r8, r8, #1
 801d370:	9b05      	ldr	r3, [sp, #20]
 801d372:	e7c2      	b.n	801d2fa <_dtoa_r+0x9f2>
 801d374:	9a02      	ldr	r2, [sp, #8]
 801d376:	f805 8c01 	strb.w	r8, [r5, #-1]
 801d37a:	eba5 030b 	sub.w	r3, r5, fp
 801d37e:	4293      	cmp	r3, r2
 801d380:	d021      	beq.n	801d3c6 <_dtoa_r+0xabe>
 801d382:	2300      	movs	r3, #0
 801d384:	220a      	movs	r2, #10
 801d386:	9904      	ldr	r1, [sp, #16]
 801d388:	4620      	mov	r0, r4
 801d38a:	f000 fab4 	bl	801d8f6 <__multadd>
 801d38e:	45b1      	cmp	r9, r6
 801d390:	9004      	str	r0, [sp, #16]
 801d392:	f04f 0300 	mov.w	r3, #0
 801d396:	f04f 020a 	mov.w	r2, #10
 801d39a:	4649      	mov	r1, r9
 801d39c:	4620      	mov	r0, r4
 801d39e:	d105      	bne.n	801d3ac <_dtoa_r+0xaa4>
 801d3a0:	f000 faa9 	bl	801d8f6 <__multadd>
 801d3a4:	4681      	mov	r9, r0
 801d3a6:	4606      	mov	r6, r0
 801d3a8:	9505      	str	r5, [sp, #20]
 801d3aa:	e776      	b.n	801d29a <_dtoa_r+0x992>
 801d3ac:	f000 faa3 	bl	801d8f6 <__multadd>
 801d3b0:	4631      	mov	r1, r6
 801d3b2:	4681      	mov	r9, r0
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	220a      	movs	r2, #10
 801d3b8:	4620      	mov	r0, r4
 801d3ba:	f000 fa9c 	bl	801d8f6 <__multadd>
 801d3be:	4606      	mov	r6, r0
 801d3c0:	e7f2      	b.n	801d3a8 <_dtoa_r+0xaa0>
 801d3c2:	f04f 0900 	mov.w	r9, #0
 801d3c6:	2201      	movs	r2, #1
 801d3c8:	9904      	ldr	r1, [sp, #16]
 801d3ca:	4620      	mov	r0, r4
 801d3cc:	f000 fc0a 	bl	801dbe4 <__lshift>
 801d3d0:	4639      	mov	r1, r7
 801d3d2:	9004      	str	r0, [sp, #16]
 801d3d4:	f000 fc5a 	bl	801dc8c <__mcmp>
 801d3d8:	2800      	cmp	r0, #0
 801d3da:	dcb6      	bgt.n	801d34a <_dtoa_r+0xa42>
 801d3dc:	d102      	bne.n	801d3e4 <_dtoa_r+0xadc>
 801d3de:	f018 0f01 	tst.w	r8, #1
 801d3e2:	d1b2      	bne.n	801d34a <_dtoa_r+0xa42>
 801d3e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d3e8:	2b30      	cmp	r3, #48	; 0x30
 801d3ea:	f105 32ff 	add.w	r2, r5, #4294967295
 801d3ee:	f47f af0a 	bne.w	801d206 <_dtoa_r+0x8fe>
 801d3f2:	4615      	mov	r5, r2
 801d3f4:	e7f6      	b.n	801d3e4 <_dtoa_r+0xadc>
 801d3f6:	4593      	cmp	fp, r2
 801d3f8:	d105      	bne.n	801d406 <_dtoa_r+0xafe>
 801d3fa:	2331      	movs	r3, #49	; 0x31
 801d3fc:	f10a 0a01 	add.w	sl, sl, #1
 801d400:	f88b 3000 	strb.w	r3, [fp]
 801d404:	e6ff      	b.n	801d206 <_dtoa_r+0x8fe>
 801d406:	4615      	mov	r5, r2
 801d408:	e79f      	b.n	801d34a <_dtoa_r+0xa42>
 801d40a:	f8df b064 	ldr.w	fp, [pc, #100]	; 801d470 <_dtoa_r+0xb68>
 801d40e:	e007      	b.n	801d420 <_dtoa_r+0xb18>
 801d410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d412:	f8df b060 	ldr.w	fp, [pc, #96]	; 801d474 <_dtoa_r+0xb6c>
 801d416:	b11b      	cbz	r3, 801d420 <_dtoa_r+0xb18>
 801d418:	f10b 0308 	add.w	r3, fp, #8
 801d41c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d41e:	6013      	str	r3, [r2, #0]
 801d420:	4658      	mov	r0, fp
 801d422:	b017      	add	sp, #92	; 0x5c
 801d424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d428:	9b06      	ldr	r3, [sp, #24]
 801d42a:	2b01      	cmp	r3, #1
 801d42c:	f77f ae35 	ble.w	801d09a <_dtoa_r+0x792>
 801d430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d432:	9307      	str	r3, [sp, #28]
 801d434:	e649      	b.n	801d0ca <_dtoa_r+0x7c2>
 801d436:	9b02      	ldr	r3, [sp, #8]
 801d438:	2b00      	cmp	r3, #0
 801d43a:	dc03      	bgt.n	801d444 <_dtoa_r+0xb3c>
 801d43c:	9b06      	ldr	r3, [sp, #24]
 801d43e:	2b02      	cmp	r3, #2
 801d440:	f73f aecc 	bgt.w	801d1dc <_dtoa_r+0x8d4>
 801d444:	465d      	mov	r5, fp
 801d446:	4639      	mov	r1, r7
 801d448:	9804      	ldr	r0, [sp, #16]
 801d44a:	f7ff f9cf 	bl	801c7ec <quorem>
 801d44e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801d452:	f805 8b01 	strb.w	r8, [r5], #1
 801d456:	9a02      	ldr	r2, [sp, #8]
 801d458:	eba5 030b 	sub.w	r3, r5, fp
 801d45c:	429a      	cmp	r2, r3
 801d45e:	ddb0      	ble.n	801d3c2 <_dtoa_r+0xaba>
 801d460:	2300      	movs	r3, #0
 801d462:	220a      	movs	r2, #10
 801d464:	9904      	ldr	r1, [sp, #16]
 801d466:	4620      	mov	r0, r4
 801d468:	f000 fa45 	bl	801d8f6 <__multadd>
 801d46c:	9004      	str	r0, [sp, #16]
 801d46e:	e7ea      	b.n	801d446 <_dtoa_r+0xb3e>
 801d470:	080206bc 	.word	0x080206bc
 801d474:	080206e0 	.word	0x080206e0

0801d478 <__sflush_r>:
 801d478:	898a      	ldrh	r2, [r1, #12]
 801d47a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d47e:	4605      	mov	r5, r0
 801d480:	0710      	lsls	r0, r2, #28
 801d482:	460c      	mov	r4, r1
 801d484:	d458      	bmi.n	801d538 <__sflush_r+0xc0>
 801d486:	684b      	ldr	r3, [r1, #4]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	dc05      	bgt.n	801d498 <__sflush_r+0x20>
 801d48c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d48e:	2b00      	cmp	r3, #0
 801d490:	dc02      	bgt.n	801d498 <__sflush_r+0x20>
 801d492:	2000      	movs	r0, #0
 801d494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d49a:	2e00      	cmp	r6, #0
 801d49c:	d0f9      	beq.n	801d492 <__sflush_r+0x1a>
 801d49e:	2300      	movs	r3, #0
 801d4a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d4a4:	682f      	ldr	r7, [r5, #0]
 801d4a6:	6a21      	ldr	r1, [r4, #32]
 801d4a8:	602b      	str	r3, [r5, #0]
 801d4aa:	d032      	beq.n	801d512 <__sflush_r+0x9a>
 801d4ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d4ae:	89a3      	ldrh	r3, [r4, #12]
 801d4b0:	075a      	lsls	r2, r3, #29
 801d4b2:	d505      	bpl.n	801d4c0 <__sflush_r+0x48>
 801d4b4:	6863      	ldr	r3, [r4, #4]
 801d4b6:	1ac0      	subs	r0, r0, r3
 801d4b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4ba:	b10b      	cbz	r3, 801d4c0 <__sflush_r+0x48>
 801d4bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4be:	1ac0      	subs	r0, r0, r3
 801d4c0:	2300      	movs	r3, #0
 801d4c2:	4602      	mov	r2, r0
 801d4c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4c6:	6a21      	ldr	r1, [r4, #32]
 801d4c8:	4628      	mov	r0, r5
 801d4ca:	47b0      	blx	r6
 801d4cc:	1c43      	adds	r3, r0, #1
 801d4ce:	89a3      	ldrh	r3, [r4, #12]
 801d4d0:	d106      	bne.n	801d4e0 <__sflush_r+0x68>
 801d4d2:	6829      	ldr	r1, [r5, #0]
 801d4d4:	291d      	cmp	r1, #29
 801d4d6:	d848      	bhi.n	801d56a <__sflush_r+0xf2>
 801d4d8:	4a29      	ldr	r2, [pc, #164]	; (801d580 <__sflush_r+0x108>)
 801d4da:	40ca      	lsrs	r2, r1
 801d4dc:	07d6      	lsls	r6, r2, #31
 801d4de:	d544      	bpl.n	801d56a <__sflush_r+0xf2>
 801d4e0:	2200      	movs	r2, #0
 801d4e2:	6062      	str	r2, [r4, #4]
 801d4e4:	04d9      	lsls	r1, r3, #19
 801d4e6:	6922      	ldr	r2, [r4, #16]
 801d4e8:	6022      	str	r2, [r4, #0]
 801d4ea:	d504      	bpl.n	801d4f6 <__sflush_r+0x7e>
 801d4ec:	1c42      	adds	r2, r0, #1
 801d4ee:	d101      	bne.n	801d4f4 <__sflush_r+0x7c>
 801d4f0:	682b      	ldr	r3, [r5, #0]
 801d4f2:	b903      	cbnz	r3, 801d4f6 <__sflush_r+0x7e>
 801d4f4:	6560      	str	r0, [r4, #84]	; 0x54
 801d4f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4f8:	602f      	str	r7, [r5, #0]
 801d4fa:	2900      	cmp	r1, #0
 801d4fc:	d0c9      	beq.n	801d492 <__sflush_r+0x1a>
 801d4fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d502:	4299      	cmp	r1, r3
 801d504:	d002      	beq.n	801d50c <__sflush_r+0x94>
 801d506:	4628      	mov	r0, r5
 801d508:	f000 fc94 	bl	801de34 <_free_r>
 801d50c:	2000      	movs	r0, #0
 801d50e:	6360      	str	r0, [r4, #52]	; 0x34
 801d510:	e7c0      	b.n	801d494 <__sflush_r+0x1c>
 801d512:	2301      	movs	r3, #1
 801d514:	4628      	mov	r0, r5
 801d516:	47b0      	blx	r6
 801d518:	1c41      	adds	r1, r0, #1
 801d51a:	d1c8      	bne.n	801d4ae <__sflush_r+0x36>
 801d51c:	682b      	ldr	r3, [r5, #0]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	d0c5      	beq.n	801d4ae <__sflush_r+0x36>
 801d522:	2b1d      	cmp	r3, #29
 801d524:	d001      	beq.n	801d52a <__sflush_r+0xb2>
 801d526:	2b16      	cmp	r3, #22
 801d528:	d101      	bne.n	801d52e <__sflush_r+0xb6>
 801d52a:	602f      	str	r7, [r5, #0]
 801d52c:	e7b1      	b.n	801d492 <__sflush_r+0x1a>
 801d52e:	89a3      	ldrh	r3, [r4, #12]
 801d530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d534:	81a3      	strh	r3, [r4, #12]
 801d536:	e7ad      	b.n	801d494 <__sflush_r+0x1c>
 801d538:	690f      	ldr	r7, [r1, #16]
 801d53a:	2f00      	cmp	r7, #0
 801d53c:	d0a9      	beq.n	801d492 <__sflush_r+0x1a>
 801d53e:	0793      	lsls	r3, r2, #30
 801d540:	680e      	ldr	r6, [r1, #0]
 801d542:	bf08      	it	eq
 801d544:	694b      	ldreq	r3, [r1, #20]
 801d546:	600f      	str	r7, [r1, #0]
 801d548:	bf18      	it	ne
 801d54a:	2300      	movne	r3, #0
 801d54c:	eba6 0807 	sub.w	r8, r6, r7
 801d550:	608b      	str	r3, [r1, #8]
 801d552:	f1b8 0f00 	cmp.w	r8, #0
 801d556:	dd9c      	ble.n	801d492 <__sflush_r+0x1a>
 801d558:	4643      	mov	r3, r8
 801d55a:	463a      	mov	r2, r7
 801d55c:	6a21      	ldr	r1, [r4, #32]
 801d55e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d560:	4628      	mov	r0, r5
 801d562:	47b0      	blx	r6
 801d564:	2800      	cmp	r0, #0
 801d566:	dc06      	bgt.n	801d576 <__sflush_r+0xfe>
 801d568:	89a3      	ldrh	r3, [r4, #12]
 801d56a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d56e:	81a3      	strh	r3, [r4, #12]
 801d570:	f04f 30ff 	mov.w	r0, #4294967295
 801d574:	e78e      	b.n	801d494 <__sflush_r+0x1c>
 801d576:	4407      	add	r7, r0
 801d578:	eba8 0800 	sub.w	r8, r8, r0
 801d57c:	e7e9      	b.n	801d552 <__sflush_r+0xda>
 801d57e:	bf00      	nop
 801d580:	20400001 	.word	0x20400001

0801d584 <_fflush_r>:
 801d584:	b538      	push	{r3, r4, r5, lr}
 801d586:	690b      	ldr	r3, [r1, #16]
 801d588:	4605      	mov	r5, r0
 801d58a:	460c      	mov	r4, r1
 801d58c:	b1db      	cbz	r3, 801d5c6 <_fflush_r+0x42>
 801d58e:	b118      	cbz	r0, 801d598 <_fflush_r+0x14>
 801d590:	6983      	ldr	r3, [r0, #24]
 801d592:	b90b      	cbnz	r3, 801d598 <_fflush_r+0x14>
 801d594:	f000 f860 	bl	801d658 <__sinit>
 801d598:	4b0c      	ldr	r3, [pc, #48]	; (801d5cc <_fflush_r+0x48>)
 801d59a:	429c      	cmp	r4, r3
 801d59c:	d109      	bne.n	801d5b2 <_fflush_r+0x2e>
 801d59e:	686c      	ldr	r4, [r5, #4]
 801d5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5a4:	b17b      	cbz	r3, 801d5c6 <_fflush_r+0x42>
 801d5a6:	4621      	mov	r1, r4
 801d5a8:	4628      	mov	r0, r5
 801d5aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5ae:	f7ff bf63 	b.w	801d478 <__sflush_r>
 801d5b2:	4b07      	ldr	r3, [pc, #28]	; (801d5d0 <_fflush_r+0x4c>)
 801d5b4:	429c      	cmp	r4, r3
 801d5b6:	d101      	bne.n	801d5bc <_fflush_r+0x38>
 801d5b8:	68ac      	ldr	r4, [r5, #8]
 801d5ba:	e7f1      	b.n	801d5a0 <_fflush_r+0x1c>
 801d5bc:	4b05      	ldr	r3, [pc, #20]	; (801d5d4 <_fflush_r+0x50>)
 801d5be:	429c      	cmp	r4, r3
 801d5c0:	bf08      	it	eq
 801d5c2:	68ec      	ldreq	r4, [r5, #12]
 801d5c4:	e7ec      	b.n	801d5a0 <_fflush_r+0x1c>
 801d5c6:	2000      	movs	r0, #0
 801d5c8:	bd38      	pop	{r3, r4, r5, pc}
 801d5ca:	bf00      	nop
 801d5cc:	08020710 	.word	0x08020710
 801d5d0:	08020730 	.word	0x08020730
 801d5d4:	080206f0 	.word	0x080206f0

0801d5d8 <std>:
 801d5d8:	2300      	movs	r3, #0
 801d5da:	b510      	push	{r4, lr}
 801d5dc:	4604      	mov	r4, r0
 801d5de:	e9c0 3300 	strd	r3, r3, [r0]
 801d5e2:	6083      	str	r3, [r0, #8]
 801d5e4:	8181      	strh	r1, [r0, #12]
 801d5e6:	6643      	str	r3, [r0, #100]	; 0x64
 801d5e8:	81c2      	strh	r2, [r0, #14]
 801d5ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d5ee:	6183      	str	r3, [r0, #24]
 801d5f0:	4619      	mov	r1, r3
 801d5f2:	2208      	movs	r2, #8
 801d5f4:	305c      	adds	r0, #92	; 0x5c
 801d5f6:	f7fe faa2 	bl	801bb3e <memset>
 801d5fa:	4b05      	ldr	r3, [pc, #20]	; (801d610 <std+0x38>)
 801d5fc:	6263      	str	r3, [r4, #36]	; 0x24
 801d5fe:	4b05      	ldr	r3, [pc, #20]	; (801d614 <std+0x3c>)
 801d600:	62a3      	str	r3, [r4, #40]	; 0x28
 801d602:	4b05      	ldr	r3, [pc, #20]	; (801d618 <std+0x40>)
 801d604:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d606:	4b05      	ldr	r3, [pc, #20]	; (801d61c <std+0x44>)
 801d608:	6224      	str	r4, [r4, #32]
 801d60a:	6323      	str	r3, [r4, #48]	; 0x30
 801d60c:	bd10      	pop	{r4, pc}
 801d60e:	bf00      	nop
 801d610:	0801e225 	.word	0x0801e225
 801d614:	0801e247 	.word	0x0801e247
 801d618:	0801e27f 	.word	0x0801e27f
 801d61c:	0801e2a3 	.word	0x0801e2a3

0801d620 <_cleanup_r>:
 801d620:	4901      	ldr	r1, [pc, #4]	; (801d628 <_cleanup_r+0x8>)
 801d622:	f000 b885 	b.w	801d730 <_fwalk_reent>
 801d626:	bf00      	nop
 801d628:	0801d585 	.word	0x0801d585

0801d62c <__sfmoreglue>:
 801d62c:	b570      	push	{r4, r5, r6, lr}
 801d62e:	1e4a      	subs	r2, r1, #1
 801d630:	2568      	movs	r5, #104	; 0x68
 801d632:	4355      	muls	r5, r2
 801d634:	460e      	mov	r6, r1
 801d636:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d63a:	f000 fc49 	bl	801ded0 <_malloc_r>
 801d63e:	4604      	mov	r4, r0
 801d640:	b140      	cbz	r0, 801d654 <__sfmoreglue+0x28>
 801d642:	2100      	movs	r1, #0
 801d644:	e9c0 1600 	strd	r1, r6, [r0]
 801d648:	300c      	adds	r0, #12
 801d64a:	60a0      	str	r0, [r4, #8]
 801d64c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d650:	f7fe fa75 	bl	801bb3e <memset>
 801d654:	4620      	mov	r0, r4
 801d656:	bd70      	pop	{r4, r5, r6, pc}

0801d658 <__sinit>:
 801d658:	6983      	ldr	r3, [r0, #24]
 801d65a:	b510      	push	{r4, lr}
 801d65c:	4604      	mov	r4, r0
 801d65e:	bb33      	cbnz	r3, 801d6ae <__sinit+0x56>
 801d660:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801d664:	6503      	str	r3, [r0, #80]	; 0x50
 801d666:	4b12      	ldr	r3, [pc, #72]	; (801d6b0 <__sinit+0x58>)
 801d668:	4a12      	ldr	r2, [pc, #72]	; (801d6b4 <__sinit+0x5c>)
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	6282      	str	r2, [r0, #40]	; 0x28
 801d66e:	4298      	cmp	r0, r3
 801d670:	bf04      	itt	eq
 801d672:	2301      	moveq	r3, #1
 801d674:	6183      	streq	r3, [r0, #24]
 801d676:	f000 f81f 	bl	801d6b8 <__sfp>
 801d67a:	6060      	str	r0, [r4, #4]
 801d67c:	4620      	mov	r0, r4
 801d67e:	f000 f81b 	bl	801d6b8 <__sfp>
 801d682:	60a0      	str	r0, [r4, #8]
 801d684:	4620      	mov	r0, r4
 801d686:	f000 f817 	bl	801d6b8 <__sfp>
 801d68a:	2200      	movs	r2, #0
 801d68c:	60e0      	str	r0, [r4, #12]
 801d68e:	2104      	movs	r1, #4
 801d690:	6860      	ldr	r0, [r4, #4]
 801d692:	f7ff ffa1 	bl	801d5d8 <std>
 801d696:	2201      	movs	r2, #1
 801d698:	2109      	movs	r1, #9
 801d69a:	68a0      	ldr	r0, [r4, #8]
 801d69c:	f7ff ff9c 	bl	801d5d8 <std>
 801d6a0:	2202      	movs	r2, #2
 801d6a2:	2112      	movs	r1, #18
 801d6a4:	68e0      	ldr	r0, [r4, #12]
 801d6a6:	f7ff ff97 	bl	801d5d8 <std>
 801d6aa:	2301      	movs	r3, #1
 801d6ac:	61a3      	str	r3, [r4, #24]
 801d6ae:	bd10      	pop	{r4, pc}
 801d6b0:	080206a8 	.word	0x080206a8
 801d6b4:	0801d621 	.word	0x0801d621

0801d6b8 <__sfp>:
 801d6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6ba:	4b1b      	ldr	r3, [pc, #108]	; (801d728 <__sfp+0x70>)
 801d6bc:	681e      	ldr	r6, [r3, #0]
 801d6be:	69b3      	ldr	r3, [r6, #24]
 801d6c0:	4607      	mov	r7, r0
 801d6c2:	b913      	cbnz	r3, 801d6ca <__sfp+0x12>
 801d6c4:	4630      	mov	r0, r6
 801d6c6:	f7ff ffc7 	bl	801d658 <__sinit>
 801d6ca:	3648      	adds	r6, #72	; 0x48
 801d6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d6d0:	3b01      	subs	r3, #1
 801d6d2:	d503      	bpl.n	801d6dc <__sfp+0x24>
 801d6d4:	6833      	ldr	r3, [r6, #0]
 801d6d6:	b133      	cbz	r3, 801d6e6 <__sfp+0x2e>
 801d6d8:	6836      	ldr	r6, [r6, #0]
 801d6da:	e7f7      	b.n	801d6cc <__sfp+0x14>
 801d6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d6e0:	b16d      	cbz	r5, 801d6fe <__sfp+0x46>
 801d6e2:	3468      	adds	r4, #104	; 0x68
 801d6e4:	e7f4      	b.n	801d6d0 <__sfp+0x18>
 801d6e6:	2104      	movs	r1, #4
 801d6e8:	4638      	mov	r0, r7
 801d6ea:	f7ff ff9f 	bl	801d62c <__sfmoreglue>
 801d6ee:	6030      	str	r0, [r6, #0]
 801d6f0:	2800      	cmp	r0, #0
 801d6f2:	d1f1      	bne.n	801d6d8 <__sfp+0x20>
 801d6f4:	230c      	movs	r3, #12
 801d6f6:	603b      	str	r3, [r7, #0]
 801d6f8:	4604      	mov	r4, r0
 801d6fa:	4620      	mov	r0, r4
 801d6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d6fe:	4b0b      	ldr	r3, [pc, #44]	; (801d72c <__sfp+0x74>)
 801d700:	6665      	str	r5, [r4, #100]	; 0x64
 801d702:	e9c4 5500 	strd	r5, r5, [r4]
 801d706:	60a5      	str	r5, [r4, #8]
 801d708:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801d70c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801d710:	2208      	movs	r2, #8
 801d712:	4629      	mov	r1, r5
 801d714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d718:	f7fe fa11 	bl	801bb3e <memset>
 801d71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d724:	e7e9      	b.n	801d6fa <__sfp+0x42>
 801d726:	bf00      	nop
 801d728:	080206a8 	.word	0x080206a8
 801d72c:	ffff0001 	.word	0xffff0001

0801d730 <_fwalk_reent>:
 801d730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d734:	4680      	mov	r8, r0
 801d736:	4689      	mov	r9, r1
 801d738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d73c:	2600      	movs	r6, #0
 801d73e:	b914      	cbnz	r4, 801d746 <_fwalk_reent+0x16>
 801d740:	4630      	mov	r0, r6
 801d742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d746:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801d74a:	3f01      	subs	r7, #1
 801d74c:	d501      	bpl.n	801d752 <_fwalk_reent+0x22>
 801d74e:	6824      	ldr	r4, [r4, #0]
 801d750:	e7f5      	b.n	801d73e <_fwalk_reent+0xe>
 801d752:	89ab      	ldrh	r3, [r5, #12]
 801d754:	2b01      	cmp	r3, #1
 801d756:	d907      	bls.n	801d768 <_fwalk_reent+0x38>
 801d758:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d75c:	3301      	adds	r3, #1
 801d75e:	d003      	beq.n	801d768 <_fwalk_reent+0x38>
 801d760:	4629      	mov	r1, r5
 801d762:	4640      	mov	r0, r8
 801d764:	47c8      	blx	r9
 801d766:	4306      	orrs	r6, r0
 801d768:	3568      	adds	r5, #104	; 0x68
 801d76a:	e7ee      	b.n	801d74a <_fwalk_reent+0x1a>

0801d76c <_localeconv_r>:
 801d76c:	4b04      	ldr	r3, [pc, #16]	; (801d780 <_localeconv_r+0x14>)
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	6a18      	ldr	r0, [r3, #32]
 801d772:	4b04      	ldr	r3, [pc, #16]	; (801d784 <_localeconv_r+0x18>)
 801d774:	2800      	cmp	r0, #0
 801d776:	bf08      	it	eq
 801d778:	4618      	moveq	r0, r3
 801d77a:	30f0      	adds	r0, #240	; 0xf0
 801d77c:	4770      	bx	lr
 801d77e:	bf00      	nop
 801d780:	20000020 	.word	0x20000020
 801d784:	20000084 	.word	0x20000084

0801d788 <__swhatbuf_r>:
 801d788:	b570      	push	{r4, r5, r6, lr}
 801d78a:	460e      	mov	r6, r1
 801d78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d790:	2900      	cmp	r1, #0
 801d792:	b096      	sub	sp, #88	; 0x58
 801d794:	4614      	mov	r4, r2
 801d796:	461d      	mov	r5, r3
 801d798:	da07      	bge.n	801d7aa <__swhatbuf_r+0x22>
 801d79a:	2300      	movs	r3, #0
 801d79c:	602b      	str	r3, [r5, #0]
 801d79e:	89b3      	ldrh	r3, [r6, #12]
 801d7a0:	061a      	lsls	r2, r3, #24
 801d7a2:	d410      	bmi.n	801d7c6 <__swhatbuf_r+0x3e>
 801d7a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d7a8:	e00e      	b.n	801d7c8 <__swhatbuf_r+0x40>
 801d7aa:	466a      	mov	r2, sp
 801d7ac:	f000 fda0 	bl	801e2f0 <_fstat_r>
 801d7b0:	2800      	cmp	r0, #0
 801d7b2:	dbf2      	blt.n	801d79a <__swhatbuf_r+0x12>
 801d7b4:	9a01      	ldr	r2, [sp, #4]
 801d7b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d7ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d7be:	425a      	negs	r2, r3
 801d7c0:	415a      	adcs	r2, r3
 801d7c2:	602a      	str	r2, [r5, #0]
 801d7c4:	e7ee      	b.n	801d7a4 <__swhatbuf_r+0x1c>
 801d7c6:	2340      	movs	r3, #64	; 0x40
 801d7c8:	2000      	movs	r0, #0
 801d7ca:	6023      	str	r3, [r4, #0]
 801d7cc:	b016      	add	sp, #88	; 0x58
 801d7ce:	bd70      	pop	{r4, r5, r6, pc}

0801d7d0 <__smakebuf_r>:
 801d7d0:	898b      	ldrh	r3, [r1, #12]
 801d7d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d7d4:	079d      	lsls	r5, r3, #30
 801d7d6:	4606      	mov	r6, r0
 801d7d8:	460c      	mov	r4, r1
 801d7da:	d507      	bpl.n	801d7ec <__smakebuf_r+0x1c>
 801d7dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d7e0:	6023      	str	r3, [r4, #0]
 801d7e2:	6123      	str	r3, [r4, #16]
 801d7e4:	2301      	movs	r3, #1
 801d7e6:	6163      	str	r3, [r4, #20]
 801d7e8:	b002      	add	sp, #8
 801d7ea:	bd70      	pop	{r4, r5, r6, pc}
 801d7ec:	ab01      	add	r3, sp, #4
 801d7ee:	466a      	mov	r2, sp
 801d7f0:	f7ff ffca 	bl	801d788 <__swhatbuf_r>
 801d7f4:	9900      	ldr	r1, [sp, #0]
 801d7f6:	4605      	mov	r5, r0
 801d7f8:	4630      	mov	r0, r6
 801d7fa:	f000 fb69 	bl	801ded0 <_malloc_r>
 801d7fe:	b948      	cbnz	r0, 801d814 <__smakebuf_r+0x44>
 801d800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d804:	059a      	lsls	r2, r3, #22
 801d806:	d4ef      	bmi.n	801d7e8 <__smakebuf_r+0x18>
 801d808:	f023 0303 	bic.w	r3, r3, #3
 801d80c:	f043 0302 	orr.w	r3, r3, #2
 801d810:	81a3      	strh	r3, [r4, #12]
 801d812:	e7e3      	b.n	801d7dc <__smakebuf_r+0xc>
 801d814:	4b0d      	ldr	r3, [pc, #52]	; (801d84c <__smakebuf_r+0x7c>)
 801d816:	62b3      	str	r3, [r6, #40]	; 0x28
 801d818:	89a3      	ldrh	r3, [r4, #12]
 801d81a:	6020      	str	r0, [r4, #0]
 801d81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d820:	81a3      	strh	r3, [r4, #12]
 801d822:	9b00      	ldr	r3, [sp, #0]
 801d824:	6163      	str	r3, [r4, #20]
 801d826:	9b01      	ldr	r3, [sp, #4]
 801d828:	6120      	str	r0, [r4, #16]
 801d82a:	b15b      	cbz	r3, 801d844 <__smakebuf_r+0x74>
 801d82c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d830:	4630      	mov	r0, r6
 801d832:	f000 fd6f 	bl	801e314 <_isatty_r>
 801d836:	b128      	cbz	r0, 801d844 <__smakebuf_r+0x74>
 801d838:	89a3      	ldrh	r3, [r4, #12]
 801d83a:	f023 0303 	bic.w	r3, r3, #3
 801d83e:	f043 0301 	orr.w	r3, r3, #1
 801d842:	81a3      	strh	r3, [r4, #12]
 801d844:	89a3      	ldrh	r3, [r4, #12]
 801d846:	431d      	orrs	r5, r3
 801d848:	81a5      	strh	r5, [r4, #12]
 801d84a:	e7cd      	b.n	801d7e8 <__smakebuf_r+0x18>
 801d84c:	0801d621 	.word	0x0801d621

0801d850 <malloc>:
 801d850:	4b02      	ldr	r3, [pc, #8]	; (801d85c <malloc+0xc>)
 801d852:	4601      	mov	r1, r0
 801d854:	6818      	ldr	r0, [r3, #0]
 801d856:	f000 bb3b 	b.w	801ded0 <_malloc_r>
 801d85a:	bf00      	nop
 801d85c:	20000020 	.word	0x20000020

0801d860 <_Balloc>:
 801d860:	b570      	push	{r4, r5, r6, lr}
 801d862:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801d864:	4604      	mov	r4, r0
 801d866:	460e      	mov	r6, r1
 801d868:	b93d      	cbnz	r5, 801d87a <_Balloc+0x1a>
 801d86a:	2010      	movs	r0, #16
 801d86c:	f7ff fff0 	bl	801d850 <malloc>
 801d870:	6260      	str	r0, [r4, #36]	; 0x24
 801d872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801d876:	6005      	str	r5, [r0, #0]
 801d878:	60c5      	str	r5, [r0, #12]
 801d87a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801d87c:	68eb      	ldr	r3, [r5, #12]
 801d87e:	b183      	cbz	r3, 801d8a2 <_Balloc+0x42>
 801d880:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d882:	68db      	ldr	r3, [r3, #12]
 801d884:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801d888:	b9b8      	cbnz	r0, 801d8ba <_Balloc+0x5a>
 801d88a:	2101      	movs	r1, #1
 801d88c:	fa01 f506 	lsl.w	r5, r1, r6
 801d890:	1d6a      	adds	r2, r5, #5
 801d892:	0092      	lsls	r2, r2, #2
 801d894:	4620      	mov	r0, r4
 801d896:	f000 fabf 	bl	801de18 <_calloc_r>
 801d89a:	b160      	cbz	r0, 801d8b6 <_Balloc+0x56>
 801d89c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801d8a0:	e00e      	b.n	801d8c0 <_Balloc+0x60>
 801d8a2:	2221      	movs	r2, #33	; 0x21
 801d8a4:	2104      	movs	r1, #4
 801d8a6:	4620      	mov	r0, r4
 801d8a8:	f000 fab6 	bl	801de18 <_calloc_r>
 801d8ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d8ae:	60e8      	str	r0, [r5, #12]
 801d8b0:	68db      	ldr	r3, [r3, #12]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d1e4      	bne.n	801d880 <_Balloc+0x20>
 801d8b6:	2000      	movs	r0, #0
 801d8b8:	bd70      	pop	{r4, r5, r6, pc}
 801d8ba:	6802      	ldr	r2, [r0, #0]
 801d8bc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801d8c0:	2300      	movs	r3, #0
 801d8c2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d8c6:	e7f7      	b.n	801d8b8 <_Balloc+0x58>

0801d8c8 <_Bfree>:
 801d8c8:	b570      	push	{r4, r5, r6, lr}
 801d8ca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801d8cc:	4606      	mov	r6, r0
 801d8ce:	460d      	mov	r5, r1
 801d8d0:	b93c      	cbnz	r4, 801d8e2 <_Bfree+0x1a>
 801d8d2:	2010      	movs	r0, #16
 801d8d4:	f7ff ffbc 	bl	801d850 <malloc>
 801d8d8:	6270      	str	r0, [r6, #36]	; 0x24
 801d8da:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d8de:	6004      	str	r4, [r0, #0]
 801d8e0:	60c4      	str	r4, [r0, #12]
 801d8e2:	b13d      	cbz	r5, 801d8f4 <_Bfree+0x2c>
 801d8e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801d8e6:	686a      	ldr	r2, [r5, #4]
 801d8e8:	68db      	ldr	r3, [r3, #12]
 801d8ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d8ee:	6029      	str	r1, [r5, #0]
 801d8f0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801d8f4:	bd70      	pop	{r4, r5, r6, pc}

0801d8f6 <__multadd>:
 801d8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d8fa:	690d      	ldr	r5, [r1, #16]
 801d8fc:	461f      	mov	r7, r3
 801d8fe:	4606      	mov	r6, r0
 801d900:	460c      	mov	r4, r1
 801d902:	f101 0c14 	add.w	ip, r1, #20
 801d906:	2300      	movs	r3, #0
 801d908:	f8dc 0000 	ldr.w	r0, [ip]
 801d90c:	b281      	uxth	r1, r0
 801d90e:	fb02 7101 	mla	r1, r2, r1, r7
 801d912:	0c0f      	lsrs	r7, r1, #16
 801d914:	0c00      	lsrs	r0, r0, #16
 801d916:	fb02 7000 	mla	r0, r2, r0, r7
 801d91a:	b289      	uxth	r1, r1
 801d91c:	3301      	adds	r3, #1
 801d91e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801d922:	429d      	cmp	r5, r3
 801d924:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801d928:	f84c 1b04 	str.w	r1, [ip], #4
 801d92c:	dcec      	bgt.n	801d908 <__multadd+0x12>
 801d92e:	b1d7      	cbz	r7, 801d966 <__multadd+0x70>
 801d930:	68a3      	ldr	r3, [r4, #8]
 801d932:	42ab      	cmp	r3, r5
 801d934:	dc12      	bgt.n	801d95c <__multadd+0x66>
 801d936:	6861      	ldr	r1, [r4, #4]
 801d938:	4630      	mov	r0, r6
 801d93a:	3101      	adds	r1, #1
 801d93c:	f7ff ff90 	bl	801d860 <_Balloc>
 801d940:	6922      	ldr	r2, [r4, #16]
 801d942:	3202      	adds	r2, #2
 801d944:	f104 010c 	add.w	r1, r4, #12
 801d948:	4680      	mov	r8, r0
 801d94a:	0092      	lsls	r2, r2, #2
 801d94c:	300c      	adds	r0, #12
 801d94e:	f7fe f8eb 	bl	801bb28 <memcpy>
 801d952:	4621      	mov	r1, r4
 801d954:	4630      	mov	r0, r6
 801d956:	f7ff ffb7 	bl	801d8c8 <_Bfree>
 801d95a:	4644      	mov	r4, r8
 801d95c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801d960:	3501      	adds	r5, #1
 801d962:	615f      	str	r7, [r3, #20]
 801d964:	6125      	str	r5, [r4, #16]
 801d966:	4620      	mov	r0, r4
 801d968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d96c <__hi0bits>:
 801d96c:	0c02      	lsrs	r2, r0, #16
 801d96e:	0412      	lsls	r2, r2, #16
 801d970:	4603      	mov	r3, r0
 801d972:	b9b2      	cbnz	r2, 801d9a2 <__hi0bits+0x36>
 801d974:	0403      	lsls	r3, r0, #16
 801d976:	2010      	movs	r0, #16
 801d978:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d97c:	bf04      	itt	eq
 801d97e:	021b      	lsleq	r3, r3, #8
 801d980:	3008      	addeq	r0, #8
 801d982:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d986:	bf04      	itt	eq
 801d988:	011b      	lsleq	r3, r3, #4
 801d98a:	3004      	addeq	r0, #4
 801d98c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d990:	bf04      	itt	eq
 801d992:	009b      	lsleq	r3, r3, #2
 801d994:	3002      	addeq	r0, #2
 801d996:	2b00      	cmp	r3, #0
 801d998:	db06      	blt.n	801d9a8 <__hi0bits+0x3c>
 801d99a:	005b      	lsls	r3, r3, #1
 801d99c:	d503      	bpl.n	801d9a6 <__hi0bits+0x3a>
 801d99e:	3001      	adds	r0, #1
 801d9a0:	4770      	bx	lr
 801d9a2:	2000      	movs	r0, #0
 801d9a4:	e7e8      	b.n	801d978 <__hi0bits+0xc>
 801d9a6:	2020      	movs	r0, #32
 801d9a8:	4770      	bx	lr

0801d9aa <__lo0bits>:
 801d9aa:	6803      	ldr	r3, [r0, #0]
 801d9ac:	f013 0207 	ands.w	r2, r3, #7
 801d9b0:	4601      	mov	r1, r0
 801d9b2:	d00b      	beq.n	801d9cc <__lo0bits+0x22>
 801d9b4:	07da      	lsls	r2, r3, #31
 801d9b6:	d423      	bmi.n	801da00 <__lo0bits+0x56>
 801d9b8:	0798      	lsls	r0, r3, #30
 801d9ba:	bf49      	itett	mi
 801d9bc:	085b      	lsrmi	r3, r3, #1
 801d9be:	089b      	lsrpl	r3, r3, #2
 801d9c0:	2001      	movmi	r0, #1
 801d9c2:	600b      	strmi	r3, [r1, #0]
 801d9c4:	bf5c      	itt	pl
 801d9c6:	600b      	strpl	r3, [r1, #0]
 801d9c8:	2002      	movpl	r0, #2
 801d9ca:	4770      	bx	lr
 801d9cc:	b298      	uxth	r0, r3
 801d9ce:	b9a8      	cbnz	r0, 801d9fc <__lo0bits+0x52>
 801d9d0:	0c1b      	lsrs	r3, r3, #16
 801d9d2:	2010      	movs	r0, #16
 801d9d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d9d8:	bf04      	itt	eq
 801d9da:	0a1b      	lsreq	r3, r3, #8
 801d9dc:	3008      	addeq	r0, #8
 801d9de:	071a      	lsls	r2, r3, #28
 801d9e0:	bf04      	itt	eq
 801d9e2:	091b      	lsreq	r3, r3, #4
 801d9e4:	3004      	addeq	r0, #4
 801d9e6:	079a      	lsls	r2, r3, #30
 801d9e8:	bf04      	itt	eq
 801d9ea:	089b      	lsreq	r3, r3, #2
 801d9ec:	3002      	addeq	r0, #2
 801d9ee:	07da      	lsls	r2, r3, #31
 801d9f0:	d402      	bmi.n	801d9f8 <__lo0bits+0x4e>
 801d9f2:	085b      	lsrs	r3, r3, #1
 801d9f4:	d006      	beq.n	801da04 <__lo0bits+0x5a>
 801d9f6:	3001      	adds	r0, #1
 801d9f8:	600b      	str	r3, [r1, #0]
 801d9fa:	4770      	bx	lr
 801d9fc:	4610      	mov	r0, r2
 801d9fe:	e7e9      	b.n	801d9d4 <__lo0bits+0x2a>
 801da00:	2000      	movs	r0, #0
 801da02:	4770      	bx	lr
 801da04:	2020      	movs	r0, #32
 801da06:	4770      	bx	lr

0801da08 <__i2b>:
 801da08:	b510      	push	{r4, lr}
 801da0a:	460c      	mov	r4, r1
 801da0c:	2101      	movs	r1, #1
 801da0e:	f7ff ff27 	bl	801d860 <_Balloc>
 801da12:	2201      	movs	r2, #1
 801da14:	6144      	str	r4, [r0, #20]
 801da16:	6102      	str	r2, [r0, #16]
 801da18:	bd10      	pop	{r4, pc}

0801da1a <__multiply>:
 801da1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da1e:	4614      	mov	r4, r2
 801da20:	690a      	ldr	r2, [r1, #16]
 801da22:	6923      	ldr	r3, [r4, #16]
 801da24:	429a      	cmp	r2, r3
 801da26:	bfb8      	it	lt
 801da28:	460b      	movlt	r3, r1
 801da2a:	4688      	mov	r8, r1
 801da2c:	bfbc      	itt	lt
 801da2e:	46a0      	movlt	r8, r4
 801da30:	461c      	movlt	r4, r3
 801da32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801da36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801da3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801da3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801da42:	eb07 0609 	add.w	r6, r7, r9
 801da46:	42b3      	cmp	r3, r6
 801da48:	bfb8      	it	lt
 801da4a:	3101      	addlt	r1, #1
 801da4c:	f7ff ff08 	bl	801d860 <_Balloc>
 801da50:	f100 0514 	add.w	r5, r0, #20
 801da54:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801da58:	462b      	mov	r3, r5
 801da5a:	2200      	movs	r2, #0
 801da5c:	4573      	cmp	r3, lr
 801da5e:	d316      	bcc.n	801da8e <__multiply+0x74>
 801da60:	f104 0214 	add.w	r2, r4, #20
 801da64:	f108 0114 	add.w	r1, r8, #20
 801da68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801da6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801da70:	9300      	str	r3, [sp, #0]
 801da72:	9b00      	ldr	r3, [sp, #0]
 801da74:	9201      	str	r2, [sp, #4]
 801da76:	4293      	cmp	r3, r2
 801da78:	d80c      	bhi.n	801da94 <__multiply+0x7a>
 801da7a:	2e00      	cmp	r6, #0
 801da7c:	dd03      	ble.n	801da86 <__multiply+0x6c>
 801da7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801da82:	2b00      	cmp	r3, #0
 801da84:	d05d      	beq.n	801db42 <__multiply+0x128>
 801da86:	6106      	str	r6, [r0, #16]
 801da88:	b003      	add	sp, #12
 801da8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da8e:	f843 2b04 	str.w	r2, [r3], #4
 801da92:	e7e3      	b.n	801da5c <__multiply+0x42>
 801da94:	f8b2 b000 	ldrh.w	fp, [r2]
 801da98:	f1bb 0f00 	cmp.w	fp, #0
 801da9c:	d023      	beq.n	801dae6 <__multiply+0xcc>
 801da9e:	4689      	mov	r9, r1
 801daa0:	46ac      	mov	ip, r5
 801daa2:	f04f 0800 	mov.w	r8, #0
 801daa6:	f859 4b04 	ldr.w	r4, [r9], #4
 801daaa:	f8dc a000 	ldr.w	sl, [ip]
 801daae:	b2a3      	uxth	r3, r4
 801dab0:	fa1f fa8a 	uxth.w	sl, sl
 801dab4:	fb0b a303 	mla	r3, fp, r3, sl
 801dab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801dabc:	f8dc 4000 	ldr.w	r4, [ip]
 801dac0:	4443      	add	r3, r8
 801dac2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801dac6:	fb0b 840a 	mla	r4, fp, sl, r8
 801daca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801dace:	46e2      	mov	sl, ip
 801dad0:	b29b      	uxth	r3, r3
 801dad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801dad6:	454f      	cmp	r7, r9
 801dad8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801dadc:	f84a 3b04 	str.w	r3, [sl], #4
 801dae0:	d82b      	bhi.n	801db3a <__multiply+0x120>
 801dae2:	f8cc 8004 	str.w	r8, [ip, #4]
 801dae6:	9b01      	ldr	r3, [sp, #4]
 801dae8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801daec:	3204      	adds	r2, #4
 801daee:	f1ba 0f00 	cmp.w	sl, #0
 801daf2:	d020      	beq.n	801db36 <__multiply+0x11c>
 801daf4:	682b      	ldr	r3, [r5, #0]
 801daf6:	4689      	mov	r9, r1
 801daf8:	46a8      	mov	r8, r5
 801dafa:	f04f 0b00 	mov.w	fp, #0
 801dafe:	f8b9 c000 	ldrh.w	ip, [r9]
 801db02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801db06:	fb0a 440c 	mla	r4, sl, ip, r4
 801db0a:	445c      	add	r4, fp
 801db0c:	46c4      	mov	ip, r8
 801db0e:	b29b      	uxth	r3, r3
 801db10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801db14:	f84c 3b04 	str.w	r3, [ip], #4
 801db18:	f859 3b04 	ldr.w	r3, [r9], #4
 801db1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801db20:	0c1b      	lsrs	r3, r3, #16
 801db22:	fb0a b303 	mla	r3, sl, r3, fp
 801db26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801db2a:	454f      	cmp	r7, r9
 801db2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801db30:	d805      	bhi.n	801db3e <__multiply+0x124>
 801db32:	f8c8 3004 	str.w	r3, [r8, #4]
 801db36:	3504      	adds	r5, #4
 801db38:	e79b      	b.n	801da72 <__multiply+0x58>
 801db3a:	46d4      	mov	ip, sl
 801db3c:	e7b3      	b.n	801daa6 <__multiply+0x8c>
 801db3e:	46e0      	mov	r8, ip
 801db40:	e7dd      	b.n	801dafe <__multiply+0xe4>
 801db42:	3e01      	subs	r6, #1
 801db44:	e799      	b.n	801da7a <__multiply+0x60>
	...

0801db48 <__pow5mult>:
 801db48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801db4c:	4615      	mov	r5, r2
 801db4e:	f012 0203 	ands.w	r2, r2, #3
 801db52:	4606      	mov	r6, r0
 801db54:	460f      	mov	r7, r1
 801db56:	d007      	beq.n	801db68 <__pow5mult+0x20>
 801db58:	3a01      	subs	r2, #1
 801db5a:	4c21      	ldr	r4, [pc, #132]	; (801dbe0 <__pow5mult+0x98>)
 801db5c:	2300      	movs	r3, #0
 801db5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801db62:	f7ff fec8 	bl	801d8f6 <__multadd>
 801db66:	4607      	mov	r7, r0
 801db68:	10ad      	asrs	r5, r5, #2
 801db6a:	d035      	beq.n	801dbd8 <__pow5mult+0x90>
 801db6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801db6e:	b93c      	cbnz	r4, 801db80 <__pow5mult+0x38>
 801db70:	2010      	movs	r0, #16
 801db72:	f7ff fe6d 	bl	801d850 <malloc>
 801db76:	6270      	str	r0, [r6, #36]	; 0x24
 801db78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801db7c:	6004      	str	r4, [r0, #0]
 801db7e:	60c4      	str	r4, [r0, #12]
 801db80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801db84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801db88:	b94c      	cbnz	r4, 801db9e <__pow5mult+0x56>
 801db8a:	f240 2171 	movw	r1, #625	; 0x271
 801db8e:	4630      	mov	r0, r6
 801db90:	f7ff ff3a 	bl	801da08 <__i2b>
 801db94:	2300      	movs	r3, #0
 801db96:	f8c8 0008 	str.w	r0, [r8, #8]
 801db9a:	4604      	mov	r4, r0
 801db9c:	6003      	str	r3, [r0, #0]
 801db9e:	f04f 0800 	mov.w	r8, #0
 801dba2:	07eb      	lsls	r3, r5, #31
 801dba4:	d50a      	bpl.n	801dbbc <__pow5mult+0x74>
 801dba6:	4639      	mov	r1, r7
 801dba8:	4622      	mov	r2, r4
 801dbaa:	4630      	mov	r0, r6
 801dbac:	f7ff ff35 	bl	801da1a <__multiply>
 801dbb0:	4639      	mov	r1, r7
 801dbb2:	4681      	mov	r9, r0
 801dbb4:	4630      	mov	r0, r6
 801dbb6:	f7ff fe87 	bl	801d8c8 <_Bfree>
 801dbba:	464f      	mov	r7, r9
 801dbbc:	106d      	asrs	r5, r5, #1
 801dbbe:	d00b      	beq.n	801dbd8 <__pow5mult+0x90>
 801dbc0:	6820      	ldr	r0, [r4, #0]
 801dbc2:	b938      	cbnz	r0, 801dbd4 <__pow5mult+0x8c>
 801dbc4:	4622      	mov	r2, r4
 801dbc6:	4621      	mov	r1, r4
 801dbc8:	4630      	mov	r0, r6
 801dbca:	f7ff ff26 	bl	801da1a <__multiply>
 801dbce:	6020      	str	r0, [r4, #0]
 801dbd0:	f8c0 8000 	str.w	r8, [r0]
 801dbd4:	4604      	mov	r4, r0
 801dbd6:	e7e4      	b.n	801dba2 <__pow5mult+0x5a>
 801dbd8:	4638      	mov	r0, r7
 801dbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dbde:	bf00      	nop
 801dbe0:	08020840 	.word	0x08020840

0801dbe4 <__lshift>:
 801dbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbe8:	460c      	mov	r4, r1
 801dbea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801dbee:	6923      	ldr	r3, [r4, #16]
 801dbf0:	6849      	ldr	r1, [r1, #4]
 801dbf2:	eb0a 0903 	add.w	r9, sl, r3
 801dbf6:	68a3      	ldr	r3, [r4, #8]
 801dbf8:	4607      	mov	r7, r0
 801dbfa:	4616      	mov	r6, r2
 801dbfc:	f109 0501 	add.w	r5, r9, #1
 801dc00:	42ab      	cmp	r3, r5
 801dc02:	db32      	blt.n	801dc6a <__lshift+0x86>
 801dc04:	4638      	mov	r0, r7
 801dc06:	f7ff fe2b 	bl	801d860 <_Balloc>
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	4680      	mov	r8, r0
 801dc0e:	f100 0114 	add.w	r1, r0, #20
 801dc12:	461a      	mov	r2, r3
 801dc14:	4553      	cmp	r3, sl
 801dc16:	db2b      	blt.n	801dc70 <__lshift+0x8c>
 801dc18:	6920      	ldr	r0, [r4, #16]
 801dc1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801dc1e:	f104 0314 	add.w	r3, r4, #20
 801dc22:	f016 021f 	ands.w	r2, r6, #31
 801dc26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801dc2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801dc2e:	d025      	beq.n	801dc7c <__lshift+0x98>
 801dc30:	f1c2 0e20 	rsb	lr, r2, #32
 801dc34:	2000      	movs	r0, #0
 801dc36:	681e      	ldr	r6, [r3, #0]
 801dc38:	468a      	mov	sl, r1
 801dc3a:	4096      	lsls	r6, r2
 801dc3c:	4330      	orrs	r0, r6
 801dc3e:	f84a 0b04 	str.w	r0, [sl], #4
 801dc42:	f853 0b04 	ldr.w	r0, [r3], #4
 801dc46:	459c      	cmp	ip, r3
 801dc48:	fa20 f00e 	lsr.w	r0, r0, lr
 801dc4c:	d814      	bhi.n	801dc78 <__lshift+0x94>
 801dc4e:	6048      	str	r0, [r1, #4]
 801dc50:	b108      	cbz	r0, 801dc56 <__lshift+0x72>
 801dc52:	f109 0502 	add.w	r5, r9, #2
 801dc56:	3d01      	subs	r5, #1
 801dc58:	4638      	mov	r0, r7
 801dc5a:	f8c8 5010 	str.w	r5, [r8, #16]
 801dc5e:	4621      	mov	r1, r4
 801dc60:	f7ff fe32 	bl	801d8c8 <_Bfree>
 801dc64:	4640      	mov	r0, r8
 801dc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc6a:	3101      	adds	r1, #1
 801dc6c:	005b      	lsls	r3, r3, #1
 801dc6e:	e7c7      	b.n	801dc00 <__lshift+0x1c>
 801dc70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801dc74:	3301      	adds	r3, #1
 801dc76:	e7cd      	b.n	801dc14 <__lshift+0x30>
 801dc78:	4651      	mov	r1, sl
 801dc7a:	e7dc      	b.n	801dc36 <__lshift+0x52>
 801dc7c:	3904      	subs	r1, #4
 801dc7e:	f853 2b04 	ldr.w	r2, [r3], #4
 801dc82:	f841 2f04 	str.w	r2, [r1, #4]!
 801dc86:	459c      	cmp	ip, r3
 801dc88:	d8f9      	bhi.n	801dc7e <__lshift+0x9a>
 801dc8a:	e7e4      	b.n	801dc56 <__lshift+0x72>

0801dc8c <__mcmp>:
 801dc8c:	6903      	ldr	r3, [r0, #16]
 801dc8e:	690a      	ldr	r2, [r1, #16]
 801dc90:	1a9b      	subs	r3, r3, r2
 801dc92:	b530      	push	{r4, r5, lr}
 801dc94:	d10c      	bne.n	801dcb0 <__mcmp+0x24>
 801dc96:	0092      	lsls	r2, r2, #2
 801dc98:	3014      	adds	r0, #20
 801dc9a:	3114      	adds	r1, #20
 801dc9c:	1884      	adds	r4, r0, r2
 801dc9e:	4411      	add	r1, r2
 801dca0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801dca4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801dca8:	4295      	cmp	r5, r2
 801dcaa:	d003      	beq.n	801dcb4 <__mcmp+0x28>
 801dcac:	d305      	bcc.n	801dcba <__mcmp+0x2e>
 801dcae:	2301      	movs	r3, #1
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	bd30      	pop	{r4, r5, pc}
 801dcb4:	42a0      	cmp	r0, r4
 801dcb6:	d3f3      	bcc.n	801dca0 <__mcmp+0x14>
 801dcb8:	e7fa      	b.n	801dcb0 <__mcmp+0x24>
 801dcba:	f04f 33ff 	mov.w	r3, #4294967295
 801dcbe:	e7f7      	b.n	801dcb0 <__mcmp+0x24>

0801dcc0 <__mdiff>:
 801dcc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcc4:	460d      	mov	r5, r1
 801dcc6:	4607      	mov	r7, r0
 801dcc8:	4611      	mov	r1, r2
 801dcca:	4628      	mov	r0, r5
 801dccc:	4614      	mov	r4, r2
 801dcce:	f7ff ffdd 	bl	801dc8c <__mcmp>
 801dcd2:	1e06      	subs	r6, r0, #0
 801dcd4:	d108      	bne.n	801dce8 <__mdiff+0x28>
 801dcd6:	4631      	mov	r1, r6
 801dcd8:	4638      	mov	r0, r7
 801dcda:	f7ff fdc1 	bl	801d860 <_Balloc>
 801dcde:	2301      	movs	r3, #1
 801dce0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801dce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dce8:	bfa4      	itt	ge
 801dcea:	4623      	movge	r3, r4
 801dcec:	462c      	movge	r4, r5
 801dcee:	4638      	mov	r0, r7
 801dcf0:	6861      	ldr	r1, [r4, #4]
 801dcf2:	bfa6      	itte	ge
 801dcf4:	461d      	movge	r5, r3
 801dcf6:	2600      	movge	r6, #0
 801dcf8:	2601      	movlt	r6, #1
 801dcfa:	f7ff fdb1 	bl	801d860 <_Balloc>
 801dcfe:	692b      	ldr	r3, [r5, #16]
 801dd00:	60c6      	str	r6, [r0, #12]
 801dd02:	6926      	ldr	r6, [r4, #16]
 801dd04:	f105 0914 	add.w	r9, r5, #20
 801dd08:	f104 0214 	add.w	r2, r4, #20
 801dd0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801dd10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801dd14:	f100 0514 	add.w	r5, r0, #20
 801dd18:	f04f 0e00 	mov.w	lr, #0
 801dd1c:	f852 ab04 	ldr.w	sl, [r2], #4
 801dd20:	f859 4b04 	ldr.w	r4, [r9], #4
 801dd24:	fa1e f18a 	uxtah	r1, lr, sl
 801dd28:	b2a3      	uxth	r3, r4
 801dd2a:	1ac9      	subs	r1, r1, r3
 801dd2c:	0c23      	lsrs	r3, r4, #16
 801dd2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801dd32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801dd36:	b289      	uxth	r1, r1
 801dd38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801dd3c:	45c8      	cmp	r8, r9
 801dd3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801dd42:	4694      	mov	ip, r2
 801dd44:	f845 3b04 	str.w	r3, [r5], #4
 801dd48:	d8e8      	bhi.n	801dd1c <__mdiff+0x5c>
 801dd4a:	45bc      	cmp	ip, r7
 801dd4c:	d304      	bcc.n	801dd58 <__mdiff+0x98>
 801dd4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801dd52:	b183      	cbz	r3, 801dd76 <__mdiff+0xb6>
 801dd54:	6106      	str	r6, [r0, #16]
 801dd56:	e7c5      	b.n	801dce4 <__mdiff+0x24>
 801dd58:	f85c 1b04 	ldr.w	r1, [ip], #4
 801dd5c:	fa1e f381 	uxtah	r3, lr, r1
 801dd60:	141a      	asrs	r2, r3, #16
 801dd62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801dd66:	b29b      	uxth	r3, r3
 801dd68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801dd6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801dd70:	f845 3b04 	str.w	r3, [r5], #4
 801dd74:	e7e9      	b.n	801dd4a <__mdiff+0x8a>
 801dd76:	3e01      	subs	r6, #1
 801dd78:	e7e9      	b.n	801dd4e <__mdiff+0x8e>

0801dd7a <__d2b>:
 801dd7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801dd7e:	460e      	mov	r6, r1
 801dd80:	2101      	movs	r1, #1
 801dd82:	ec59 8b10 	vmov	r8, r9, d0
 801dd86:	4615      	mov	r5, r2
 801dd88:	f7ff fd6a 	bl	801d860 <_Balloc>
 801dd8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801dd90:	4607      	mov	r7, r0
 801dd92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801dd96:	bb34      	cbnz	r4, 801dde6 <__d2b+0x6c>
 801dd98:	9301      	str	r3, [sp, #4]
 801dd9a:	f1b8 0300 	subs.w	r3, r8, #0
 801dd9e:	d027      	beq.n	801ddf0 <__d2b+0x76>
 801dda0:	a802      	add	r0, sp, #8
 801dda2:	f840 3d08 	str.w	r3, [r0, #-8]!
 801dda6:	f7ff fe00 	bl	801d9aa <__lo0bits>
 801ddaa:	9900      	ldr	r1, [sp, #0]
 801ddac:	b1f0      	cbz	r0, 801ddec <__d2b+0x72>
 801ddae:	9a01      	ldr	r2, [sp, #4]
 801ddb0:	f1c0 0320 	rsb	r3, r0, #32
 801ddb4:	fa02 f303 	lsl.w	r3, r2, r3
 801ddb8:	430b      	orrs	r3, r1
 801ddba:	40c2      	lsrs	r2, r0
 801ddbc:	617b      	str	r3, [r7, #20]
 801ddbe:	9201      	str	r2, [sp, #4]
 801ddc0:	9b01      	ldr	r3, [sp, #4]
 801ddc2:	61bb      	str	r3, [r7, #24]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	bf14      	ite	ne
 801ddc8:	2102      	movne	r1, #2
 801ddca:	2101      	moveq	r1, #1
 801ddcc:	6139      	str	r1, [r7, #16]
 801ddce:	b1c4      	cbz	r4, 801de02 <__d2b+0x88>
 801ddd0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801ddd4:	4404      	add	r4, r0
 801ddd6:	6034      	str	r4, [r6, #0]
 801ddd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801dddc:	6028      	str	r0, [r5, #0]
 801ddde:	4638      	mov	r0, r7
 801dde0:	b003      	add	sp, #12
 801dde2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dde6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ddea:	e7d5      	b.n	801dd98 <__d2b+0x1e>
 801ddec:	6179      	str	r1, [r7, #20]
 801ddee:	e7e7      	b.n	801ddc0 <__d2b+0x46>
 801ddf0:	a801      	add	r0, sp, #4
 801ddf2:	f7ff fdda 	bl	801d9aa <__lo0bits>
 801ddf6:	9b01      	ldr	r3, [sp, #4]
 801ddf8:	617b      	str	r3, [r7, #20]
 801ddfa:	2101      	movs	r1, #1
 801ddfc:	6139      	str	r1, [r7, #16]
 801ddfe:	3020      	adds	r0, #32
 801de00:	e7e5      	b.n	801ddce <__d2b+0x54>
 801de02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801de06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801de0a:	6030      	str	r0, [r6, #0]
 801de0c:	6918      	ldr	r0, [r3, #16]
 801de0e:	f7ff fdad 	bl	801d96c <__hi0bits>
 801de12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801de16:	e7e1      	b.n	801dddc <__d2b+0x62>

0801de18 <_calloc_r>:
 801de18:	b538      	push	{r3, r4, r5, lr}
 801de1a:	fb02 f401 	mul.w	r4, r2, r1
 801de1e:	4621      	mov	r1, r4
 801de20:	f000 f856 	bl	801ded0 <_malloc_r>
 801de24:	4605      	mov	r5, r0
 801de26:	b118      	cbz	r0, 801de30 <_calloc_r+0x18>
 801de28:	4622      	mov	r2, r4
 801de2a:	2100      	movs	r1, #0
 801de2c:	f7fd fe87 	bl	801bb3e <memset>
 801de30:	4628      	mov	r0, r5
 801de32:	bd38      	pop	{r3, r4, r5, pc}

0801de34 <_free_r>:
 801de34:	b538      	push	{r3, r4, r5, lr}
 801de36:	4605      	mov	r5, r0
 801de38:	2900      	cmp	r1, #0
 801de3a:	d045      	beq.n	801dec8 <_free_r+0x94>
 801de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de40:	1f0c      	subs	r4, r1, #4
 801de42:	2b00      	cmp	r3, #0
 801de44:	bfb8      	it	lt
 801de46:	18e4      	addlt	r4, r4, r3
 801de48:	f000 fa98 	bl	801e37c <__malloc_lock>
 801de4c:	4a1f      	ldr	r2, [pc, #124]	; (801decc <_free_r+0x98>)
 801de4e:	6813      	ldr	r3, [r2, #0]
 801de50:	4610      	mov	r0, r2
 801de52:	b933      	cbnz	r3, 801de62 <_free_r+0x2e>
 801de54:	6063      	str	r3, [r4, #4]
 801de56:	6014      	str	r4, [r2, #0]
 801de58:	4628      	mov	r0, r5
 801de5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801de5e:	f000 ba8e 	b.w	801e37e <__malloc_unlock>
 801de62:	42a3      	cmp	r3, r4
 801de64:	d90c      	bls.n	801de80 <_free_r+0x4c>
 801de66:	6821      	ldr	r1, [r4, #0]
 801de68:	1862      	adds	r2, r4, r1
 801de6a:	4293      	cmp	r3, r2
 801de6c:	bf04      	itt	eq
 801de6e:	681a      	ldreq	r2, [r3, #0]
 801de70:	685b      	ldreq	r3, [r3, #4]
 801de72:	6063      	str	r3, [r4, #4]
 801de74:	bf04      	itt	eq
 801de76:	1852      	addeq	r2, r2, r1
 801de78:	6022      	streq	r2, [r4, #0]
 801de7a:	6004      	str	r4, [r0, #0]
 801de7c:	e7ec      	b.n	801de58 <_free_r+0x24>
 801de7e:	4613      	mov	r3, r2
 801de80:	685a      	ldr	r2, [r3, #4]
 801de82:	b10a      	cbz	r2, 801de88 <_free_r+0x54>
 801de84:	42a2      	cmp	r2, r4
 801de86:	d9fa      	bls.n	801de7e <_free_r+0x4a>
 801de88:	6819      	ldr	r1, [r3, #0]
 801de8a:	1858      	adds	r0, r3, r1
 801de8c:	42a0      	cmp	r0, r4
 801de8e:	d10b      	bne.n	801dea8 <_free_r+0x74>
 801de90:	6820      	ldr	r0, [r4, #0]
 801de92:	4401      	add	r1, r0
 801de94:	1858      	adds	r0, r3, r1
 801de96:	4282      	cmp	r2, r0
 801de98:	6019      	str	r1, [r3, #0]
 801de9a:	d1dd      	bne.n	801de58 <_free_r+0x24>
 801de9c:	6810      	ldr	r0, [r2, #0]
 801de9e:	6852      	ldr	r2, [r2, #4]
 801dea0:	605a      	str	r2, [r3, #4]
 801dea2:	4401      	add	r1, r0
 801dea4:	6019      	str	r1, [r3, #0]
 801dea6:	e7d7      	b.n	801de58 <_free_r+0x24>
 801dea8:	d902      	bls.n	801deb0 <_free_r+0x7c>
 801deaa:	230c      	movs	r3, #12
 801deac:	602b      	str	r3, [r5, #0]
 801deae:	e7d3      	b.n	801de58 <_free_r+0x24>
 801deb0:	6820      	ldr	r0, [r4, #0]
 801deb2:	1821      	adds	r1, r4, r0
 801deb4:	428a      	cmp	r2, r1
 801deb6:	bf04      	itt	eq
 801deb8:	6811      	ldreq	r1, [r2, #0]
 801deba:	6852      	ldreq	r2, [r2, #4]
 801debc:	6062      	str	r2, [r4, #4]
 801debe:	bf04      	itt	eq
 801dec0:	1809      	addeq	r1, r1, r0
 801dec2:	6021      	streq	r1, [r4, #0]
 801dec4:	605c      	str	r4, [r3, #4]
 801dec6:	e7c7      	b.n	801de58 <_free_r+0x24>
 801dec8:	bd38      	pop	{r3, r4, r5, pc}
 801deca:	bf00      	nop
 801decc:	200002a0 	.word	0x200002a0

0801ded0 <_malloc_r>:
 801ded0:	b570      	push	{r4, r5, r6, lr}
 801ded2:	1ccd      	adds	r5, r1, #3
 801ded4:	f025 0503 	bic.w	r5, r5, #3
 801ded8:	3508      	adds	r5, #8
 801deda:	2d0c      	cmp	r5, #12
 801dedc:	bf38      	it	cc
 801dede:	250c      	movcc	r5, #12
 801dee0:	2d00      	cmp	r5, #0
 801dee2:	4606      	mov	r6, r0
 801dee4:	db01      	blt.n	801deea <_malloc_r+0x1a>
 801dee6:	42a9      	cmp	r1, r5
 801dee8:	d903      	bls.n	801def2 <_malloc_r+0x22>
 801deea:	230c      	movs	r3, #12
 801deec:	6033      	str	r3, [r6, #0]
 801deee:	2000      	movs	r0, #0
 801def0:	bd70      	pop	{r4, r5, r6, pc}
 801def2:	f000 fa43 	bl	801e37c <__malloc_lock>
 801def6:	4a21      	ldr	r2, [pc, #132]	; (801df7c <_malloc_r+0xac>)
 801def8:	6814      	ldr	r4, [r2, #0]
 801defa:	4621      	mov	r1, r4
 801defc:	b991      	cbnz	r1, 801df24 <_malloc_r+0x54>
 801defe:	4c20      	ldr	r4, [pc, #128]	; (801df80 <_malloc_r+0xb0>)
 801df00:	6823      	ldr	r3, [r4, #0]
 801df02:	b91b      	cbnz	r3, 801df0c <_malloc_r+0x3c>
 801df04:	4630      	mov	r0, r6
 801df06:	f000 f97d 	bl	801e204 <_sbrk_r>
 801df0a:	6020      	str	r0, [r4, #0]
 801df0c:	4629      	mov	r1, r5
 801df0e:	4630      	mov	r0, r6
 801df10:	f000 f978 	bl	801e204 <_sbrk_r>
 801df14:	1c43      	adds	r3, r0, #1
 801df16:	d124      	bne.n	801df62 <_malloc_r+0x92>
 801df18:	230c      	movs	r3, #12
 801df1a:	6033      	str	r3, [r6, #0]
 801df1c:	4630      	mov	r0, r6
 801df1e:	f000 fa2e 	bl	801e37e <__malloc_unlock>
 801df22:	e7e4      	b.n	801deee <_malloc_r+0x1e>
 801df24:	680b      	ldr	r3, [r1, #0]
 801df26:	1b5b      	subs	r3, r3, r5
 801df28:	d418      	bmi.n	801df5c <_malloc_r+0x8c>
 801df2a:	2b0b      	cmp	r3, #11
 801df2c:	d90f      	bls.n	801df4e <_malloc_r+0x7e>
 801df2e:	600b      	str	r3, [r1, #0]
 801df30:	50cd      	str	r5, [r1, r3]
 801df32:	18cc      	adds	r4, r1, r3
 801df34:	4630      	mov	r0, r6
 801df36:	f000 fa22 	bl	801e37e <__malloc_unlock>
 801df3a:	f104 000b 	add.w	r0, r4, #11
 801df3e:	1d23      	adds	r3, r4, #4
 801df40:	f020 0007 	bic.w	r0, r0, #7
 801df44:	1ac3      	subs	r3, r0, r3
 801df46:	d0d3      	beq.n	801def0 <_malloc_r+0x20>
 801df48:	425a      	negs	r2, r3
 801df4a:	50e2      	str	r2, [r4, r3]
 801df4c:	e7d0      	b.n	801def0 <_malloc_r+0x20>
 801df4e:	428c      	cmp	r4, r1
 801df50:	684b      	ldr	r3, [r1, #4]
 801df52:	bf16      	itet	ne
 801df54:	6063      	strne	r3, [r4, #4]
 801df56:	6013      	streq	r3, [r2, #0]
 801df58:	460c      	movne	r4, r1
 801df5a:	e7eb      	b.n	801df34 <_malloc_r+0x64>
 801df5c:	460c      	mov	r4, r1
 801df5e:	6849      	ldr	r1, [r1, #4]
 801df60:	e7cc      	b.n	801defc <_malloc_r+0x2c>
 801df62:	1cc4      	adds	r4, r0, #3
 801df64:	f024 0403 	bic.w	r4, r4, #3
 801df68:	42a0      	cmp	r0, r4
 801df6a:	d005      	beq.n	801df78 <_malloc_r+0xa8>
 801df6c:	1a21      	subs	r1, r4, r0
 801df6e:	4630      	mov	r0, r6
 801df70:	f000 f948 	bl	801e204 <_sbrk_r>
 801df74:	3001      	adds	r0, #1
 801df76:	d0cf      	beq.n	801df18 <_malloc_r+0x48>
 801df78:	6025      	str	r5, [r4, #0]
 801df7a:	e7db      	b.n	801df34 <_malloc_r+0x64>
 801df7c:	200002a0 	.word	0x200002a0
 801df80:	200002a4 	.word	0x200002a4

0801df84 <__sfputc_r>:
 801df84:	6893      	ldr	r3, [r2, #8]
 801df86:	3b01      	subs	r3, #1
 801df88:	2b00      	cmp	r3, #0
 801df8a:	b410      	push	{r4}
 801df8c:	6093      	str	r3, [r2, #8]
 801df8e:	da08      	bge.n	801dfa2 <__sfputc_r+0x1e>
 801df90:	6994      	ldr	r4, [r2, #24]
 801df92:	42a3      	cmp	r3, r4
 801df94:	db01      	blt.n	801df9a <__sfputc_r+0x16>
 801df96:	290a      	cmp	r1, #10
 801df98:	d103      	bne.n	801dfa2 <__sfputc_r+0x1e>
 801df9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801df9e:	f7fe bb65 	b.w	801c66c <__swbuf_r>
 801dfa2:	6813      	ldr	r3, [r2, #0]
 801dfa4:	1c58      	adds	r0, r3, #1
 801dfa6:	6010      	str	r0, [r2, #0]
 801dfa8:	7019      	strb	r1, [r3, #0]
 801dfaa:	4608      	mov	r0, r1
 801dfac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dfb0:	4770      	bx	lr

0801dfb2 <__sfputs_r>:
 801dfb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb4:	4606      	mov	r6, r0
 801dfb6:	460f      	mov	r7, r1
 801dfb8:	4614      	mov	r4, r2
 801dfba:	18d5      	adds	r5, r2, r3
 801dfbc:	42ac      	cmp	r4, r5
 801dfbe:	d101      	bne.n	801dfc4 <__sfputs_r+0x12>
 801dfc0:	2000      	movs	r0, #0
 801dfc2:	e007      	b.n	801dfd4 <__sfputs_r+0x22>
 801dfc4:	463a      	mov	r2, r7
 801dfc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfca:	4630      	mov	r0, r6
 801dfcc:	f7ff ffda 	bl	801df84 <__sfputc_r>
 801dfd0:	1c43      	adds	r3, r0, #1
 801dfd2:	d1f3      	bne.n	801dfbc <__sfputs_r+0xa>
 801dfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dfd8 <_vfiprintf_r>:
 801dfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfdc:	460c      	mov	r4, r1
 801dfde:	b09d      	sub	sp, #116	; 0x74
 801dfe0:	4617      	mov	r7, r2
 801dfe2:	461d      	mov	r5, r3
 801dfe4:	4606      	mov	r6, r0
 801dfe6:	b118      	cbz	r0, 801dff0 <_vfiprintf_r+0x18>
 801dfe8:	6983      	ldr	r3, [r0, #24]
 801dfea:	b90b      	cbnz	r3, 801dff0 <_vfiprintf_r+0x18>
 801dfec:	f7ff fb34 	bl	801d658 <__sinit>
 801dff0:	4b7c      	ldr	r3, [pc, #496]	; (801e1e4 <_vfiprintf_r+0x20c>)
 801dff2:	429c      	cmp	r4, r3
 801dff4:	d158      	bne.n	801e0a8 <_vfiprintf_r+0xd0>
 801dff6:	6874      	ldr	r4, [r6, #4]
 801dff8:	89a3      	ldrh	r3, [r4, #12]
 801dffa:	0718      	lsls	r0, r3, #28
 801dffc:	d55e      	bpl.n	801e0bc <_vfiprintf_r+0xe4>
 801dffe:	6923      	ldr	r3, [r4, #16]
 801e000:	2b00      	cmp	r3, #0
 801e002:	d05b      	beq.n	801e0bc <_vfiprintf_r+0xe4>
 801e004:	2300      	movs	r3, #0
 801e006:	9309      	str	r3, [sp, #36]	; 0x24
 801e008:	2320      	movs	r3, #32
 801e00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e00e:	2330      	movs	r3, #48	; 0x30
 801e010:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e014:	9503      	str	r5, [sp, #12]
 801e016:	f04f 0b01 	mov.w	fp, #1
 801e01a:	46b8      	mov	r8, r7
 801e01c:	4645      	mov	r5, r8
 801e01e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e022:	b10b      	cbz	r3, 801e028 <_vfiprintf_r+0x50>
 801e024:	2b25      	cmp	r3, #37	; 0x25
 801e026:	d154      	bne.n	801e0d2 <_vfiprintf_r+0xfa>
 801e028:	ebb8 0a07 	subs.w	sl, r8, r7
 801e02c:	d00b      	beq.n	801e046 <_vfiprintf_r+0x6e>
 801e02e:	4653      	mov	r3, sl
 801e030:	463a      	mov	r2, r7
 801e032:	4621      	mov	r1, r4
 801e034:	4630      	mov	r0, r6
 801e036:	f7ff ffbc 	bl	801dfb2 <__sfputs_r>
 801e03a:	3001      	adds	r0, #1
 801e03c:	f000 80c2 	beq.w	801e1c4 <_vfiprintf_r+0x1ec>
 801e040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e042:	4453      	add	r3, sl
 801e044:	9309      	str	r3, [sp, #36]	; 0x24
 801e046:	f898 3000 	ldrb.w	r3, [r8]
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	f000 80ba 	beq.w	801e1c4 <_vfiprintf_r+0x1ec>
 801e050:	2300      	movs	r3, #0
 801e052:	f04f 32ff 	mov.w	r2, #4294967295
 801e056:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e05a:	9304      	str	r3, [sp, #16]
 801e05c:	9307      	str	r3, [sp, #28]
 801e05e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e062:	931a      	str	r3, [sp, #104]	; 0x68
 801e064:	46a8      	mov	r8, r5
 801e066:	2205      	movs	r2, #5
 801e068:	f818 1b01 	ldrb.w	r1, [r8], #1
 801e06c:	485e      	ldr	r0, [pc, #376]	; (801e1e8 <_vfiprintf_r+0x210>)
 801e06e:	f7e2 f8d7 	bl	8000220 <memchr>
 801e072:	9b04      	ldr	r3, [sp, #16]
 801e074:	bb78      	cbnz	r0, 801e0d6 <_vfiprintf_r+0xfe>
 801e076:	06d9      	lsls	r1, r3, #27
 801e078:	bf44      	itt	mi
 801e07a:	2220      	movmi	r2, #32
 801e07c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e080:	071a      	lsls	r2, r3, #28
 801e082:	bf44      	itt	mi
 801e084:	222b      	movmi	r2, #43	; 0x2b
 801e086:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801e08a:	782a      	ldrb	r2, [r5, #0]
 801e08c:	2a2a      	cmp	r2, #42	; 0x2a
 801e08e:	d02a      	beq.n	801e0e6 <_vfiprintf_r+0x10e>
 801e090:	9a07      	ldr	r2, [sp, #28]
 801e092:	46a8      	mov	r8, r5
 801e094:	2000      	movs	r0, #0
 801e096:	250a      	movs	r5, #10
 801e098:	4641      	mov	r1, r8
 801e09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e09e:	3b30      	subs	r3, #48	; 0x30
 801e0a0:	2b09      	cmp	r3, #9
 801e0a2:	d969      	bls.n	801e178 <_vfiprintf_r+0x1a0>
 801e0a4:	b360      	cbz	r0, 801e100 <_vfiprintf_r+0x128>
 801e0a6:	e024      	b.n	801e0f2 <_vfiprintf_r+0x11a>
 801e0a8:	4b50      	ldr	r3, [pc, #320]	; (801e1ec <_vfiprintf_r+0x214>)
 801e0aa:	429c      	cmp	r4, r3
 801e0ac:	d101      	bne.n	801e0b2 <_vfiprintf_r+0xda>
 801e0ae:	68b4      	ldr	r4, [r6, #8]
 801e0b0:	e7a2      	b.n	801dff8 <_vfiprintf_r+0x20>
 801e0b2:	4b4f      	ldr	r3, [pc, #316]	; (801e1f0 <_vfiprintf_r+0x218>)
 801e0b4:	429c      	cmp	r4, r3
 801e0b6:	bf08      	it	eq
 801e0b8:	68f4      	ldreq	r4, [r6, #12]
 801e0ba:	e79d      	b.n	801dff8 <_vfiprintf_r+0x20>
 801e0bc:	4621      	mov	r1, r4
 801e0be:	4630      	mov	r0, r6
 801e0c0:	f7fe fb26 	bl	801c710 <__swsetup_r>
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	d09d      	beq.n	801e004 <_vfiprintf_r+0x2c>
 801e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 801e0cc:	b01d      	add	sp, #116	; 0x74
 801e0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e0d2:	46a8      	mov	r8, r5
 801e0d4:	e7a2      	b.n	801e01c <_vfiprintf_r+0x44>
 801e0d6:	4a44      	ldr	r2, [pc, #272]	; (801e1e8 <_vfiprintf_r+0x210>)
 801e0d8:	1a80      	subs	r0, r0, r2
 801e0da:	fa0b f000 	lsl.w	r0, fp, r0
 801e0de:	4318      	orrs	r0, r3
 801e0e0:	9004      	str	r0, [sp, #16]
 801e0e2:	4645      	mov	r5, r8
 801e0e4:	e7be      	b.n	801e064 <_vfiprintf_r+0x8c>
 801e0e6:	9a03      	ldr	r2, [sp, #12]
 801e0e8:	1d11      	adds	r1, r2, #4
 801e0ea:	6812      	ldr	r2, [r2, #0]
 801e0ec:	9103      	str	r1, [sp, #12]
 801e0ee:	2a00      	cmp	r2, #0
 801e0f0:	db01      	blt.n	801e0f6 <_vfiprintf_r+0x11e>
 801e0f2:	9207      	str	r2, [sp, #28]
 801e0f4:	e004      	b.n	801e100 <_vfiprintf_r+0x128>
 801e0f6:	4252      	negs	r2, r2
 801e0f8:	f043 0302 	orr.w	r3, r3, #2
 801e0fc:	9207      	str	r2, [sp, #28]
 801e0fe:	9304      	str	r3, [sp, #16]
 801e100:	f898 3000 	ldrb.w	r3, [r8]
 801e104:	2b2e      	cmp	r3, #46	; 0x2e
 801e106:	d10e      	bne.n	801e126 <_vfiprintf_r+0x14e>
 801e108:	f898 3001 	ldrb.w	r3, [r8, #1]
 801e10c:	2b2a      	cmp	r3, #42	; 0x2a
 801e10e:	d138      	bne.n	801e182 <_vfiprintf_r+0x1aa>
 801e110:	9b03      	ldr	r3, [sp, #12]
 801e112:	1d1a      	adds	r2, r3, #4
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	9203      	str	r2, [sp, #12]
 801e118:	2b00      	cmp	r3, #0
 801e11a:	bfb8      	it	lt
 801e11c:	f04f 33ff 	movlt.w	r3, #4294967295
 801e120:	f108 0802 	add.w	r8, r8, #2
 801e124:	9305      	str	r3, [sp, #20]
 801e126:	4d33      	ldr	r5, [pc, #204]	; (801e1f4 <_vfiprintf_r+0x21c>)
 801e128:	f898 1000 	ldrb.w	r1, [r8]
 801e12c:	2203      	movs	r2, #3
 801e12e:	4628      	mov	r0, r5
 801e130:	f7e2 f876 	bl	8000220 <memchr>
 801e134:	b140      	cbz	r0, 801e148 <_vfiprintf_r+0x170>
 801e136:	2340      	movs	r3, #64	; 0x40
 801e138:	1b40      	subs	r0, r0, r5
 801e13a:	fa03 f000 	lsl.w	r0, r3, r0
 801e13e:	9b04      	ldr	r3, [sp, #16]
 801e140:	4303      	orrs	r3, r0
 801e142:	f108 0801 	add.w	r8, r8, #1
 801e146:	9304      	str	r3, [sp, #16]
 801e148:	f898 1000 	ldrb.w	r1, [r8]
 801e14c:	482a      	ldr	r0, [pc, #168]	; (801e1f8 <_vfiprintf_r+0x220>)
 801e14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e152:	2206      	movs	r2, #6
 801e154:	f108 0701 	add.w	r7, r8, #1
 801e158:	f7e2 f862 	bl	8000220 <memchr>
 801e15c:	2800      	cmp	r0, #0
 801e15e:	d037      	beq.n	801e1d0 <_vfiprintf_r+0x1f8>
 801e160:	4b26      	ldr	r3, [pc, #152]	; (801e1fc <_vfiprintf_r+0x224>)
 801e162:	bb1b      	cbnz	r3, 801e1ac <_vfiprintf_r+0x1d4>
 801e164:	9b03      	ldr	r3, [sp, #12]
 801e166:	3307      	adds	r3, #7
 801e168:	f023 0307 	bic.w	r3, r3, #7
 801e16c:	3308      	adds	r3, #8
 801e16e:	9303      	str	r3, [sp, #12]
 801e170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e172:	444b      	add	r3, r9
 801e174:	9309      	str	r3, [sp, #36]	; 0x24
 801e176:	e750      	b.n	801e01a <_vfiprintf_r+0x42>
 801e178:	fb05 3202 	mla	r2, r5, r2, r3
 801e17c:	2001      	movs	r0, #1
 801e17e:	4688      	mov	r8, r1
 801e180:	e78a      	b.n	801e098 <_vfiprintf_r+0xc0>
 801e182:	2300      	movs	r3, #0
 801e184:	f108 0801 	add.w	r8, r8, #1
 801e188:	9305      	str	r3, [sp, #20]
 801e18a:	4619      	mov	r1, r3
 801e18c:	250a      	movs	r5, #10
 801e18e:	4640      	mov	r0, r8
 801e190:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e194:	3a30      	subs	r2, #48	; 0x30
 801e196:	2a09      	cmp	r2, #9
 801e198:	d903      	bls.n	801e1a2 <_vfiprintf_r+0x1ca>
 801e19a:	2b00      	cmp	r3, #0
 801e19c:	d0c3      	beq.n	801e126 <_vfiprintf_r+0x14e>
 801e19e:	9105      	str	r1, [sp, #20]
 801e1a0:	e7c1      	b.n	801e126 <_vfiprintf_r+0x14e>
 801e1a2:	fb05 2101 	mla	r1, r5, r1, r2
 801e1a6:	2301      	movs	r3, #1
 801e1a8:	4680      	mov	r8, r0
 801e1aa:	e7f0      	b.n	801e18e <_vfiprintf_r+0x1b6>
 801e1ac:	ab03      	add	r3, sp, #12
 801e1ae:	9300      	str	r3, [sp, #0]
 801e1b0:	4622      	mov	r2, r4
 801e1b2:	4b13      	ldr	r3, [pc, #76]	; (801e200 <_vfiprintf_r+0x228>)
 801e1b4:	a904      	add	r1, sp, #16
 801e1b6:	4630      	mov	r0, r6
 801e1b8:	f7fd fd5e 	bl	801bc78 <_printf_float>
 801e1bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 801e1c0:	4681      	mov	r9, r0
 801e1c2:	d1d5      	bne.n	801e170 <_vfiprintf_r+0x198>
 801e1c4:	89a3      	ldrh	r3, [r4, #12]
 801e1c6:	065b      	lsls	r3, r3, #25
 801e1c8:	f53f af7e 	bmi.w	801e0c8 <_vfiprintf_r+0xf0>
 801e1cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e1ce:	e77d      	b.n	801e0cc <_vfiprintf_r+0xf4>
 801e1d0:	ab03      	add	r3, sp, #12
 801e1d2:	9300      	str	r3, [sp, #0]
 801e1d4:	4622      	mov	r2, r4
 801e1d6:	4b0a      	ldr	r3, [pc, #40]	; (801e200 <_vfiprintf_r+0x228>)
 801e1d8:	a904      	add	r1, sp, #16
 801e1da:	4630      	mov	r0, r6
 801e1dc:	f7fe f802 	bl	801c1e4 <_printf_i>
 801e1e0:	e7ec      	b.n	801e1bc <_vfiprintf_r+0x1e4>
 801e1e2:	bf00      	nop
 801e1e4:	08020710 	.word	0x08020710
 801e1e8:	0802084c 	.word	0x0802084c
 801e1ec:	08020730 	.word	0x08020730
 801e1f0:	080206f0 	.word	0x080206f0
 801e1f4:	08020852 	.word	0x08020852
 801e1f8:	08020856 	.word	0x08020856
 801e1fc:	0801bc79 	.word	0x0801bc79
 801e200:	0801dfb3 	.word	0x0801dfb3

0801e204 <_sbrk_r>:
 801e204:	b538      	push	{r3, r4, r5, lr}
 801e206:	4c06      	ldr	r4, [pc, #24]	; (801e220 <_sbrk_r+0x1c>)
 801e208:	2300      	movs	r3, #0
 801e20a:	4605      	mov	r5, r0
 801e20c:	4608      	mov	r0, r1
 801e20e:	6023      	str	r3, [r4, #0]
 801e210:	f7f8 f9e6 	bl	80165e0 <_sbrk>
 801e214:	1c43      	adds	r3, r0, #1
 801e216:	d102      	bne.n	801e21e <_sbrk_r+0x1a>
 801e218:	6823      	ldr	r3, [r4, #0]
 801e21a:	b103      	cbz	r3, 801e21e <_sbrk_r+0x1a>
 801e21c:	602b      	str	r3, [r5, #0]
 801e21e:	bd38      	pop	{r3, r4, r5, pc}
 801e220:	2001bc24 	.word	0x2001bc24

0801e224 <__sread>:
 801e224:	b510      	push	{r4, lr}
 801e226:	460c      	mov	r4, r1
 801e228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e22c:	f000 f8a8 	bl	801e380 <_read_r>
 801e230:	2800      	cmp	r0, #0
 801e232:	bfab      	itete	ge
 801e234:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e236:	89a3      	ldrhlt	r3, [r4, #12]
 801e238:	181b      	addge	r3, r3, r0
 801e23a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e23e:	bfac      	ite	ge
 801e240:	6563      	strge	r3, [r4, #84]	; 0x54
 801e242:	81a3      	strhlt	r3, [r4, #12]
 801e244:	bd10      	pop	{r4, pc}

0801e246 <__swrite>:
 801e246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e24a:	461f      	mov	r7, r3
 801e24c:	898b      	ldrh	r3, [r1, #12]
 801e24e:	05db      	lsls	r3, r3, #23
 801e250:	4605      	mov	r5, r0
 801e252:	460c      	mov	r4, r1
 801e254:	4616      	mov	r6, r2
 801e256:	d505      	bpl.n	801e264 <__swrite+0x1e>
 801e258:	2302      	movs	r3, #2
 801e25a:	2200      	movs	r2, #0
 801e25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e260:	f000 f868 	bl	801e334 <_lseek_r>
 801e264:	89a3      	ldrh	r3, [r4, #12]
 801e266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e26a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e26e:	81a3      	strh	r3, [r4, #12]
 801e270:	4632      	mov	r2, r6
 801e272:	463b      	mov	r3, r7
 801e274:	4628      	mov	r0, r5
 801e276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e27a:	f000 b817 	b.w	801e2ac <_write_r>

0801e27e <__sseek>:
 801e27e:	b510      	push	{r4, lr}
 801e280:	460c      	mov	r4, r1
 801e282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e286:	f000 f855 	bl	801e334 <_lseek_r>
 801e28a:	1c43      	adds	r3, r0, #1
 801e28c:	89a3      	ldrh	r3, [r4, #12]
 801e28e:	bf15      	itete	ne
 801e290:	6560      	strne	r0, [r4, #84]	; 0x54
 801e292:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e296:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e29a:	81a3      	strheq	r3, [r4, #12]
 801e29c:	bf18      	it	ne
 801e29e:	81a3      	strhne	r3, [r4, #12]
 801e2a0:	bd10      	pop	{r4, pc}

0801e2a2 <__sclose>:
 801e2a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e2a6:	f000 b813 	b.w	801e2d0 <_close_r>
	...

0801e2ac <_write_r>:
 801e2ac:	b538      	push	{r3, r4, r5, lr}
 801e2ae:	4c07      	ldr	r4, [pc, #28]	; (801e2cc <_write_r+0x20>)
 801e2b0:	4605      	mov	r5, r0
 801e2b2:	4608      	mov	r0, r1
 801e2b4:	4611      	mov	r1, r2
 801e2b6:	2200      	movs	r2, #0
 801e2b8:	6022      	str	r2, [r4, #0]
 801e2ba:	461a      	mov	r2, r3
 801e2bc:	f7f7 ffac 	bl	8016218 <_write>
 801e2c0:	1c43      	adds	r3, r0, #1
 801e2c2:	d102      	bne.n	801e2ca <_write_r+0x1e>
 801e2c4:	6823      	ldr	r3, [r4, #0]
 801e2c6:	b103      	cbz	r3, 801e2ca <_write_r+0x1e>
 801e2c8:	602b      	str	r3, [r5, #0]
 801e2ca:	bd38      	pop	{r3, r4, r5, pc}
 801e2cc:	2001bc24 	.word	0x2001bc24

0801e2d0 <_close_r>:
 801e2d0:	b538      	push	{r3, r4, r5, lr}
 801e2d2:	4c06      	ldr	r4, [pc, #24]	; (801e2ec <_close_r+0x1c>)
 801e2d4:	2300      	movs	r3, #0
 801e2d6:	4605      	mov	r5, r0
 801e2d8:	4608      	mov	r0, r1
 801e2da:	6023      	str	r3, [r4, #0]
 801e2dc:	f7f8 f94b 	bl	8016576 <_close>
 801e2e0:	1c43      	adds	r3, r0, #1
 801e2e2:	d102      	bne.n	801e2ea <_close_r+0x1a>
 801e2e4:	6823      	ldr	r3, [r4, #0]
 801e2e6:	b103      	cbz	r3, 801e2ea <_close_r+0x1a>
 801e2e8:	602b      	str	r3, [r5, #0]
 801e2ea:	bd38      	pop	{r3, r4, r5, pc}
 801e2ec:	2001bc24 	.word	0x2001bc24

0801e2f0 <_fstat_r>:
 801e2f0:	b538      	push	{r3, r4, r5, lr}
 801e2f2:	4c07      	ldr	r4, [pc, #28]	; (801e310 <_fstat_r+0x20>)
 801e2f4:	2300      	movs	r3, #0
 801e2f6:	4605      	mov	r5, r0
 801e2f8:	4608      	mov	r0, r1
 801e2fa:	4611      	mov	r1, r2
 801e2fc:	6023      	str	r3, [r4, #0]
 801e2fe:	f7f8 f946 	bl	801658e <_fstat>
 801e302:	1c43      	adds	r3, r0, #1
 801e304:	d102      	bne.n	801e30c <_fstat_r+0x1c>
 801e306:	6823      	ldr	r3, [r4, #0]
 801e308:	b103      	cbz	r3, 801e30c <_fstat_r+0x1c>
 801e30a:	602b      	str	r3, [r5, #0]
 801e30c:	bd38      	pop	{r3, r4, r5, pc}
 801e30e:	bf00      	nop
 801e310:	2001bc24 	.word	0x2001bc24

0801e314 <_isatty_r>:
 801e314:	b538      	push	{r3, r4, r5, lr}
 801e316:	4c06      	ldr	r4, [pc, #24]	; (801e330 <_isatty_r+0x1c>)
 801e318:	2300      	movs	r3, #0
 801e31a:	4605      	mov	r5, r0
 801e31c:	4608      	mov	r0, r1
 801e31e:	6023      	str	r3, [r4, #0]
 801e320:	f7f8 f945 	bl	80165ae <_isatty>
 801e324:	1c43      	adds	r3, r0, #1
 801e326:	d102      	bne.n	801e32e <_isatty_r+0x1a>
 801e328:	6823      	ldr	r3, [r4, #0]
 801e32a:	b103      	cbz	r3, 801e32e <_isatty_r+0x1a>
 801e32c:	602b      	str	r3, [r5, #0]
 801e32e:	bd38      	pop	{r3, r4, r5, pc}
 801e330:	2001bc24 	.word	0x2001bc24

0801e334 <_lseek_r>:
 801e334:	b538      	push	{r3, r4, r5, lr}
 801e336:	4c07      	ldr	r4, [pc, #28]	; (801e354 <_lseek_r+0x20>)
 801e338:	4605      	mov	r5, r0
 801e33a:	4608      	mov	r0, r1
 801e33c:	4611      	mov	r1, r2
 801e33e:	2200      	movs	r2, #0
 801e340:	6022      	str	r2, [r4, #0]
 801e342:	461a      	mov	r2, r3
 801e344:	f7f8 f93e 	bl	80165c4 <_lseek>
 801e348:	1c43      	adds	r3, r0, #1
 801e34a:	d102      	bne.n	801e352 <_lseek_r+0x1e>
 801e34c:	6823      	ldr	r3, [r4, #0]
 801e34e:	b103      	cbz	r3, 801e352 <_lseek_r+0x1e>
 801e350:	602b      	str	r3, [r5, #0]
 801e352:	bd38      	pop	{r3, r4, r5, pc}
 801e354:	2001bc24 	.word	0x2001bc24

0801e358 <__ascii_mbtowc>:
 801e358:	b082      	sub	sp, #8
 801e35a:	b901      	cbnz	r1, 801e35e <__ascii_mbtowc+0x6>
 801e35c:	a901      	add	r1, sp, #4
 801e35e:	b142      	cbz	r2, 801e372 <__ascii_mbtowc+0x1a>
 801e360:	b14b      	cbz	r3, 801e376 <__ascii_mbtowc+0x1e>
 801e362:	7813      	ldrb	r3, [r2, #0]
 801e364:	600b      	str	r3, [r1, #0]
 801e366:	7812      	ldrb	r2, [r2, #0]
 801e368:	1c10      	adds	r0, r2, #0
 801e36a:	bf18      	it	ne
 801e36c:	2001      	movne	r0, #1
 801e36e:	b002      	add	sp, #8
 801e370:	4770      	bx	lr
 801e372:	4610      	mov	r0, r2
 801e374:	e7fb      	b.n	801e36e <__ascii_mbtowc+0x16>
 801e376:	f06f 0001 	mvn.w	r0, #1
 801e37a:	e7f8      	b.n	801e36e <__ascii_mbtowc+0x16>

0801e37c <__malloc_lock>:
 801e37c:	4770      	bx	lr

0801e37e <__malloc_unlock>:
 801e37e:	4770      	bx	lr

0801e380 <_read_r>:
 801e380:	b538      	push	{r3, r4, r5, lr}
 801e382:	4c07      	ldr	r4, [pc, #28]	; (801e3a0 <_read_r+0x20>)
 801e384:	4605      	mov	r5, r0
 801e386:	4608      	mov	r0, r1
 801e388:	4611      	mov	r1, r2
 801e38a:	2200      	movs	r2, #0
 801e38c:	6022      	str	r2, [r4, #0]
 801e38e:	461a      	mov	r2, r3
 801e390:	f7f8 f8d4 	bl	801653c <_read>
 801e394:	1c43      	adds	r3, r0, #1
 801e396:	d102      	bne.n	801e39e <_read_r+0x1e>
 801e398:	6823      	ldr	r3, [r4, #0]
 801e39a:	b103      	cbz	r3, 801e39e <_read_r+0x1e>
 801e39c:	602b      	str	r3, [r5, #0]
 801e39e:	bd38      	pop	{r3, r4, r5, pc}
 801e3a0:	2001bc24 	.word	0x2001bc24

0801e3a4 <__ascii_wctomb>:
 801e3a4:	b149      	cbz	r1, 801e3ba <__ascii_wctomb+0x16>
 801e3a6:	2aff      	cmp	r2, #255	; 0xff
 801e3a8:	bf85      	ittet	hi
 801e3aa:	238a      	movhi	r3, #138	; 0x8a
 801e3ac:	6003      	strhi	r3, [r0, #0]
 801e3ae:	700a      	strbls	r2, [r1, #0]
 801e3b0:	f04f 30ff 	movhi.w	r0, #4294967295
 801e3b4:	bf98      	it	ls
 801e3b6:	2001      	movls	r0, #1
 801e3b8:	4770      	bx	lr
 801e3ba:	4608      	mov	r0, r1
 801e3bc:	4770      	bx	lr
	...

0801e3c0 <_init>:
 801e3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3c2:	bf00      	nop
 801e3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e3c6:	bc08      	pop	{r3}
 801e3c8:	469e      	mov	lr, r3
 801e3ca:	4770      	bx	lr

0801e3cc <_fini>:
 801e3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e3ce:	bf00      	nop
 801e3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e3d2:	bc08      	pop	{r3}
 801e3d4:	469e      	mov	lr, r3
 801e3d6:	4770      	bx	lr
